/*
 * File: app/controller/TaxonomieController.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.TaxonomieController', {
    extend: 'Ext.app.Controller',

    models: [
        'termeTaxonomieModel'
    ],
    views: [
        'TermesTaxonomieTree',
        'nouveauTaxoFenetre'
    ],

    majTaxo: function(tablepanel, record, item, index, e, options) {
        var filArianne = tablepanel.findParentByType('window').getDockedComponent('filArianne');
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.titre);}
        else { typeFil= Ext.widget('button',{iconCls: "folder", text:record.data.titre, itemId:'type'});
        filArianne.add(typeFil);
    }



    Ext.getCmp('champEditionTaxoTitre').setValue(record.data.titre);
    Ext.getCmp('champEditionTaxoDescription').setValue(record.data.description);
    Ext.getCmp('champEditionTaxoHelpText').setValue(record.data.helpText);
    Ext.getCmp('champEditionTaxoEtiquettes').setValue(record.data.etiquettes);
    Ext.getCmp('champEditionTaxoChoixMultiple').setValue(record.data.choixMultiple);
    Ext.getCmp('champEditionTaxoObligatoire').setValue(record.data.obligatoire);
    if (Ext.isDefined(Ext.getCmp('TermesTaxonomieTree'))){
    Ext.getCmp('TermesTaxonomieTree').destroy();}
    var data =  record.data.termes;
    var store = Ext.create('Ext.data.TreeStore', {
        model: 'KECMours.model.termeTaxonomieModel',
        root: Ext.clone(data),
        proxy: {
            type: 'memory'
        }
    });
    var arbre = Ext.widget('TermesTaxonomieTree', {store: store, flex:1});

    Ext.getCmp('conteneurAdminfTaxo').add(arbre);
    arbre.getStore().getRootNode().expand(true);
    },

    supprimeTerme: function(button, e, options) {
        var cible = Ext.getCmp('TermesTaxonomieTree').getSelectionModel().getLastSelected();
        if (Ext.isDefined(cible)) {
            cible.remove();
        }
    },

    ajouterTerme: function(button, e, options) {
        if (Ext.getCmp('AdminfTaxonomieGrid').getSelectionModel().getLastSelected() !== null) {

            var champT = Ext.getCmp('nouveauTermeTaxoField');
            if (champT.isValid()) {
                var cibleI = Ext.getCmp('TermesTaxonomieTree').getSelectionModel().getLastSelected();
                if (cibleI !== null) {
                    cibleI.appendChild({text: champT.getValue()});
                    cibleI.expand();
                    Ext.getCmp('nouveauTermeTaxoField').setValue();
                } 



            }
        }
    },

    enregistrerTaxo: function(button, e, options) {
        if (Ext.getCmp('AdminfTaxonomieGrid').getSelectionModel().getLastSelected() !== null) {
            var cibleR=Ext.getCmp('AdminfTaxonomieGrid').getSelectionModel().getLastSelected();
            cibleR.beginEdit();
            if (Ext.getCmp('champEditionTaxoTitre').isValid()){cibleR.set("titre",Ext.getCmp('champEditionTaxoTitre').getValue()); }
            if (Ext.getCmp('champEditionTaxoDescription').isValid()){cibleR.set("description",Ext.getCmp('champEditionTaxoDescription').getValue()); }
            if (Ext.getCmp('champEditionTaxoHelpText').isValid()){cibleR.set("helpText",Ext.getCmp('champEditionTaxoHelpText').getValue()); }
            if (Ext.getCmp('champEditionTaxoEtiquettes').isValid()){cibleR.set("etiquettes",Ext.getCmp('champEditionTaxoEtiquettes').getValue()); }
            if (Ext.getCmp('champEditionTaxoChoixMultiple').isValid()){cibleR.set("choixMultiple",Ext.getCmp('champEditionTaxoChoixMultiple').getValue()); }
            if (Ext.getCmp('champEditionTaxoObligatoire').isValid()){cibleR.set("obligatoire",Ext.getCmp('champEditionTaxoObligatoire').getValue()); }
            var racineR = Ext.getCmp('TermesTaxonomieTree').getStore().getRootNode();
            var nouvRacine = {text: racineR.data.text, children: this.recupereFils(racineR.childNodes)};  
            cibleR.set("termes",Ext.clone(nouvRacine));
            cibleR.endEdit();
        }
    },

    supprimerVocabulaire: function(button, e, options) {
        var cible = Ext.getCmp('AdminfTaxonomieGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('delConfirmZ');
            fenetre.showAt(screen.width/2-100, 100);
            Ext.getCmp('delConfirmZOui').on('click', function() { 
                Ext.getCmp('AdminfTaxonomieGrid').getStore().remove(cible);
                Ext.getCmp('delConfirmZ').close();
            });  

        }
    },

    creeVocabulaire: function(button, e, options) {
        if (Ext.getCmp('champCreerTaxo').isValid()) {
            var nouveauVocab = Ext.create('model.taxonomieDataModel', {
                titre: Ext.getCmp('champCreerTaxo').getValue(),
                etiquettes: false,
                choixMultiple: true,
                obligatoire: false,
                termes:	{
                    children:[
                    ]
                }


            });
            Ext.getCmp('AdminfTaxonomieGrid').getStore().add(nouveauVocab);
            Ext.getCmp('AdminfTaxonomieGrid').getSelectionModel().select(nouveauVocab);
            this.majTaxo(Ext.getCmp('AdminfTaxonomieGrid'),nouveauVocab);
            Ext.getCmp('nouveauTaxoFenetre').close();
        }    
    },

    creerFenetreVocabulaire: function(button, e, options) {
        var fenetre = Ext.widget('nouveauTaxoFenetre');
        fenetre.showAt(screen.width/2-150, 100);

    },

    onButtonClick: function(button, e, options) {
        if (Ext.getCmp('AdminfTaxonomieGrid').getSelectionModel().getLastSelected() !== null) {

            var champT = Ext.getCmp('nouveauTermeTaxoField');
            if (champT.isValid()) {
                var cibleI = Ext.getCmp('TermesTaxonomieTree').getSelectionModel().getLastSelected();
                if (cibleI !== null) {
                    cibleI.data.text= champT.getValue();
                    Ext.getCmp('nouveauTermeTaxoField').setValue();
                    Ext.getCmp('TermesTaxonomieTree').getView().refresh();
                } 
            }
        }
    },

    recupereFils: function(cible) {
        var fils = [ ];
        if (cible.length>0) {
            var f=0;
            for (f=0; f<cible.length; f++) {
                fils.push({text: cible[f].data.text, children: this.recupereFils(cible[f].childNodes)});
            }    
        }
        return fils;
    },

    onControllerClickStub: function() {

    },

    init: function() {
        this.control({
            "#AdminfTaxonomieGrid": {
                itemclick: this.majTaxo
            },
            "#boutonSupprimerTermesTaxo": {
                click: this.supprimeTerme
            },
            "#boutonAjouterTermesTaxo": {
                click: this.ajouterTerme
            },
            "#boutonEnregistrerTaxo": {
                click: this.enregistrerTaxo
            },
            "#boutonSupprimerTaxo": {
                click: this.supprimerVocabulaire
            },
            "#boutonCreerTaxo": {
                click: this.creeVocabulaire
            },
            "#boutonCreerTaxonomie": {
                click: this.creerFenetreVocabulaire
            },
            "#boutonModifierTermesTaxo": {
                click: this.onButtonClick
            }
        });

    }

});
