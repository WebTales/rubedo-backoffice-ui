/*
 * File: app/controller/SearchController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.SearchController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.SearchController',

    mainSearchLaunch: function(button, e, options) {
        var me=this;
        if (Ext.getCmp('ESSearchField').isValid()){
            var DisplayResults=Ext.getCmp('searchResultsWindow');
            if (Ext.isEmpty(DisplayResults)){
                DisplayResults=Ext.widget('searchResultsWindow');
                Ext.getCmp("ViewportPrimaire").add(DisplayResults);
                DisplayResults.show();
            } else {
                DisplayResults.show();
                DisplayResults.toFront();
            }
            var squery= { };
            if  (!Ext.isEmpty(Ext.getCmp('ESSearchField').getValue())){
                squery.query=Ext.getCmp('ESSearchField').getValue();
            }
            Ext.getStore("ESFacetteStore").activeFacettes=squery;
            Ext.getStore("ESFacetteStore").load();

        }
    },

    mainResultWindowGetContext: function(tablepanel, record, item, index, e, options) {
        if (ACL.interfaceRights['read.ui.contents']){
            Rubedo.controller.ContributionContenusController.prototype.unitaryContentEdit(record.get("id"));
        }
    },

    onESFacetQueryBtnClick: function(button, e, options) {
        Ext.getStore("ESFacetteStore").activeFacettes.query=Ext.getCmp("ESFacetQueryField").getValue();
        Ext.getStore("ESFacetteStore").load();
    },

    renderFacets: function(facets) {
        var context=Ext.getCmp('searchResultsWindow').queryContext;
        var me=this;
        var target=Ext.getCmp("searchFacetBox");
        target.removeAll();
        Ext.Array.forEach(facets, function(facet){
            if (!Ext.isEmpty(facet.terms)){
                var newFacet = Ext.widget("fieldset", {title:facet.name, collapsible:true});
                if(facet.name!="type"){newFacet.collapse();}
                newFacet.usedProperty=facet.name;

                Ext.Array.forEach(facet.terms, function(term){
                    var newTerm=Ext.widget("button",{
                        text:term.term+" ("+term.count+")",
                        usedValue:term.term,
                        anchor:"100%",
                        handler:function(thing){
                            var theProp=Ext.getStore("ESFacetteStore").activeFacettes[thing.up().usedProperty];
                            if (!Ext.isEmpty(theProp)){
                                if (Ext.isArray(theProp)){
                                    theProp.push(thing.usedValue);
                                } else {
                                    theProp=[theProp,thing.usedValue];
                                }

                            } else {
                                theProp=thing.usedValue;

                            }
                            Ext.getStore("ESFacetteStore").activeFacettes[thing.up().usedProperty]=theProp;
                            Ext.getStore("ESFacetteStore").load();
                        }
                    });
                    newFacet.add(newTerm);
                });

                target.add(newFacet);
            }
        });

    },

    renderActiveFacets: function(facets) {
        Ext.getCmp("ESFacetQueryField").setValue(facets.query);
        var target=Ext.getCmp("SearchActiveFacetBar");
        target.removeAll();
        Ext.Object.each(facets, function(key, value){
            var activeOne = Ext.widget('splitbutton',{
                text:key+" : "+value,
                arrowHandler:function(){
                    delete Ext.getStore("ESFacetteStore").activeFacettes[key];
                    Ext.getStore("ESFacetteStore").load();
                }
            });
            target.add(activeOne);
        });
    },

    init: function(application) {
        this.control({
            "#ESSearchButton": {
                click: this.mainSearchLaunch
            },
            "#ResultContentsGrid": {
                itemdblclick: this.mainResultWindowGetContext
            },
            "#ESFacetQueryBtn": {
                click: this.onESFacetQueryBtnClick
            }
        });
    }

});
