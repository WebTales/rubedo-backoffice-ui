/*
 * File: app/controller/SearchController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.SearchController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.SearchController',

    mainSearchLaunch: function(button, e, options) {
        if (Ext.getCmp('ESSearchField').isValid()){
            var DisplayResults=Ext.getCmp('searchResultsWindow');
            if (Ext.isEmpty(DisplayResults)){
                DisplayResults=Ext.widget('searchResultsWindow');
                Ext.getCmp("ViewportPrimaire").add(DisplayResults);
                DisplayResults.show();
            } else {
                DisplayResults.show();
                DisplayResults.toFront();
            }
            DisplayResults.getComponent(0).getStore().removeAll();
            DisplayResults.setLoading(true);
            Ext.Ajax.request({
                url: 'elastic-search',
                params: {
                    query: Ext.getCmp('ESSearchField').getValue()
                },
                success: function(response){
                    var data=[];
                    var bigRez=Ext.JSON.decode(response.responseText);
                    Ext.Array.forEach(bigRez, function(rez){
                        var thing=rez[Ext.Object.getKeys(rez)[0]]._source;
                        data.push({
                            text:thing.text,
                            type:thing.type,
                            id:rez[Ext.Object.getKeys(rez)[0]]._id
                        });
                    });
                    DisplayResults.getComponent(0).getStore().loadData(data);
                    DisplayResults.setLoading(false);

                }
            });
        }
    },

    mainResultWindowGetContext: function(tablepanel, record, item, index, e, options) {
        if (ACL.interfaceRights['read.ui.contents']){
            Rubedo.controller.ContributionContenusController.prototype.unitaryContentEdit(record.get("id"));
            /*var fenetre=Ext.getCmp("contributionContenus");
            if (Ext.isDefined(fenetre)){fenetre.show();  fenetre.toFront(); }
            else {
            fenetre = Ext.widget("contributionContenus");
            Ext.getCmp('desktopCont').add(fenetre);
            if (Ext.isDefined(window.innerHeight)) {
            if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}
            if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}
            }
            fenetre.show();
            }
            Ext.getCmp("TypesContenusGrid").getSelectionModel().select(Ext.getCmp("TypesContenusGrid").getStore().findRecord("type",record.get("type")));
            Ext.getCmp("ContenusGrid").getStore().addListener("load", function(){
            Ext.getCmp("ContenusGrid").getSelectionModel().select(Ext.getCmp("ContenusGrid").getStore().findRecord("id",record.get("id")));
            }, this, {single:true});*/
        }
    },

    init: function(application) {
        this.control({
            "#ESSearchButton": {
                click: this.mainSearchLaunch
            },
            "#ResultContentsGrid": {
                itemdblclick: this.mainResultWindowGetContext
            }
        });
    }

});
