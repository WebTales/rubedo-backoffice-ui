/*
 * File: app/controller/SearchController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.SearchController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.SearchController',

    mainSearchLaunch: function(button, e, options) {
        var me=this;
        if (Ext.getCmp('ESSearchField').isValid()){
            var DisplayResults=Ext.getCmp('searchResultsWindow');
            if (Ext.isEmpty(DisplayResults)){
                DisplayResults=Ext.widget('searchResultsWindow');
                Ext.getCmp("ViewportPrimaire").add(DisplayResults);
                DisplayResults.show();
            } else {
                DisplayResults.show();
                DisplayResults.toFront();
            }
            DisplayResults.getComponent(1).getStore().removeAll();
            DisplayResults.queryContext={ };
            DisplayResults.setLoading(true);
            Ext.Ajax.request({
                url: 'elastic-search',
                params: {
                    query: Ext.getCmp('ESSearchField').getValue()
                },
                success: function(response){
                    var data=[];
                    var bigRez=Ext.JSON.decode(response.responseText);
                    Ext.Array.forEach(bigRez.results, function(rez){
                        var thing=rez[Ext.Object.getKeys(rez)[0]]._source;
                        data.push({
                            text:thing.text,
                            type:thing.contentType,
                            author:thing.author,
                            lastUpdateTime:thing.lastUpdateTime,
                            id:rez[Ext.Object.getKeys(rez)[0]]._id
                        });
                    });
                    DisplayResults.getComponent(1).getStore().loadData(data);
                    DisplayResults.setLoading(false);            
                    Ext.getCmp("ESFacetQueryField").setValue(Ext.getCmp('ESSearchField').getValue());
                    me.renderFacets(bigRez.facets);
                }
            });
        }
    },

    mainResultWindowGetContext: function(tablepanel, record, item, index, e, options) {
        if (ACL.interfaceRights['read.ui.contents']){
            Rubedo.controller.ContributionContenusController.prototype.unitaryContentEdit(record.get("id"));
        }
    },

    onESFacetQueryBtnClick: function(button, e, options) {
        this.readAndSearch();
    },

    renderFacets: function(facets) {
        var context=Ext.getCmp('searchResultsWindow').queryContext;
        var me=this;
        var target=Ext.getCmp("searchFacetBox");
        target.removeAll();
        Ext.suspendLayouts();
        Ext.Array.forEach(facets, function(facet){
            if (!Ext.isEmpty(facet.terms)){
                var newFacet = Ext.widget("fieldset", {title:facet.name, collapsible:true});
                newFacet.usedProperty=facet.name;

                Ext.Array.forEach(facet.terms, function(term){
                    var newTerm=Ext.widget("checkbox", {fieldLabel:term.term+" ("+term.count+")", name:term.term, checked:context[term.term]||false});
                    newTerm.on("change",function(){me.readAndSearch();});
                    newFacet.add(newTerm);
                });

                target.add(newFacet);
            }
        });
        Ext.resumeLayouts(true);
    },

    readAndSearch: function() {
        var target=Ext.getCmp("searchFacetBox");
        var me=this;
        var paramObject={ };
        var context={ };
        Ext.Array.forEach(target.query("field"),function(field){
            if ((field.isXType("checkboxfield"))&&(field.getValue())){
                paramObject[field.up().usedProperty]=field.name;
                context[field.name]=true;
            }
        });
        paramObject.query=Ext.getCmp("ESFacetQueryField").getValue();
        me.launchQuery(paramObject);
        Ext.getCmp('searchResultsWindow').queryContext=context;
    },

    launchQuery: function(paramObject) {
        var DisplayResults=Ext.getCmp('searchResultsWindow');
        var me=this;
        DisplayResults.setLoading(true);
        Ext.Ajax.request({
            url: 'elastic-search',
            params: paramObject,
            success: function(response){
                var data=[];
                var bigRez=Ext.JSON.decode(response.responseText);
                Ext.Array.forEach(bigRez.results, function(rez){
                    var thing=rez[Ext.Object.getKeys(rez)[0]]._source;
                    data.push({
                        text:thing.text,
                        type:thing.contentType,
                        author:thing.author,
                        lastUpdateTime:thing.lastUpdateTime,
                        id:rez[Ext.Object.getKeys(rez)[0]]._id
                    });
                });
                DisplayResults.getComponent(1).getStore().loadData(data);
                DisplayResults.setLoading(false);
                me.renderFacets(bigRez.facets);
            }
        });

    },

    init: function(application) {
        this.control({
            "#ESSearchButton": {
                click: this.mainSearchLaunch
            },
            "#ResultContentsGrid": {
                itemdblclick: this.mainResultWindowGetContext
            },
            "#ESFacetQueryBtn": {
                click: this.onESFacetQueryBtnClick
            }
        });
    }

});
