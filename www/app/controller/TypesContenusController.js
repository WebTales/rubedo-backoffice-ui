/*
 * File: app/controller/TypesContenusController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.TypesContenusController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.TypesContenusController',

    models: [
        'typesContenusDataModel'
    ],
    stores: [
        'TypesContenusDataJson'
    ],
    views: [
        'nouveauTypeContenu',
        'ajoutChampTCFenetre',
        'ChampTC',
        'optionsLCGrid',
        'ongletTCDep'
    ],

    ajouterContenu: function(button, e, options) {
        if (Ext.isDefined(Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0])) {
            var fenetre = Ext.widget('ajouterContenu');
            Ext.getCmp('ViewportPrimaire').add(fenetre);
            if (Ext.isDefined(window.innerHeight)) {
                if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}
                if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}
            }
            fenetre.show();
            var formulaireTC = Ext.getCmp('boiteAChampsContenus');
            var champsD =Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].data.champs;
            for (g=0; g<champsD.length; g++) {
                var donnees=champsD[g];
                var configurateur = Ext.clone(donnees.config);
                if (donnees.cType =='treepicker'){ 
                    var monStore= Ext.getStore(donnees.store);
                    configurateur.store = monStore;
                    monStore.load();
                }
                else if (donnees.cType == 'combobox') {
                    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
                    configurateur.store = monStore;
                }
                var nouvChamp = Ext.widget(donnees.cType, configurateur);
                nouvChamp.config=Ext.clone(donnees.config);
                if (donnees.cType =='triggerfield'){ 
                    var Ouvrir = Ext.clone(donnees.ouvrir);
                    nouvChamp.onTriggerClick= function() {
                        var fenetre = Ext.widget(Ouvrir);
                        fenetre.showAt(screen.width/2-200, 100);
                    } ; 
                    nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);
                }  
                nouvChamp.anchor = '90%';
                nouvChamp.style = '{float:left;}';
                var enrobage =Ext.widget('ChampTC');
                enrobage.add(nouvChamp);
                enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);
                if (nouvChamp.multivaluÃ©) {
                    enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: 'Valeurs multiples', itemId: 'boutonReplicateurChamps'}));

                };
                formulaireTC.add(enrobage);

            }
            var formTaxoTC =  Ext.getCmp('boiteATaxoContenus');
            var lesTaxo = Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].data.vocabulaires;
            var i=0;
            for (i=0; i<lesTaxo.length; i++) {
                var leVocab = Ext.getStore('TaxonomieDataJson').findRecord('titre', lesTaxo[i].titre);
                var vocabAPlat= [ ];
                this.miseAPlatTaxo(leVocab.data.termes.children, vocabAPlat);

                var storeT = Ext.create('Ext.data.Store', {
                    fields: ['terme'],
                    data : vocabAPlat
                });


                var selecteur = Ext.widget('comboboxselect', {
                    name:lesTaxo[i].titre,
                    width:690,
                    fieldLabel: leVocab.data.titre,
                    autoScroll: false,
                    store: storeT,
                    queryMode: 'local',
                    displayField: 'terme',
                    valueField: 'terme',
                    filterPickList: true,
                    typeAhead: true,
                    forceSelection: !leVocab.data.etiquettes,
                    createNewOnEnter: leVocab.data.etiquettes,
                    multiSelect: leVocab.data.choixMultiple,
                    allowBlank: !leVocab.data.obligatoire
                });
                var enrobage =Ext.widget('ChampTC');
                enrobage.add(selecteur);
                enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);
                formTaxoTC.add(enrobage);

            }





        }
    },

    ouvrirFenetreTC: function(button, e, options) {
        var fenetreTC = Ext.widget('ajoutChampTCFenetre');
        fenetreTC.showAt(screen.width/2-250, 100);
    },

    creerChampTC: function(button, e, options) {
        var donnees = Ext.getCmp('ChampTCSelectGrid').getSelectionModel().getLastSelected().data;
        var configurateur = Ext.clone(donnees.config);
        if (donnees.cType =='Ext.ux.TreePicker'){ 
            var monStore= Ext.getStore(donnees.store);
            configurateur.store = monStore;
            monStore.load();
        }
        else if (donnees.cType == 'Ext.form.field.ComboBox') {
            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
            configurateur.store = monStore;
        }
        var nouvChamp = Ext.create(donnees.cType, configurateur);
        nouvChamp.protoId=donnees.id;
        nouvChamp.config=Ext.clone(donnees.config);
        nouvChamp.champsConfig=Ext.clone(donnees.champsConfig);
        if (donnees.cType =='Ext.form.field.Trigger'){
            var Ouvrir = Ext.clone(donnees.ouvrir);
            nouvChamp.onTriggerClick= function() {
                var fenetre = Ext.widget(Ouvrir);
                fenetre.showAt(screen.width/2-200, 100);
            } ;  
            nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);
        }
        nouvChamp.anchor = '90%';
        nouvChamp.style = '{float:left;}';
        var enrobage =Ext.widget('ChampTC');
        enrobage.add(nouvChamp);
        enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);
        Ext.getCmp('champsEditionTC').add(enrobage);
        nouvChamp.getEl().dom.click();
        button.up().up().close();

    },

    selectChampTC: function(abstractcomponent, options) {
        var TCfield=abstractcomponent.getComponent(1);
        TCfield.getEl().on('click', function() {
            Ext.getCmp("TCfieldUp").enable();
            Ext.getCmp("TCfieldDown").enable();
            Ext.getCmp("TCfieldDeleter").enable();
            if (Ext.getCmp('champTCIdField').getValue() != TCfield.id) {
                if (Ext.isDefined(Ext.getCmp(Ext.getCmp('champTCIdField').getValue()))){    
                    Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).getEl().applyStyles('color:#000000');
                }
                Ext.getCmp('champTCIdField').setValue(TCfield.id);    
                this.frame(MyPrefData.themeColor);
                this.applyStyles('color:'+MyPrefData.themeColor);
                var mesChamps = TCfield.champsConfig;
                var boiteParam = Ext.getCmp('boiteConfigChampsTC');
                boiteParam.removeAll();
                for(t=0; t<mesChamps.length; t++) {
                    if (mesChamps[t].type =='Ext.form.field.ComboBox') {
                        var monStore=  Ext.create('Ext.data.Store', mesChamps[t].store);
                        mesChamps[t].config.store= monStore;
                    }
                    var nouvChamp= Ext.create(mesChamps[t].type, mesChamps[t].config);
                    nouvChamp.labelSeparator= ' ';
                    nouvChamp.anchor='100%';
                    nouvChamp.setValue(TCfield.config[nouvChamp.name]);
                    nouvChamp.on('change', function () {
                        TCfield.config[this.name]= this.getValue();
                        if (this.name=='fieldLabel') {
                            TCfield.setFieldLabel(this.getValue());
                        }
                        else if (this.name=='value') {
                            TCfield.setValue(this.getValue());
                        }
                        else if (this.name=='editable') {
                            TCfield.setEditable(this.getValue());
                            TCfield.reset();
                        }
                        else if (this.name=='multiSelect') {
                            TCfield.multiSelect = this.getValue();
                            TCfield.reset();
                        }
                        else if (this.name=='tooltip') {
                            abstractcomponent.getComponent('helpBouton').setTooltip(this.getValue());
                        }
                        else if (this.name=='regex') {
                            TCfield.regex = new RegExp(this.getValue());
                        }
                        else {
                            TCfield[this.name]= this.getValue();
                        }
                        TCfield.validate();
                    });
                    boiteParam.add(nouvChamp); 

                }
                if ((TCfield.isXType('combobox'))&&(!(TCfield.isXType('timefield')))) {
                    var optionsLC = Ext.widget('optionsLCGrid', {store : TCfield.getStore()});
                    boiteParam.add(optionsLC); 

                }
            }
        });
    },

    enleveChampTC: function(abstractcomponent, options) {
        if (Ext.getCmp('champTCIdField').getValue() == abstractcomponent.getComponent(1).id) {
            Ext.getCmp('boiteConfigChampsTC').removeAll();
            Ext.getCmp("TCfieldUp").disable();
            Ext.getCmp("TCfieldDown").disable();
            Ext.getCmp("TCfieldDeleter").disable();
        }
    },

    updateOptionsListeTC: function(tablepanel, record, item, index, e, options) {
        Ext.getCmp('PaneauTCDetail').update(record.data);
    },

    majAdminfTypesCentenus: function(dataview, record, item, index, e, options) {
        Ext.Array.forEach(Ext.getCmp("adminFTDC").getComponent("contextBar").query("buttongroup"), function(btn){btn.enable();});
        Ext.getCmp("boutonSupprimerTypeContenu").enable();
        Ext.getCmp("TCfieldUp").disable();
        Ext.getCmp("TCfieldDown").disable();
        Ext.getCmp("TCfieldDeleter").disable();
        var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');
        var monIco = 'content-icon';
        var monImg = 'resources/icones/48x48/page_full.png';
        if (record.data.imbrique===true){monIco='documentDep'; monImg = 'resources/icones/48x48/attach_document.png';}
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.type).setIconCls(monIco); }
        else { typeFil= Ext.widget('button',{iconCls: monIco, text:record.data.type, itemId:'type'});
        filArianne.add(typeFil);
    }

    if (record.data.imbrique===false) {
        if (!(Ext.isDefined(Ext.getCmp('ongletTCDep')))) {
            Ext.getCmp('tabPanTC').add(Ext.widget('ongletTCDep'));    
        }
    }
    else {
        if (Ext.isDefined(Ext.getCmp('ongletTCDep'))) {
            Ext.getCmp('ongletTCDep').destroy();  
        }
    }
    Ext.getCmp('tabPanTC').setActiveTab(2);
    Ext.getCmp('tabPanTC').setActiveTab(5);
    Ext.getCmp('tabPanTC').setActiveTab(0);
    Ext.getCmp('boiteConfigChampsTC').removeAll();
    var formulaireTC = Ext.getCmp('champsEditionTC');
    formulaireTC.removeAll();
    var champsD =record.data.champs;
    for (g=0; g<champsD.length; g++) {
        var donnees=champsD[g];
        var configurateur = Ext.clone(donnees.config);
        if (donnees.cType =='treepicker'){ 
            var monStore= Ext.getStore(donnees.store);
            configurateur.store = monStore;
            monStore.load();
        }
        else if (donnees.cType == 'combobox') {
            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
            configurateur.store = monStore;
        }
        var nouvChamp = Ext.widget(donnees.cType, configurateur);
        nouvChamp.config=Ext.clone(donnees.config);
        nouvChamp.champsConfig=Ext.getStore("TypesChampsDataStore").findRecord("id",donnees.protoId).get("champsConfig");
        if (donnees.cType =='triggerfield'){ 
            var Ouvrir = Ext.clone(donnees.ouvrir);
            nouvChamp.onTriggerClick= function() {
                var fenetre = Ext.widget(Ouvrir);
                fenetre.showAt(screen.width/2-200, 100);
            } ; 
            nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);
        }    
        nouvChamp.anchor = '90%';
        nouvChamp.protoId=donnees.protoId;


        nouvChamp.style = '{float:left;}';
        var enrobage =Ext.widget('ChampTC');
        enrobage.add(nouvChamp);
        enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);
        formulaireTC.add(enrobage);

    }
    var tableauTaxoTC = Ext.getCmp('vocabulairesTypesContenusGrid');
    tableauTaxoTC.getSelectionModel().deselectAll();
    var maTaxo= record.data.vocabulaires;
    var selectionR = [ ];
    var i =0;
    for (i=0; i<maTaxo.length; i++) {
        var leVocab = tableauTaxoTC.getStore().findRecord('name', maTaxo[i].titre);
        selectionR.push(leVocab);
        tableauTaxoTC.getSelectionModel().select(selectionR);
    }
    if (record.data.imbrique===false) {
        var tableauTCI = Ext.getCmp('TCImbriquesGrid');
        tableauTCI.getSelectionModel().deselectAll();
        var mesTCI = record.data.typesImbriques;
        var selectionTCI = [ ];
        var j =0;
        for (j=0; j<mesTCI.length; j++) {
            var leTCI = tableauTCI.getStore().findRecord('type', mesTCI[j].type);
            selectionTCI.push(leTCI);
            tableauTCI.getSelectionModel().select(selectionTCI);
        }
    }

    },

    supprimeTypeContenu: function(button, e, options) {
        var cible = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('delConfirmZ');
            fenetre.showAt(screen.width/2-100, 100);
            Ext.getCmp('delConfirmZOui').on('click', function() { 
                Ext.getCmp('AdminfTypesGridView').getStore().remove(cible);
                Ext.getCmp('delConfirmZ').close();
                Ext.Array.forEach(Ext.getCmp("adminFTDC").getComponent("contextBar").query("buttongroup"), function(btn){btn.disable();});
                Ext.getCmp("boutonSupprimerTypeContenu").disable();
            });  

        }
    },

    enregistrerTypeContenus: function(button, e, options) {
        if (Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected() !== null){
            var fieldsR = Ext.getCmp('champsEditionTC').items.items;
            var champsR = [ ];
            for (u=0; u<fieldsR.length; u++) { 
                var leChampR= fieldsR[u].getComponent(1);
                var nch ={
                    cType: leChampR.xtype,
                    config: leChampR.config,
                    protoId:leChampR.protoId,
                    ouvrir:leChampR.ouvrir
                };
                if (leChampR.xtype== 'treepicker') {
                    nch.store=leChampR.getStore().storeId;
                }
                else if (leChampR.xtype== 'combobox') {
                    var dones = leChampR.getStore().data.items;
                    var donesR = [ ];
                    for (i=0; i<dones.length; i++) {
                        donesR.push({valeur: dones[i].data.valeur, nom: dones[i].data.nom });
                    }
                    nch.store = {
                        fields: ['valeur', 'nom'],
                        data: donesR
                    };
                }
                champsR.push(nch);
            }
            Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().data.champs = champsR;
            var nouvTaxoTC = Ext.getCmp('vocabulairesTypesContenusGrid').getSelectionModel().getSelection();
            var i=0;
            var nouvTaxoR = [ ];
            for (i=0; i<nouvTaxoTC.length; i++) {
                nouvTaxoR.push({titre: nouvTaxoTC[i].data.titre});
            }
            Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().data.vocabulaires = nouvTaxoR;
            if (Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().data.imbrique ===false) {
                var nouvTCI = Ext.getCmp('TCImbriquesGrid').getSelectionModel().getSelection();
                var j=0;
                var nouvTCIR = [ ];
                for (j=0; j<nouvTCI.length; j++) {
                    nouvTCIR.push({type: nouvTCI[j].data.type});
                }
                Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().data.typesImbriques = nouvTCIR;


            }
        }
    },

    fenetreNTC: function(button, e, options) {
        var fenetre = Ext.widget('nouveauTypeContenu');
        fenetre.showAt(screen.width/2-150, 100);
    },

    creerNTC: function(button, e, options) {
        if (Ext.getCmp('champCreerTC').isValid()) {

            var nType = Ext.getCmp('champCreerTC').getValue();
            var nouvType = Ext.create('model.typesContenusDataModel', {
                type: nType,
                imbrique: Ext.getCmp('champTCIsDep').getValue(),
                champs: [ ],
                contenus: [ ]


            });
            this.getTypesContenusDataJsonStore().add(nouvType);

            Ext.getCmp('nouveauTypeContenuFenetre').close();
            Ext.getCmp('AdminfTypesGridView').getSelectionModel().select(nouvType);
            this.majAdminfTypesCentenus(Ext.getCmp('AdminfTypesGridView'), nouvType);
        }
    },

    repliqueChamp: function(button, e, options) {
        var nouvChamp=button.up().getComponent(1).cloneConfig();
        nouvChamp.anchor = '90%';
        nouvChamp.style = '{float:left;}';
        var enrobage =Ext.widget('ChampTC');
        enrobage.add(nouvChamp);
        enrobage.getComponent('helpBouton').setTooltip("RÃ©plique du champ "+button.up().getComponent(1).fieldLabel);
        var supprimeur = Ext.widget('button', {iconCls: 'close', margin: '0 0 0 5', tooltip: 'Enlever', itemId: 'boutonEffaceurChamps'});
        supprimeur.on('click', function(){
            button.valeursM--;
            Ext.getCmp('boiteAChampsContenus').remove(supprimeur.up());
        });
        enrobage.add(supprimeur);
        button.up().up().insert(button.up().up().items.indexOf(button.up())+button.valeursM, enrobage);
        button.valeursM++;
    },

    TCfieldDelete: function(button, e, options) {
        var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());
        if (!Ext.isEmpty(field)) {
            field.up().destroy();
        }
    },

    TCfieldMoveUp: function(button, e, options) {
        var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().up().items.indexOf(field.up());
            if (pos > 0) {
                field.up().up().move(pos,pos-1);
            }
        }
    },

    TCfieldMoveDown: function(button, e, options) {
        var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().up().items.indexOf(field.up());
            field.up().up().move(pos,pos+1);
        }
    },

    createThroughDblClick: function(tablepanel, record, item, index, e, options) {
        this.creerChampTC(Ext.getCmp("boutonAjouterChampTC"));
    },

    miseAPlatTaxo: function(cible, resultat) {
        var e=0;
        for (e=0; e<cible.length; e++) {
            resultat.push({terme: cible[e].text});
            this.miseAPlatTaxo(cible[e].children, resultat);
        }
    },

    init: function(application) {
        this.control({
            "#boutonAjouterContenu": {
                click: this.ajouterContenu
            },
            "#boutonOuvrirFenetreTC": {
                click: this.ouvrirFenetreTC
            },
            "#boutonAjouterChampTC": {
                click: this.creerChampTC
            },
            "#champsEditionTC ChampTC": {
                afterrender: this.selectChampTC,
                beforedestroy: this.enleveChampTC
            },
            "#ChampTCSelectGrid": {
                itemclick: this.updateOptionsListeTC,
                itemdblclick: this.createThroughDblClick
            },
            "#AdminfTypesGridView": {
                itemclick: this.majAdminfTypesCentenus
            },
            "#boutonSupprimerTypeContenu": {
                click: this.supprimeTypeContenu
            },
            "#boutonEnregistrerTypeContenu": {
                click: this.enregistrerTypeContenus
            },
            "#boutonNouveauTypeContenu": {
                click: this.fenetreNTC
            },
            "#boutonCreerTC": {
                click: this.creerNTC
            },
            "[itemId= 'boutonReplicateurChamps']": {
                click: this.repliqueChamp
            },
            "#TCfieldDeleter": {
                click: this.TCfieldDelete
            },
            "#TCfieldUp": {
                click: this.TCfieldMoveUp
            },
            "#TCfieldDown": {
                click: this.TCfieldMoveDown
            }
        });
    }

});
