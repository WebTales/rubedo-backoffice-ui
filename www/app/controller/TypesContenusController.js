/*
 * File: app/controller/TypesContenusController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.TypesContenusController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.TypesContenusController',

    models: [
        'typesContenusDataModel'
    ],
    stores: [
        'TypesContenusDataJson'
    ],
    views: [
        'nouveauTypeContenu',
        'ajoutChampTCFenetre',
        'ChampTC',
        'optionsLCGrid',
        'ongletTCDep'
    ],

    ajouterContenu: function(button, e, eOpts) {
        if (Ext.isDefined(Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0])) {
            var fenetre = Ext.widget('ajouterContenu');
            Ext.getCmp('ViewportPrimaire').add(fenetre);
            if (Ext.isDefined(window.innerHeight)) {
                if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}
                if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}
            }
            fenetre.show();
            fenetre.setTitle(Rubedo.RubedoAutomatedElementsLoc.newContentText+" "+Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get("type"));
            var formulaireTC = Ext.getCmp('boiteAChampsContenus');
            Ext.getCmp("contentsVersionPanel").up().remove( Ext.getCmp("contentsVersionPanel"));
            var champsD =Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].data.champs;
            for (g=0; g<champsD.length; g++) {
                var donnees=champsD[g];
                var configurateur = Ext.clone(donnees.config);
                if (!Ext.isEmpty(configurateur.i18n)){
                    var BOLanguage=Ext.getStore("CurrentUserDataStore").getRange()[0].get("language");
                    if (!Ext.isEmpty(configurateur.i18n[BOLanguage])){
                        if (!Ext.isEmpty(configurateur.i18n[BOLanguage].fieldLabel)){
                            configurateur.fieldLabel=configurateur.i18n[BOLanguage].fieldLabel;
                        }
                        if (!Ext.isEmpty(configurateur.i18n[BOLanguage].tooltip)){
                            configurateur.tooltip=configurateur.i18n[BOLanguage].tooltip;
                        }
                    }
                }
                if (donnees.cType =='treepicker'){ 
                    configurateur.store = Ext.create("Ext.data.TreeStore", {
                        isOptimised: true,
                        usedCollection: 'Pages',
                        autoLoad: false,
                        autoSync: false,
                        remoteFilter: true,
                        model: 'Rubedo.model.taxonomyTermModel',
                        proxy: {
                            type: 'ajax',
                            api: {
                                read: 'taxonomy-terms/navigation-tree'
                            },
                            reader: {
                                type: 'json',
                                getResponseData: function(response) {
                                    var data, error;

                                    try {
                                        data = Ext.decode(response.responseText);
                                        if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                                        return this.readRecords(data);
                                    } catch (ex) {
                                        error = new Ext.data.ResultSet({
                                            total  : 0,
                                            count  : 0,
                                            records: [],
                                            success: false,
                                            message: ex.message
                                        });

                                        this.fireEvent('exception', this, response, error);
                                        console.log(ex);

                                        Ext.Logger.warn('Unable to parse the JSON returned by the server');

                                        return error;
                                    }
                                },
                                messageProperty: 'message'
                            }
                        },
                        sorters: {
                            property: 'orderValue'
                        }
                    });
                    configurateur.store.load();
                    configurateur.valueField="id";
                    configurateur.displayField="text";
                    configurateur.plugins=[Ext.create("Ext.ux.form.field.ClearButton")];
                }
                else if (donnees.cType == 'combobox') {
                    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
                    configurateur.store = monStore;
                }
                //begin temporary fix
                configurateur.labelSeparator=" ";
                //end temporary fix
                try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){
                var nouvChamp = Ext.create(donnees.cType, configurateur);
            }
            nouvChamp.config=Ext.clone(donnees.config);
            if (nouvChamp.config.useTodayDef){
                nouvChamp.setValue(new Date());
            }
            //begin temporary fix
            if(configurateur.tooltip=="help text"){configurateur.tooltip="";}
            //end temporary fix
            if (donnees.cType =='triggerfield'){ 
                var Ouvrir = Ext.clone(donnees.openWindow);
                nouvChamp.onTriggerClick= function() {
                    var fenetre = Ext.widget(Ouvrir);
                    fenetre.showAt(screen.width/2-200, 100);
                } ; 
                nouvChamp.openWindow =Ext.clone(donnees.openWindow);
            }  
            nouvChamp.anchor = '90%';
            nouvChamp.style = '{float:left;}';
            var enrobage =Ext.widget('ChampTC');
            enrobage.add(nouvChamp);
            enrobage.getComponent('helpBouton').setTooltip(configurateur.tooltip);
            if (Ext.isEmpty(configurateur.tooltip)){
                enrobage.getComponent('helpBouton').hidden=true;
            } 
            if (nouvChamp.multivalued) {
                enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.duplicateText, itemId: 'boutonReplicateurChamps'}));

            };
            formulaireTC.add(enrobage);

        }
        var formTaxoTC =  Ext.getCmp('boiteATaxoContenus');
        var lesTaxo = Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get("vocabularies");
        var i=0;
        for (i=0; i<lesTaxo.length; i++) {
            var leVocab = Ext.getStore('TaxonomyForC').findRecord('id', lesTaxo[i]);
            if (!Ext.isEmpty(leVocab)){
                if (leVocab.get("inputAsTree")){
                    var storeT = Ext.create("Ext.data.TreeStore", {
                        model:"Rubedo.model.taxonomyTermModel",
                        remoteFilter:"true",
                        proxy: {
                            type: 'ajax',
                            api: {
                                read: 'taxonomy-terms/tree'
                            },
                            reader: {
                                type: 'json',
                                messageProperty: 'message'
                            },
                            encodeFilters: function(filters) {
                                var min = [],
                                    length = filters.length,
                                    i = 0;

                                for (; i < length; i++) {
                                    min[i] = {
                                        property: filters[i].property,
                                        value   : filters[i].value
                                    };
                                    if (filters[i].type) {
                                        min[i].type = filters[i].type;
                                    }
                                    if (filters[i].operator) {
                                        min[i].operator = filters[i].operator;
                                    }
                                }
                                return this.applyEncoding(min);
                            }
                        },
                        filters: {
                            property: 'vocabularyId',
                            value: leVocab.get("id")
                        }

                    });
                    var toUse="Ext.ux.TreePicker";
                    if(leVocab.get("multiSelect")){toUse="Ext.ux.TreeMultiPicker";}
                    if(leVocab.get("id")=='navigation'){storeT.getProxy().api={read:"taxonomy-terms/navigation-tree"};}
                    storeT.load();
                    var selecteur = Ext.create(toUse, {
                        name:leVocab.get("id"),
                        fieldLabel: leVocab.get("name"),
                        store: storeT,
                        anchor:"90%",
                        ignoreIsNotPage:true,
                        displayField:"text",
                        allowBlank: !leVocab.data.mandatory,
                        plugins:[Ext.create("Ext.ux.form.field.ClearButton")]
                    });


                } else {
                    var storeT = Ext.create('Ext.data.JsonStore', {
                        model:"Rubedo.model.taxonomyTermModel",
                        remoteFilter:"true",
                        proxy: {
                            type: 'ajax',
                            api: {
                                read: 'taxonomy-terms'
                            },
                            reader: {
                                type: 'json',
                                messageProperty: 'message',
                                root: 'data'
                            },
                            encodeFilters: function(filters) {
                                var min = [],
                                    length = filters.length,
                                    i = 0;

                                for (; i < length; i++) {
                                    min[i] = {
                                        property: filters[i].property,
                                        value   : filters[i].value
                                    };
                                    if (filters[i].type) {
                                        min[i].type = filters[i].type;
                                    }
                                    if (filters[i].operator) {
                                        min[i].operator = filters[i].operator;
                                    }
                                }
                                return this.applyEncoding(min);
                            }
                        },
                        filters: {
                            property: 'vocabularyId',
                            value: leVocab.get("id")
                        }

                    });
                    storeT.on("beforeload", function(s,o){
                        o.filters=Ext.Array.slice(o.filters,0,1);
                        if (!Ext.isEmpty(o.params.comboQuery)){

                            var newFilter=Ext.create('Ext.util.Filter', {
                                property:"text",
                                value:o.params.comboQuery,
                                operator:'like'
                            });

                            o.filters.push(newFilter);

                        }


                    });
                    var selecteur = Ext.widget('comboboxselect', {
                        name:leVocab.get("id"),
                        anchor:"90%",
                        fieldLabel: leVocab.get("name"),
                        autoScroll: false,
                        store: storeT,
                        queryMode: 'remote',
                        queryParam: 'comboQuery',
                        minChars:3,
                        displayField: 'text',
                        valueField: 'id',
                        filterPickList: true,
                        typeAhead: true,
                        forceSelection: !leVocab.data.expandable,
                        createNewOnEnter: leVocab.data.expandable,
                        multiSelect: leVocab.data.multiSelect,
                        allowBlank: !leVocab.data.mandatory
                    });

                }
                var enrobage =Ext.widget('ChampTC');
                enrobage.add(selecteur);
                enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);
                if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}
                formTaxoTC.add(enrobage);

            }
        }

        var nct = Ext.getCmp("nestedContentsTab");
        if (!Ext.isEmpty(nct)){
            Ext.getCmp('nestedContensTabConfig').destroy();
            nct.destroy();

        }



    }
    },

    ouvrirFenetreTC: function(button, e, eOpts) {
        var fenetreTC = Ext.widget('ajoutChampTCFenetre');
        fenetreTC.show();
    },

    creerChampTC: function(button, e, eOpts) {
        var me=this;
        if (Ext.isEmpty(Ext.getStore("AddMultiFieldStore").getRange())){
            var donnees = Ext.getCmp('ChampTCSelectGrid').getSelectionModel().getLastSelected().data;
            if ((donnees.cType=="Rubedo.view.localiserField")&&(!Ext.isEmpty(Ext.getCmp("champsEditionTC").query("localiserField")))){
                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.maxOneLocFieldError);
            }else {
                var configurateur = Ext.clone(donnees.config);
                if (donnees.cType =='Ext.ux.TreePicker'){ 
                    configurateur.store = Ext.create("Ext.data.TreeStore", {
                        isOptimised: true,
                        usedCollection: 'Pages',
                        autoLoad: false,
                        autoSync: false,
                        remoteFilter: true,
                        model: 'Rubedo.model.taxonomyTermModel',
                        proxy: {
                            type: 'ajax',
                            api: {
                                read: 'taxonomy-terms/navigation-tree'
                            },
                            reader: {
                                type: 'json',
                                getResponseData: function(response) {
                                    var data, error;

                                    try {
                                        data = Ext.decode(response.responseText);
                                        if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                                        return this.readRecords(data);
                                    } catch (ex) {
                                        error = new Ext.data.ResultSet({
                                            total  : 0,
                                            count  : 0,
                                            records: [],
                                            success: false,
                                            message: ex.message
                                        });

                                        this.fireEvent('exception', this, response, error);
                                        console.log(ex);

                                        Ext.Logger.warn('Unable to parse the JSON returned by the server');

                                        return error;
                                    }
                                },
                                messageProperty: 'message'
                            }
                        },
                        sorters: {
                            property: 'orderValue'
                        }
                    });
                    configurateur.store.load();
                    configurateur.valueField="id";
                    configurateur.displayField="text";
                    configurateur.plugins=[Ext.create("Ext.ux.form.field.ClearButton")];
                }
                else if (donnees.cType == 'Ext.form.field.ComboBox') {
                    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
                    configurateur.store = monStore;
                }
                var nouvChamp = Ext.create(donnees.cType, configurateur);
                nouvChamp.protoId=donnees.id;
                nouvChamp.config=Ext.clone(donnees.config);
                nouvChamp.configFields=Ext.clone(donnees.configFields);
                if (donnees.cType =='Ext.form.field.Trigger'){
                    var Ouvrir = Ext.clone(donnees.openWindow);
                    nouvChamp.onTriggerClick= function() {
                        var fenetre = Ext.widget(Ouvrir);
                        fenetre.showAt(screen.width/2-200, 100);
                    } ;  
                    nouvChamp.openWindow =Ext.clone(donnees.openWindow);
                }
                nouvChamp.anchor = '90%';
                nouvChamp.style = '{float:left;}';
                var enrobage =Ext.widget('ChampTC');
                enrobage.add(nouvChamp);
                enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);
                if (Ext.isEmpty(nouvChamp.config.tooltip)){
                    enrobage.getComponent('helpBouton').hidden=true;
                } 
                if (!me.nameAvailable(nouvChamp.name)) {
                    var duplic = 1;
                    while (!me.nameAvailable(nouvChamp.name+duplic)){
                        duplic++;
                    }
                    nouvChamp.name=nouvChamp.name+duplic;
                    nouvChamp.config.name=nouvChamp.config.name+duplic;

                }

                Ext.getCmp('champsEditionTC').add(enrobage);
                nouvChamp.getEl().dom.click();
                button.up().up().close();
            }} else {
                Ext.Array.forEach(Ext.getStore("AddMultiFieldStore").getRange(), function (futureField){
                    var interv=Ext.clone(futureField.data);
                    interv.id=interv.protoId;
                    var donnees = interv;
                    if ((donnees.cType=="Rubedo.view.localiserField")&&(!Ext.isEmpty(Ext.getCmp("champsEditionTC").query("localiserField")))){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.maxOneLocFieldError);
                    }else {
                        var configurateur = Ext.clone(donnees.config);
                        if (donnees.cType =='Ext.ux.TreePicker'){ 
                            configurateur.store = Ext.create("Ext.data.TreeStore", {
                                isOptimised: true,
                                usedCollection: 'Pages',
                                autoLoad: false,
                                autoSync: false,
                                remoteFilter: true,
                                model: 'Rubedo.model.taxonomyTermModel',
                                proxy: {
                                    type: 'ajax',
                                    api: {
                                        read: 'taxonomy-terms/navigation-tree'
                                    },
                                    reader: {
                                        type: 'json',
                                        getResponseData: function(response) {
                                            var data, error;

                                            try {
                                                data = Ext.decode(response.responseText);
                                                if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                                                return this.readRecords(data);
                                            } catch (ex) {
                                                error = new Ext.data.ResultSet({
                                                    total  : 0,
                                                    count  : 0,
                                                    records: [],
                                                    success: false,
                                                    message: ex.message
                                                });

                                                this.fireEvent('exception', this, response, error);
                                                console.log(ex);

                                                Ext.Logger.warn('Unable to parse the JSON returned by the server');

                                                return error;
                                            }
                                        },
                                        messageProperty: 'message'
                                    }
                                },
                                sorters: {
                                    property: 'orderValue'
                                }
                            });
                            configurateur.store.load();
                            configurateur.valueField="id";
                            configurateur.displayField="text";
                            configurateur.plugins=[Ext.create("Ext.ux.form.field.ClearButton")];
                        }
                        else if (donnees.cType == 'Ext.form.field.ComboBox') {
                            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
                            configurateur.store = monStore;
                        }
                        var nouvChamp = Ext.create(donnees.cType, configurateur);
                        nouvChamp.protoId=donnees.id;
                        nouvChamp.config=Ext.clone(donnees.config);
                        nouvChamp.configFields=Ext.clone(donnees.configFields);
                        if (donnees.cType =='Ext.form.field.Trigger'){
                            var Ouvrir = Ext.clone(donnees.openWindow);
                            nouvChamp.onTriggerClick= function() {
                                var fenetre = Ext.widget(Ouvrir);
                                fenetre.showAt(screen.width/2-200, 100);
                            } ;  
                            nouvChamp.openWindow =Ext.clone(donnees.openWindow);
                        }
                        nouvChamp.anchor = '90%';
                        nouvChamp.style = '{float:left;}';
                        var enrobage =Ext.widget('ChampTC');
                        enrobage.add(nouvChamp);
                        enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);
                        if (Ext.isEmpty(nouvChamp.config.tooltip)){
                            enrobage.getComponent('helpBouton').hidden=true;
                        } 
                        if (!me.nameAvailable(nouvChamp.name)) {
                            var duplic = 1;
                            while (!me.nameAvailable(nouvChamp.name+duplic)){
                                duplic++;
                            }
                            nouvChamp.name=nouvChamp.name+duplic;
                            nouvChamp.config.name=nouvChamp.config.name+duplic;

                        }

                        Ext.getCmp('champsEditionTC').add(enrobage);

                    }
                });
                button.up().up().close();
            }
    },

    selectChampTC: function(component, eOpts) {
        var me=this;
        var TCfield=component.getComponent(1);
        TCfield.getEl().on('click', function() {
            Ext.getCmp("TCfieldUp").enable();
            Ext.getCmp("TCfieldDown").enable();
            Ext.getCmp("TCfieldDeleter").enable();
            if (Ext.getCmp('champTCIdField').getValue() != TCfield.id) {
                if (Ext.isDefined(Ext.getCmp(Ext.getCmp('champTCIdField').getValue()))){    
                    Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).getEl().applyStyles('color:#000000');
                    var companion =Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).up().getComponent(2);
                    if (Ext.isDefined(companion)) {
                        companion.getEl().applyStyles('color:#000000');
                    }
                }
                Ext.getCmp('champTCIdField').setValue(TCfield.id);
                if ((TCfield.isXType("ImagePickerField"))||(TCfield.isXType("localiserField"))||(TCfield.isXType("externalMediaField"))||(TCfield.isXType("DCEField"))) {
                    TCfield.up().getComponent(2).getEl().frame(MyPrefData.themeColor);
                    TCfield.up().getComponent(2).getEl().applyStyles('color:'+MyPrefData.themeColor);
                } else {
                    this.frame(MyPrefData.themeColor);
                    this.applyStyles('color:'+MyPrefData.themeColor);
                }
                var mesChamps = TCfield.configFields;
                var boiteParam = Ext.getCmp('boiteConfigChampsTC');
                boiteParam.removeAll();
                for(t=0; t<mesChamps.length; t++) {
                    if (mesChamps[t].type =='Ext.form.field.ComboBox') {
                        var monStore=  Ext.create('Ext.data.Store', mesChamps[t].store);
                        mesChamps[t].config.store= monStore;
                    }
                    var nouvChamp= Ext.create(mesChamps[t].type, mesChamps[t].config);
                    nouvChamp.labelSeparator= ' ';
                    nouvChamp.anchor='100%';
                    if (nouvChamp.name=="name"){
                        nouvChamp.validator=me.nameValidator;
                    }

                    nouvChamp.setValue(TCfield.config[nouvChamp.name]);

                    if ((mesChamps[t].type =='Rubedo.view.CTMTField')||(mesChamps[t].type =='Rubedo.view.CTCField')){

                        var properMT =Ext.clone(TCfield.config[nouvChamp.name]);
                        nouvChamp.getStore().targetField=nouvChamp.id;
                        nouvChamp.getStore().addListener("load", function(){  
                            Ext.getCmp(this.targetField).setValue(properMT);
                        },nouvChamp.getStore(),{single:true});
                        }
                        if ((nouvChamp.name=="fieldLabel")||(nouvChamp.name=="tooltip")){
                            nouvChamp.hide();
                            var replacerField=Ext.widget('genericLocTextField',{
                                fieldLabel:nouvChamp.fieldLabel,
                                anchor:"100%",
                                targetEntity:TCfield.getId(),
                                targetEntityProp:nouvChamp.name,
                                CTMode:true,
                                companionFieldId:nouvChamp.getId(),
                                initialLanguage:Ext.getStore("CurrentUserDataStore").getRange()[0].get("language")
                            });
                            boiteParam.add(replacerField);
                        }
                        if ((nouvChamp.name=="localizable")&&(Ext.getStore("AllLanguagesStore3").getRange().length==1)){
                            nouvChamp.hide();
                        }
                        nouvChamp.setReadOnly((!ACL.interfaceRights["write.ui.contentTypes"])||(Ext.getCmp("AdminfTypesGrid").getSelectionModel().getLastSelected().get("readOnly")));
                        nouvChamp.on('change', function (thing) {
                            if (thing.isValid()){
                                if(this.isXType("timefield")){
                                    TCfield.config[this.name]=Ext.Date.format(this.getValue(),"H:i");
                                } else if(this.isXType("datefield")){
                                    TCfield.config[this.name]=Ext.Date.format(this.getValue(),"U");
                                } else { 
                                    TCfield.config[this.name]= this.getValue();
                                }
                                if ((this.name=='name')&&((TCfield.isXType("radiogroup"))||(TCfield.isXType("checkboxgroup")))){
                                    var ntcrVal=this.getValue();
                                    Ext.Array.forEach(TCfield.config.items, function(ntch){ntch.name=ntcrVal;});
                                }
                                if (this.name=='fieldLabel') {

                                    if (TCfield.isXType("ImagePickerField")) {
                                        TCfield.up().getComponent(2).getComponent(0).setText(this.getValue());
                                        TCfield.fieldLabel=this.getValue();
                                    } else if ((TCfield.isXType("localiserField"))||(TCfield.isXType("externalMediaField"))||(TCfield.isXType("DCEField"))){
                                        TCfield.up().getComponent(2).setFieldLabel(this.getValue());
                                        TCfield.fieldLabel=this.getValue();
                                    } else {
                                        TCfield.setFieldLabel(this.getValue());
                                    }
                                }
                                else if (this.name=='value') {

                                    TCfield.setValue(this.getValue());

                                }
                                else if (this.name=='allowBlank') {
                                    var currentOne=TCfield.config.fieldLabel;
                                    if (this.getValue()) {
                                        currentOne=currentOne.replace(" *","");
                                    } else {
                                        currentOne=currentOne+" *";
                                    } 
                                    TCfield.config.fieldLabel=currentOne;
                                    if (TCfield.isXType("ImagePickerField")) {
                                        TCfield.up().getComponent(2).getComponent(0).setText(currentOne+" ");
                                    } else if ((TCfield.isXType("localiserField"))||(TCfield.isXType("externalMediaField"))||(TCfield.isXType("DCEField"))){
                                        TCfield.up().getComponent(2).setFieldLabel(currentOne);
                                    } else {
                                        TCfield.setFieldLabel(currentOne);
                                    }
                                }
                                else if (this.name=='editable') {
                                    TCfield.setEditable(this.getValue());
                                    TCfield.reset();
                                }
                                else if (this.name=='multiSelect') {
                                    TCfield.multiSelect = this.getValue();
                                    TCfield.reset();
                                }
                                else if (this.name=='tooltip') {
                                    component.getComponent('helpBouton').setTooltip(this.getValue());
                                    if (Ext.isEmpty(this.getValue())){
                                        component.getComponent('helpBouton').hide();
                                    } else {
                                        component.getComponent('helpBouton').show();
                                    }
                                }
                                else if (this.name=='regex') {
                                    TCfield.regex = new RegExp(this.getValue());
                                }
                                else {
                                    TCfield[this.name]= this.getValue();
                                }
                                TCfield.validate();
                            }});
                            boiteParam.add(nouvChamp); 

                        }
                        if ((TCfield.isXType('combobox'))&&(!(TCfield.isXType('timefield')))) {
                            var optionsLC = Ext.widget('optionsLCGrid', {store : TCfield.getStore()});
                            boiteParam.add(optionsLC); 

                        }
                        if ((TCfield.isXType("radiogroup"))||(TCfield.isXType("checkboxgroup"))) {
                            var itemsConfigurator=Ext.widget("specialTCFieldItemsConfigurator");
                            itemsConfigurator.targetedId=TCfield.id;
                            boiteParam.add(itemsConfigurator); 
                        }
                    }
                });
    },

    enleveChampTC: function(component, eOpts) {
        if (Ext.getCmp('champTCIdField').getValue() == component.getComponent(1).id) {
            Ext.getCmp('boiteConfigChampsTC').removeAll();
            Ext.getCmp("TCfieldUp").disable();
            Ext.getCmp("TCfieldDown").disable();
            Ext.getCmp("TCfieldDeleter").disable();
        }
    },

    updateOptionsListeTC: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('PaneauTCDetail').update(record.data);
    },

    selectTC: function(dataviewmodel, record, eOpts) {
        Ext.Array.forEach(Ext.getCmp("adminFTDC").getComponent("contextBar").query("buttongroup"), function(btn){btn.enable();});
        Ext.getCmp("boutonSupprimerTypeContenu").enable();
        Ext.getCmp("TCfieldUp").disable();
        Ext.getCmp("TCfieldDown").disable();
        Ext.getCmp("TCfieldDeleter").disable();
        Ext.getCmp("TDCEditForm").getForm().setValues(record.getData());
        var filArianne = Ext.getCmp("adminFTDC").getDockedComponent('filArianne');
        var monIco = 'content-icon';
        var monImg = 'resources/icones/48x48/page_full.png';
        if (record.data.dependant===true){monIco='documentDep'; monImg = 'resources/icones/48x48/attach_document.png';}
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.type).setIconCls(monIco); }
        else { typeFil= Ext.widget('button',{iconCls: monIco, text:record.data.type, itemId:'type'});
        filArianne.add(typeFil);
    }

    if ((record.data.dependant===false)&&(ACL.interfaceRights["read.ui.dependantTypes"])) {
        if (!(Ext.isDefined(Ext.getCmp('ongletTCDep')))) {
            Ext.getCmp('tabPanTC').add(Ext.widget('ongletTCDep'));    
        }
    }
    else {
        if (Ext.isDefined(Ext.getCmp('ongletTCDep'))) {
            Ext.getCmp('ongletTCDep').destroy();  
        }
    }
    Ext.getCmp('tabPanTC').enable();
    Ext.getCmp('boiteConfigChampsTC').removeAll();
    var formulaireTC = Ext.getCmp('champsEditionTC');
    formulaireTC.removeAll();
    var champsD =record.data.champs;
    for (g=0; g<champsD.length; g++) {
        var donnees=champsD[g];
        var configurateur = Ext.clone(donnees.config);
        if (!Ext.isEmpty(configurateur.i18n)){
            var BOLanguage=Ext.getStore("CurrentUserDataStore").getRange()[0].get("language");
            if (!Ext.isEmpty(configurateur.i18n[BOLanguage])){
                if (!Ext.isEmpty(configurateur.i18n[BOLanguage].fieldLabel)){
                    configurateur.fieldLabel=configurateur.i18n[BOLanguage].fieldLabel;
                }
                if (!Ext.isEmpty(configurateur.i18n[BOLanguage].tooltip)){
                    configurateur.tooltip=configurateur.i18n[BOLanguage].tooltip;
                }
            }
        }
        if (donnees.cType =='treepicker'){ 
            configurateur.store = Ext.create("Ext.data.TreeStore", {
                isOptimised: true,
                usedCollection: 'Pages',
                autoLoad: false,
                autoSync: false,
                remoteFilter: true,
                model: 'Rubedo.model.taxonomyTermModel',
                proxy: {
                    type: 'ajax',
                    api: {
                        read: 'taxonomy-terms/navigation-tree'
                    },
                    reader: {
                        type: 'json',
                        getResponseData: function(response) {
                            var data, error;

                            try {
                                data = Ext.decode(response.responseText);
                                if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                                return this.readRecords(data);
                            } catch (ex) {
                                error = new Ext.data.ResultSet({
                                    total  : 0,
                                    count  : 0,
                                    records: [],
                                    success: false,
                                    message: ex.message
                                });

                                this.fireEvent('exception', this, response, error);
                                console.log(ex);

                                Ext.Logger.warn('Unable to parse the JSON returned by the server');

                                return error;
                            }
                        },
                        messageProperty: 'message'
                    }
                },
                sorters: {
                    property: 'orderValue'
                }
            });
            configurateur.store.load();
            configurateur.valueField="id";
            configurateur.displayField="text";
            configurateur.plugins=[Ext.create("Ext.ux.form.field.ClearButton")];
        }
        else if (donnees.cType == 'combobox') {
            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
            configurateur.store = monStore;
        }
        //begin temporary fix
        configurateur.labelSeparator=" ";
        //end temporary fix

        try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){
        var nouvChamp = Ext.create(donnees.cType, configurateur);
    }
    nouvChamp.config=Ext.clone(donnees.config);

    //begin temporary fix
    if(configurateur.tooltip=="help text"){configurateur.tooltip="";}
    //end temporary fix

    nouvChamp.configFields=Ext.getStore("TypesChampsDataStore").findRecord("id",donnees.protoId).get("configFields");
    if (donnees.cType =='triggerfield'){ 
        var Ouvrir = Ext.clone(donnees.openWindow);
        nouvChamp.onTriggerClick= function() {
            var fenetre = Ext.widget(Ouvrir);
            fenetre.showAt(screen.width/2-200, 100);
        } ; 
        nouvChamp.openWindow =Ext.clone(donnees.openWindow);
    }    
    nouvChamp.anchor = '90%';
    nouvChamp.protoId=donnees.protoId;


    nouvChamp.style = '{float:left;}';
    var enrobage =Ext.widget('ChampTC');
    enrobage.add(nouvChamp);
    enrobage.getComponent('helpBouton').setTooltip(configurateur.tooltip);
    if (Ext.isEmpty(configurateur.tooltip)){
        enrobage.getComponent('helpBouton').hidden=true;
    }    
    formulaireTC.add(enrobage);

    }
    var tableauTaxoTC = Ext.getCmp('vocabulairesTypesContenusGrid');
    tableauTaxoTC.getSelectionModel().deselectAll();
    var maTaxo= record.get("vocabularies");
    var selectionR = [ ];
    Ext.Array.forEach(maTaxo, function(someTaxoId){
    if(!Ext.isEmpty(tableauTaxoTC.getStore().findRecord("id", someTaxoId))){
        selectionR.push(tableauTaxoTC.getStore().findRecord("id", someTaxoId));
    }
    });
    tableauTaxoTC.getSelectionModel().select(selectionR);


    if ((record.get("dependant")===false)&&(ACL.interfaceRights["read.ui.dependantTypes"])) {
    var tableauTCI = Ext.getCmp('TCImbriquesGrid');
    tableauTCI.getSelectionModel().deselectAll();
    var depTypes = record.get("dependantTypes");
    var selector=[];
    Ext.Array.forEach(depTypes, function(someTypeId){
        if(!Ext.isEmpty(tableauTCI.getStore().findRecord("id", someTypeId))){
            selector.push(tableauTCI.getStore().findRecord("id", someTypeId));
        }
    });
    tableauTCI.getSelectionModel().select(selector);
    }
    Ext.getCmp('champsEditionTC').doLayout();

    var metaBox = Ext.getCmp("adminFTDC").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
    var values= record.getData();
    values.creation= Ext.Date.format(values.createTime, Ext.Date.defaultFormat);
    values.derniereModification= Ext.Date.format(values.lastUpdateTime, Ext.Date.defaultFormat);
    metaBox.update(values);
    metaBox.show();
    if ((!ACL.interfaceRights["write.ui.contentTypes"])||(record.get("readOnly"))) {
    Ext.Array.forEach(Ext.getCmp("TDCEditForm").query("field"), function(thing){thing.setReadOnly(true);});
    Ext.getCmp("boutonSupprimerTypeContenu").disable();
    Ext.getCmp("boutonEnregistrerTypeContenu").disable();
    Ext.getCmp("AdminfTCImporter").disable();
    Ext.getCmp("TCfieldUp").up().disable();
    } else {
    Ext.Array.forEach(Ext.getCmp("TDCEditForm").query("field"), function(thing){thing.setReadOnly(false);});
    Ext.getCmp("boutonSupprimerTypeContenu").enable();
    Ext.getCmp("boutonEnregistrerTypeContenu").enable();
    Ext.getCmp("AdminfTCImporter").enable();
    Ext.getCmp("TCfieldUp").up().enable();
    }
    Ext.getStore("CTLayouts").removeAll();
    Ext.getStore("CTLayouts").loadData(record.get("layouts"));
    this.resetLayoutsInterfaceNoSelect();
    Ext.getCmp("CTLDLSToolbar").recievei18n(record.get("i18n"),record.get("locale"),record.get("nativeLanguage"));

    },

    supprimeTypeContenu: function(button, e, eOpts) {
        var cible = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getSelection()[0];
        var me=this;
        if (Ext.isDefined(cible)) {
            Ext.Ajax.request({
                url: 'content-types/is-used',
                method:'GET',
                params: {
                    id: cible.get("id")
                },
                success: function(response){
                    var maskIsUsed=Ext.JSON.decode(response.responseText).used;
                    if (maskIsUsed){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeIsUsedError);
                    } else {
                        var fenetre = Ext.widget('delConfirmZ');
                        fenetre.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisContentTypeText;
                        fenetre.show();
                        Ext.getCmp('delConfirmZOui').on('click', function() { 
                            Ext.getCmp('AdminfTypesGridView').getStore().remove(cible);
                            Ext.getCmp('delConfirmZ').close();
                            Ext.Array.forEach(Ext.getCmp("adminFTDC").getComponent("contextBar").query("buttongroup"), function(btn){btn.disable();});
                            Ext.getCmp("boutonSupprimerTypeContenu").disable();
                            Ext.getCmp('champsEditionTC').removeAll();
                            Ext.getCmp('boiteConfigChampsTC').removeAll();
                            Ext.getCmp('tabPanTC').disable();
                            Ext.getCmp("TDCEditForm").getForm().reset();
                            Ext.getCmp("adminFTDC").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();
                            me.resetLayoutsInterfaceNoSelect();

                        }); 
                    }
                }
            });


        }

    },

    enregistrerTypeContenus: function(button, e, eOpts) {
        var me=this;
        var rec=Ext.getCmp("CTLayoutsGrid").getSelectionModel().getLastSelected();
        if (!Ext.isEmpty(rec)){
            rec.set("rows",me.saveLayout(Ext.getCmp("layoutEditionPanel")));
        }
        if (Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected() !== null){
            var fieldsR = Ext.getCmp('champsEditionTC').items.items;
            var champsR = [ ];
            for (u=0; u<fieldsR.length; u++) { 
                var leChampR= fieldsR[u].getComponent(1);
                var nch ={
                    cType: leChampR.xtype,
                    config: leChampR.config,
                    protoId:leChampR.protoId,
                    openWindow:leChampR.openWindow
                };
                if (leChampR.xtype== 'treepicker') {
                    nch.store=leChampR.getStore().storeId;
                }
                else if (leChampR.xtype== 'combobox') {
                    var dones = leChampR.getStore().data.items;
                    var donesR = [ ];
                    for (i=0; i<dones.length; i++) {
                        donesR.push({valeur: dones[i].data.valeur, nom: dones[i].data.nom });
                    }
                    nch.store = {
                        fields: ['valeur', 'nom'],
                        data: donesR
                    };
                }
                champsR.push(nch);
            }
            Ext.Ajax.request({
                url: 'content-types/is-changeable',
                params: {
                    fields:Ext.JSON.encode(champsR),
                    id: Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().get("id")
                },
                success: function(response){
                    var canModify = Ext.JSON.decode(response.responseText).modify;
                    if (canModify=="ok"){
                        var target = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected();
                        target.beginEdit();
                        target.set(Ext.getCmp("TDCEditForm").getForm().getValues());
                        target.set("champs", champsR);
                        target.set("layouts",Ext.Array.pluck(Ext.getStore("CTLayouts").getRange(),"data"));
                        try {Ext.getCmp("CTLDLSToolbar").persisti18n(target);} catch(err){console.log("failed i18n persist");}
                        var newVocabularies = Ext.getCmp('vocabulairesTypesContenusGrid').getSelectionModel().getSelection();
                        target.set("vocabularies", Ext.Array.pluck(Ext.Array.pluck(newVocabularies, "data"), "id"));
                        if ((target.get("dependant")===false)&&(ACL.interfaceRights["read.ui.dependantTypes"])) {
                            var newDepTypes = Ext.getCmp('TCImbriquesGrid').getSelectionModel().getSelection();        
                            target.set("dependantTypes", Ext.Array.pluck(Ext.Array.pluck(newDepTypes, "data"), "id"));

                        }
                        target.endEdit();
                    } else if (canModify=="no"){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeIncompatModifError);
                    } else if (canModify=="possible"){
                        Ext.Msg.confirm(Rubedo.RubedoAutomatedElementsLoc.warningTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeModifWarning ,function(anser){
                            if (anser=="yes"){
                                var target = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected();
                                target.beginEdit();
                                target.set(Ext.getCmp("TDCEditForm").getForm().getValues());
                                target.set("champs", champsR);
                                target.set("layouts",Ext.Array.pluck(Ext.getStore("CTLayouts").getRange(),"data"));
                                try {Ext.getCmp("CTLDLSToolbar").persisti18n(target);} catch(err){console.log("failed i18n persist");}
                                var newVocabularies = Ext.getCmp('vocabulairesTypesContenusGrid').getSelectionModel().getSelection();
                                target.set("vocabularies", Ext.Array.pluck(Ext.Array.pluck(newVocabularies, "data"), "id"));
                                if ((target.get("dependant")===false)&&(ACL.interfaceRights["read.ui.dependantTypes"])) {
                                    var newDepTypes = Ext.getCmp('TCImbriquesGrid').getSelectionModel().getSelection();        
                                    target.set("dependantTypes", Ext.Array.pluck(Ext.Array.pluck(newDepTypes, "data"), "id"));

                                }
                                target.endEdit();
                            }
                        }

                    );}}});

                }
    },

    fenetreNTC: function(button, e, eOpts) {
        var fenetre = Ext.widget('nouveauTypeContenu');
        Ext.getCmp("ViewportPrimaire").add(fenetre);
        fenetre.show();
    },

    creerNTC: function(button, e, eOpts) {
        var me=this;
        if (Ext.getCmp('champCreerTC').isValid()) {
            var nType = Ext.getCmp('champCreerTC').getValue();
            var nativeLanguage=Ext.getCmp("workingLanguageField").getValue();
            var i18n= { };
            i18n[nativeLanguage]={type:nType};
            var nouvType = Ext.create('model.typesContenusDataModel', {
                type: nType,
                code:nType.replace(/\W/g, ''),
                dependant: Ext.getCmp('champTCIsDep').getValue(),
                champs: [ ],
                vocabularies:["navigation"],
                dependantTypes:[ ],
                i18n:i18n,
                nativeLanguage:nativeLanguage
            });
            this.getTypesContenusDataJsonStore().add(nouvType);
            this.getTypesContenusDataJsonStore().addListener("datachanged",function(){
                Ext.getCmp('AdminfTypesGridView').getSelectionModel().select(nouvType);
                me.selectTC(Ext.getCmp('AdminfTypesGridView'), nouvType);
            },this,{single:true});
                Ext.getCmp('nouveauTypeContenuFenetre').close();

            }
    },

    selectionEvents: function(component, eOpts) {
        var me=this;
        if (!component.isXType("unBloc")){
            component.addBodyCls('contrastBorder');
            if (component.mType=="col"){
                component.addBodyCls('contrastRow');
            }
            component.getEl().on("mouseover", function(e){
                component.setBorder(4);
                e.stopEvent();
            });
            component.getEl().on("mouseout", function(e){
                component.setBorder(2);
                e.stopEvent();
            });
            component.getEl().on("click", function(e){
                Ext.getCmp("layoutElementIdField").setValue(component.getId());
                e.stopEvent();
            });
        } else {
            component.getEl().on("mouseover", function(e){
                var prevSelected = Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());
                if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {
                    component.setIconCls('selectBloc');
                }
                e.stopEvent();
            });
            component.getEl().on("mouseout", function(e){
                var prevSelected = Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());
                if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {
                component.setIconCls();}
                e.stopEvent();
            });
            component.getEl().on("click", function(e){
                Ext.getCmp("layoutElementIdField").setValue(component.getId());
                e.stopEvent();
            });
            component.header.add(Ext.widget("tool",{
                type:"close",
                handler:function(){
                    component.up().remove(component);
                    me.getFieldsListForLayout();
                }
            }));

        }
    },

    repliqueChamp: function(button, e, eOpts) {
        var nouvChamp=button.up().getComponent(1).cloneConfig();
        nouvChamp.anchor = '90%';
        nouvChamp.style = '{float:left;}';
        var enrobage =Ext.widget('ChampTC');
        enrobage.add(nouvChamp);
        enrobage.getComponent('helpBouton').setTooltip(Rubedo.RubedoAutomatedElementsLoc.duplicateFieldText+" "+button.up().getComponent(1).fieldLabel);
        var supprimeur = Ext.widget('button', {iconCls: 'close', margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.removeText, itemId: 'boutonEffaceurChamps'});
        supprimeur.on('click', function(){
            button.valeursM--;
            button.up().up().remove(supprimeur.up());
        });
        enrobage.add(supprimeur);
        button.up().up().insert(button.up().up().items.indexOf(button.up())+button.valeursM, enrobage);
        button.valeursM++;
    },

    TCfieldDelete: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());
        if (!Ext.isEmpty(field)) {
            field.up().destroy();
        }
    },

    TCfieldMoveUp: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().up().items.indexOf(field.up());
            if (pos > 0) {
                field.up().up().move(pos,pos-1);
            }
        }
    },

    TCfieldMoveDown: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().up().items.indexOf(field.up());
            field.up().up().move(pos,pos+1);
        }
    },

    createThroughDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getStore("AddMultiFieldStore").removeAll();
        this.creerChampTC(Ext.getCmp("boutonAjouterChampTC"));
    },

    copyTC: function(button, e, eOpts) {
        var rec = Ext.clone(Ext.getCmp("AdminfTypesGrid").getSelectionModel().getLastSelected().data);
        delete(rec.id);
        rec.type=rec.type+" - Copie du "+Ext.Date.format(new Date(), 'j F, Y, G:i');
        Ext.Object.each(rec.i18n, function(key, value, myself) {
            value.type=value.type+" - Copie du "+Ext.Date.format(new Date(), 'j F, Y, G:i');
        });
        rec.code=rec.type.replace(/\W/g, '');
        delete(rec.version);
        delete(rec.createTime);
        delete(rec.lastUpdateTime);
        Ext.getCmp("AdminfTypesGrid").getStore().add(rec);
    },

    onGridpanelEdit: function() {
        Ext.getStore("TypesContenusNDepDataJson").load();
    },

    onAdminfTypesGridRender: function(component, eOpts) {
        Ext.getStore("TypesContenusDepDataJson").load();
        Ext.getStore("TaxonomyForCT").load();
    },

    onAdminfTypesGridDestroy: function(component, eOpts) {
        Ext.getStore("TypesContenusDepDataJson").removeAll();
        Ext.getStore("TaxonomyForCT").removeAll();
    },

    onPurgeCTContentsBtnClick: function(button, e, eOpts) {
        var fenetre = Ext.widget('delConfirmZ');
        fenetre.show();
        Ext.getCmp('delConfirmZOui').on('click', function() { 
            var target = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected();
            button.setLoading(true);
            Ext.Ajax.request({
                url: 'contents/delete-by-content-type-id',
                method:"POST",
                params: {
                    "type-id": target.get("id")
                },
                success: function(response){
                    button.setLoading(false);

                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeHasBeenEmptiedText);
                },
                failure: function(response) {
                    button.setLoading(false);
                    var message = Rubedo.RubedoAutomatedElementsLoc.contentsDeleteError;
                    try {
                        var answer = Ext.JSON.decode(response.responseText);
                        if (answer.message){
                            message=answer.message;
                        }
                    } catch(err){}
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, message);
                    }
                });
                Ext.getCmp('delConfirmZ').close();

            }); 


    },

    onAddCTLayoutBtnClick: function(button, e, eOpts) {
        Ext.widget("NewCTLayoutWindow").show();
    },

    onRemoveCTLayoutBtnClick: function(button, e, eOpts) {
        Ext.getCmp("CTLayoutsGrid").getStore().remove(Ext.getCmp("CTLayoutsGrid").getSelectionModel().getLastSelected());
    },

    onNewCTLayoutWindowSubmitBtnClick: function(button, e, eOpts) {
        var form=button.up().getForm();
        if (form.isValid()){
            var obs=form.getValues();
            obs.rows=[ ];
            Ext.getStore("CTLayouts").add(obs);
            button.up().up().close();
        }
    },

    onCTLayoutsGridSelectionChange: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)){
            this.resetLayoutsInterfaceNoSelect();
        } else {
            this.resetLayoutsInterfaceSelect(selected[0]);
        }
    },

    onSaveCTLayoutBtnClick: function(button, e, eOpts) {
        var me=this;
        var rec=Ext.getCmp("CTLayoutsGrid").getSelectionModel().getLastSelected();
        rec.set("rows",me.saveLayout(Ext.getCmp("layoutEditionPanel")));
    },

    onLayoutEditionPanelAfterRender: function(component, eOpts) {
        component.setBorder(2);
        component.addBodyCls('contrastCBorder');
        component.getEl().on("mouseover", function(e){
            component.setBorder(4);
            e.stopEvent();
        });
        component.getEl().on("mouseout", function(e){
            component.setBorder(2);
            e.stopEvent();
        });
        component.getEl().on("click", function(e){
            Ext.getCmp("layoutElementIdField").setValue(component.getId());
            e.stopEvent();
        });
    },

    onLayoutElementIdFieldChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var newSelected=Ext.getCmp(newValue);
        Ext.Array.forEach(Ext.getCmp("layoutsEditToolbar").items.items,function(item){
            item.disable();
        });
        Ext.getCmp("layoutPropsPanel").removeAll();
        Ext.getCmp("layoutPropsPanel").setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);
        Ext.getCmp("layoutPropsPanel").setIconCls();
        Ext.getCmp("saveCTLayoutBtn").enable();
        if (!Ext.isEmpty(newSelected)){
            newSelected.getEl().frame(MyPrefData.themeColor);
            newSelected.addBodyCls('selectedelement');


            if (newSelected.getId()=="layoutEditionPanel"){
                Ext.getCmp("addRowToLayoutBtn").enable();
                Ext.getCmp("layoutPropsPanel").setTitle(Rubedo.RubedoAutomatedElementsLoc.rootText);
                Ext.getCmp("layoutPropsPanel").setIconCls('editZone');
                me.renderMainBoxTools(newSelected);
            } else if (newSelected.mType=="row"){
                Ext.getCmp("removeLayoutElementBtn").enable();
                Ext.getCmp("layoutPropsPanel").setTitle(Rubedo.RubedoAutomatedElementsLoc.lignText);
                Ext.getCmp("layoutPropsPanel").setIconCls('editZone');
                Ext.getCmp("moveLayoutItemUpBtn").enable();
                Ext.getCmp("moveLayoutItemDownBtn").enable();
                if (newSelected.getComponent("eol").flex>0){
                    Ext.getCmp("addColToLayoutBtn").enable();
                }
                me.renderRowTools(newSelected);
            } else if (newSelected.mType=="col"){
                Ext.getCmp("removeLayoutElementBtn").enable();
                if (!Ext.isEmpty(Ext.getStore("CTFieldsForLayouts").getRange())){
                    Ext.getCmp("assignFieldToColBtn").enable();
                }
                Ext.getCmp("layoutPropsPanel").setTitle(Rubedo.RubedoAutomatedElementsLoc.columnText);
                Ext.getCmp("layoutPropsPanel").setIconCls('editZone');
                me.renderColumnTools(newSelected);
            } else if (newSelected.isXType("unBloc")){
                Ext.getCmp("removeLayoutElementBtn").enable();
                newSelected.setIconCls('editBloc');
                newSelected.removeBodyCls('selectedelement');
                Ext.getCmp("moveLayoutItemUpBtn").enable();
                Ext.getCmp("moveLayoutItemDownBtn").enable();
                Ext.getCmp("layoutPropsPanel").setIconCls('editBloc');
                Ext.getCmp("layoutPropsPanel").setTitle(Rubedo.RubedoAutomatedElementsLoc.fieldText+" : "+newSelected.title);
                me.renderFieldTools(newSelected);

            }
        }



        var oldSelected=Ext.getCmp(oldValue);
        if (!Ext.isEmpty(oldSelected)){
            oldSelected.removeBodyCls('selectedelement');
            oldSelected.setIconCls();
        }
    },

    onAddRowToLayoutBtnClick: function(button, e, eOpts) {
        var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());
        var row = Ext.widget('panel', {
            header:false,
            mType:"row",
            flex:1,
            id:"CTLayout-"+Ext.id(),
            plugins:[Ext.create("Ext.ux.BoxReorderer")],
            elementStyle:"",
            responsive:{
                phone:true,
                tablet:true,
                desktop:true
            },
            margin:4,
            layout: {
                type: 'hbox',
                align: 'stretch'
            }
        });
        row.add(Ext.widget('container', {flex:12,reorderable:false,itemId:"eol"}));
        cible.insert(cible.items.items.length,row);
        Ext.getCmp('layoutElementIdField').setValue(row.getId());
    },

    onAddColToLayoutBtnClick: function(button, e, eOpts) {
        var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());
        var myEol=cible.getComponent('eol');

        if (myEol.flex>0) {
            var isFinalCol=true;
            var newCol=Ext.widget('panel', {
                header:false,
                flex:1,
                elementStyle:"",
                final:isFinalCol,
                id:"CTLayout-"+Ext.id(),
                plugins:[Ext.create("Ext.ux.BoxReorderer")],
                responsive:{
                    phone:true,
                    tablet:true,
                    desktop:true
                },
                mType:'col',
                margin:4,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                }
            });
            myEol.flex=myEol.flex-1;
            cible.insert(cible.items.items.length-1,newCol);
            if (myEol.flex===0){
                button.disable();
            }
            Ext.getCmp('layoutElementIdField').setValue(newCol.getId());
        }

    },

    onRemoveLayoutElementBtnClick: function(button, e, eOpts) {
        var me=this;
        var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());
        var recalc=false;
        if (cible.isXType("unBloc")){
            recalc=true;
        }
        if (cible.mType=="col"){
            var myEol=cible.up().getComponent("eol");
            var myOffset=cible.previousSibling();
            if (!Ext.isEmpty(myOffset)) {
                if ((myOffset.isXType("container"))&&(!(myOffset.isXType("panel")))) {
                    myEol.flex=myEol.flex+myOffset.flex;
                    myOffset.up().remove(myOffset);
                }
            }
            myEol.flex=myEol.flex+cible.flex;

        }
        cible.up().remove(cible);
        Ext.getCmp('layoutElementIdField').setValue(null);
        if (recalc){
            me.getFieldsListForLayout();
        }
    },

    onLayoutActivatorBtnClick: function(button, e, eOpts) {
        if (button.deactivateMode){
            Ext.getCmp("CTLayoutsGrid").getSelectionModel().getLastSelected().set("active",false);
            Ext.getCmp("layoutActivatorBtn").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);
            Ext.getCmp("layoutActivatorBtn").setIconCls("ouiS");
            Ext.getCmp("layoutActivatorBtn").deactivateMode=false;

        } else {
            var mySite=Ext.getCmp("CTLayoutsGrid").getSelectionModel().getLastSelected().get("site");
            Ext.Array.forEach(Ext.getCmp("CTLayoutsGrid").getStore().query("site",mySite).items,function(record){
                record.set("active",false);
            });
            Ext.getCmp("CTLayoutsGrid").getSelectionModel().getLastSelected().set("active",true);
            Ext.getCmp("layoutActivatorBtn").setText(Rubedo.RubedoAutomatedElementsLoc.deactivateText);
            Ext.getCmp("layoutActivatorBtn").setIconCls("nonS");
            Ext.getCmp("layoutActivatorBtn").deactivateMode=true;
        }
    },

    onAssignFieldToColBtnClick: function(button, e, eOpts) {
        Ext.widget("AssignFieldToColWindow").show();
    },

    onAssignFieldToLayoutSubmitBtnClick: function(button, e, eOpts) {
        var me=this;
        var form=button.up().getForm();
        if (form.isValid()){
            var name=form.getValues().field;
            var label=Ext.getStore("CTFieldsForLayouts").findRecord("name",name).get("label");
            var newField = Ext.widget('unBloc', {title:label,id:"CTLayout-"+Ext.id()});
            newField.responsive={
                "phone":true,
                "tablet":true,
                "desktop":true
            };
            newField.elementStyle="";
            newField.flex=1;
            newField.name=name;
            Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue()).add(newField);
            button.up().up().close();
            me.getFieldsListForLayout();
        }

    },

    onCTLayoutFieldInjectorGridItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var me=this;
        var target=Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());
        if ((!Ext.isEmpty(target))&&(target.mType=="col")){
            var name=record.get("name");
            var label=record.get("label");
            var newField = Ext.widget('unBloc', {title:label,id:"CTLayout-"+Ext.id()});
            newField.responsive={
                "phone":true,
                "tablet":true,
                "desktop":true
            };
            newField.elementStyle="";
            newField.flex=1;
            newField.name=name;
            target.add(newField);
            me.getFieldsListForLayout();
        }
    },

    onMoveLayoutItemUpBtnClick: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp("layoutElementIdField").getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().items.indexOf(field);
            if (pos > 0) {
                field.up().move(pos,pos-1);
            }
        }
    },

    onMoveLayoutItemDownBtnClick: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp("layoutElementIdField").getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().items.indexOf(field);
            field.up().move(pos,pos+1);
        }
    },

    onCTLayoutsGridBeforeSelect: function(rowmodel, record, index, eOpts) {
        var me=this;
        var rec=Ext.getCmp("CTLayoutsGrid").getSelectionModel().getLastSelected();
        if (!Ext.isEmpty(rec)){
            rec.set("rows",me.saveLayout(Ext.getCmp("layoutEditionPanel")));
        }
    },

    onCopyCTLayoutBtnClick: function(button, e, eOpts) {
        var target = Ext.getCmp('CTLayoutsGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(target)) {
            var fenetre = Ext.widget('CTLCopyWindow');
            fenetre.show();
            fenetre.getComponent(0).getComponent(0).setValue(target.get("name")+" - Copie du "+Ext.Date.format(new Date(), 'j F, Y, G:i'));
        }
    },

    onCTLCopyLSubitBtnClick: function(button, e, eOpts) {
        var form=button.up().getForm();
        if (form.isValid()){
            var data = Ext.getCmp('CTLayoutsGrid').getSelectionModel().getSelection()[0].getData();
            data.active=false;
            Ext.apply(data, form.getValues());
            Ext.getCmp('CTLayoutsGrid').getStore().add(data);
            button.up().up().close();
        }
    },

    onPanelActivate: function(component, eOpts) {
        Ext.getCmp("CTLayoutsBtnGr").show();
        Ext.getCmp("layoutsEditToolbar").show();
        Ext.getCmp("AdminfTypesGrid").collapse();
        if (!Ext.isEmpty(Ext.getCmp("CTLayoutsGrid").getSelectionModel().getLastSelected())){
            Rubedo.controller.TypesContenusController.prototype.getFieldsListForLayout();
        }
    },

    onPanelDeactivate: function(component, eOpts) {
        Ext.getCmp("CTLayoutsBtnGr").hide();
        Ext.getCmp("layoutsEditToolbar").hide();
        Ext.getCmp("AdminfTypesGrid").expand();
    },

    miseAPlatTaxo: function(cible, resultat) {
        var e=0;
        for (e=0; e<cible.length; e++) {
            resultat.push({terme: cible[e].text});
            this.miseAPlatTaxo(cible[e].children, resultat);
        }
    },

    nameValidator: function(name) {
        var usedNames=["text","summary"];
        Ext.Array.forEach(Ext.getCmp('champsEditionTC').query("field"), function(field){
            if ((field.getId()!=Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).getId())&&(field.up().isXType("ChampTC"))){
                Ext.Array.include(usedNames,field.name);
            }
        });
        if (Ext.Array.contains(usedNames,name)){
            return(Rubedo.RubedoAutomatedElementsLoc.fieldNameAlreadyUsedError);
        } else {
            return(true);
        }
    },

    nameAvailable: function(name) {
        var usedNames=["text","summary"];
        Ext.Array.forEach(Ext.getCmp('champsEditionTC').query("field"), function(field){
            Ext.Array.include(usedNames,field.name);
        });
        if (Ext.Array.contains(usedNames,name)){
            return(false);
        } else {
            return(true);
        }
    },

    resetLayoutsInterfaceSelect: function(record) {
        Ext.getCmp("RemoveCTLayoutBtn").enable();
        Ext.getCmp("copyCTLayoutBtn").enable();
        Ext.getCmp("layoutEditionPanel").removeAll();
        Ext.getCmp("layoutsEditToolbar").enable();
        this.restoreLayout(record.get("rows"),0,Ext.getCmp("layoutEditionPanel"));
        Ext.getCmp("layoutElementIdField").setValue(null);
        Ext.getCmp("layoutActivatorBtn").enable();
        if (record.get("active")){
            Ext.getCmp("layoutActivatorBtn").setText(Rubedo.RubedoAutomatedElementsLoc.deactivateText);
            Ext.getCmp("layoutActivatorBtn").setIconCls("nonS");
            Ext.getCmp("layoutActivatorBtn").deactivateMode=true;
        } else {
            Ext.getCmp("layoutActivatorBtn").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);
            Ext.getCmp("layoutActivatorBtn").setIconCls("ouiS");
            Ext.getCmp("layoutActivatorBtn").deactivateMode=false;
        }
        this.getFieldsListForLayout();
    },

    resetLayoutsInterfaceNoSelect: function() {
        Ext.getCmp("layoutEditionPanel").removeAll();
        Ext.getCmp("RemoveCTLayoutBtn").disable();
        Ext.getCmp("copyCTLayoutBtn").disable();
        Ext.getCmp("layoutsEditToolbar").disable();
        Ext.getCmp("layoutActivatorBtn").disable();
        Ext.getStore("CTFieldsForLayouts").removeAll();
        Ext.getCmp("layoutElementIdField").setValue(null);
        Ext.getCmp("layoutActivatorBtn").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);
        Ext.getCmp("layoutActivatorBtn").setIconCls("ouiS");
        Ext.getCmp("layoutActivatorBtn").deactivateMode=false;
    },

    getFieldsListForLayout: function() {
        var discoveredFields=[ ];
        var usedFields=Ext.Array.pluck(Ext.getCmp("layoutEditionPanel").query("unBloc"),"name");
        if (!Ext.Array.contains(usedFields,"text")){
            discoveredFields.push({name:"text",label:Rubedo.RubedoAutomatedElementsLoc.titleText});
        }
        if (!Ext.Array.contains(usedFields,"summary")){
            discoveredFields.push({name:"summary",label:Rubedo.RubedoAutomatedElementsLoc.summaryText});
        }
        Ext.Array.forEach(Ext.getCmp('champsEditionTC').query("ChampTC"), function(field){
            if (!Ext.Array.contains(usedFields,field.getComponent(1).name)){
                discoveredFields.push({name:field.getComponent(1).name, label:field.getComponent(1).fieldLabel});
            }
        });
        Ext.getStore("CTFieldsForLayouts").removeAll();
        Ext.getStore("CTFieldsForLayouts").add(discoveredFields);
    },

    saveLayout: function(startComp) {
        var me=this;
        var nRows=[ ];
        Ext.Array.forEach(startComp.items.items, function(row){
            var newCols = [ ];
            var offset=0;
            Ext.Array.forEach(row.items.items, function(col){
                if (col.isXType("panel")) {
                    var fields=[ ];
                    Ext.Array.forEach(col.items.items, function(field){
                        fields.push({
                            title:field.title,
                            responsive:field.responsive,
                            responsiveClass:me.deudceResposiveClass(field.responsive),
                            name:field.name,
                            elementStyle:field.elementStyle,
                            classHTML:field.classHTML,
                            flex:field.flex
                        });
                    });
                    newCols.push({
                        responsive:col.responsive,
                        responsiveClass:me.deudceResposiveClass(col.responsive),
                        classHTML:col.classHTML,
                        elementStyle:col.elementStyle,
                        span:col.flex,
                        mType:"col",
                        fields:fields,
                        offset:offset

                    });
                    offset=0;
                } else {offset=offset+col.flex;}

                });
                nRows.push({
                    elementStyle:row.elementStyle,
                    mType:"row",
                    responsive:row.responsive,
                    responsiveClass:me.deudceResposiveClass(row.responsive),
                    classHTML:row.classHTML,
                    columns: newCols

                });
            });
            return nRows;
    },

    renderRowTools: function(component) {
        var me=this;
        var configSpec = Ext.widget('ConfigSpecBloc');
        configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,
            anchor:"100%",
            labelWidth:60,
            margin:"0 0 10 0",
            vertical:true,
            columns:1,
            items: [
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}}
            ]

        }));
        configSpec.getComponent(1).add(Ext.widget('textfield',{
            itemId:"eClassHTMLField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.HTMLClassText,
            onChange:function(){
                if (this.isValid()){
                    component.classHTML=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.classHTML
        }));
        configSpec.getComponent(1).add(Ext.widget('textfield',{
            itemId:"eStyleField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.styleText,
            onChange:function(){
                if (this.isValid()){
                    component.elementStyle=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.elementStyle
        }));
        Ext.getCmp("layoutPropsPanel").add(configSpec);
    },

    renderFieldTools: function(component) {
        var me=this;
        var configSpec = Ext.widget('ConfigSpecBloc');
        configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,
            anchor:"100%",
            labelWidth:60,
            margin:"0 0 10 0",
            vertical:true,
            columns:1,
            items: [
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}}
            ]

        }));
        configSpec.getComponent(1).add(Ext.widget('textfield',{
            itemId:"eClassHTMLField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.HTMLClassText,
            onChange:function(){
                if (this.isValid()){
                    component.classHTML=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.classHTML
        }));
        configSpec.getComponent(1).add(Ext.widget('textfield',{
            itemId:"eStyleField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.styleText,
            onChange:function(){
                if (this.isValid()){
                    component.elementStyle=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.elementStyle
        }));
        Ext.getCmp("layoutPropsPanel").add(configSpec);
    },

    renderMainBoxTools: function(component) {

    },

    renderColumnTools: function(component) {
        var me=this;
        var configSpec = Ext.widget('ConfigSpecBloc');
        configSpec.getComponent(0).add(Ext.widget('displayfield',{
            value:"",
            labelWidth:180,
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.dbclickToAssignText


        }));
        configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,
            anchor:"100%",
            labelWidth:60,
            margin:"0 0 10 0",
            vertical:true,
            columns:1,
            items: [
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}}
            ]

        }));
        var offsetEdit=Ext.widget('numberfield',{
            itemId:"offsetEditor",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.offsetText,
            editable:false,
            labelWidth:60,
            allowDecimals:false,
            anchor:"100%",
            value:0,
            minValue:0
        });

        var spanEdit=Ext.widget('numberfield',{
            itemId:"spanEditor",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.spanText,
            labelWidth:60,
            editable:false,
            allowDecimals:false,
            anchor:"100%",
            value:component.flex,
            minValue:1
        });



        configSpec.getComponent(0).add(offsetEdit);
        configSpec.getComponent(0).add(spanEdit);
        me.applyConstrain(component,offsetEdit,spanEdit,false);
        offsetEdit.on("change",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});
        spanEdit.on("change",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});

        configSpec.getComponent(1).add(Ext.widget('textfield',{
            itemId:"eClassHTMLField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.HTMLClassText,
            onChange:function(){
                if (this.isValid()){
                    component.classHTML=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.classHTML
        }));
        configSpec.getComponent(1).add(Ext.widget('textfield',{
            itemId:"eStyleField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.styleText,
            onChange:function(){
                if (this.isValid()){
                    component.elementStyle=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.elementStyle
        }));
        Ext.getCmp("layoutPropsPanel").add(configSpec);
    },

    applyConstrain: function(target, offsetF, spanF, applyFirst) {
        var myEol=target.up().getComponent("eol");
        var myOffset=null;
        if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType("container"))&&(!(target.prev().isXType("panel")))) {
            myOffset=target.prev();
        }
        if (applyFirst) {
            myEol.flex=myEol.flex+target.flex-spanF.getValue();
            target.flex=spanF.getValue();
            spanF.setMaxValue(target.flex+myEol.flex);
            offsetF.setMaxValue(offsetF.getValue()+myEol.flex);
            target.up().doLayout();
            if (offsetF.getValue()>0){ 
                if (Ext.isEmpty(myOffset)) {
                    myOffset=Ext.widget("container",{flex:0,reorderable: false,style:"{background-image:url(resources/images/stripes.png);}"});
                    target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);


                } 
                myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                myOffset.flex=offsetF.getValue();
                offsetF.setMaxValue(myOffset.flex+myEol.flex);
                spanF.setMaxValue(spanF.getValue()+myEol.flex);
                target.up().doLayout();

            } else if((offsetF.getValue()===0)) {
                if (!Ext.isEmpty(myOffset)) {
                    myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                    myOffset.flex=offsetF.getValue();
                    offsetF.setMaxValue(myOffset.flex+myEol.flex);
                    spanF.setMaxValue(spanF.getValue()+myEol.flex);
                    myOffset.destroy();
                    target.up().doLayout();      
                } 

            }
        }
        else {
            if (Ext.isEmpty(myOffset)){
                offsetF.setValue(0);
                offsetF.setMaxValue(myEol.flex);
            }
            else {
                offsetF.setValue(myOffset.flex);
                offsetF.setMaxValue(myOffset.flex+myEol.flex); 
            }

            spanF.setValue(target.flex);
            spanF.setMaxValue(target.flex+myEol.flex);
        }
    },

    deudceResposiveClass: function(responsiveObj) {
        var responsiveArray=[ ];
        Ext.Object.each(responsiveObj, function(key, value, myself) {
            if (value===true){
                responsiveArray.push(key);
            }
        });
        if (responsiveArray.length==3){
            return("");
        } else if (responsiveArray.length==2){
            var hiddenArray=["tablet","desktop","phone"];
            var hiddenMedia=Ext.Array.difference(hiddenArray,responsiveArray);
            return("hidden-"+hiddenMedia[0]);
        } else if (responsiveArray.length==1){
            return("visible-"+responsiveArray[0]);
        } else {
            return("hidden");
        }
    },

    restoreLayout: function(mRows,its,cible) {
        var me=this;
        Ext.Array.forEach(mRows, function(row){
            var newRow = Ext.widget('panel', {
                header:false,
                mType:"row",
                plugins:[Ext.create("Ext.ux.BoxReorderer")],
                elementStyle:row.elementStyle,
                responsive:row.responsive,
                classHTML:row.classHTML,
                id:"CTLayout-"+Ext.id(),
                margin:4,
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                }
            });
            var rFlex=1;
            var eolWidth=12;
            Ext.Array.forEach(row.columns, function(column){
                if (column.offset>0) {
                    newRow.add(Ext.widget('container', {
                        flex:column.offset,
                        reorderable:false,
                        style:"{background-image:url(resources/images/stripes.png);}"
                    }));
                    eolWidth=eolWidth-column.offset;
                }
                var isFinalCol=false;
                if (its<=0){isFinalCol=true;}
                var newCol=Ext.widget('panel', {
                    header:false,
                    flex:column.span,
                    plugins:[Ext.create("Ext.ux.BoxReorderer")],
                    final:isFinalCol,
                    mType:'col',
                    id:"CTLayout-"+Ext.id(),
                    elementStyle:column.elementStyle,
                    responsive:column.responsive,
                    classHTML:column.classHTML,
                    margin:4,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    }
                });
                if ((its>0)&&(column.isTerminal===false)) {
                    rFlex=Ext.Array.max([rFlex,column.rows.length]);
                    me.masqueRestit(column.rows,its-1,newCol);    
                }

                eolWidth=eolWidth-column.span;
                Ext.Array.forEach(column.fields,function(field){
                    var cloned=Ext.clone(field);
                    cloned.id="CTLayout-"+Ext.id();
                    newCol.add(Ext.widget("unBloc",cloned));
                });
                newRow.add(newCol);

            });
            newRow.add(Ext.widget("container",{
                flex:eolWidth,
                reorderable:false,
                itemId:"eol"
            }));
            if (Ext.isEmpty(row.height)) {
                newRow.flex=rFlex;
            } else {
                newRow.height=row.height;
            }
            cible.add(newRow);  
        });
    },

    init: function(application) {
        this.control({
            "#boutonAjouterContenu": {
                click: this.ajouterContenu
            },
            "#boutonOuvrirFenetreTC": {
                click: this.ouvrirFenetreTC
            },
            "#boutonAjouterChampTC": {
                click: this.creerChampTC
            },
            "#champsEditionTC ChampTC": {
                afterrender: this.selectChampTC,
                beforedestroy: this.enleveChampTC
            },
            "#ChampTCSelectGrid": {
                itemclick: this.updateOptionsListeTC,
                itemdblclick: this.createThroughDblClick
            },
            "#AdminfTypesGrid": {
                select: this.selectTC,
                edit: this.onGridpanelEdit,
                render: this.onAdminfTypesGridRender,
                destroy: this.onAdminfTypesGridDestroy
            },
            "#boutonSupprimerTypeContenu": {
                click: this.supprimeTypeContenu
            },
            "#boutonEnregistrerTypeContenu": {
                click: this.enregistrerTypeContenus
            },
            "#boutonNouveauTypeContenu": {
                click: this.fenetreNTC
            },
            "#boutonCreerTC": {
                click: this.creerNTC
            },
            "#layoutEditionPanel panel": {
                afterrender: this.selectionEvents
            },
            "[itemId= 'boutonReplicateurChamps']": {
                click: this.repliqueChamp
            },
            "#TCfieldDeleter": {
                click: this.TCfieldDelete
            },
            "#TCfieldUp": {
                click: this.TCfieldMoveUp
            },
            "#TCfieldDown": {
                click: this.TCfieldMoveDown
            },
            "#boutonCopierTC": {
                click: this.copyTC
            },
            "#purgeCTContentsBtn": {
                click: this.onPurgeCTContentsBtnClick
            },
            "#addCTLayoutBtn": {
                click: this.onAddCTLayoutBtnClick
            },
            "#RemoveCTLayoutBtn": {
                click: this.onRemoveCTLayoutBtnClick
            },
            "#NewCTLayoutWindowSubmitBtn": {
                click: this.onNewCTLayoutWindowSubmitBtnClick
            },
            "#CTLayoutsGrid": {
                selectionchange: this.onCTLayoutsGridSelectionChange,
                beforeselect: this.onCTLayoutsGridBeforeSelect
            },
            "#saveCTLayoutBtn": {
                click: this.onSaveCTLayoutBtnClick
            },
            "#layoutEditionPanel": {
                afterrender: this.onLayoutEditionPanelAfterRender
            },
            "#layoutElementIdField": {
                change: this.onLayoutElementIdFieldChange
            },
            "#addRowToLayoutBtn": {
                click: this.onAddRowToLayoutBtnClick
            },
            "#addColToLayoutBtn": {
                click: this.onAddColToLayoutBtnClick
            },
            "#removeLayoutElementBtn": {
                click: this.onRemoveLayoutElementBtnClick
            },
            "#layoutActivatorBtn": {
                click: this.onLayoutActivatorBtnClick
            },
            "#assignFieldToColBtn": {
                click: this.onAssignFieldToColBtnClick
            },
            "#assignFieldToLayoutSubmitBtn": {
                click: this.onAssignFieldToLayoutSubmitBtnClick
            },
            "#CTLayoutFieldInjectorGrid": {
                itemdblclick: this.onCTLayoutFieldInjectorGridItemDblClick
            },
            "#moveLayoutItemUpBtn": {
                click: this.onMoveLayoutItemUpBtnClick
            },
            "#moveLayoutItemDownBtn": {
                click: this.onMoveLayoutItemDownBtnClick
            },
            "#copyCTLayoutBtn": {
                click: this.onCopyCTLayoutBtnClick
            },
            "#CTLCopyLSubitBtn": {
                click: this.onCTLCopyLSubitBtnClick
            },
            "#CTLayoutMainTab": {
                activate: this.onPanelActivate,
                deactivate: this.onPanelDeactivate
            }
        });
    }

});
