/*
 * File: app/controller/MasqueController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.MasqueController', {
    extend: 'Ext.app.Controller',

    models: [
        'masquesDataModel'
    ],
    stores: [
        'VersionsDataJson',
        'MasquesDataJson'
    ],
    views: [
        'nouveauMasque',
        'ImportationMasques',
        'copierMasque',
        'UnBloc',
        'ConfigSpecBloc',
        'ajoutBlocFenetre',
        'DelConfirmZ'
    ],

    refs: [
        {
            ref: 'MasqueEdition',
            selector: '#masqueEdition'
        }
    ],

    deleteMask: function(button, e, eOpts) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            Ext.Ajax.request({
                url: 'masks/is-used',
                params: {
                    id: cible.get("id")
                },
                success: function(response){
                    var maskIsUsed=Ext.JSON.decode(response.responseText).used;
                    if (maskIsUsed){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.maskIsUsedText);
                    } else {
                        var fenetre = Ext.widget('delConfirmZ');
                        fenetre.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisMaskText;
                        fenetre.show();
                        Ext.getCmp('delConfirmZOui').on('click', function() {
                            Ext.getCmp('masquesGrid').getStore().remove(cible);
                            Ext.getCmp('masqueEdition').removeAll();
                            Ext.getCmp('masqueEdition').pageProperties={ };
                            Ext.getCmp("newRow").disable();
                            Ext.getCmp("newCol").disable();
                            Ext.getCmp("newBloc").disable();
                            Ext.getCmp("deleteElement").disable();
                            Ext.getCmp('elementEditControl').setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);
                            Ext.getCmp('elementEditControl').removeAll();
                            Ext.getCmp('elementEditControl').setIconCls();
                            Ext.getCmp('elementIdField').setValue(null);
                            Ext.getCmp('delConfirmZ').close();
                            Ext.Array.forEach(Ext.getCmp("adminFMDP").getComponent("contextBar").query("buttongroup"), function(btn){btn.disable();});
                            Ext.getCmp("boutonSupprimerMasque").disable();
                            Ext.getCmp("adminFMDP").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();
                        });
                    }
                }
            });
        }
    },

    masquesDisplay: function(rowmodel, record, index, eOpts) {
        var dataview = Ext.getCmp("masquesGrid");
        var boiteMeta = dataview.findParentByType('window').getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        var valeurs= Ext.clone(record.data);
        valeurs.creation= Ext.Date.format(valeurs.createTime, Ext.Date.defaultFormat);
        valeurs.derniereModification= Ext.Date.format(valeurs.lastUpdateTime, Ext.Date.defaultFormat);
        valeurs.autore=valeurs.createUser.fullName;
        boiteMeta.update(valeurs);
        boiteMeta.show();

        var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.text);}
        else { typeFil= Ext.widget('button',{iconCls: "masque-icon", text:record.data.text, itemId:'type'});
        filArianne.add(typeFil);
        }
        var masque = record.data;
        var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        if (!Ext.isEmpty(prevSelected)) {
        prevSelected.removeBodyCls('selectedelement');
        }
        var newPageProperties=Ext.clone(record.get("pageProperties"));
        if (Ext.isEmpty(newPageProperties)){
            newPageProperties={ };
        }
        this.getMasqueEdition().pageProperties=newPageProperties;
        Ext.suspendLayouts();
        this.getMasqueEdition().removeAll();
        this.masqueRestit(Ext.clone(masque.rows),1,this.getMasqueEdition());
        this.restoreBlocks(Ext.clone(masque.blocks));
        Ext.resumeLayouts();

        Ext.getCmp("newRow").disable();
        Ext.getCmp("newCol").disable();
        Ext.getCmp("newBloc").disable();
        Ext.getCmp("importElement").disable();
        Ext.getCmp("exportElement").disable();
        Ext.getCmp("deleteElement").disable();
        Ext.getCmp("moveElementUp").disable();
        Ext.getCmp("moveElementDown").disable();
        Ext.getCmp('elementEditControl').setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);
        Ext.getCmp('elementEditControl').removeAll();
        Ext.getCmp('elementEditControl').setIconCls();
        Ext.getCmp('elementIdField').setValue(null);
        Ext.getCmp("boutonSupprimerMasque").enable();
        Ext.getCmp("AdminfMasquesEnregistrer").enable();
        Ext.Array.forEach(Ext.getCmp("adminFMDP").getComponent("contextBar").query("buttongroup"), function(btn){btn.enable();});
        Ext.getCmp("mainColumnIdField").setValue(Ext.clone(record.get("mainColumnId")));
        if (record.get("readOnly")){
        Ext.getCmp("masksEditionTopBarBox").disable();
        Ext.getCmp("boutonSupprimerMasque").disable();
        Ext.getCmp("AdminfMasquesEnregistrer").disable();
        }
    },

    reusablesGridSelect: function(rowmodel, record, index, eOpts) {
        Ext.getCmp("reusableelementDescription").update(record.data);
        Ext.getCmp("resusableElementsDeleteBtn").enable();
        var go =true;
        var target=Ext.getCmp("ReusableElementPicker").insTar;

        if (record.get("mType")==target.mType) {go=false;}

        else if ((target.mType=="row")&&(Ext.getCmp(target.id).getComponent("eol").flex===0)) {go=false;}
        else if ((target.mType=="row")&&(record.get("mType")=="col")&&(record.get("mCode").span>Ext.getCmp(target.id).getComponent("eol").flex)) {go=false;}

        else if ((record.get("mType")=="row")&&(target.mType=="bloc")) {go=false;}
        else if ((record.get("mType")!="row")&&(target.id=="masqueEdition")) {go=false;}
        else if ((record.get("mType")!="bloc")&&(target.level==4)) {go=false;}
        else if((record.get("mType")=="bloc")&&(!Ext.isEmpty(target.mCode.rows))) {go=false;}
        else if((target.id!="masqueEdition")&&(record.get("mType")=="row")&&(!Ext.isEmpty(target.mCode.bloc))) {go=false;}



        if (go) {Ext.getCmp("REAddButton").enable(); } else {Ext.getCmp("REAddButton").disable(); }
    },

    onTreepanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var cible = Ext.getCmp('arborescenceSites').getSelectionModel().getSelection()[0];
        this.getMasqueEdition().removeAll();
        this.getMasqueEdition().setWidth(cible.data.largeur);
        this.masqueRestit(cible.raw.zones);
    },

    copyMaskWindow: function(button, e, eOpts) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('copierMasque');
            fenetre.showAt(screen.width/2-150, 100);
            Ext.getCmp('copierMasqueTitre').setValue(cible.data.text+" - Copie du "+Ext.Date.format(new Date(), 'j F, Y, G:i'));
        }
    },

    newMaskWindow: function(button, e, eOpts) {
        var fenetre = Ext.widget('nouveauMasque');
        fenetre.show();
    },

    createMask: function(button, e, eOpts) {
        if ((Ext.getCmp('nouveauMasqueTitre').isValid())&&(Ext.getCmp('nouveauMasqueSite').isValid())) {

            var nTitre = Ext.getCmp('nouveauMasqueTitre').getValue();
            var nSite = Ext.getCmp('nouveauMasqueSite').getValue();
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                rows: [ ],
                blocks:[ ]
            });
            this.getMasquesDataJsonStore().add(nouvMasque);
            this.getMasquesDataJsonStore().addListener("datachanged",function(){Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);},this,{single:true});

            Ext.getCmp('nouveauMasqueFenetre').close();
            this.masquesDisplay(Ext.getCmp('masquesGridView'),nouvMasque);

        }
    },

    maskSave: function(button, e, eOpts) {
        var me =this;
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            Ext.Ajax.request({
                url: 'masks/is-used',
                params: {
                    id: cible.get("id")
                },
                success: function(response){
                    var maskIsUsed=Ext.JSON.decode(response.responseText).used;
                    if (maskIsUsed){
                        var chooser = Ext.widget("maskSaveChoiceBox");
                        chooser.getComponent(0).on("click", function(){
                            cible.beginEdit();
                            cible.set("rows",me.saveRows(me.getMasqueEdition()));
                            cible.set("blocks",me.saveBlocks(me.getMasqueEdition()));
                            cible.set("pageProperties",Ext.clone(Ext.getCmp('masqueEdition').pageProperties));
                            cible.set("mainColumnId",Ext.clone(Ext.getCmp("mainColumnIdField").getValue()));
                            cible.endEdit();
                            chooser.close();
                        });
                        chooser.getComponent(1).on("click", function(){
                            var nouvMasque = Ext.create('model.masquesDataModel', {
                                text: cible.data.text+" - Copie du "+Ext.Date.format(new Date(), 'j F, Y, G:i'),
                                site: cible.get("site")

                            });
                            var nBlocks=me.saveBlocks(me.getMasqueEdition());
                            Ext.Array.forEach(nBlocks, function(block){
                                block.id=Ext.id();
                            });
                            nouvMasque.set("rows",me.saveRows(me.getMasqueEdition()));
                            nouvMasque.set("blocks",nBlocks);
                            nouvMasque.set("pageProperties",Ext.clone(Ext.getCmp('masqueEdition').pageProperties));
                            nouvMasque.set("mainColumnId",Ext.clone(Ext.getCmp("mainColumnIdField").getValue()));
                            me.getMasquesDataJsonStore().add(nouvMasque);
                            me.getMasquesDataJsonStore().addListener("datachanged",function(){Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);},this,{single:true});
                            chooser.close();
                        });
                        chooser.show();
                    } else {
                        cible.beginEdit();
                        cible.set("rows",me.saveRows(me.getMasqueEdition()));
                        cible.set("blocks",me.saveBlocks(me.getMasqueEdition()));
                        cible.set("pageProperties",Ext.clone(Ext.getCmp('masqueEdition').pageProperties));
                        cible.set("mainColumnId",Ext.clone(Ext.getCmp("mainColumnIdField").getValue()));
                        cible.endEdit();
                    }
                }
            });


        }

    },

    copyMask: function(button, e, eOpts) {
        if ((Ext.getCmp('copierMasqueTitre').isValid())&&(Ext.getCmp('copierMasqueSite').isValid())) {
            var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
            var nTitre = Ext.getCmp('copierMasqueTitre').getValue();
            var nSite = Ext.getCmp('copierMasqueSite').getValue();
            var nRows = Ext.clone(cible.data.rows);
            var nBlocks=Ext.clone(cible.data.blocks);
            Ext.Array.forEach(nBlocks, function(block){
                block.id=Ext.id();
            });
            var nProperties=Ext.clone(cible.data.pageProperties);
            var nMainColumnId=Ext.clone(cible.data.mainColumnId);
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                rows: nRows,
                blocks:nBlocks,
                pageProperties:nProperties,
                mainColumnId:nMainColumnId

            });
            this.getMasquesDataJsonStore().add(nouvMasque);
            this.getMasquesDataJsonStore().addListener("datachanged",function(){Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);},this,{single:true});

            Ext.getCmp('copieMasqueFenetre').close();
        }
    },

    importMaskWindow: function(button, e, eOpts) {
        var fenetre = Ext.widget('importationMasques');
        fenetre.showAt(screen.width/2-150, 100);

    },

    selectionEvents: function(component, eOpts) {
        var me=this;

        if (!component.isXType("unBloc")){
            component.addBodyCls('contrastBorder');
            if (component.mType=="col"){
                component.addBodyCls('contrastRow');
            }
            component.getEl().on("mouseover", function(e){
                component.setBorder(4);
                e.stopEvent();
            });
            component.getEl().on("mouseout", function(e){
                component.setBorder(2);
                e.stopEvent();
            });
            component.getEl().on("click", function(e){
                e.stopEvent();
                var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
                if (!Ext.isEmpty(prevSelected)) {
                    if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
                        prevSelected.removeBodyCls('selectedelement');}
                }
                component.addBodyCls('selectedelement');
                this.frame(MyPrefData.themeColor);
                Ext.getCmp('elementIdField').setValue(component.id);
                Ext.getCmp('deleteElement').enable();
                Ext.getCmp("importElement").enable();
                Ext.getCmp("exportElement").enable();
                var propEdit=Ext.getCmp('elementEditControl');
                if (component.mType=="col"){
                    propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.columnText);
                } else {
                    propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.lignText);
                }
                propEdit.setIconCls('editZone');


                propEdit.removeAll();
                var configSpec = Ext.widget('ConfigSpecBloc');


                configSpec.getComponent(0).add(Ext.widget('genericLocTextField',{
                    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.titleText,
                    labelWidth:60,
                    anchor:"100%",
                    margin:"10 0 10 0",
                    targetEntity:component.getId(),
                    targetEntityProp:"eTitle",
                    initialLanguage:Ext.getCmp("workingLanguageField").getValue()
                }));
                configSpec.getComponent(0).add(Ext.widget('checkbox',{
                    itemId:"eTitleShowField",
                    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayTitleText,
                    onChange:function(){

                        component.displayTitle=this.getValue();

                    },
                    labelWidth:60,
                    inputValue:true,
                    anchor:"100%",
                    margin:"10 0 10 0",
                    checked:component.displayTitle
                }));

                configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
                    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,
                    anchor:"100%",
                    labelWidth:60,
                    margin:"0 0 10 0",
                    vertical:true,
                    columns:1,
                    items: [
                        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },
                        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},
                        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}},
                        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}

                    ]

                }));

                if (component.mType=="row"){
                    Ext.getCmp("moveElementUp").enable();
                    Ext.getCmp("moveElementDown").enable();
                    Ext.getCmp('newRow').disable();
                    Ext.getCmp("newBloc").disable();
                    if (component.getComponent("eol").flex===0){
                        Ext.getCmp('newCol').disable();
                    } else {
                        Ext.getCmp('newCol').enable();
                    }

                    configSpec.getComponent(1).add(Ext.create('Rubedo.view.ACEField',{
                        fieldLabel:Rubedo.RubedoAutomatedElementsLoc.customTemplateText,
                        onChange:function(){

                            component.customTemplate=this.getValue();

                        },
                        labelWidth:60,
                        anchor:"100%",
                        margin:"10 0 10 0",
                        twigMode:false,
                        defaultTemplateUrl:"row.html",
                        value:component.customTemplate
                    }));
                    configSpec.getComponent(1).add(Ext.widget('textfield',{
            fieldLabel:"Code",
            onChange:function(){
                if (this.isValid()){
                    component.code=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.code
        }));


                }

                else if (component.mType=="col"){
                    Ext.getCmp("moveElementUp").disable();
                    Ext.getCmp("moveElementDown").disable();
                    if ((component.final)){
                        Ext.getCmp('newRow').disable();} else if ((Ext.isDefined(component.items.items[0]))&&(component.items.items[0].isXType("unBloc"))) {
                            Ext.getCmp('newRow').disable();
                        }else {
                            Ext.getCmp('newRow').enable();
                        }

                    Ext.getCmp('newCol').disable();
                    if ((Ext.isEmpty(component.items.items))||(component.items.items[0].isXType("unBloc"))){
                        Ext.getCmp("newBloc").enable();} else {Ext.getCmp("newBloc").disable();}

                    configSpec.getComponent(0).insert(2,Ext.widget('checkbox',{
                        itemId:"eMainColField",
                        fieldLabel:Rubedo.RubedoAutomatedElementsLoc.mainColumnText,
                        onChange:function(){
                            if (this.getValue()){
                                Ext.getCmp("mainColumnIdField").setValue(component.getId());
                            } else {
                                Ext.getCmp("mainColumnIdField").setValue(null);
                            }


                        },
                        labelWidth:60,
                        RTip:Rubedo.RubedoAutomatedElementsLoc.mainColumnRTip,
                        inputValue:true,
                        anchor:"100%",
                        margin:"10 0 10 0",
                        checked:(component.getId()==Ext.getCmp("mainColumnIdField").getValue())
                    }));


                    var offsetEdit=Ext.widget('numberfield',{
                        itemId:"offsetEditor",
                        fieldLabel:Rubedo.RubedoAutomatedElementsLoc.offsetText,
                        editable:false,
                        labelWidth:60,
                        allowDecimals:false,
                        anchor:"50%",
                        margin:"10 0 0 0",
                        style:"{float:left;}",
                        value:0,
                        minValue:0
                    });

                    var spanEdit=Ext.widget('numberfield',{
                        itemId:"spanEditor",
                        fieldLabel:Rubedo.RubedoAutomatedElementsLoc.spanText,
                        labelWidth:60,
                        editable:false,
                        allowDecimals:false,
                        anchor:"50%",
                        margin:"10 0 0 10",
                        style:"{float:right;}",
                        value:component.flex,
                        minValue:1
                    });

                    var stackThreshold=Ext.widget('combobox',{
                        itemId:"stackThreshold",
                        fieldLabel:Rubedo.RubedoAutomatedElementsLoc.stackingThresholdText,
                        labelWidth:60,
                        editable:false,
                        forceSelect:true,
                        anchor:"100%",
                        value:component.stackThreshold ? component.stackThreshold : "sm",
                        onChange:function(){

                            component.stackThreshold=this.getValue();

                        },
                        queryMode:"local",
                        store:[
                            ["xs",Rubedo.RubedoAutomatedElementsLoc.neverText],
                            ["sm",Rubedo.RubedoAutomatedElementsLoc.telephoneText],
                            ["md",Rubedo.RubedoAutomatedElementsLoc.tabletText],
                            ["lg",Rubedo.RubedoAutomatedElementsLoc.computerText]
                        ]
                    });

                    configSpec.getComponent(1).add(Ext.create('Rubedo.view.ACEField',{
                        fieldLabel:Rubedo.RubedoAutomatedElementsLoc.customTemplateText,
                        onChange:function(){

                            component.customTemplate=this.getValue();

                        },
                        labelWidth:60,
                        anchor:"100%",
                        margin:"10 0 10 0",
                        twigMode:false,
                        defaultTemplateUrl:"column.html",
                        value:component.customTemplate
                    }));

                    configSpec.getComponent(1).add(Ext.widget('textfield',{
            fieldLabel:"Code",
            onChange:function(){
                if (this.isValid()){
                    component.code=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.code
        }));



                    configSpec.getComponent(0).add(offsetEdit);
                    configSpec.getComponent(0).add(spanEdit);
                    me.applyConstrain(component,offsetEdit,spanEdit,false);
                    configSpec.getComponent(0).add(stackThreshold);
                    offsetEdit.on("change",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});
                    spanEdit.on("change",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});





                }
                propEdit.add(configSpec);
                if ((!ACL.interfaceRights['write.ui.masks'])||(Ext.getCmp("masquesGrid").getSelectionModel().getLastSelected().get("readOnly"))){
                    Ext.Array.forEach(Ext.getCmp("elementEditControl").query("field"), function(truc){truc.setReadOnly(true);});
                    Ext.Array.forEach(Ext.getCmp("elementEditControl").query("button"), function(truc){if (!truc.isXType("tab")){truc.disable();}});
                }

            });}
    },

    deleteMaskElement: function(button, e, eOpts) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        if (cible.mType=="col"){
            var myEol=cible.up().getComponent("eol");
            var myOffset=cible.previousSibling();
            if (!Ext.isEmpty(myOffset)) {
                if ((myOffset.isXType("container"))&&(!(myOffset.isXType("panel")))) {
                    myEol.flex=myEol.flex+myOffset.flex;
                    myOffset.up().remove(myOffset);
                }
            }
            myEol.flex=myEol.flex+cible.flex;

        }
        cible.up().remove(cible);
        Ext.getCmp("newRow").disable();
        Ext.getCmp("newCol").disable();
        Ext.getCmp("newBloc").disable();
        Ext.getCmp("importElement").disable();
        Ext.getCmp("exportElement").disable();
        Ext.getCmp("deleteElement").disable();
        Ext.getCmp("moveElementUp").disable();
        Ext.getCmp("moveElementDown").disable();
        Ext.getCmp('elementEditControl').setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);
        Ext.getCmp('elementEditControl').removeAll();
        Ext.getCmp('elementEditControl').setIconCls();
        Ext.getCmp('elementIdField').setValue(null);

    },

    addCol: function(button, e, eOpts) {
        var me=this;
        Ext.Ajax.request({
            url: 'xhr-get-mongo-id',
            params: { },
            success: function(response){
                var servedId = Ext.JSON.decode(response.responseText).mongoID;

                var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
                var myEol=cible.getComponent('eol');

                if (myEol.flex>0) {
                    var isFinalCol=false;
                    if (cible.up().mType=="col"){
                        isFinalCol=true;
                    }
                    var newCol=Ext.widget('panel', {
                        header:false,
                        flex:1,
                        final:isFinalCol,
                        plugins:[Ext.create("Ext.ux.BoxReorderer")],
                        id:servedId,
                        eTitle:Rubedo.RubedoAutomatedElementsLoc.titleText,
                        responsive:{
                            phone:true,
                            tablet:true,
                            desktop:true,
                            largeDesktop:true
                        },
                        mType:'col',
                        stackThreshold:"sm",
                        margin:4,
                        layout: {
                            type: 'vbox',
                            align: 'stretch'
                        }
                    });
                    newCol.plugins[0].on("Drop",function(){
                        me.recalculateBlockOrder(newCol);
                    });
                    myEol.flex=myEol.flex-1;
                    cible.insert(cible.items.items.length-1,newCol);
                    if (myEol.flex===0){
                        button.disable();
                    }

                }
                newCol.getEl().dom.click();


            },
            failure: function(){
                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.columnIdRecoveryError);

            }
        });



    },

    addRow: function(button, e, eOpts) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var row = Ext.widget('panel', {
            header:false,
            mType:"row",
            flex:1,
            plugins:[Ext.create("Ext.ux.BoxReorderer")],
            eTitle:Rubedo.RubedoAutomatedElementsLoc.titleText,
            responsive:{
                phone:true,
                tablet:true,
                desktop:true,
                largeDesktop:true
            },
            margin:4,
            layout: {
                type: 'hbox',
                align: 'stretch'
            }
        });
        row.add(Ext.widget('container', {flex:12,itemId:"eol", reorderable:false}));
        cible.insert(cible.items.items.length,row);
        Ext.getCmp("newBloc").disable();
        row.getEl().dom.click();
    },

    showBlocWindow: function(button, e, eOpts) {
        var blocWin = Ext.widget('ajoutBlocFenetre');
        blocWin.showAt(screen.width/2-250, 100);
    },

    importElement: function(button, e, eOpts) {
        var target=button.up().up().up().insTar;
        var child=Ext.clone(Ext.getCmp("ReusableElementsGrid").getSelectionModel().getLastSelected().get("mCode"));
        var cBlocks=Ext.clone(Ext.getCmp("ReusableElementsGrid").getSelectionModel().getLastSelected().get("mBlocks"));
        Ext.Array.forEach(cBlocks,function(someBlock){
            someBlock.id=undefined;
        });
        if (!Ext.isEmpty(child)){
            this.removeIds(child,cBlocks);
        }
        var maskRows = this.saveRows(this.getMasqueEdition());
        var maskBlocks= this.saveBlocks(this.getMasqueEdition());
        if (!Ext.isEmpty(child)){
            if (target.id=="masqueEdition") {
                maskRows.push(child);
            } else {
                this.spliceMask(maskRows,target.id,child,true);
            }
        } else if (!Ext.isEmpty(cBlocks)){
            Ext.Array.forEach(cBlocks,function(someBlock){
                someBlock.parentCol=target.id;
            });
        }
        this.getMasqueEdition().removeAll();
        this.masqueRestit(maskRows,1,this.getMasqueEdition());
        var newBlocks=Ext.Array.merge(maskBlocks, cBlocks);
        this.restoreBlocks(newBlocks);
        button.up().up().up().close();
    },

    addBloc: function(button, e, eOpts) {
        var donnees = Ext.getCmp('BlocsSelectGrid').getSelectionModel().getLastSelected().data;
        var configurator = Ext.clone(donnees.configBasique);
        if (Ext.isEmpty(configurator.configBloc)){
            configurator.configBloc={ };
        }
        delete configurator.champsConfig;
        var nouvBloc = Ext.widget('unBloc', configurator);
        nouvBloc.responsive={
            "phone":true,
            "tablet":true,
            "desktop":true,
            "largeDesktop":true
        };
        nouvBloc.flex=1;

        var target = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var orderValue = 100;
        if (!Ext.isEmpty(target.items.items)) {
            orderValue=target.items.items[target.items.items.length-1].orderValue+100;
        }
        nouvBloc.orderValue=orderValue;
        target.add(nouvBloc);
        button.up().up().close();
        Ext.getCmp('newRow').disable();
        nouvBloc.getEl().dom.click();
    },

    mainBoxSelect: function(component, eOpts) {
        component.setBorder(2);
        component.addBodyCls('contrastCBorder');
        component.getEl().on("mouseover", function(e){
            component.setBorder(4);
            e.stopEvent();
        });
        component.getEl().on("mouseout", function(e){
            component.setBorder(2);
            e.stopEvent();
        });
        component.getEl().on("click", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if (!Ext.isEmpty(prevSelected)) {
                if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
                    prevSelected.removeBodyCls('selectedelement');}
            }
            component.addBodyCls('selectedelement');
            this.frame(MyPrefData.themeColor);
            Ext.getCmp('elementIdField').setValue(component.id);
            Ext.getCmp('deleteElement').disable();
            Ext.getCmp('newCol').disable();
            Ext.getCmp('newBloc').disable();
            Ext.getCmp('newRow').enable();
            Ext.getCmp("moveElementUp").disable();
            Ext.getCmp("moveElementDown").disable();
            Ext.getCmp("importElement").enable();
            Ext.getCmp("exportElement").disable();
            var propEdit=Ext.getCmp('elementEditControl');
            propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.rootText);
            propEdit.setIconCls('editZone');
            propEdit.removeAll();
            var configSpec = Ext.widget('ConfigSpecBloc');
            /*configSpec.getComponent(1).add(Ext.widget('checkbox',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayInADivText,
            onChange:function(){

                component.pageProperties.showInDiv=this.getValue();

            },
            labelWidth:60,
            inputValue:true,
            anchor:"100%",
            margin:"10 0 10 0",
            checked:component.pageProperties.showInDiv
        }));*/
            configSpec.getComponent(1).add(Ext.create('Rubedo.view.ACEField',{
                fieldLabel:"Custom template",
                onChange:function(){

                    component.pageProperties.customTemplate=this.getValue();

                },
                labelWidth:60,
                anchor:"100%",
                margin:"10 0 10 0",
                twigMode:false,
                defaultTemplateUrl:"defaultPageBody.html",
                value:component.pageProperties.customTemplate
            }));
            configSpec.getComponent(0).add(Ext.create('Rubedo.view.ACEField',{
                fieldLabel:"UX Instructions",
                onChange:function(){

                    component.pageProperties.UXInstructions=this.getValue();

                },
                labelWidth:60,
                anchor:"100%",
                margin:"10 0 10 0",
                twigMode:false,
                textMode:true,
                value:component.pageProperties.UXInstructions
            }));
            configSpec.getComponent(1).add(Ext.widget('textfield',{
                fieldLabel:"Code",
                onChange:function(){
                    if (this.isValid()){
                        component.pageProperties.code=this.getValue();
                    }
                },
                labelWidth:60,
                allowBlank:true,
                anchor:"100%",
                margin:"10 0 0 0",
                value:component.pageProperties.code
            }));
            configSpec.getComponent(1).add(Ext.widget('textfield',{
                fieldLabel:"Body Id",
                onChange:function(){
                    if (this.isValid()){
                        component.pageProperties.bodyId=this.getValue();
                    }
                },
                labelWidth:60,
                allowBlank:true,
                anchor:"100%",
                margin:"10 0 0 0",
                value:component.pageProperties.bodyId
            }));
            configSpec.getComponent(1).add(Ext.widget('textfield',{
                fieldLabel:"Body class",
                onChange:function(){
                    if (this.isValid()){
                        component.pageProperties.bodyClass=this.getValue();
                    }
                },
                labelWidth:60,
                allowBlank:true,
                anchor:"100%",
                margin:"10 0 0 0",
                value:component.pageProperties.bodyClass
            }));

            propEdit.add(configSpec);




        });
    },

    blocSelect: function(component, eOpts) {


        component.getEl().on("mouseover", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {
                component.setIconCls('selectBloc');
            }
            e.stopEvent();
        });
        component.getEl().on("mouseout", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {
            component.setIconCls();}
            e.stopEvent();
        });
        component.getEl().on("click", function(e){
            e.stopEvent();
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if (!Ext.isEmpty(prevSelected)) {
                if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
            prevSelected.removeBodyCls('selectedelement');}
        }
        component.setIconCls('editBloc');
        this.frame(MyPrefData.themeColor);
        Ext.getCmp('elementIdField').setValue(component.id);
        Ext.getCmp('deleteElement').enable();
        Ext.getCmp('newCol').disable();
        Ext.getCmp('newBloc').disable();
        Ext.getCmp('newRow').disable();
        Ext.getCmp("importElement").disable();
        Ext.getCmp("exportElement").enable();
        Ext.getCmp("moveElementUp").enable();
        Ext.getCmp("moveElementDown").enable();
        var propEdit=Ext.getCmp('elementEditControl');
        try{
            propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.blockText+" "+Ext.getStore("BlocsDataStore").findRecord('bType', component.bType,0,false,false,true).get("type"));
        }catch(err){
            propEdit.setTitle(component.id.replace("unBloc", "Bloc"));
        }
        propEdit.setIconCls('editBloc');
        propEdit.removeAll();


        var configSpec = Ext.widget('ConfigSpecBloc');
        var eventsConfig=Ext.clone(Ext.getStore("BlocsDataStore").findRecord('bType', component.bType,0,false,false,true).get("configBasique").champsConfig.csEvents);
        if(!Ext.isEmpty(eventsConfig)){
            if(Ext.isEmpty(component.configBloc.csEventConfig)){
                component.configBloc.csEventConfig=Ext.clone(eventsConfig);
            }
            configSpec.add(Ext.create('Ext.grid.property.Grid', {
            title: 'ClickStream events',
            source: component.configBloc.csEventConfig
        }));

        }
        configSpec.getComponent(0).add(Ext.widget('genericLocTextField',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.titleText,
            labelWidth:60,
            anchor:"100%",
            margin:"10 0 10 0",
            targetEntity:component.getId(),
            targetEntityProp:"title",
            initialLanguage:Ext.getCmp("workingLanguageField").getValue()
        }));

        configSpec.getComponent(0).add(Ext.widget('checkbox',{
            itemId:"eTitleShowField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayTitleText,
            onChange:function(){

                component.displayTitle=this.getValue();

            },
            labelWidth:60,
            inputValue:true,
            anchor:"100%",
            margin:"10 0 10 0",
            checked:component.displayTitle
        }));

        configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,
            anchor:"100%",
            labelWidth:60,
            margin:"0 0 10 0",
            vertical:true,
            columns:1,
            items: [
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}},
                                { boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}

            ]

        }));
            configSpec.getComponent(1).add(Ext.widget('textfield',{
            fieldLabel:"Code",
            onChange:function(){
                if (this.isValid()){
                    component.code=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.code
        }));

        var languagesPicker = Ext.create("Ext.ux.form.field.BoxSelect", {
            anchor:"100%",
            name:"localeFilters",
            labelWidth:70,
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.languagesText,
            multiSelect:true,
            forceSelection:true,
            store: Ext.getStore("AllLanguagesStore4"),
            displayField:"label",
            valueField:"locale",
            plugins:[Ext.create("Ext.ux.form.field.ClearButton")],
            queryMode:"local",
            "labelTpl": "<img src=\"/assets/flags/16/{flagCode}.png\" style=\"height: 16px; vertical-align: middle; margin: 2px;\" /> {label}",
            "listConfig": {
                "tpl": [
                "<ul><tpl for=\".\">",
                "<li role=\"option\" class=\"x-boundlist-item\" style=\"background-image:url(/assets/flags/16/{flagCode}.png); background-repeat: no-repeat; background-size: 16px; padding-left: 16px;\">{label}</li>",
                "</tpl></ul>"
                ]
            }
        });
        languagesPicker.on("change",function(){
            var newValue=languagesPicker.getValue();
            if (Ext.isEmpty(newValue)){
                languagesPicker.setValue(["all"]);
            } else if((newValue.length>1)&&(Ext.Array.contains(newValue,"all"))){
                languagesPicker.setValue(Ext.Array.remove(newValue,"all"));
            }
            component.localeFilters=languagesPicker.getValue();
        });
        if (Ext.isEmpty(component.localeFilters)){
            languagesPicker.setValue(["all"]);
        } else {
            languagesPicker.setValue(component.localeFilters);
        }
        if (Ext.getStore("AllLanguagesStore3").getRange().length==1){
            languagesPicker.hide();
        }
        configSpec.getComponent(0).add(languagesPicker);

        if (Ext.isEmpty(component.bType)){
            var categories = Ext.clone(component.champsConfig.simple);
            var categoriesADV = Ext.clone(component.champsConfig.avance);
        } else {
            var categories=Ext.clone(Ext.getStore("BlocsDataStore").findRecord('bType', component.bType,0,false,false,true).get("configBasique").champsConfig.simple);
            var categoriesADV=Ext.clone(Ext.getStore("BlocsDataStore").findRecord('bType', component.bType,0,false,false,true).get("configBasique").champsConfig.avance);
        }

        Ext.Array.forEach(categoriesADV,function(someCat){someCat.isAdv=true;});
        categories=Ext.Array.merge(categories,categoriesADV);
            categories.push({
                    categorie:"Optimized render",
                    isAdv:true,
                    champs:[
                        {
                                    "type": "Ext.form.field.Checkbox",
                                    "config": {
                                        "fieldLabel": "Always render",
                                        "name": "bypassOptimizer",
                                        "inputValue": true
                                    }
                                },{
                                    "type": "Ext.form.field.Number",
                                    "config": {
                                        "fieldLabel": "Placeholder height",
                                        "name": "orPlaceholderMinHeight",
                                        "allowDecimals": false,
                                        "minValue": 0
                                    }
                                }
                    ]

                });
        for (j=0; j<categories.length; j++){
            var nCateg = Ext.create('Ext.form.FieldSet', {title: categories[j].categorie, collapsible:true, layout: 'anchor'});
            nCateg.isAdv=categories[j].isAdv;

            var champsS = Ext.clone(categories[j].champs);
            for (i=0; i<champsS.length; i++) {
                if (champsS[i].type =='Ext.ux.TreePicker') {
                    var filteredStore=  Ext.create("Ext.data.TreeStore",{autoLoad: false,
                            autoSync: false,
                            isOptimised:true,
                            usedCollection:"Pages",
                            model: 'Rubedo.model.pageDataModel',
                            proxy: {
                                type: 'ajax',
                                api: {
                                    create: 'pages/create',
                                    read: 'pages/tree',
                                    update: 'pages/update',
                                    destroy: 'pages/delete'
                                },
                                reader: {
                                    type: 'json',
                                    getResponseData: function(response) {
                                        var data, error;

                                    try {
                                        data = Ext.decode(response.responseText);
                                        if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                                        return this.readRecords(data);
                                    } catch (ex) {
                                        error = new Ext.data.ResultSet({
                                            total  : 0,
                                            count  : 0,
                                            records: [],
                                            success: false,
                                            message: ex.message
                                        });

                                        this.fireEvent('exception', this, response, error);
                                        console.log(ex);

                                        Ext.Logger.warn('Unable to parse the JSON returned by the server');

                                        return error;
                                    }
                                },
                                messageProperty: 'message'
                            }
                        },
                        sorters: {
                            property: 'orderValue'
                        }
                    });

                    filteredStore.getProxy().extraParams.filter="[{\"property\":\"site\",\"value\":\""+Ext.getCmp("masquesGrid").getSelectionModel().getLastSelected().get("site")+"\"}]";
                    filteredStore.load();
                    champsS[i].config.store= filteredStore;
                    champsS[i].config.displayField="text";
                    champsS[i].config.plugins=[Ext.create("Ext.ux.form.field.ClearButton")];



                }else if (champsS[i].isAutoStored){
                    var miniStore=Ext.create('Ext.data.Store', {
                        fields:[{name:"value"},{name:"label"}],
                        data:champsS[i].autoStoreData,
                        autoload:true
                    });
                    champsS[i].config.store= miniStore;
                    champsS[i].config.displayField="label";
                    champsS[i].config.valueField="value";
                }
                var nChampS = Ext.create(champsS[i].type, champsS[i].config);
                if (champsS[i].type =='Ext.form.field.Trigger'){
                    var Ouvrir = Ext.clone(champsS[i].ouvrir);
                    var targeting=Ext.clone(nChampS.id);
                    nChampS.onTriggerClick= function() {
                        var fenetre = Ext.widget(Ouvrir);
                        fenetre.show();
                        fenetre.mainFieldId=targeting;

                    } ;
                }
                nChampS.labelSeparator= ' ';
                nChampS.anchor= '100%';
                nChampS.labelWidth=60;
                nChampS.setValue(component.configBloc[nChampS.name]);
                if ((nChampS.name=="magicQuery")&&(!PHPOptions.activateMagic)){
                        nChampS.hide();
                    }
                if ((nChampS.isXType("combobox"))&&(!nChampS.isXType("treepicker"))){
                    nChampS.getStore().fieldId=Ext.clone(nChampS.id);
                    nChampS.getStore().fieldValue=Ext.clone(component.configBloc[nChampS.name]);
                    nChampS.getStore().addListener("load",function(storeThing){
                        Ext.getCmp(storeThing.fieldId).setValue(storeThing.fieldValue);
                    },this,{single:true});
                    }
                    if (nChampS.isXType("treepicker")){
                        nChampS.on('select', function(){component.configBloc[this.name]=this.getValue(); });

                    }
                    if (nChampS.isXType("comboboxselect")){
                        nChampS.on('afterrender', function(thing){thing.fireEvent("change");});

                    }
                    nChampS.on('change', function(){component.configBloc[this.name]=this.getValue();});
                    nCateg.add(nChampS);
                }
                if(nCateg.isAdv){
                    configSpec.getComponent(1).add(nCateg);
                }else{
                    configSpec.getComponent(0).add(nCateg);
                }


            }
            propEdit.add(configSpec);


            if ((!ACL.interfaceRights['write.ui.masks'])||(Ext.getCmp("masquesGrid").getSelectionModel().getLastSelected().get("readOnly"))){
                Ext.Array.forEach(Ext.getCmp("elementEditControl").query("field"), function(truc){truc.setReadOnly(true);});
                Ext.Array.forEach(Ext.getCmp("elementEditControl").query("button"), function(truc){if (!truc.isXType("tab")){truc.disable();}});
            }


        });
    },

    exportElement: function(button, e, eOpts) {
        var form = button.up().getForm();
        if (form.isValid()) {
            var values=form.getValues();
            var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            var maskRows = this.saveRows(this.getMasqueEdition());
            var mCode=this.findElement(maskRows,target.id);
            var mBlocks=this.saveBlocks(target);
            var newElement=Ext.create("Rubedo.model.reusableElementModel",{
                name:values.name,
                description:values.description,
                mCode:mCode,
                mBlocks:mBlocks,
                mDepth:this.getElementDepth(mCode),
                mType:target.mType,
                mLevel:this.getElementLevel(target,0),
                site:Ext.getCmp("masquesGrid").getSelectionModel().getLastSelected().get("site")
            });
            Ext.getStore("ReusableElementsDataStore").add(newElement);
        }
        button.up().up().close();

    },

    addBlocDblClick: function(dataview, record, item, index, e, eOpts) {
        if (Ext.getCmp("BlocsSelectGrid").pageMode){
            Ext.getCmp("addPageBlocBtn").fireEvent("click");
        } else {
            this.addBloc(Ext.getCmp("boutonAjouterBloc"));
        }
    },

    exportMaskElementWindow: function(button, e, eOpts) {
        var fenetre = Ext.widget('ExportElementWindow');
        Ext.getCmp('ViewportPrimaire').add(fenetre);
        fenetre.show();
    },

    showImportWindow: function(button, e, eOpts) {
        var fenetre = Ext.widget('ReusableElementPicker');
        Ext.getCmp('ViewportPrimaire').add(fenetre);
        var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var maskRows = this.saveRows(this.getMasqueEdition());
        var mCode=this.findElement(maskRows,target.id);
        var site=Ext.getCmp("masquesGrid").getSelectionModel().getLastSelected().get("site");
        var level=this.getElementLevel(target,0);
        Ext.getStore("ReusableElementsDataStore").clearFilter();
        Ext.getStore("ReusableElementsDataStore").filter("site",site);
        fenetre.insTar={mType:target.mType,level:level,id:target.id,mCode:mCode};
        fenetre.show();

    },

    moveElementUp: function(button, e, eOpts) {
        var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        if (!Ext.isEmpty(target)) {
            var pos = target.up().items.indexOf(target);
            if (pos > 0) {
                target.up().move(pos,pos-1);
                if (target.isXType('unBloc')){
                    Ext.Array.forEach(target.up().items.items, function(item, index){
                        if (index===0){item.orderValue=100;} else {item.orderValue=(index+1)*100;}
                    });
                }
            }
        }
    },

    moveElementDown: function(button, e, eOpts) {
        var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        if (!Ext.isEmpty(target)) {
            var pos = target.up().items.indexOf(target);
            target.up().move(pos,pos+1);
            if (target.isXType('unBloc')){
                Ext.Array.forEach(target.up().items.items, function(item, index){
                    if (index===0){item.orderValue=100;} else {item.orderValue=(index+1)*100;}
                });
            }
        }
    },

    blocDetailShow: function(rowmodel, record, index, eOpts) {
        Ext.getCmp("PaneauBlocsDetail").update(record.getData());
    },

    onMainColumnIdFieldChange: function(field, newValue, oldValue, eOpts) {
        if (!Ext.isEmpty(Ext.getCmp(newValue))){
            Ext.getCmp(newValue).addBodyCls("mainColumn");
        }
        if (!Ext.isEmpty(Ext.getCmp(oldValue))){
            Ext.getCmp(oldValue).removeBodyCls("mainColumn");
        }
    },

    removeIds: function(element, blocks) {
        var me=this;
        if (element.mType=="col"){
            var newId=Ext.id(null,"column-");
            Ext.Array.forEach(blocks,function(someBlock){
                if (someBlock.parentCol==element.id){
                    someBlock.parentCol=newId;
                }
            });
            element.id=newId;
        } else {
            element.id=undefined;
        }
        if (!Ext.isEmpty(element.columns)) {
            Ext.Array.forEach(element.columns,function(thing){me.removeIds(thing,blocks);});
        }
        if (!Ext.isEmpty(element.rows)) {
            Ext.Array.forEach(element.rows,function(thing){me.removeIds(thing,blocks);});
        }
        if (!Ext.isEmpty(element.blocks)) {
            Ext.Array.forEach(element.blocks,function(thing){me.removeIds(thing,blocks);});
        }
    },

    applyConstrain: function(target, offsetF, spanF, applyFirst) {
        var myEol=target.up().getComponent("eol");
        var myOffset=null;
        if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType("container"))&&(!(target.prev().isXType("panel")))) {
            myOffset=target.prev();
        }
        if (applyFirst) {
            myEol.flex=myEol.flex+target.flex-spanF.getValue();
            target.flex=spanF.getValue();
            spanF.setMaxValue(target.flex+myEol.flex);
            offsetF.setMaxValue(offsetF.getValue()+myEol.flex);
            target.up().doLayout();
            if (offsetF.getValue()>0){
                if (Ext.isEmpty(myOffset)) {
                    myOffset=Ext.widget("container",{flex:0,reorderable:false,style:"{background-image:url(resources/images/stripes.png);}"});
                    target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);


                }
                myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                myOffset.flex=offsetF.getValue();
                offsetF.setMaxValue(myOffset.flex+myEol.flex);
                spanF.setMaxValue(spanF.getValue()+myEol.flex);
                target.up().doLayout();

            } else if((offsetF.getValue()===0)) {
                if (!Ext.isEmpty(myOffset)) {
                    myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                    myOffset.flex=offsetF.getValue();
                    offsetF.setMaxValue(myOffset.flex+myEol.flex);
                    spanF.setMaxValue(spanF.getValue()+myEol.flex);
                    myOffset.destroy();
                    target.up().doLayout();
                }

            }
        }
        else {
            if (Ext.isEmpty(myOffset)){
                offsetF.setValue(0);
                offsetF.setMaxValue(myEol.flex);
            }
            else {
                offsetF.setValue(myOffset.flex);
                offsetF.setMaxValue(myOffset.flex+myEol.flex);
            }

            spanF.setValue(target.flex);
            spanF.setMaxValue(target.flex+myEol.flex);
        }
    },

    spliceMask: function(elements, id, child, continueOK) {
        var me=this;
        if (continueOK){
            Ext.Array.forEach(elements, function(element){
                if (continueOK){
                    if (element.id==id) {
                        var leprop="rows";
                        if (child.mType=="col") { leprop="columns";
                            if(Ext.isEmpty(element[leprop])){
                                element[leprop]=[ ];
                            }
                        element[leprop].push(child);}
                        if ((element.mType=="col")&&(child.mType=="row")){
                            element.isTerminal=false;
                        }
                        continueOK=false;
                    } else {
                        if (!Ext.isEmpty(element.columns)) {
                            me.spliceMask(element.columns,id,child,continueOK);
                        }
                        if (!Ext.isEmpty(element.rows)) {
                            me.spliceMask(element.rows,id,child,continueOK);
                        }
                    }

                }
            });}
    },

    findElement: function(someArray, elementId) {
        var me=this;
        var result= null;
        Ext.Array.forEach(someArray, function(element){
            if (result===null){
                if (element.id===elementId){
                    result=Ext.clone(element);
                } else {
                    if (!Ext.isEmpty(element.columns)) {
                        result=(me.findElement(element.columns,elementId));
                    }
                    if ((!Ext.isEmpty(element.rows))&&(result===null)) {
                        result=me.findElement(element.rows,elementId);
                    }
                    if ((!Ext.isEmpty(element.blocks))&&(result===null)) {
                        result=me.findElement(element.blocks,elementId);
                    }
                }}

            });
            return (result);
    },

    masqueMAJ: function(cible) {
        var nouvZones = [ ];
        var zonesM =Ext.getCmp('masqueEdition').items.items;
        for (i=0; i<zonesM.length; i++) {
            var nZone = {hauteur: zonesM[i].height, largeur: zonesM[i].width, nom: zonesM[i].title, colonnes: [ ] };
            var colonnesM = zonesM[i].items.items;
            for (j=0; j<colonnesM.length; j++){
                var nColonne = {flex:colonnesM[j].flex, blocs: [ ]};
                var blocsM =colonnesM[j].items.items;
                for(k=0;k<blocsM.length; k++) {
                    nColonne.blocks.push({ flex : blocsM[k].flex, title: blocsM[k].title, bType: blocsM[k].bType, champsConfig: blocsM[k].champsConfig, configBloc: blocsM[k].configBloc});
                }
                nZone.colonnes.push(nColonne);
            }
            nouvZones.push(nZone);
        }
        cible.data.zones=nouvZones;
    },

    getElementDepth: function(element) {
        var me = this;
        if (Ext.isEmpty(element)){
            return(0);
        }
        if (element.mType=="block") {
            return(1);
        }
        else if (element.mType=="col") {
            var bDepth = 1;
            if (!Ext.isEmpty(element.blocks)) {bDepth=2;}
            var cDepth = 1;
            if (!Ext.isEmpty(element.rows)) {
                cDepth= 1+Ext.Array.max(Ext.Array.map(element.rows,function(row){return(me.getElementDepth(row));}));
            }

            return(Math.max(bDepth,cDepth));
        }
        else if (element.mType=="row") {
            if (Ext.isEmpty(element.columns)) {
                return(1);
            }else{
                return( 1+Ext.Array.max(Ext.Array.map(element.columns,function(col){return(me.getElementDepth(col));})));
            }
        } else {
            return(0);
        }
    },

    masqueRestit: function(mRows, its, cible) {
        var me=this;
        Ext.Array.forEach(mRows, function(row){
            var newRow = Ext.widget('panel', {
                header:false,
                mType:"row",
                eTitle:row.eTitle,
                id:row.id,
                i18n:row.i18n,
                plugins:[Ext.create("Ext.ux.BoxReorderer")],
                responsive:row.responsive,
                displayTitle:row.displayTitle,
                customTemplate:row.customTemplate,
                code:row.code,
                margin:4,
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                }
            });
            var rFlex=1;
            var eolWidth=12;
            Ext.Array.forEach(row.columns, function(column){
                if (column.offset>0) {
                    newRow.add(Ext.widget('container', {
                        flex:column.offset,
                        reorderable:false,
                        style:"{background-image:url(resources/images/stripes.png);}"
                    }));
                    eolWidth=eolWidth-column.offset;
                }
                var isFinalCol=false;
                if (its<=0){isFinalCol=true;}
                var newCol=Ext.widget('panel', {
                    header:false,
                    flex:column.span,
                    final:isFinalCol,
                    plugins:[Ext.create("Ext.ux.BoxReorderer")],
                    mType:'col',
                    id:column.id,
                    i18n:column.i18n,
                    eTitle:column.eTitle,
                    responsive:column.responsive,
                    displayTitle:column.displayTitle,
                    stackThreshold:column.stackThreshold,
                    customTemplate:column.customTemplate,
                    code:column.code,
                    margin:4,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    }
                });
                newCol.plugins[0].on("Drop",function(){
                    me.recalculateBlockOrder(newCol);
                });
                if ((its>0)&&(column.isTerminal===false)) {
                    rFlex=Ext.Array.max([rFlex,column.rows.length]);
                    me.masqueRestit(column.rows,its-1,newCol);
                }

                eolWidth=eolWidth-column.span;
                newRow.add(newCol);

            });
            newRow.add(Ext.widget("container",{
                flex:eolWidth,
                itemId:"eol",
                reorderable:false
            }));
                newRow.flex=rFlex;

            cible.add(newRow);
        });
    },

    restoreBlocks: function(mBlocks) {
        Ext.Array.forEach(mBlocks, function(block){
            block.title=Ext.util.Format.stripTags(block.title);
            var targetCol=Ext.getCmp(block.parentCol);
            if ((!Ext.isEmpty(targetCol))&&(targetCol.mType=='col')){
                if (Ext.isEmpty(block.configBloc)){
                    block.configBloc={ };
                }
                block.flex=1;
                targetCol.add(Ext.widget("unBloc",block));
            }
        });
    },

    getElementLevel: function(element, level) {
        if (element.id=="masqueEdition") {
            return (level);
        } else {
            return(this.getElementLevel(element.up(),level+1));
        }
    },

    saveRows: function(startComp) {
        var me=this;
        var nRows=[ ];
        Ext.Array.forEach(startComp.items.items, function(row){
            var newCols = [ ];
            var offset=0;
            Ext.Array.forEach(row.items.items, function(col){
                if (col.isXType("panel")) {
                    var rows = null;
                    var isTerminal=true;
                    if (col.final) {

                    }else {
                        var thing=col.items.items[0];
                        if (Ext.isEmpty(thing)){} else if (thing.isXType("unBloc")) {

                    } else {
                        isTerminal=false;
                        rows=me.saveRows(col);
                    }
                }

                newCols.push({
                    eTitle:col.eTitle,
                    responsive:col.responsive,
                    displayTitle:col.displayTitle,
                    span:col.flex,
                    stackThreshold:col.stackThreshold,
                    customTemplate:col.customTemplate,
                    code:col.code,
                    id:col.id,
                    i18n:col.i18n,
                    mType:"col",
                    offset:offset,
                    rows: rows,
                    isTerminal:isTerminal

                });
                offset=0;
            } else {offset=offset+col.flex;}

            });
            nRows.push({
                eTitle:row.eTitle,
                id:row.id,
                i18n:row.i18n,
                customTemplate:row.customTemplate,
                mType:"row",
                responsive:row.responsive,
                displayTitle:row.displayTitle,
                code:row.code,
                columns: newCols

            });
        });
        return nRows;
    },

    saveBlocks: function(startComp) {
        var newBlocks = [ ];
        var searchArray=startComp.query("unBloc");
        if (startComp.isXType("unBloc")){
            searchArray.push(startComp);
        }
        Ext.Array.forEach(searchArray, function(nBloc){
            var myLocaleFilters=nBloc.localeFilters;
            if (Ext.isEmpty(myLocaleFilters)){
                myLocaleFilters=['all'];
            }
            newBlocks.push({

                bType:nBloc.bType,
                id:nBloc.id,
                i18n:nBloc.i18n,
                parentCol:nBloc.up().getId(),
                mType:"block",
                localeFilters:myLocaleFilters,
                champsConfig:nBloc.champsConfig,
                orderValue:nBloc.orderValue,
                configBloc:nBloc.configBloc,
                title:nBloc.title,
                responsive:nBloc.responsive,
                displayTitle:nBloc.displayTitle,
                flex:nBloc.flex,
                code:nBloc.code,
                checksum:nBloc.checksum

            });

        });
        return(newBlocks);
    },

    recalculateBlockOrder: function(col) {
        Ext.Array.forEach(col.items.items, function(item, index){
            if (index===0){item.orderValue=100;} else {item.orderValue=(index+1)*100;}
        });
    },

    init: function(application) {
        this.control({
            "#boutonSupprimerMasque": {
                click: this.deleteMask
            },
            "#masquesGrid": {
                select: this.masquesDisplay
            },
            "#ReusableElementsGrid": {
                select: this.reusablesGridSelect
            },
            "#arborescenceSites": {
                itemclick: this.onTreepanelItemClick
            },
            "#boutonCopierMasque": {
                click: this.copyMaskWindow
            },
            "#boutonNouveauMasque": {
                click: this.newMaskWindow
            },
            "#creerNouveauMasque": {
                click: this.createMask
            },
            "#AdminfMasquesEnregistrer": {
                click: this.maskSave
            },
            "#copierMasque": {
                click: this.copyMask
            },
            "#AdminfMasquesImporter": {
                click: this.importMaskWindow
            },
            "#masqueEdition panel": {
                render: this.selectionEvents
            },
            "#deleteElement": {
                click: this.deleteMaskElement
            },
            "#newCol": {
                click: this.addCol
            },
            "#newRow": {
                click: this.addRow
            },
            "#newBloc": {
                click: this.showBlocWindow
            },
            "#REAddButton": {
                click: this.importElement
            },
            "#boutonAjouterBloc": {
                click: this.addBloc
            },
            "#masqueEdition": {
                render: this.mainBoxSelect
            },
            "#masqueEdition unBloc": {
                render: this.blocSelect
            },
            "#ExportElementButton": {
                click: this.exportElement
            },
            "#BlocsSelectGrid": {
                itemdblclick: this.addBlocDblClick,
                select: this.blocDetailShow
            },
            "#exportElement": {
                click: this.exportMaskElementWindow
            },
            "#importElement": {
                click: this.showImportWindow
            },
            "#moveElementUp": {
                click: this.moveElementUp
            },
            "#moveElementDown": {
                click: this.moveElementDown
            },
            "#mainColumnIdField": {
                change: this.onMainColumnIdFieldChange
            }
        });
    }

});
