/*
 * File: app/controller/MasqueController.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('KECMdesktop.controller.MasqueController', {
    extend: 'Ext.app.Controller',

    models: [
        'masquesDataModel'
    ],
    stores: [
        'VersionsDataJson',
        'MasquesDataJson'
    ],
    views: [
        'nouveauMasque',
        'ImportationMasques',
        'copierMasque'
    ],

    refs: [
        {
            ref: 'MasqueEdition',
            selector: '#masqueEdition'
        }
    ],

    onButtonClick2: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('delConfirmZ');
            fenetre.showAt(screen.width/2-100, 100);
            Ext.getCmp('delConfirmZOui').on('click', function() { 
                Ext.getCmp('masquesGrid').getStore().remove(cible);
                Ext.getCmp('masqueEdition').removeAll();
                Ext.getCmp('delConfirmZ').close();
            });  

        }
    },

    onButtonClick4: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            this.masqueMAJ(cible);
            cible.data.etat='publié';
            cible.data.derniereModification = new Date();
            cible.data.version++;
            cible.data.versions.push({text: cible.data.version, etat:'publié', date: new Date(), auteur: 'Igor'});
            Ext.getCmp('masquesGrid').getView().refresh();
        }

    },

    onGridviewItemClick: function(dataview, record, item, index, e, options) {
        var boiteMeta = dataview.findParentByType('window').getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        var valeurs= Ext.clone(record.data);
        valeurs.creation= Ext.Date.format(valeurs.creation, 'd-m-Y');
        valeurs.derniereModification= Ext.Date.format(valeurs.derniereModification, 'd-m-Y');
        boiteMeta.update(valeurs);

        var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.text);}
        else { typeFil= Ext.widget('button',{iconCls: "masque-icon", text:record.data.text, itemId:'type'});
        filArianne.add(typeFil);
    }
    var masque = record.data;
    this.getVersionsDataJsonStore().loadData(masque.versions);

    this.getMasqueEdition().removeAll();
    this.getMasqueEdition().setWidth(masque.largeur);
    this.masqueRestit(masque.zones); 



    },

    onTreepanelItemClick: function(tablepanel, record, item, index, e, options) {
        var cible = Ext.getCmp('arborescenceSites').getSelectionModel().getSelection()[0];
        this.getMasqueEdition().removeAll();
        this.getMasqueEdition().setWidth(cible.data.largeur);
        this.masqueRestit(cible.raw.zones);
    },

    onButtonClick6: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('copierMasque');
            fenetre.showAt(screen.width/2-150, 100);
            Ext.getCmp('copierMasqueTitre').setValue(cible.data.text);
        }
    },

    onButtonClick: function(button, e, options) {
        var fenetre = Ext.widget('nouveauMasque');
        fenetre.showAt(screen.width/2-200, 100);
    },

    onButtonClick1: function(button, e, options) {
        if ((Ext.getCmp('nouveauMasqueTitre').isValid())&&(Ext.getCmp('nouveauMasqueSite').isValid())) {

            var nTitre = Ext.getCmp('nouveauMasqueTitre').getValue();
            var nSite = Ext.getCmp('nouveauMasqueSite').getValue();
            var nLargeur = Ext.getCmp('nouveauMasqueSite').store.findRecord('text', nSite).data.largeur;
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                etat: 'brouillon',
                largeur: nLargeur,
                auteur: 'Igor',
                creation: new Date(),
                derniereModification: new Date(),
                version: 1.0,
                versions:[
                {text: '1.0', etat: 'brouillon', date: new Date(), auteur: 'Igor'}
                ],
                zones:[
                {hauteur: 150, largeur: nLargeur, nom: 'Première zone', colonnes:[ { blocs :[ ] }]}

                ]

            });
            this.getMasquesDataJsonStore().add(nouvMasque);

            Ext.getCmp('nouveauMasqueFenetre').close();
            Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);
            this.onGridviewItemClick(Ext.getCmp('masquesGridView'));

        }
    },

    onButtonClick3: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            this.masqueMAJ(cible);
            cible.data.etat='brouillon';
            cible.data.derniereModification = new Date();
            cible.data.version++;
            cible.data.versions.push({text: cible.data.version, etat:'brouillon', date: new Date(), auteur: 'Igor'});
            Ext.getCmp('masquesGrid').getView().refresh();
        }
    },

    onButtonClick7: function(button, e, options) {
        if ((Ext.getCmp('copierMasqueTitre').isValid())&&(Ext.getCmp('copierMasqueSite').isValid())) {
            var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
            var nTitre = Ext.getCmp('copierMasqueTitre').getValue();
            var nSite = Ext.getCmp('copierMasqueSite').getValue();
            var nLargeur = Ext.getCmp('copierMasqueSite').store.findRecord('text', nSite).data.largeur;
            var rapport = nLargeur/cible.data.largeur;
            var nZones = Ext.clone(cible.data.zones);
            if (rapport != 1) {
                this.masqueAdapt(nZones, rapport);
            }
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                etat: 'brouillon',
                largeur: nLargeur,
                auteur: 'Igor',
                creation: new Date(),
                derniereModification: new Date(),
                version: 1.0,
                versions:[
                {text: '1.0', etat: 'brouillon', date: new Date(), auteur: 'Igor'}
                ],
                zones: nZones

            });
            this.getMasquesDataJsonStore().add(nouvMasque);

            Ext.getCmp('copieMasqueFenetre').close();    
        }
    },

    onButtonClick5: function(button, e, options) {
        var fenetre = Ext.widget('importationMasques');
        fenetre.showAt(screen.width/2-150, 100);

    },

    masqueMAJ: function(cible) {
        var nouvZones = [ ];
        var zonesM =Ext.getCmp('masqueEdition').items.items;
        for (i=0; i<zonesM.length; i++) {
            var nZone = {hauteur: zonesM[i].height, largeur: zonesM[i].width, nom: zonesM[i].title, colonnes: [ ] };
            var colonnesM = zonesM[i].items.items;
            for (j=0; j<colonnesM.length; j++){
                var nColonne = {flex:colonnesM[j].flex, blocs: [ ]};
                var blocsM =colonnesM[j].items.items;
                for(k=0;k<blocsM.length; k++) {
                    nColonne.blocs.push({ flex : blocsM[k].flex, title: blocsM[k].title, bType: blocsM[k].bType, champsConfig: blocsM[k].champsConfig, configBloc: blocsM[k].configBloc});
                }        
                nZone.colonnes.push(nColonne);
            }
            nouvZones.push(nZone);
        }
        cible.data.zones=nouvZones;
    },

    masqueAdapt: function(zones, rapport) {
        for (i=0; i<zones.length; i++) {
            zones[i].largeur = zones[i].largeur * rapport;  
        }

    },

    masqueRestit: function(zones) {
        var largeurMax = this.getMasqueEdition().width;
        for (i=0; i<zones.length; i++) {   
            var zoneIns = zones[i];   
            var nouvZone = Ext.widget('zone' , { width: zoneIns.largeur, height: zoneIns.hauteur, title :zoneIns.nom, maxWidth : largeurMax});
            var colonnes = zoneIns.colonnes;
            var blocs = colonnes[0].blocs;
            nouvZone.items.items[0].flex=colonnes[0].flex;
            for (k=0; k<blocs.length; k++) {
                var nouvBloc = Ext.widget('unBloc' ,{flex : blocs[k].flex, title: blocs[k].title, bType: blocs[k].bType, champsConfig: blocs[k].champsConfig, configBloc: blocs[k].configBloc});
                nouvZone.getComponent(0).add(nouvBloc);
            }
            for (j=1; j<colonnes.length; j++) {    
                var nouvColonne = Ext.widget('colonne');
                nouvColonne.flex=colonnes[j].flex;
                var blocs = colonnes[j].blocs;
                for (k=0; k<blocs.length; k++) {
                    var nouvBloc = Ext.widget('unBloc' ,{flex : blocs[k].flex, title: blocs[k].title, bType: blocs[k].bType, champsConfig: blocs[k].champsConfig, configBloc: blocs[k].configBloc});
                    nouvColonne.add(nouvBloc);
                }
                nouvZone.add(nouvColonne);
            }


            this.getMasqueEdition().add(nouvZone);  




        }
    },

    onControllerClickStub: function() {

    },

    onControllerItemClickStub: function() {

    },

    init: function() {
        this.control({
            "#boutonSupprimerMasque": {
                click: this.onButtonClick2
            },
            "#AdminfMasquesPublier": {
                click: this.onButtonClick4
            },
            "#masquesGridView": {
                itemclick: this.onGridviewItemClick
            },
            "#arborescenceSites": {
                itemclick: this.onTreepanelItemClick
            },
            "#boutonCopierMasque": {
                click: this.onButtonClick6
            },
            "#boutonNouveauMasque": {
                click: this.onButtonClick
            },
            "#creerNouveauMasque": {
                click: this.onButtonClick1
            },
            "#AdminfMasquesEnregistrer": {
                click: this.onButtonClick3
            },
            "#copierMasque": {
                click: this.onButtonClick7
            },
            "#AdminfMasquesImporter": {
                click: this.onButtonClick5
            }
        });

    }

});
