/*
 * File: app/controller/MasqueController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.MasqueController', {
    extend: 'Ext.app.Controller',

    models: [
        'masquesDataModel'
    ],
    stores: [
        'VersionsDataJson',
        'MasquesDataJson'
    ],
    views: [
        'nouveauMasque',
        'ImportationMasques',
        'copierMasque'
    ],

    refs: [
        {
            ref: 'MasqueEdition',
            selector: '#masqueEdition'
        }
    ],

    deleteMask: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('delConfirmZ');
            fenetre.showAt(screen.width/2-100, 100);
            Ext.getCmp('delConfirmZOui').on('click', function() { 
                Ext.getCmp('masquesGrid').getStore().remove(cible);
                Ext.getCmp('masqueEdition').removeAll();
                Ext.getCmp("newRow").disable();
                Ext.getCmp("newCol").disable();
                Ext.getCmp("newBloc").disable();
                Ext.getCmp("deleteElement").disable();
                Ext.getCmp('elementEditControl').setTitle("Séléctionnez un élément");
                Ext.getCmp('elementEditControl').removeAll();
                Ext.getCmp('elementEditControl').setIconCls();
                Ext.getCmp('elementIdField').setValue(null);
                Ext.getCmp('delConfirmZ').close();
                Ext.Array.forEach(Ext.getCmp("adminFMDP").getComponent("contextBar").query("buttongroup"), function(btn){btn.disable();});
                Ext.getCmp("boutonSupprimerMasque").disable();
            });  

        }

    },

    publishMask: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            cible.beginEdit();
            cible.set("rows",this.saveRows(this.getMasqueEdition()));
            cible.set("etat","publié");
            cible.set("derniereModification",new Date());
            //cible.data.versions.push({text: cible.data.version, etat:'brouillon', date: new Date(), auteur: MyPrefData.myName});
            cible.endEdit();

        }
    },

    onGridpanelSelect: function(selModel, record, index, options) {
        var dataview = Ext.getCmp("masquesGrid");
        var boiteMeta = dataview.findParentByType('window').getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        var valeurs= Ext.clone(record.data);
        valeurs.creation= Ext.Date.format(valeurs.creation, 'd-m-Y');
        valeurs.derniereModification= Ext.Date.format(valeurs.derniereModification, 'd-m-Y');
        boiteMeta.update(valeurs);

        var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.text);}
        else { typeFil= Ext.widget('button',{iconCls: "masque-icon", text:record.data.text, itemId:'type'});
        filArianne.add(typeFil);
    }
    var masque = record.data;
    this.getVersionsDataJsonStore().loadData(masque.versions);
    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
    if (!Ext.isEmpty(prevSelected)) {
        prevSelected.removeBodyCls('selectedelement');
    }
    this.getMasqueEdition().removeAll();
    this.masqueRestit(masque.rows,1,this.getMasqueEdition()); 

    Ext.getCmp("newRow").disable();
    Ext.getCmp("newCol").disable();
    Ext.getCmp("newBloc").disable();
    Ext.getCmp("deleteElement").disable();
    Ext.getCmp('elementEditControl').setTitle("Séléctionnez un élément");
    Ext.getCmp('elementEditControl').removeAll();
    Ext.getCmp('elementEditControl').setIconCls();
    Ext.getCmp('elementIdField').setValue(null);

    Ext.Array.forEach(Ext.getCmp("adminFMDP").getComponent("contextBar").query("buttongroup"), function(btn){btn.enable();});
    Ext.getCmp("boutonSupprimerMasque").enable();

    },

    onTreepanelItemClick: function(tablepanel, record, item, index, e, options) {
        var cible = Ext.getCmp('arborescenceSites').getSelectionModel().getSelection()[0];
        this.getMasqueEdition().removeAll();
        this.getMasqueEdition().setWidth(cible.data.largeur);
        this.masqueRestit(cible.raw.zones);
    },

    copyMaskWindow: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('copierMasque');
            fenetre.showAt(screen.width/2-150, 100);
            Ext.getCmp('copierMasqueTitre').setValue(cible.data.text);
        }
    },

    newMaskWindow: function(button, e, options) {
        var fenetre = Ext.widget('nouveauMasque');
        fenetre.showAt(screen.width/2-200, 100);
    },

    createMask: function(button, e, options) {
        if ((Ext.getCmp('nouveauMasqueTitre').isValid())&&(Ext.getCmp('nouveauMasqueSite').isValid())) {

            var nTitre = Ext.getCmp('nouveauMasqueTitre').getValue();
            var nSite = Ext.getCmp('nouveauMasqueSite').getValue();
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                etat: 'brouillon',
                auteur: MyPrefData.myName,
                creation: new Date(),
                derniereModification: new Date(),
                version: 1.0,
                versions:[
                {text: '1.0', etat: 'brouillon', date: new Date(), auteur: MyPrefData.myName}
                ],
                "rows": [ 
                {
                    "height":null,
                    "responsive":{
                        "phone":true,
                        "tablet":true,
                        "desktop":true
                    },
                    "eTitle":"titre",
                    "columns": [
                    {
                        "isTerminal":true,
                        "eTitle":"titre",
                        "responsive":{
                            "phone":true,
                            "tablet":true,
                            "desktop":true
                        },
                        "span":12,
                        "offset":0,
                        "bloc": null,
                        "rows":null	
                    }
                    ]
                }
                ]

            });
            this.getMasquesDataJsonStore().add(nouvMasque);

            Ext.getCmp('nouveauMasqueFenetre').close();
            Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);
            this.masqueDisplay(Ext.getCmp('masquesGridView'),nouvMasque);

        }
    },

    maskSave: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            cible.beginEdit();
            cible.set("rows",this.saveRows(this.getMasqueEdition()));
            cible.set("etat","brouillon");
            cible.set("derniereModification",new Date());
            // cible.data.versions.push({text: cible.data.version, etat:'brouillon', date: new Date(), auteur: MyPrefData.myName});
            cible.endEdit();

        }
    },

    copyMask: function(button, e, options) {
        if ((Ext.getCmp('copierMasqueTitre').isValid())&&(Ext.getCmp('copierMasqueSite').isValid())) {
            var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
            var nTitre = Ext.getCmp('copierMasqueTitre').getValue();
            var nSite = Ext.getCmp('copierMasqueSite').getValue();
            var nRows = Ext.clone(cible.data.rows);
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                etat: 'brouillon',
                auteur: 'Alexandru Dobre',
                creation: new Date(),
                derniereModification: new Date(),
                version: 1.0,
                versions:[
                {text: '1.0', etat: 'brouillon', date: new Date(), auteur: 'Alexandru Dobre'}
                ],
                rows: nRows

            });
            this.getMasquesDataJsonStore().add(nouvMasque);

            Ext.getCmp('copieMasqueFenetre').close();    
        }
    },

    importMaskWindow: function(button, e, options) {
        var fenetre = Ext.widget('importationMasques');
        fenetre.showAt(screen.width/2-150, 100);

    },

    selectionEvents: function(abstractcomponent, options) {
        var me=this;
        if (!abstractcomponent.isXType("unBloc")){
            abstractcomponent.addBodyCls('contrastBorder');
            if (abstractcomponent.mType=="col"){
                abstractcomponent.addBodyCls('contrastRow');
            }
            abstractcomponent.getEl().on("mouseover", function(e){
                abstractcomponent.setBorder(4);
                e.stopEvent();
            });
            abstractcomponent.getEl().on("mouseout", function(e){
                abstractcomponent.setBorder(2);
                e.stopEvent();
            });
            abstractcomponent.getEl().on("click", function(e){
                var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
                if (!Ext.isEmpty(prevSelected)) {
                    if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
                prevSelected.removeBodyCls('selectedelement');}
            }
            abstractcomponent.addBodyCls('selectedelement');
            this.frame(MyPrefData.themeColor);
            Ext.getCmp('elementIdField').setValue(abstractcomponent.id);
            Ext.getCmp('deleteElement').enable();
            var propEdit=Ext.getCmp('elementEditControl');
            propEdit.setTitle(abstractcomponent.id.replace("panel", abstractcomponent.mType));
            propEdit.setIconCls('editZone');


            propEdit.removeAll();

            propEdit.add(Ext.widget('textfield',{
                itemId:"eTitleField",
                fieldLabel:"Titre ",
                labelWidth:40,
                allowBlank:false,
                anchor:"60%",
                margin:"10 0 10 0",
                style:"{float:left;}",
                value:abstractcomponent.eTitle
            }));
            propEdit.add(Ext.widget('button',{
                text:"Appliquer",
                anchor:"38%",
                margin:"10 0 10 0",
                style:"{float:right;}",
                handler:function(){
                    if (propEdit.getComponent("eTitleField").isValid()){
                        abstractcomponent.eTitle=propEdit.getComponent("eTitleField").getValue();
                    }}
                }));
                propEdit.add(Ext.widget('checkboxgroup',{
                    fieldLabel:"Visibilité ",
                    anchor:"100%",
                    labelWidth:60,
                    margin:"0 0 10 0",
                    vertical:true,
                    columns:1,
                    items: [
                    { boxLabel: 'Téléphone', checked:abstractcomponent.responsive.phone, handler:function(){abstractcomponent.responsive.phone=this.getValue();} },
                    { boxLabel: 'Tablette',checked:abstractcomponent.responsive.tablet, handler:function(){abstractcomponent.responsive.tablet=this.getValue();}},
                    { boxLabel: 'Ordinateur',checked:abstractcomponent.responsive.desktop, handler:function(){abstractcomponent.responsive.desktop=this.getValue();}}
                    ]

                }));
                if (abstractcomponent.mType=="row"){
                    Ext.getCmp('newRow').disable();
                    Ext.getCmp("newBloc").disable();
                    if (abstractcomponent.getComponent("eol").flex===0){
                        Ext.getCmp('newCol').disable();
                    } else {
                        Ext.getCmp('newCol').enable();
                    }
                    propEdit.add(Ext.widget('button',{
                        itemId:"rowAutoHeight",
                        text:"Hauteur automatique",
                        anchor:"100%",
                        tooltip:"La hauteur s'adapte au contenu lors du rendu final",
                        hidden:true,
                        handler:function(){
                            abstractcomponent.setHeight(null);
                            abstractcomponent.flex=1;
                            abstractcomponent.up().doLayout();
                            propEdit.getComponent("rowHeightFixed").setValue();
                            this.hide();
                        }
                    }));
                    if (!Ext.isEmpty(abstractcomponent.height)){propEdit.getComponent("rowAutoHeight").show();}
                    propEdit.add(Ext.widget('numberfield',{
                        itemId:"rowHeightFixed",
                        fieldLabel:"Hauteur fixe ",
                        labelWidth:80,
                        allowDecimals:false,
                        allowBlank:false,
                        minValue:20,
                        anchor:"60%",
                        margin:"10 0 0 0",
                        style:"{float:left;}",
                        value:abstractcomponent.height
                    }));
                    propEdit.add(Ext.widget('button',{
                        text:"Appliquer",
                        anchor:"38%",
                        margin:"10 0 0 0",
                        style:"{float:right;}",
                        handler:function(){
                            if (propEdit.getComponent("rowHeightFixed").isValid()){
                                abstractcomponent.flex=null;
                                abstractcomponent.setHeight(propEdit.getComponent("rowHeightFixed").getValue());
                                abstractcomponent.up().doLayout();
                                propEdit.getComponent("rowAutoHeight").show();
                            }}
                        }));



                    }    

                    else if (abstractcomponent.mType=="col"){
                        if ((abstractcomponent.final)){
                        Ext.getCmp('newRow').disable();} else if ((Ext.isDefined(abstractcomponent.items.items[0]))&&(abstractcomponent.items.items[0].isXType("unBloc"))) {
                            Ext.getCmp('newRow').disable();
                        }else {
                            Ext.getCmp('newRow').enable();
                        }

                        Ext.getCmp('newCol').disable();
                        if ((Ext.isEmpty(abstractcomponent.items.items))||(abstractcomponent.items.items[0].isXType("unBloc"))){
                        Ext.getCmp("newBloc").enable();} else {Ext.getCmp("newBloc").disable();}

                            var offsetEdit=Ext.widget('numberfield',{
                                itemId:"offsetEditor",
                                fieldLabel:"Offset ",
                                editable:false,
                                labelWidth:45,
                                allowDecimals:false,
                                anchor:"50%",
                                margin:"10 0 0 0",
                                style:"{float:left;}",
                                value:0,
                                minValue:0
                            });

                            var spanEdit=Ext.widget('numberfield',{
                                itemId:"spanEditor",
                                fieldLabel:"Span ",
                                labelWidth:45,
                                editable:false,
                                allowDecimals:false,
                                anchor:"50%",
                                margin:"10 0 0 10",
                                style:"{float:right;}",
                                value:abstractcomponent.flex,
                                minValue:1
                            });



                            propEdit.add(offsetEdit);
                            propEdit.add(spanEdit);
                            me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,false);
                            offsetEdit.on("change",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});
                            spanEdit.on("change",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});





                        }

                        e.stopEvent();
                    });}
    },

    deleteMaskElement: function(button, e, options) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        if (cible.mType=="col"){
            var myEol=cible.up().getComponent("eol");
            var myOffset=cible.previousSibling();
            if (!Ext.isEmpty(myOffset)) {
                if ((myOffset.isXType("container"))&&(!(myOffset.isXType("panel")))) {
                    myEol.flex=myEol.flex+myOffset.flex;
                    myOffset.destroy();
                }
            }
            myEol.flex=myEol.flex+cible.flex;

        }
        cible.destroy();
        Ext.getCmp("newRow").disable();
        Ext.getCmp("newCol").disable();
        Ext.getCmp("newBloc").disable();
        Ext.getCmp("deleteElement").disable();
        Ext.getCmp('elementEditControl').setTitle("Séléctionnez un élément");
        Ext.getCmp('elementEditControl').removeAll();
        Ext.getCmp('elementEditControl').setIconCls();
        Ext.getCmp('elementIdField').setValue(null);

    },

    addCol: function(button, e, options) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var myEol=cible.getComponent('eol');

        if (myEol.flex>0) {
            var isFinalCol=false;
            if (cible.up().mType=="col"){
                isFinalCol=true;
            }
            var newCol=Ext.widget('panel', {
                header:false,
                flex:1,
                final:isFinalCol,
                eTitle:"titre",
                responsive:{
                    phone:true,
                    tablet:true,
                    desktop:true
                },
                mType:'col',
                margin:4,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                }
            });
            myEol.flex=myEol.flex-1;
            cible.insert(cible.items.items.length-1,newCol);
            if (myEol.flex===0){
                button.disable();
            }

        }
        newCol.getEl().dom.click();
    },

    addRow: function(button, e, options) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var row = Ext.widget('panel', {
            header:false,
            mType:"row",
            flex:1,
            eTitle:"titre",
            responsive:{
                phone:true,
                tablet:true,
                desktop:true
            },
            margin:4,
            layout: {
                type: 'hbox',
                align: 'stretch'
            }
        });
        row.add(Ext.widget('container', {flex:12,itemId:"eol"}));
        cible.insert(cible.items.items.length,row);
        Ext.getCmp("newBloc").disable();
        row.getEl().dom.click();
    },

    showBlocWindow: function(button, e, options) {
        var blocWin = Ext.widget('ajoutBlocFenetre');
        blocWin.showAt(screen.width/2-250, 100);
    },

    addBloc: function(button, e, options) {
        var donnees = Ext.getCmp('BlocsSelectGrid').getSelectionModel().getLastSelected().data;
        var nouvBloc = Ext.widget('unBloc', Ext.clone(donnees.configBasique));
        nouvBloc.responsive={
            "phone":true,
            "tablet":true,
            "desktop":true
        };
        Ext.getCmp(Ext.getCmp('elementIdField').getValue()).add(nouvBloc);
        button.up().up().close();
        Ext.getCmp('newRow').disable();
        nouvBloc.getEl().dom.click();
    },

    mainBoxSelect: function(abstractcomponent, options) {
        abstractcomponent.setBorder(2);
        abstractcomponent.addBodyCls('contrastCBorder');
        abstractcomponent.getEl().on("mouseover", function(e){
            abstractcomponent.setBorder(4);
            e.stopEvent();
        });
        abstractcomponent.getEl().on("mouseout", function(e){
            abstractcomponent.setBorder(2);
            e.stopEvent();
        });
        abstractcomponent.getEl().on("click", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if (!Ext.isEmpty(prevSelected)) {
                if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
            prevSelected.removeBodyCls('selectedelement');}
        }
        abstractcomponent.addBodyCls('selectedelement');
        this.frame(MyPrefData.themeColor);
        Ext.getCmp('elementIdField').setValue(abstractcomponent.id);
        Ext.getCmp('deleteElement').disable();
        Ext.getCmp('newCol').disable();
        Ext.getCmp('newBloc').disable();
        Ext.getCmp('newRow').enable();
        var propEdit=Ext.getCmp('elementEditControl');
        propEdit.setTitle("Racine");
        propEdit.setIconCls('editZone');


        propEdit.removeAll();

    });
    },

    blocSelect: function(abstractcomponent, options) {


        abstractcomponent.getEl().on("mouseover", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==abstractcomponent.id)) {
                abstractcomponent.setIconCls('selectBloc');
            }
            e.stopEvent();
        });
        abstractcomponent.getEl().on("mouseout", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==abstractcomponent.id)) {
            abstractcomponent.setIconCls();}
            e.stopEvent();
        });
        abstractcomponent.getEl().on("click", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if (!Ext.isEmpty(prevSelected)) {
                if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
            prevSelected.removeBodyCls('selectedelement');}
        }
        abstractcomponent.setIconCls('editBloc');
        this.frame(MyPrefData.themeColor);
        Ext.getCmp('elementIdField').setValue(abstractcomponent.id);
        Ext.getCmp('deleteElement').enable();
        Ext.getCmp('newCol').disable();
        Ext.getCmp('newBloc').disable();
        Ext.getCmp('newRow').disable();
        var propEdit=Ext.getCmp('elementEditControl');
        propEdit.setTitle(abstractcomponent.id.replace("unBloc", "Bloc"));
        propEdit.setIconCls('editBloc');
        propEdit.removeAll();


        propEdit.add(Ext.widget('textfield',{
            itemId:"eTitleField",
            fieldLabel:"Titre ",
            labelWidth:40,
            allowBlank:false,
            anchor:"60%",
            margin:"10 0 10 0",
            style:"{float:left;}",
            value:abstractcomponent.title
        }));
        propEdit.add(Ext.widget('button',{
            text:"Appliquer",
            anchor:"38%",
            margin:"10 0 10 0",
            style:"{float:right;}",
            handler:function(){
                if (propEdit.getComponent("eTitleField").isValid()){
                    abstractcomponent.setTitle(propEdit.getComponent("eTitleField").getValue());
                }}
            }));

            propEdit.add(Ext.widget('numberfield',{
                itemId:"rowHeightFixed",
                fieldLabel:"Hauteur fluide ",
                labelWidth:90,
                allowDecimals:false,
                allowBlank:false,
                minValue:1,
                anchor:"60%",
                margin:"10 0 0 0",
                style:"{float:left;}",
                value:abstractcomponent.flex
            }));
            propEdit.add(Ext.widget('button',{
                text:"Appliquer",
                anchor:"38%",
                margin:"10 0 0 0",
                style:"{float:right;}",
                handler:function(){
                    if (propEdit.getComponent("rowHeightFixed").isValid()){
                        abstractcomponent.flex=propEdit.getComponent("rowHeightFixed").getValue();
                        abstractcomponent.up().doLayout();
                    }}
                }));


                propEdit.add(Ext.widget('checkboxgroup',{
                    fieldLabel:"Visibilité ",
                    anchor:"100%",
                    labelWidth:60,
                    margin:"0 0 10 0",
                    vertical:true,
                    columns:1,
                    items: [
                    { boxLabel: 'Télephone', checked:abstractcomponent.responsive.phone, handler:function(){abstractcomponent.responsive.phone=this.getValue();} },
                    { boxLabel: 'Tablette',checked:abstractcomponent.responsive.tablet, handler:function(){abstractcomponent.responsive.tablet=this.getValue();}},
                    { boxLabel: 'Ordinateur',checked:abstractcomponent.responsive.desktop, handler:function(){abstractcomponent.responsive.desktop=this.getValue();}}
                    ]

                }));  


                var configSpec = Ext.widget('ConfigSpecBloc');
                var categories = Ext.clone(abstractcomponent.champsConfig.simple);
                for (j=0; j<categories.length; j++){
                    var nCateg = Ext.create('Ext.form.FieldSet', {title: categories[j].categorie, collapsible:true, layout: 'anchor'});

                    var champsS = Ext.clone(categories[j].champs);
                    for (i=0; i<champsS.length; i++) {
                        if (champsS[i].type =='Ext.form.field.ComboBox') {
                            var monStore=  Ext.create('Ext.data.Store', champsS[i].store);
                            champsS[i].config.store= monStore;
                        }
                        var nChampS = Ext.create(champsS[i].type, champsS[i].config);
                        if (champsS[i].type =='Ext.form.field.Trigger'){
                            var Ouvrir = Ext.clone(champsS[i].ouvrir);
                            nChampS.onTriggerClick= function() {
                                var fenetre = Ext.widget(Ouvrir);
                                fenetre.showAt(screen.width/2-200, 100);
                            } ;  
                        }
                        nChampS.labelSeparator= ' ';
                        nChampS.anchor= '100%';
                        nChampS.setValue(abstractcomponent.configBloc[nChampS.name]);
                        nChampS.on('change', function(){abstractcomponent.configBloc[this.name]=this.getValue(); });
                        nCateg.add(nChampS);
                    }
                    configSpec.items.items[0].add(nCateg);

                }
                propEdit.add(configSpec);



                e.stopEvent();

            });
    },

    addBlocDblClick: function(tablepanel, record, item, index, e, options) {
        this.addBloc(Ext.getCmp("boutonAjouterBloc"));
    },

    applyConstrain: function(target, offsetF, spanF, applyFirst) {
        var myEol=target.up().getComponent("eol");
        var myOffset=null;
        if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType("container"))&&(!(target.prev().isXType("panel")))) {
            myOffset=target.prev();
        }
        if (applyFirst) {
            myEol.flex=myEol.flex+target.flex-spanF.getValue();
            target.flex=spanF.getValue();
            spanF.setMaxValue(target.flex+myEol.flex);
            offsetF.setMaxValue(offsetF.getValue()+myEol.flex);
            target.up().doLayout();
            if (offsetF.getValue()>0){ 
                if (Ext.isEmpty(myOffset)) {
                    myOffset=Ext.widget("container",{flex:0,style:"{background-image:url(resources/images/stripes.png);}"});
                    target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);


                } 
                myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                myOffset.flex=offsetF.getValue();
                offsetF.setMaxValue(myOffset.flex+myEol.flex);
                spanF.setMaxValue(spanF.getValue()+myEol.flex);
                target.up().doLayout();

            } else if((offsetF.getValue()===0)) {
                if (!Ext.isEmpty(myOffset)) {
                    myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                    myOffset.flex=offsetF.getValue();
                    offsetF.setMaxValue(myOffset.flex+myEol.flex);
                    spanF.setMaxValue(spanF.getValue()+myEol.flex);
                    myOffset.destroy();
                    target.up().doLayout();      
                } 

            }
        }
        else {
            if (Ext.isEmpty(myOffset)){
                offsetF.setValue(0);
                offsetF.setMaxValue(myEol.flex);
            }
            else {
                offsetF.setValue(myOffset.flex);
                offsetF.setMaxValue(myOffset.flex+myEol.flex); 
            }

            spanF.setValue(target.flex);
            spanF.setMaxValue(target.flex+myEol.flex);
        }
    },

    masqueMAJ: function(cible) {
        var nouvZones = [ ];
        var zonesM =Ext.getCmp('masqueEdition').items.items;
        for (i=0; i<zonesM.length; i++) {
            var nZone = {hauteur: zonesM[i].height, largeur: zonesM[i].width, nom: zonesM[i].title, colonnes: [ ] };
            var colonnesM = zonesM[i].items.items;
            for (j=0; j<colonnesM.length; j++){
                var nColonne = {flex:colonnesM[j].flex, blocs: [ ]};
                var blocsM =colonnesM[j].items.items;
                for(k=0;k<blocsM.length; k++) {
                    nColonne.blocs.push({ flex : blocsM[k].flex, title: blocsM[k].title, bType: blocsM[k].bType, champsConfig: blocsM[k].champsConfig, configBloc: blocsM[k].configBloc});
                }        
                nZone.colonnes.push(nColonne);
            }
            nouvZones.push(nZone);
        }
        cible.data.zones=nouvZones;
    },

    masqueRestit: function(mRows, its, cible) {
        var me=this;
        Ext.Array.forEach(mRows, function(row){
            var newRow = Ext.widget('panel', {
                header:false,
                mType:"row",
                eTitle:row.eTitle,
                responsive:row.responsive,
                margin:4,
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                }
            });
            var rFlex=1;
            var eolWidth=12;
            Ext.Array.forEach(row.columns, function(column){
                if (column.offset>0) {
                    newRow.add(Ext.widget('container', {
                        flex:column.offset,
                        style:"{background-image:url(resources/images/stripes.png);}"
                    }));
                    eolWidth=eolWidth-column.offset;
                }
                var isFinalCol=false;
                if (its<=0){isFinalCol=true;}
                var newCol=Ext.widget('panel', {
                    header:false,
                    flex:column.span,
                    final:isFinalCol,
                    mType:'col',
                    eTitle:column.eTitle,
                    responsive:column.responsive,
                    margin:4,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    }
                });
                if ((its>0)&&(column.isTerminal===false)) {
                    rFlex=Ext.Array.max([rFlex,column.rows.length]);
                    me.masqueRestit(column.rows,its-1,newCol);    
                }
                else {
                    if (Ext.isEmpty(column.bloc)){} else {
                    Ext.Array.forEach(column.bloc, function(bl){
                        newCol.add(Ext.widget("unBloc",bl));
                    });
                }
            }
            eolWidth=eolWidth-column.span;
            newRow.add(newCol);

        });
        newRow.add(Ext.widget("container",{
            flex:eolWidth,
            itemId:"eol"
        }));
        if (Ext.isEmpty(row.height)) {
            newRow.flex=rFlex;
        } else {
            newRow.height=row.height;
        }
        cible.add(newRow);  


    });
    },

    saveRows: function(startComp) {
        var me=this;
        var nRows=[ ];
        Ext.Array.forEach(startComp.items.items, function(row){
            var newCols = [ ];
            var offset=0;
            Ext.Array.forEach(row.items.items, function(col){
                if (col.isXType("panel")) {
                    var bloc = null;
                    var rows = null;
                    var isTerminal=true;
                    if (col.final) { 
                        var nBlocs=col.items.items;
                        if (!Ext.isEmpty(nBlocs)) {
                            bloc=[ ];
                            Ext.Array.forEach(nBlocs, function(nBloc){
                                bloc.push({

                                    bType:nBloc.bType,
                                    champsConfig:nBloc.champsConfig,
                                    configBloc:nBloc.configBloc,
                                    title:nBloc.title,
                                    responsive:nBloc.responsive,
                                    flex:nBloc.flex

                                });

                            });

                        }
                    }else {
                        var thing=col.items.items[0];
                        if (Ext.isEmpty(thing)){} else if (thing.isXType("unBloc")) {
                        var nBlocs=col.items.items;
                        if (!Ext.isEmpty(nBlocs)) {
                            bloc=[ ];
                            Ext.Array.forEach(nBlocs, function(nBloc){
                                bloc.push({

                                    bType:nBloc.bType,
                                    champsConfig:nBloc.champsConfig,
                                    configBloc:nBloc.configBloc,
                                    title:nBloc.title,
                                    responsive:nBloc.responsive,
                                    flex:nBloc.flex

                                });

                            });

                        }
                    } else {
                        isTerminal=false;
                        rows=me.saveRows(col);
                    }
                }

                newCols.push({
                    eTitle:col.eTitle,
                    responsive:col.responsive,
                    span:col.flex,
                    offset:offset,
                    bloc: bloc,
                    rows: rows,
                    isTerminal:isTerminal

                });
                offset=0;
            } else {offset=offset+col.flex;}

            });
            nRows.push({
                height:row.height,
                eTitle:row.eTitle,
                responsive:row.responsive,
                columns: newCols

            });
        });
        return nRows;
    },

    init: function(application) {
        this.control({
            "#boutonSupprimerMasque": {
                click: this.deleteMask
            },
            "#AdminfMasquesPublier": {
                click: this.publishMask
            },
            "gridpanel": {
                select: this.onGridpanelSelect
            },
            "#arborescenceSites": {
                itemclick: this.onTreepanelItemClick
            },
            "#boutonCopierMasque": {
                click: this.copyMaskWindow
            },
            "#boutonNouveauMasque": {
                click: this.newMaskWindow
            },
            "#creerNouveauMasque": {
                click: this.createMask
            },
            "#AdminfMasquesEnregistrer": {
                click: this.maskSave
            },
            "#copierMasque": {
                click: this.copyMask
            },
            "#AdminfMasquesImporter": {
                click: this.importMaskWindow
            },
            "#masqueEdition panel": {
                render: this.selectionEvents
            },
            "#deleteElement": {
                click: this.deleteMaskElement
            },
            "#newCol": {
                click: this.addCol
            },
            "#newRow": {
                click: this.addRow
            },
            "#newBloc": {
                click: this.showBlocWindow
            },
            "#boutonAjouterBloc": {
                click: this.addBloc
            },
            "#masqueEdition": {
                render: this.mainBoxSelect
            },
            "unBloc": {
                render: this.blocSelect
            },
            "#BlocsSelectGrid": {
                itemdblclick: this.addBlocDblClick
            }
        });
    }

});
