/*
 * File: app/controller/MasqueController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.MasqueController', {
    extend: 'Ext.app.Controller',

    models: [
        'masquesDataModel'
    ],
    stores: [
        'VersionsDataJson',
        'MasquesDataJson'
    ],
    views: [
        'nouveauMasque',
        'ImportationMasques',
        'copierMasque'
    ],

    refs: [
        {
            ref: 'MasqueEdition',
            selector: '#masqueEdition'
        }
    ],

    deleteMask: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('delConfirmZ');
            fenetre.show();
            Ext.getCmp('delConfirmZOui').on('click', function() { 
                Ext.getCmp('masquesGrid').getStore().remove(cible);
                Ext.getCmp('masqueEdition').removeAll();
                Ext.getCmp("newRow").disable();
                Ext.getCmp("newCol").disable();
                Ext.getCmp("newBloc").disable();
                Ext.getCmp("deleteElement").disable();
                Ext.getCmp('elementEditControl').setTitle("Séléctionnez un élément");
                Ext.getCmp('elementEditControl').removeAll();
                Ext.getCmp('elementEditControl').setIconCls();
                Ext.getCmp('elementIdField').setValue(null);
                Ext.getCmp('delConfirmZ').close();
                Ext.Array.forEach(Ext.getCmp("adminFMDP").getComponent("contextBar").query("buttongroup"), function(btn){btn.disable();});
                Ext.getCmp("boutonSupprimerMasque").disable();
                Ext.getCmp("adminFMDP").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();
            });  

        }

    },

    masquesDisplay: function(selModel, record, index, options) {
        var dataview = Ext.getCmp("masquesGrid");
        var boiteMeta = dataview.findParentByType('window').getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        var valeurs= Ext.clone(record.data);
        valeurs.creation= Ext.Date.format(valeurs.createTime, 'd-m-Y');
        valeurs.derniereModification= Ext.Date.format(valeurs.lastUpdateTime, 'd-m-Y');
        boiteMeta.update(valeurs);
        boiteMeta.show();

        var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.text);}
        else { typeFil= Ext.widget('button',{iconCls: "masque-icon", text:record.data.text, itemId:'type'});
        filArianne.add(typeFil);
    }
    var masque = record.data;
    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
    if (!Ext.isEmpty(prevSelected)) {
        prevSelected.removeBodyCls('selectedelement');
    }
    this.getMasqueEdition().removeAll();
    this.masqueRestit(masque.rows,1,this.getMasqueEdition()); 
    this.restoreBlocks(masque.blocks);

    Ext.getCmp("newRow").disable();
    Ext.getCmp("newCol").disable();
    Ext.getCmp("newBloc").disable();
    Ext.getCmp("importElement").disable();
    Ext.getCmp("exportElement").disable();
    Ext.getCmp("deleteElement").disable();
    Ext.getCmp("moveElementUp").disable();
    Ext.getCmp("moveElementDown").disable();
    Ext.getCmp('elementEditControl').setTitle("Séléctionnez un élément");
    Ext.getCmp('elementEditControl').removeAll();
    Ext.getCmp('elementEditControl').setIconCls();
    Ext.getCmp('elementIdField').setValue(null);

    Ext.Array.forEach(Ext.getCmp("adminFMDP").getComponent("contextBar").query("buttongroup"), function(btn){btn.enable();});
    Ext.getCmp("boutonSupprimerMasque").enable();

    },

    reusablesGridSelect: function(selModel, record, index, options) {
        Ext.getCmp("reusableelementDescription").update(record.data);
        var go =true;

        var target=Ext.getCmp("ReusableElementPicker").insTar;

        if (record.get("mType")==target.mType) {go=false;}

        else if ((target.mType=="row")&&(Ext.getCmp(target.id).getComponent("eol").flex===0)) {go=false;}

        else if ((record.get("mType")=="row")&&(target.mType=="bloc")) {go=false;}
        else if ((record.get("mType")!="row")&&(target.id=="masqueEdition")) {go=false;}
        else if ((record.get("mType")!="bloc")&&(target.level==4)) {go=false;}
        else if((record.get("mType")=="bloc")&&(!Ext.isEmpty(target.mCode.rows))) {go=false;}
        else if((target.id!="masqueEdition")&&(record.get("mType")=="row")&&(!Ext.isEmpty(target.mCode.bloc))) {go=false;}



        if (go) {Ext.getCmp("REAddButton").enable(); } else {Ext.getCmp("REAddButton").disable(); }
    },

    onTreepanelItemClick: function(tablepanel, record, item, index, e, options) {
        var cible = Ext.getCmp('arborescenceSites').getSelectionModel().getSelection()[0];
        this.getMasqueEdition().removeAll();
        this.getMasqueEdition().setWidth(cible.data.largeur);
        this.masqueRestit(cible.raw.zones);
    },

    copyMaskWindow: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('copierMasque');
            fenetre.showAt(screen.width/2-150, 100);
            Ext.getCmp('copierMasqueTitre').setValue(cible.data.text);
        }
    },

    newMaskWindow: function(button, e, options) {
        var fenetre = Ext.widget('nouveauMasque');
        fenetre.show();
    },

    createMask: function(button, e, options) {
        if ((Ext.getCmp('nouveauMasqueTitre').isValid())&&(Ext.getCmp('nouveauMasqueSite').isValid())) {

            var nTitre = Ext.getCmp('nouveauMasqueTitre').getValue();
            var nSite = Ext.getCmp('nouveauMasqueSite').getValue();
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                rows: [ ],
                blocks:[ ]
            });
            this.getMasquesDataJsonStore().add(nouvMasque);
            this.getMasquesDataJsonStore().addListener("datachanged",function(){Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);},this,{single:true});

            Ext.getCmp('nouveauMasqueFenetre').close();
            this.masquesDisplay(Ext.getCmp('masquesGridView'),nouvMasque);

        }
    },

    maskSave: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            cible.beginEdit();
            cible.set("rows",this.saveRows(this.getMasqueEdition()));
            cible.set("blocks",this.saveBlocks(this.getMasqueEdition()));
            cible.endEdit();

        }
    },

    copyMask: function(button, e, options) {
        if ((Ext.getCmp('copierMasqueTitre').isValid())&&(Ext.getCmp('copierMasqueSite').isValid())) {
            var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
            var nTitre = Ext.getCmp('copierMasqueTitre').getValue();
            var nSite = Ext.getCmp('copierMasqueSite').getValue();
            var nRows = Ext.clone(cible.data.rows);
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                etat: 'brouillon',
                auteur: 'Alexandru Dobre',
                creation: new Date(),
                derniereModification: new Date(),
                version: 1.0,
                versions:[
                {text: '1.0', etat: 'brouillon', date: new Date(), auteur: 'Alexandru Dobre'}
                ],
                rows: nRows

            });
            this.getMasquesDataJsonStore().add(nouvMasque);
            this.getMasquesDataJsonStore().addListener("datachanged",function(){Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);},this,{single:true});

            Ext.getCmp('copieMasqueFenetre').close();    
        }
    },

    importMaskWindow: function(button, e, options) {
        var fenetre = Ext.widget('importationMasques');
        fenetre.showAt(screen.width/2-150, 100);

    },

    selectionEvents: function(abstractcomponent, options) {
        var me=this;

        if (!abstractcomponent.isXType("unBloc")){
            abstractcomponent.addBodyCls('contrastBorder');
            if (abstractcomponent.mType=="col"){
                abstractcomponent.addBodyCls('contrastRow');
            }
            abstractcomponent.getEl().on("mouseover", function(e){
                abstractcomponent.setBorder(4);
                e.stopEvent();
            });
            abstractcomponent.getEl().on("mouseout", function(e){
                abstractcomponent.setBorder(2);
                e.stopEvent();
            });
            abstractcomponent.getEl().on("click", function(e){
                var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
                if (!Ext.isEmpty(prevSelected)) {
                    if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
                prevSelected.removeBodyCls('selectedelement');}
            }
            abstractcomponent.addBodyCls('selectedelement');
            this.frame(MyPrefData.themeColor);
            Ext.getCmp('elementIdField').setValue(abstractcomponent.id);
            Ext.getCmp('deleteElement').enable();
            Ext.getCmp("importElement").enable();
            Ext.getCmp("exportElement").enable();
            var propEdit=Ext.getCmp('elementEditControl');
            propEdit.setTitle(abstractcomponent.id.replace("panel", abstractcomponent.mType));
            propEdit.setIconCls('editZone');


            propEdit.removeAll();
            var configSpec = Ext.widget('ConfigSpecBloc');


            configSpec.getComponent(0).add(Ext.widget('textfield',{
                itemId:"eTitleField",
                fieldLabel:"Titre ",
                onChange:function(){
                    if (this.isValid()){
                        abstractcomponent.eTitle=this.getValue();
                    }
                },
                labelWidth:60,
                allowBlank:false,
                anchor:"100%",
                margin:"10 0 10 0",
                value:abstractcomponent.eTitle
            }));
            configSpec.getComponent(0).add(Ext.widget('checkbox',{
                itemId:"eTitleShowField",
                fieldLabel:"Afficher le titre ",
                onChange:function(){

                    abstractcomponent.displayTitle=this.getValue();

                },
                labelWidth:60,
                inputValue:true,
                anchor:"100%",
                margin:"10 0 10 0",
                checked:abstractcomponent.displayTitle
            }));

            configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
                fieldLabel:"Visibilité ",
                anchor:"100%",
                labelWidth:60,
                margin:"0 0 10 0",
                vertical:true,
                columns:1,
                items: [
                { boxLabel: 'Téléphone', checked:abstractcomponent.responsive.phone, handler:function(){abstractcomponent.responsive.phone=this.getValue();} },
                { boxLabel: 'Tablette',checked:abstractcomponent.responsive.tablet, handler:function(){abstractcomponent.responsive.tablet=this.getValue();}},
                { boxLabel: 'Ordinateur',checked:abstractcomponent.responsive.desktop, handler:function(){abstractcomponent.responsive.desktop=this.getValue();}}
                ]

            }));  






            configSpec.getComponent(1).add(Ext.widget('textfield',{
                itemId:"eClassHTMLField",
                fieldLabel:"Classe HTML ",
                onChange:function(){
                    if (this.isValid()){
                        abstractcomponent.classHTML=this.getValue();
                    }
                },
                labelWidth:60,
                allowBlank:true,
                anchor:"100%",
                margin:"10 0 0 0",
                value:abstractcomponent.classHTML
            }));

            configSpec.getComponent(1).add(Ext.widget('textfield',{
                itemId:"eidHTMLField",
                fieldLabel:"Id HTML ",
                onChange:function(){
                    if (this.isValid()){
                        abstractcomponent.idHTML=this.getValue();
                    }
                },
                labelWidth:60,
                allowBlank:true,
                anchor:"100%",
                margin:"10 0 0 0",
                value:abstractcomponent.idHTML
            }));
            if (abstractcomponent.mType=="row"){
                Ext.getCmp("moveElementUp").enable();
                Ext.getCmp("moveElementDown").enable();
                Ext.getCmp('newRow').disable();
                Ext.getCmp("newBloc").disable();
                if (abstractcomponent.getComponent("eol").flex===0){
                    Ext.getCmp('newCol').disable();
                } else {
                    Ext.getCmp('newCol').enable();
                }
                configSpec.getComponent(0).add(Ext.widget('button',{
                    itemId:"rowAutoHeight",
                    text:"Hauteur automatique",
                    anchor:"100%",
                    tooltip:"La hauteur s'adapte au contenu lors du rendu final",
                    hidden:true,
                    handler:function(){
                        abstractcomponent.setHeight(null);
                        abstractcomponent.flex=1;
                        abstractcomponent.up().doLayout();
                        configSpec.getComponent(0).getComponent("rowHeightFixed").setValue();
                        this.hide();
                    }
                }));
                if (!Ext.isEmpty(abstractcomponent.height)){configSpec.getComponent(0).getComponent("rowAutoHeight").show();}
                configSpec.getComponent(0).add(Ext.widget('numberfield',{
                    itemId:"rowHeightFixed",
                    fieldLabel:"Hauteur fixe ",
                    labelWidth:60,
                    allowDecimals:false,
                    allowBlank:false,
                    minValue:20,
                    anchor:"60%",
                    margin:"10 0 0 0",
                    style:"{float:left;}",
                    value:abstractcomponent.height
                }));
                configSpec.getComponent(0).add(Ext.widget('button',{
                    text:"Appliquer",
                    anchor:"38%",
                    margin:"10 0 0 0",
                    style:"{float:right;}",
                    handler:function(){
                        if (configSpec.getComponent(0).getComponent("rowHeightFixed").isValid()){
                            abstractcomponent.flex=null;
                            abstractcomponent.setHeight(configSpec.getComponent(0).getComponent("rowHeightFixed").getValue());
                            abstractcomponent.up().doLayout();
                            configSpec.getComponent(0).getComponent("rowAutoHeight").show();
                        }}
                    }));



                }    

                else if (abstractcomponent.mType=="col"){
                    Ext.getCmp("moveElementUp").disable();
                    Ext.getCmp("moveElementDown").disable();
                    if ((abstractcomponent.final)){
                    Ext.getCmp('newRow').disable();} else if ((Ext.isDefined(abstractcomponent.items.items[0]))&&(abstractcomponent.items.items[0].isXType("unBloc"))) {
                        Ext.getCmp('newRow').disable();
                    }else {
                        Ext.getCmp('newRow').enable();
                    }

                    Ext.getCmp('newCol').disable();
                    if ((Ext.isEmpty(abstractcomponent.items.items))||(abstractcomponent.items.items[0].isXType("unBloc"))){
                    Ext.getCmp("newBloc").enable();} else {Ext.getCmp("newBloc").disable();}

                        var offsetEdit=Ext.widget('numberfield',{
                            itemId:"offsetEditor",
                            fieldLabel:"Offset ",
                            editable:false,
                            labelWidth:60,
                            allowDecimals:false,
                            anchor:"50%",
                            margin:"10 0 0 0",
                            style:"{float:left;}",
                            value:0,
                            minValue:0
                        });

                        var spanEdit=Ext.widget('numberfield',{
                            itemId:"spanEditor",
                            fieldLabel:"Span ",
                            labelWidth:60,
                            editable:false,
                            allowDecimals:false,
                            anchor:"50%",
                            margin:"10 0 0 10",
                            style:"{float:right;}",
                            value:abstractcomponent.flex,
                            minValue:1
                        });



                        configSpec.getComponent(0).add(offsetEdit);
                        configSpec.getComponent(0).add(spanEdit);
                        me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,false);
                        offsetEdit.on("change",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});
                        spanEdit.on("change",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});





                    }
                    propEdit.add(configSpec);
                    if (!ACL.interfaceRights['write.ui.masks']){
                        Ext.Array.forEach(Ext.getCmp("elementEditControl").query("field"), function(truc){truc.setReadOnly(true);});
                        Ext.Array.forEach(Ext.getCmp("elementEditControl").query("button"), function(truc){truc.disable();});
                    }
                    e.stopEvent();
                });}
    },

    deleteMaskElement: function(button, e, options) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        if (cible.mType=="col"){
            var myEol=cible.up().getComponent("eol");
            var myOffset=cible.previousSibling();
            if (!Ext.isEmpty(myOffset)) {
                if ((myOffset.isXType("container"))&&(!(myOffset.isXType("panel")))) {
                    myEol.flex=myEol.flex+myOffset.flex;
                    myOffset.destroy();
                }
            }
            myEol.flex=myEol.flex+cible.flex;

        }
        cible.destroy();
        Ext.getCmp("newRow").disable();
        Ext.getCmp("newCol").disable();
        Ext.getCmp("newBloc").disable();
        Ext.getCmp("importElement").disable();
        Ext.getCmp("exportElement").disable();
        Ext.getCmp("deleteElement").disable();
        Ext.getCmp("moveElementUp").disable();
        Ext.getCmp("moveElementDown").disable();
        Ext.getCmp('elementEditControl').setTitle("Séléctionnez un élément");
        Ext.getCmp('elementEditControl').removeAll();
        Ext.getCmp('elementEditControl').setIconCls();
        Ext.getCmp('elementIdField').setValue(null);

    },

    addCol: function(button, e, options) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var myEol=cible.getComponent('eol');

        if (myEol.flex>0) {
            var isFinalCol=false;
            if (cible.up().mType=="col"){
                isFinalCol=true;
            }
            var newCol=Ext.widget('panel', {
                header:false,
                flex:1,
                final:isFinalCol,
                eTitle:"titre",
                responsive:{
                    phone:true,
                    tablet:true,
                    desktop:true
                },
                mType:'col',
                margin:4,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                }
            });
            myEol.flex=myEol.flex-1;
            cible.insert(cible.items.items.length-1,newCol);
            if (myEol.flex===0){
                button.disable();
            }

        }
        newCol.getEl().dom.click();
    },

    addRow: function(button, e, options) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var row = Ext.widget('panel', {
            header:false,
            mType:"row",
            flex:1,
            eTitle:"titre",
            responsive:{
                phone:true,
                tablet:true,
                desktop:true
            },
            margin:4,
            layout: {
                type: 'hbox',
                align: 'stretch'
            }
        });
        row.add(Ext.widget('container', {flex:12,itemId:"eol"}));
        cible.insert(cible.items.items.length,row);
        Ext.getCmp("newBloc").disable();
        row.getEl().dom.click();
    },

    showBlocWindow: function(button, e, options) {
        var blocWin = Ext.widget('ajoutBlocFenetre');
        blocWin.showAt(screen.width/2-250, 100);
    },

    importElement: function(button, e, options) {
        var target=button.up().up().up().insTar;
        var child=Ext.getCmp("ReusableElementsGrid").getSelectionModel().getLastSelected().get("mCode");
        this.removeIds(child);
        var maskRows = this.saveRows(this.getMasqueEdition());
        if (target.id=="masqueEdition") {
            maskRows.push(child);
        } else {
            this.spliceMask(maskRows,target.id,child,true);
        }
        this.getMasqueEdition().removeAll();
        this.masqueRestit(maskRows,1,this.getMasqueEdition()); 
        button.up().up().up().close();
    },

    addBloc: function(button, e, options) {
        var donnees = Ext.getCmp('BlocsSelectGrid').getSelectionModel().getLastSelected().data;
        var nouvBloc = Ext.widget('unBloc', Ext.clone(donnees.configBasique));
        nouvBloc.responsive={
            "phone":true,
            "tablet":true,
            "desktop":true
        };
        Ext.getCmp(Ext.getCmp('elementIdField').getValue()).add(nouvBloc);
        button.up().up().close();
        Ext.getCmp('newRow').disable();
        nouvBloc.getEl().dom.click();
    },

    mainBoxSelect: function(abstractcomponent, options) {
        abstractcomponent.setBorder(2);
        abstractcomponent.addBodyCls('contrastCBorder');
        abstractcomponent.getEl().on("mouseover", function(e){
            abstractcomponent.setBorder(4);
            e.stopEvent();
        });
        abstractcomponent.getEl().on("mouseout", function(e){
            abstractcomponent.setBorder(2);
            e.stopEvent();
        });
        abstractcomponent.getEl().on("click", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if (!Ext.isEmpty(prevSelected)) {
                if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
            prevSelected.removeBodyCls('selectedelement');}
        }
        abstractcomponent.addBodyCls('selectedelement');
        this.frame(MyPrefData.themeColor);
        Ext.getCmp('elementIdField').setValue(abstractcomponent.id);
        Ext.getCmp('deleteElement').disable();
        Ext.getCmp('newCol').disable();
        Ext.getCmp('newBloc').disable();
        Ext.getCmp('newRow').enable();
        Ext.getCmp("moveElementUp").disable();
        Ext.getCmp("moveElementDown").disable();
        Ext.getCmp("importElement").enable();
        Ext.getCmp("exportElement").disable();
        var propEdit=Ext.getCmp('elementEditControl');
        propEdit.setTitle("Racine");
        propEdit.setIconCls('editZone');


        propEdit.removeAll();

    });
    },

    blocSelect: function(abstractcomponent, options) {


        abstractcomponent.getEl().on("mouseover", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==abstractcomponent.id)) {
                abstractcomponent.setIconCls('selectBloc');
            }
            e.stopEvent();
        });
        abstractcomponent.getEl().on("mouseout", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==abstractcomponent.id)) {
            abstractcomponent.setIconCls();}
            e.stopEvent();
        });
        abstractcomponent.getEl().on("click", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if (!Ext.isEmpty(prevSelected)) {
                if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
            prevSelected.removeBodyCls('selectedelement');}
        }
        abstractcomponent.setIconCls('editBloc');
        this.frame(MyPrefData.themeColor);
        Ext.getCmp('elementIdField').setValue(abstractcomponent.id);
        Ext.getCmp('deleteElement').enable();
        Ext.getCmp('newCol').disable();
        Ext.getCmp('newBloc').disable();
        Ext.getCmp('newRow').disable();
        Ext.getCmp("importElement").disable();
        Ext.getCmp("exportElement").enable();
        Ext.getCmp("moveElementUp").enable();
        Ext.getCmp("moveElementDown").enable();
        var propEdit=Ext.getCmp('elementEditControl');
        propEdit.setTitle(abstractcomponent.id.replace("unBloc", "Bloc"));
        propEdit.setIconCls('editBloc');
        propEdit.removeAll();


        var configSpec = Ext.widget('ConfigSpecBloc');


        configSpec.getComponent(0).add(Ext.widget('textfield',{
            itemId:"eTitleField",
            fieldLabel:"Titre ",
            onChange:function(){
                if (this.isValid()){
                    abstractcomponent.setTitle(this.getValue());
                }
            },
            labelWidth:60,
            allowBlank:false,
            anchor:"100%",
            margin:"10 0 10 0",
            value:abstractcomponent.title
        }));

        configSpec.getComponent(0).add(Ext.widget('checkbox',{
            itemId:"eTitleShowField",
            fieldLabel:"Afficher le titre ",
            onChange:function(){

                abstractcomponent.displayTitle=this.getValue();

            },
            labelWidth:60,
            inputValue:true,
            anchor:"100%",
            margin:"10 0 10 0",
            checked:abstractcomponent.displayTitle
        }));


        /*configSpec.getComponent(0).add(Ext.widget('numberfield',{
        fieldLabel:"Hauteur fluide ",
        onChange:function(){
        if(this.isValid()) {
        abstractcomponent.flex=this.getValue();
        abstractcomponent.up().doLayout();
        }
        },
        labelWidth:60,
        allowDecimals:false,
        allowBlank:false,
        minValue:1,
        anchor:"100%",
        margin:"10 0 0 0",
        value:abstractcomponent.flex
        }));*/



        configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
            fieldLabel:"Visibilité ",
            anchor:"100%",
            labelWidth:60,
            margin:"0 0 10 0",
            vertical:true,
            columns:1,
            items: [
            { boxLabel: 'Téléphone', checked:abstractcomponent.responsive.phone, handler:function(){abstractcomponent.responsive.phone=this.getValue();} },
            { boxLabel: 'Tablette',checked:abstractcomponent.responsive.tablet, handler:function(){abstractcomponent.responsive.tablet=this.getValue();}},
            { boxLabel: 'Ordinateur',checked:abstractcomponent.responsive.desktop, handler:function(){abstractcomponent.responsive.desktop=this.getValue();}}
            ]

        }));  






        configSpec.getComponent(1).add(Ext.widget('textfield',{
            itemId:"eClassHTMLField",
            fieldLabel:"Classe HTML ",
            onChange:function(){
                if (this.isValid()){
                    abstractcomponent.classHTML=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:abstractcomponent.classHTML
        }));

        configSpec.getComponent(1).add(Ext.widget('textfield',{
            itemId:"eidHTMLField",
            fieldLabel:"Id HTML ",
            onChange:function(){
                if (this.isValid()){
                    abstractcomponent.idHTML=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:abstractcomponent.idHTML
        }));

        configSpec.getComponent(1).add(Ext.widget('textfield',{
            itemId:"urlPrefixHTMLField",
            fieldLabel:"Préfixe URL ",
            onChange:function(){
                if (this.isValid()){
                    abstractcomponent.urlPrefix=this.getValue();
                }
            },
            labelWidth:60,
            regex :new RegExp(/^([a-z]|[1-9]|[-]){0,}$/),
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:abstractcomponent.urlPrefix
        }));

        var categories = Ext.clone(abstractcomponent.champsConfig.simple);
        for (j=0; j<categories.length; j++){
            var nCateg = Ext.create('Ext.form.FieldSet', {title: categories[j].categorie, collapsible:true, layout: 'anchor'});

            var champsS = Ext.clone(categories[j].champs);
            for (i=0; i<champsS.length; i++) {
                if (champsS[i].type =='Ext.ux.TreePicker') {
                    var filteredStore=  Ext.create("Ext.data.TreeStore",{autoLoad: false,
                        autoSync: false,
                        isOptimised:true,
                        usedCollection:"Pages",
                        model: 'Rubedo.model.pageDataModel',
                        proxy: {
                            type: 'ajax',
                            api: {
                                create: 'pages/create',
                                read: 'pages/read-child',
                                update: 'pages/update',
                                destroy: 'pages/delete'
                            },
                            reader: {
                                type: 'json',
                                getResponseData: function(response) {
                                    var data, error;

                                    try {
                                        data = Ext.decode(response.responseText);
                                        if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                                        return this.readRecords(data);
                                    } catch (ex) {
                                        error = new Ext.data.ResultSet({
                                            total  : 0,
                                            count  : 0,
                                            records: [],
                                            success: false,
                                            message: ex.message
                                        });

                                        this.fireEvent('exception', this, response, error);
                                        console.log(ex);

                                        Ext.Logger.warn('Unable to parse the JSON returned by the server');

                                        return error;
                                    }
                                },
                                messageProperty: 'message'
                            }
                        },
                        sorters: {
                            property: 'orderValue'
                        }
                    }); 

                    filteredStore.getProxy().extraParams.filter="[{\"property\":\"site\",\"value\":\""+Ext.getCmp("masquesGrid").getSelectionModel().getLastSelected().get("site")+"\"}]";
                    filteredStore.load();
                    champsS[i].config.store= filteredStore;
                    champsS[i].config.displayField="text";



                } 
                var nChampS = Ext.create(champsS[i].type, champsS[i].config);
                if (champsS[i].type =='Ext.form.field.Trigger'){
                    var Ouvrir = Ext.clone(champsS[i].ouvrir);
                    var targeting=Ext.clone(nChampS.id);
                    nChampS.onTriggerClick= function() {
                        var fenetre = Ext.widget(Ouvrir);
                        fenetre.show();
                        fenetre.mainFieldId=targeting;

                    } ;  
                }
                nChampS.labelSeparator= ' ';
                nChampS.anchor= '100%';
                nChampS.labelWidth=60;
                nChampS.setValue(abstractcomponent.configBloc[nChampS.name]);
                if ((nChampS.isXType("combobox"))&&(!nChampS.isXType("treepicker"))){
                    nChampS.getStore().fieldId=Ext.clone(nChampS.id);
                    nChampS.getStore().fieldValue=Ext.clone(abstractcomponent.configBloc[nChampS.name]);
                    nChampS.getStore().addListener("load",function(storeThing){
                        Ext.getCmp(storeThing.fieldId).setValue(storeThing.fieldValue);
                    },this,{single:true});
                    }
                    if (nChampS.isXType("treepicker")){
                        nChampS.on('select', function(){abstractcomponent.configBloc[this.name]=this.getValue(); });

                    }
                    nChampS.on('change', function(){abstractcomponent.configBloc[this.name]=this.getValue();});
                    nCateg.add(nChampS);
                }
                configSpec.items.items[0].add(nCateg);


            }
            propEdit.add(configSpec);


            if (!ACL.interfaceRights['write.ui.masks']){
                Ext.Array.forEach(Ext.getCmp("elementEditControl").query("field"), function(truc){truc.setReadOnly(true);});
                Ext.Array.forEach(Ext.getCmp("elementEditControl").query("button"), function(truc){truc.disable();});
            }
            e.stopEvent();

        });
    },

    exportElement: function(button, e, options) {
        var form = button.up().getForm();
        if (form.isValid()) {
            var values=form.getValues();
            var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            var maskRows = this.saveRows(this.getMasqueEdition());
            var mCode=this.findElement(maskRows,target.id);
            var newElement=Ext.create("Rubedo.model.reusableElementModel",{
                name:values.name,
                description:values.description,
                mCode:mCode,
                depth:this.getElementDepth(mCode),
                mType:target.mType,
                mLevel:this.getElementLevel(target,0),
                site:Ext.getCmp("masquesGrid").getSelectionModel().getLastSelected().get("site")
            });
            Ext.getStore("ReusableElementsDataStore").add(newElement);
        }
        button.up().up().close();

    },

    addBlocDblClick: function(tablepanel, record, item, index, e, options) {
        if (Ext.getCmp("BlocsSelectGrid").pageMode){
            Ext.getCmp("addPageBlocBtn").fireEvent("click");
        } else {
            this.addBloc(Ext.getCmp("boutonAjouterBloc"));
        }
    },

    exportMaskElementWindow: function(button, e, options) {
        var fenetre = Ext.widget('ExportElementWindow');
        Ext.getCmp('ViewportPrimaire').add(fenetre);
        fenetre.show();
    },

    showImportWindow: function(button, e, options) {
        var fenetre = Ext.widget('ReusableElementPicker');
        Ext.getCmp('ViewportPrimaire').add(fenetre);
        var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var maskRows = this.saveRows(this.getMasqueEdition());
        var mCode=this.findElement(maskRows,target.id);
        var site=Ext.getCmp("masquesGrid").getSelectionModel().getLastSelected().get("site");
        var level=this.getElementLevel(target,0);
        Ext.getStore("ReusableElementsDataStore").clearFilter();
        Ext.getStore("ReusableElementsDataStore").filter("site",site);
        fenetre.insTar={mType:target.mType,level:level,id:target.id,mCode:mCode};
        fenetre.show();

    },

    moveElementUp: function(button, e, options) {
        var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        if (!Ext.isEmpty(target)) {
            var pos = target.up().items.indexOf(target);
            if (pos > 0) {
                target.up().move(pos,pos-1);
            }
        }
    },

    moveElementDown: function(button, e, options) {
        var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        if (!Ext.isEmpty(target)) {
            var pos = target.up().items.indexOf(target);
            target.up().move(pos,pos+1);
        }
    },

    blocDetailShow: function(selModel, record, index, options) {
        Ext.getCmp("PaneauBlocsDetail").update(record.getData());
    },

    removeIds: function(element) {
        var me=this;
        element.id=undefined;
        if (!Ext.isEmpty(element.columns)) {
            Ext.Array.forEach(element.columns,function(thing){me.removeIds(thing);});
        }
        if (!Ext.isEmpty(element.rows)) {
            Ext.Array.forEach(element.rows,function(thing){me.removeIds(thing);});
        }
        if (!Ext.isEmpty(element.blocks)) {
            Ext.Array.forEach(element.blocks,function(thing){me.removeIds(thing);});
        }
    },

    applyConstrain: function(target, offsetF, spanF, applyFirst) {
        var myEol=target.up().getComponent("eol");
        var myOffset=null;
        if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType("container"))&&(!(target.prev().isXType("panel")))) {
            myOffset=target.prev();
        }
        if (applyFirst) {
            myEol.flex=myEol.flex+target.flex-spanF.getValue();
            target.flex=spanF.getValue();
            spanF.setMaxValue(target.flex+myEol.flex);
            offsetF.setMaxValue(offsetF.getValue()+myEol.flex);
            target.up().doLayout();
            if (offsetF.getValue()>0){ 
                if (Ext.isEmpty(myOffset)) {
                    myOffset=Ext.widget("container",{flex:0,style:"{background-image:url(resources/images/stripes.png);}"});
                    target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);


                } 
                myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                myOffset.flex=offsetF.getValue();
                offsetF.setMaxValue(myOffset.flex+myEol.flex);
                spanF.setMaxValue(spanF.getValue()+myEol.flex);
                target.up().doLayout();

            } else if((offsetF.getValue()===0)) {
                if (!Ext.isEmpty(myOffset)) {
                    myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                    myOffset.flex=offsetF.getValue();
                    offsetF.setMaxValue(myOffset.flex+myEol.flex);
                    spanF.setMaxValue(spanF.getValue()+myEol.flex);
                    myOffset.destroy();
                    target.up().doLayout();      
                } 

            }
        }
        else {
            if (Ext.isEmpty(myOffset)){
                offsetF.setValue(0);
                offsetF.setMaxValue(myEol.flex);
            }
            else {
                offsetF.setValue(myOffset.flex);
                offsetF.setMaxValue(myOffset.flex+myEol.flex); 
            }

            spanF.setValue(target.flex);
            spanF.setMaxValue(target.flex+myEol.flex);
        }
    },

    spliceMask: function(elements, id, child, continueOK) {
        var me=this;
        if (continueOK){
            Ext.Array.forEach(elements, function(element){
                if (continueOK){
                    if (element.id==id) {
                        var leprop="rows";
                        if (child.mType=="col") { leprop="columns";} else if (child.mType=="block") { leprop="blocks";}
                        if(Ext.isEmpty(element[leprop])){
                            element[leprop]=[ ];
                        }
                        element[leprop].push(child);
                        if ((element.mType=="col")&&(child.mType=="row")){
                            element.isTerminal=false;
                        }
                        continueOK=false;
                    } else {
                        if (!Ext.isEmpty(element.columns)) {
                            me.spliceMask(element.columns,id,child,continueOK);
                        }
                        if (!Ext.isEmpty(element.rows)) {
                            me.spliceMask(element.rows,id,child,continueOK);
                        }
                    }

                }
            });}
    },

    findElement: function(someArray, elementId) {
        var me=this;
        var result= null;
        Ext.Array.forEach(someArray, function(element){
            if (result===null){
                if (element.id===elementId){
                    result=Ext.clone(element);
                } else {
                    if (!Ext.isEmpty(element.columns)) {
                        result=(me.findElement(element.columns,elementId));
                    }
                    if ((!Ext.isEmpty(element.rows))&&(result===null)) {
                        result=me.findElement(element.rows,elementId);
                    }
                    if ((!Ext.isEmpty(element.blocks))&&(result===null)) {
                        result=me.findElement(element.blocks,elementId);
                    }
                }}

            });
            return (result);
    },

    masqueMAJ: function(cible) {
        var nouvZones = [ ];
        var zonesM =Ext.getCmp('masqueEdition').items.items;
        for (i=0; i<zonesM.length; i++) {
            var nZone = {hauteur: zonesM[i].height, largeur: zonesM[i].width, nom: zonesM[i].title, colonnes: [ ] };
            var colonnesM = zonesM[i].items.items;
            for (j=0; j<colonnesM.length; j++){
                var nColonne = {flex:colonnesM[j].flex, blocs: [ ]};
                var blocsM =colonnesM[j].items.items;
                for(k=0;k<blocsM.length; k++) {
                    nColonne.blocks.push({ flex : blocsM[k].flex, title: blocsM[k].title, bType: blocsM[k].bType, champsConfig: blocsM[k].champsConfig, configBloc: blocsM[k].configBloc});
                }        
                nZone.colonnes.push(nColonne);
            }
            nouvZones.push(nZone);
        }
        cible.data.zones=nouvZones;
    },

    getElementDepth: function(element) {
        var me = this;
        if (element.mType=="block") {
            return(1);
        }
        else if (element.mType=="col") {
            var bDepth = 1;
            if (!Ext.isEmpty(element.blocks)) {bDepth=2;}
            var cDepth = 1;
            if (!Ext.isEmpty(element.rows)) {
                cDepth= 1+Ext.Array.max(Ext.Array.map(element.rows,function(row){return(me.getElementDepth(row));}));
            }

            return(Math.max(bDepth,cDepth));
        }
        else if (element.mType=="row") {
            if (Ext.isEmpty(element.columns)) {
                return(1);
            }else{
                return( 1+Ext.Array.max(Ext.Array.map(element.columns,function(col){return(me.getElementDepth(col));})));
            }
        } else {
            return(0);
        }
    },

    masqueRestit: function(mRows, its, cible) {
        var me=this;
        Ext.Array.forEach(mRows, function(row){
            var newRow = Ext.widget('panel', {
                header:false,
                mType:"row",
                eTitle:row.eTitle,
                id:row.id,
                responsive:row.responsive,
                classHTML:row.classHTML,
                idHTML:row.idHTML,
                displayTitle:row.displayTitle,
                margin:4,
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                }
            });
            var rFlex=1;
            var eolWidth=12;
            Ext.Array.forEach(row.columns, function(column){
                if (column.offset>0) {
                    newRow.add(Ext.widget('container', {
                        flex:column.offset,
                        style:"{background-image:url(resources/images/stripes.png);}"
                    }));
                    eolWidth=eolWidth-column.offset;
                }
                var isFinalCol=false;
                if (its<=0){isFinalCol=true;}
                var newCol=Ext.widget('panel', {
                    header:false,
                    flex:column.span,
                    final:isFinalCol,
                    mType:'col',
                    id:column.id,
                    eTitle:column.eTitle,
                    responsive:column.responsive,
                    classHTML:column.classHTML,
                    displayTitle:column.displayTitle,
                    idHTML:column.idHTML,
                    margin:4,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    }
                });
                if ((its>0)&&(column.isTerminal===false)) {
                    rFlex=Ext.Array.max([rFlex,column.rows.length]);
                    me.masqueRestit(column.rows,its-1,newCol);    
                }

                eolWidth=eolWidth-column.span;
                newRow.add(newCol);

            });
            newRow.add(Ext.widget("container",{
                flex:eolWidth,
                itemId:"eol"
            }));
            if (Ext.isEmpty(row.height)) {
                newRow.flex=rFlex;
            } else {
                newRow.height=row.height;
            }
            cible.add(newRow);  
        });
    },

    restoreBlocks: function(mBlocks) {
        Ext.Array.forEach(mBlocks, function(block){
            var targetCol=Ext.getCmp(block.parentCol);
            if ((!Ext.isEmpty(targetCol))&&(targetCol.mType=='col')){
                targetCol.add(Ext.widget("unBloc",block));
            }
        });
    },

    getElementLevel: function(element, level) {
        if (element.id=="masqueEdition") {
            return (level);
        } else {   
            return(this.getElementLevel(element.up(),level+1));
        }
    },

    saveRows: function(startComp) {
        var me=this;
        var nRows=[ ];
        Ext.Array.forEach(startComp.items.items, function(row){
            var newCols = [ ];
            var offset=0;
            Ext.Array.forEach(row.items.items, function(col){
                if (col.isXType("panel")) {
                    var blocks = null;
                    var rows = null;
                    var isTerminal=true;
                    if (col.final) { 

                    }else {
                        var thing=col.items.items[0];
                        if (Ext.isEmpty(thing)){} else if (thing.isXType("unBloc")) {

                    } else {
                        isTerminal=false;
                        rows=me.saveRows(col);
                    }
                }

                newCols.push({
                    eTitle:col.eTitle,
                    responsive:col.responsive,
                    classHTML:col.classHTML,
                    idHTML:col.idHTML,
                    displayTitle:col.displayTitle,
                    span:col.flex,
                    id:col.id,
                    mType:"col",
                    offset:offset,
                    blocks: blocks,
                    rows: rows,
                    isTerminal:isTerminal

                });
                offset=0;
            } else {offset=offset+col.flex;}

            });
            nRows.push({
                height:row.height,
                eTitle:row.eTitle,
                id:row.id,
                mType:"row",
                responsive:row.responsive,
                displayTitle:row.displayTitle,
                classHTML:row.classHTML,
                idHTML:row.idHTML,
                columns: newCols

            });
        });
        return nRows;
    },

    saveBlocks: function(startComp) {
        var newBlocks = [ ];
        Ext.Array.forEach(startComp.query("unBloc"), function(nBloc){
            newBlocks.push({

                bType:nBloc.bType,
                id:nBloc.id,
                parentCol:nBloc.up().getId(),
                mType:"block",
                champsConfig:nBloc.champsConfig,
                configBloc:nBloc.configBloc,
                title:nBloc.title,
                responsive:nBloc.responsive,
                classHTML:nBloc.classHTML,
                displayTitle:nBloc.displayTitle,
                idHTML:nBloc.idHTML,
                urlPrefix:nBloc.urlPrefix,
                flex:nBloc.flex,
                canEdit:nBloc.canEdit

            });

        });
        return(newBlocks);
    },

    init: function(application) {
        this.control({
            "#boutonSupprimerMasque": {
                click: this.deleteMask
            },
            "#masquesGrid": {
                select: this.masquesDisplay
            },
            "#ReusableElementsGrid": {
                select: this.reusablesGridSelect
            },
            "#arborescenceSites": {
                itemclick: this.onTreepanelItemClick
            },
            "#boutonCopierMasque": {
                click: this.copyMaskWindow
            },
            "#boutonNouveauMasque": {
                click: this.newMaskWindow
            },
            "#creerNouveauMasque": {
                click: this.createMask
            },
            "#AdminfMasquesEnregistrer": {
                click: this.maskSave
            },
            "#copierMasque": {
                click: this.copyMask
            },
            "#AdminfMasquesImporter": {
                click: this.importMaskWindow
            },
            "#masqueEdition panel": {
                render: this.selectionEvents
            },
            "#deleteElement": {
                click: this.deleteMaskElement
            },
            "#newCol": {
                click: this.addCol
            },
            "#newRow": {
                click: this.addRow
            },
            "#newBloc": {
                click: this.showBlocWindow
            },
            "#REAddButton": {
                click: this.importElement
            },
            "#boutonAjouterBloc": {
                click: this.addBloc
            },
            "#masqueEdition": {
                render: this.mainBoxSelect
            },
            "#masqueEdition unBloc": {
                render: this.blocSelect
            },
            "#ExportElementButton": {
                click: this.exportElement
            },
            "#BlocsSelectGrid": {
                itemdblclick: this.addBlocDblClick,
                select: this.blocDetailShow
            },
            "#exportElement": {
                click: this.exportMaskElementWindow
            },
            "#importElement": {
                click: this.showImportWindow
            },
            "#moveElementUp": {
                click: this.moveElementUp
            },
            "#moveElementDown": {
                click: this.moveElementDown
            }
        });
    }

});
