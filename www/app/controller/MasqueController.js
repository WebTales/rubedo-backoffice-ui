/*
 * File: app/controller/MasqueController.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.MasqueController', {
    extend: 'Ext.app.Controller',

    models: [
        'masquesDataModel'
    ],
    stores: [
        'VersionsDataJson',
        'MasquesDataJson'
    ],
    views: [
        'nouveauMasque',
        'ImportationMasques',
        'copierMasque'
    ],

    refs: [
        {
            ref: 'MasqueEdition',
            selector: '#masqueEdition'
        }
    ],

    onButtonClick2: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('delConfirmZ');
            fenetre.showAt(screen.width/2-100, 100);
            Ext.getCmp('delConfirmZOui').on('click', function() { 
                Ext.getCmp('masquesGrid').getStore().remove(cible);
                Ext.getCmp('masqueEdition').removeAll();
                Ext.getCmp('delConfirmZ').close();
            });  

        }
    },

    onButtonClick4: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            this.masqueMAJ(cible);
            cible.data.etat='publié';
            cible.data.derniereModification = new Date();
            cible.data.version++;
            cible.data.versions.push({text: cible.data.version, etat:'publié', date: new Date(), auteur: 'Igor'});
            Ext.getCmp('masquesGrid').getView().refresh();
        }

    },

    masqueDisplay: function(dataview, record, item, index, e, options) {
        var boiteMeta = dataview.findParentByType('window').getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        var valeurs= Ext.clone(record.data);
        valeurs.creation= Ext.Date.format(valeurs.creation, 'd-m-Y');
        valeurs.derniereModification= Ext.Date.format(valeurs.derniereModification, 'd-m-Y');
        boiteMeta.update(valeurs);

        var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.text);}
        else { typeFil= Ext.widget('button',{iconCls: "masque-icon", text:record.data.text, itemId:'type'});
        filArianne.add(typeFil);
    }
    var masque = record.data;
    this.getVersionsDataJsonStore().loadData(masque.versions);

    this.getMasqueEdition().removeAll();
    this.masqueRestit(masque.rows,1,this.getMasqueEdition()); 



    },

    onTreepanelItemClick: function(tablepanel, record, item, index, e, options) {
        var cible = Ext.getCmp('arborescenceSites').getSelectionModel().getSelection()[0];
        this.getMasqueEdition().removeAll();
        this.getMasqueEdition().setWidth(cible.data.largeur);
        this.masqueRestit(cible.raw.zones);
    },

    onButtonClick6: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('copierMasque');
            fenetre.showAt(screen.width/2-150, 100);
            Ext.getCmp('copierMasqueTitre').setValue(cible.data.text);
        }
    },

    onButtonClick: function(button, e, options) {
        var fenetre = Ext.widget('nouveauMasque');
        fenetre.showAt(screen.width/2-200, 100);
    },

    onButtonClick1: function(button, e, options) {
        if ((Ext.getCmp('nouveauMasqueTitre').isValid())&&(Ext.getCmp('nouveauMasqueSite').isValid())) {

            var nTitre = Ext.getCmp('nouveauMasqueTitre').getValue();
            var nSite = Ext.getCmp('nouveauMasqueSite').getValue();
            var nLargeur = Ext.getCmp('nouveauMasqueSite').store.findRecord('text', nSite).data.largeur;
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                etat: 'brouillon',
                largeur: nLargeur,
                auteur: 'Igor',
                creation: new Date(),
                derniereModification: new Date(),
                version: 1.0,
                versions:[
                {text: '1.0', etat: 'brouillon', date: new Date(), auteur: 'Igor'}
                ],
                zones:[
                {hauteur: 150, largeur: nLargeur, nom: 'Première zone', colonnes:[ { blocs :[ ] }]}

                ]

            });
            this.getMasquesDataJsonStore().add(nouvMasque);

            Ext.getCmp('nouveauMasqueFenetre').close();
            Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);
            this.onGridviewItemClick(Ext.getCmp('masquesGridView'));

        }
    },

    onButtonClick3: function(button, e, options) {
        var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            this.masqueMAJ(cible);
            cible.data.etat='brouillon';
            cible.data.derniereModification = new Date();
            cible.data.version++;
            cible.data.versions.push({text: cible.data.version, etat:'brouillon', date: new Date(), auteur: 'Igor'});
            Ext.getCmp('masquesGrid').getView().refresh();
        }
    },

    onButtonClick7: function(button, e, options) {
        if ((Ext.getCmp('copierMasqueTitre').isValid())&&(Ext.getCmp('copierMasqueSite').isValid())) {
            var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];
            var nTitre = Ext.getCmp('copierMasqueTitre').getValue();
            var nSite = Ext.getCmp('copierMasqueSite').getValue();
            var nLargeur = Ext.getCmp('copierMasqueSite').store.findRecord('text', nSite).data.largeur;
            var rapport = nLargeur/cible.data.largeur;
            var nZones = Ext.clone(cible.data.zones);
            if (rapport != 1) {
                this.masqueAdapt(nZones, rapport);
            }
            var nouvMasque = Ext.create('model.masquesDataModel', {
                text: nTitre,
                site: nSite,
                etat: 'brouillon',
                largeur: nLargeur,
                auteur: 'Igor',
                creation: new Date(),
                derniereModification: new Date(),
                version: 1.0,
                versions:[
                {text: '1.0', etat: 'brouillon', date: new Date(), auteur: 'Igor'}
                ],
                zones: nZones

            });
            this.getMasquesDataJsonStore().add(nouvMasque);

            Ext.getCmp('copieMasqueFenetre').close();    
        }
    },

    onButtonClick5: function(button, e, options) {
        var fenetre = Ext.widget('importationMasques');
        fenetre.showAt(screen.width/2-150, 100);

    },

    selectionEvents: function(abstractcomponent, options) {
        var me=this;
        abstractcomponent.getEl().on("mouseover", function(e){
            abstractcomponent.setBorder(4);
            e.stopEvent();
        });
        abstractcomponent.getEl().on("mouseout", function(e){
            abstractcomponent.setBorder(1);
            e.stopEvent();
        });
        abstractcomponent.getEl().on("click", function(e){
            var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());
            if (!Ext.isEmpty(prevSelected)) {
                prevSelected.removeBodyCls('selectedelement');
            }
            abstractcomponent.addBodyCls('selectedelement');
            this.frame(MyPrefData.themeColor);
            Ext.getCmp('elementIdField').setValue(abstractcomponent.id);
            Ext.getCmp('deleteElement').enable();
            var propEdit=Ext.getCmp('elementEditControl');
            propEdit.setTitle(abstractcomponent.id.replace("panel", abstractcomponent.mType));


            propEdit.removeAll();
            if (abstractcomponent.mType=="row"){
                Ext.getCmp('newRow').disable();
                if (abstractcomponent.getComponent("eol").flex===0){
                    Ext.getCmp('newCol').disable();
                } else {
                    Ext.getCmp('newCol').enable();
                }
                propEdit.add(Ext.widget('button',{
                    itemId:"rowAutoHeight",
                    text:"Hauteur automatique",
                    anchor:"100%",
                    tooltip:"La hauteur s'adapte au contenu lors du rendu final",
                    hidden:true,
                    handler:function(){
                        abstractcomponent.setHeight(null);
                        abstractcomponent.flex=1;
                        abstractcomponent.up().doLayout();
                        propEdit.getComponent("rowHeightFixed").setValue();
                        this.hide();
                    }
                }));
                if (!Ext.isEmpty(abstractcomponent.height)){propEdit.getComponent("rowAutoHeight").show();}
                propEdit.add(Ext.widget('numberfield',{
                    itemId:"rowHeightFixed",
                    fieldLabel:"Hauteur fixe ",
                    labelWidth:80,
                    allowDecimals:false,
                    anchor:"60%",
                    margin:"10 0 0 0",
                    style:"{float:left;}",
                    value:abstractcomponent.height
                }));
                propEdit.add(Ext.widget('button',{
                    text:"Appliquer",
                    anchor:"38%",
                    margin:"10 0 0 0",
                    style:"{float:right;}",
                    handler:function(){
                        abstractcomponent.flex=null;
                        abstractcomponent.setHeight(propEdit.getComponent("rowHeightFixed").getValue());
                        abstractcomponent.up().doLayout();
                        propEdit.getComponent("rowAutoHeight").show();
                    }
                }));


            }    

            else if (abstractcomponent.mType=="col"){
                if ((abstractcomponent.final)){
                Ext.getCmp('newRow').disable();} else {
                    Ext.getCmp('newRow').enable();
                }
                Ext.getCmp('newCol').disable();
                //console.log(abstractcomponent);

                var offsetEdit=Ext.widget('numberfield',{
                    itemId:"offsetEditor",
                    fieldLabel:"Offset ",
                    editable:false,
                    labelWidth:45,
                    allowDecimals:false,
                    anchor:"50%",
                    margin:"10 0 0 0",
                    style:"{float:left;}",
                    value:0,
                    minValue:0
                });

                var spanEdit=Ext.widget('numberfield',{
                    itemId:"spanEditor",
                    fieldLabel:"Span ",
                    labelWidth:45,
                    editable:false,
                    allowDecimals:false,
                    anchor:"50%",
                    margin:"10 0 0 10",
                    style:"{float:right;}",
                    value:abstractcomponent.flex,
                    minValue:1
                });



                propEdit.add(offsetEdit);
                propEdit.add(spanEdit);
                me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,false);
                offsetEdit.on("change",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});
                spanEdit.on("change",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});





            }

            e.stopEvent();
        });
    },

    deleteMaskElement: function(button, e, options) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        if (cible.mType=="col"){
            var myEol=cible.up().getComponent("eol");
            var myOffset=cible.previousSibling();
            if (!Ext.isEmpty(myOffset)) {
                if ((myOffset.isXType("container"))&&(!(myOffset.isXType("panel")))) {
                    myEol.flex=myEol.flex+myOffset.flex;
                    myOffset.destroy();
                }
            }
            myEol.flex=myEol.flex+cible.flex;

        }
        cible.destroy();
        Ext.getCmp("newRow").disable();
        Ext.getCmp("newCol").disable();
        Ext.getCmp("deleteElement").disable();
        Ext.getCmp('elementEditControl').setTitle("Séléctionnez un élément");
        Ext.getCmp('elementEditControl').removeAll();
        Ext.getCmp('elementIdField').setValue(null);
    },

    addCol: function(button, e, options) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var myEol=cible.getComponent('eol');

        if (myEol.flex>0) {
            var isFinalCol=false;
            if (cible.up().mType=="col"){
                isFinalCol=true;
            }
            var newCol=Ext.widget('panel', {
                header:false,
                flex:1,
                final:isFinalCol,
                mType:'col',
                margin:4,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                }
            });
            myEol.flex=myEol.flex-1;
            cible.insert(cible.items.items.length-1,newCol);
            if (myEol.flex===0){
                button.disable();
            }

        }
    },

    addRow: function(button, e, options) {
        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());
        var row = Ext.widget('panel', {
            header:false,
            mType:"row",
            flex:1,
            margin:4,
            layout: {
                type: 'hbox',
                align: 'stretch'
            }
        });
        row.add(Ext.widget('container', {flex:12,itemId:"eol"}));
        cible.insert(cible.items.items.length,row);
    },

    applyConstrain: function(target, offsetF, spanF, applyFirst) {
        var myEol=target.up().getComponent("eol");
        var myOffset=null;
        if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType("container"))&&(!(target.prev().isXType("panel")))) {
            myOffset=target.prev();
        }
        if (applyFirst) {
            myEol.flex=myEol.flex+target.flex-spanF.getValue();
            target.flex=spanF.getValue();
            spanF.setMaxValue(target.flex+myEol.flex);
            offsetF.setMaxValue(offsetF.getValue()+myEol.flex);
            target.up().doLayout();
            if (offsetF.getValue()>0){ 
                if (Ext.isEmpty(myOffset)) {
                    myOffset=Ext.widget("container",{flex:0});
                    target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);


                } 
                myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                myOffset.flex=offsetF.getValue();
                offsetF.setMaxValue(myOffset.flex+myEol.flex);
                spanF.setMaxValue(spanF.getValue()+myEol.flex);
                target.up().doLayout();

            } else if((offsetF.getValue()===0)) {
                if (!Ext.isEmpty(myOffset)) {
                    myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                    myOffset.flex=offsetF.getValue();
                    offsetF.setMaxValue(myOffset.flex+myEol.flex);
                    spanF.setMaxValue(spanF.getValue()+myEol.flex);
                    myOffset.destroy();
                    target.up().doLayout();      
                } 

            }
        }
        else {
            if (Ext.isEmpty(myOffset)){
                offsetF.setValue(0);
                offsetF.setMaxValue(myEol.flex);
            }
            else {
                offsetF.setValue(myOffset.flex);
                offsetF.setMaxValue(myOffset.flex+myEol.flex); 
            }

            spanF.setValue(target.flex);
            spanF.setMaxValue(target.flex+myEol.flex);
        }
    },

    masqueMAJ: function(cible) {
        var nouvZones = [ ];
        var zonesM =Ext.getCmp('masqueEdition').items.items;
        for (i=0; i<zonesM.length; i++) {
            var nZone = {hauteur: zonesM[i].height, largeur: zonesM[i].width, nom: zonesM[i].title, colonnes: [ ] };
            var colonnesM = zonesM[i].items.items;
            for (j=0; j<colonnesM.length; j++){
                var nColonne = {flex:colonnesM[j].flex, blocs: [ ]};
                var blocsM =colonnesM[j].items.items;
                for(k=0;k<blocsM.length; k++) {
                    nColonne.blocs.push({ flex : blocsM[k].flex, title: blocsM[k].title, bType: blocsM[k].bType, champsConfig: blocsM[k].champsConfig, configBloc: blocsM[k].configBloc});
                }        
                nZone.colonnes.push(nColonne);
            }
            nouvZones.push(nZone);
        }
        cible.data.zones=nouvZones;
    },

    masqueAdapt: function(zones, rapport) {
        for (i=0; i<zones.length; i++) {
            zones[i].largeur = zones[i].largeur * rapport;  
        }

    },

    masqueRestit: function(mRows, its, cible) {
        var me=this;
        Ext.Array.forEach(mRows, function(row){
            var newRow = Ext.widget('panel', {
                header:false,
                mType:"row",
                margin:4,
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                }
            });
            var rFlex=1;
            var eolWidth=12;
            Ext.Array.forEach(row.columns, function(column){
                if (column.offset>0) {
                    newRow.add(Ext.widget('container', {flex:column.offset}));
                    eolWidth=eolWidth-column.offset;
                }
                var isFinalCol=false;
                if (its<=0){isFinalCol=true;}
                var newCol=Ext.widget('panel', {
                    header:false,
                    flex:column.span,
                    final:isFinalCol,
                    mType:'col',
                    margin:4,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    }
                });
                if ((its>0)&&(column.isTerminal===false)) {
                    rFlex=Ext.Array.max([rFlex,column.rows.length]);
                    me.masqueRestit(column.rows,its-1,newCol);    
                }
                else {
                    //ajout bloc
                }
                eolWidth=eolWidth-column.span;
                newRow.add(newCol);

            });
            newRow.add(Ext.widget("container",{
                flex:eolWidth,
                itemId:"eol"
            }));
            if (Ext.isEmpty(row.height)) {
                newRow.flex=rFlex;
            } else {
                newRow.height=row.height;
            }
            cible.add(newRow);  


        });
    },

    onControllerClickStub: function() {

    },

    onControllerItemClickStub: function() {

    },

    init: function() {
        this.control({
            "#boutonSupprimerMasque": {
                click: this.onButtonClick2
            },
            "#AdminfMasquesPublier": {
                click: this.onButtonClick4
            },
            "#masquesGridView": {
                itemclick: this.masqueDisplay
            },
            "#arborescenceSites": {
                itemclick: this.onTreepanelItemClick
            },
            "#boutonCopierMasque": {
                click: this.onButtonClick6
            },
            "#boutonNouveauMasque": {
                click: this.onButtonClick
            },
            "#creerNouveauMasque": {
                click: this.onButtonClick1
            },
            "#AdminfMasquesEnregistrer": {
                click: this.onButtonClick3
            },
            "#copierMasque": {
                click: this.onButtonClick7
            },
            "#AdminfMasquesImporter": {
                click: this.onButtonClick5
            },
            "#masqueEdition panel": {
                render: this.selectionEvents
            },
            "#deleteElement": {
                click: this.deleteMaskElement
            },
            "#newCol": {
                click: this.addCol
            },
            "#newRow": {
                click: this.addRow
            }
        });

    }

});
