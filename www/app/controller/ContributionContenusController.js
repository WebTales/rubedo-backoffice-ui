/*
 * File: app/controller/ContributionContenusController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.ContributionContenusController', {
    extend: 'Ext.app.Controller',

    models: [
        'contenusDataModel'
    ],
    stores: [
        'ContenusDataJson'
    ],
    views: [
        'AjouterContenu'
    ],

    typeSelect: function(dataviewmodel, record, eOpts) {
        var filArianne = Ext.getCmp("TypesContenusGrid").findParentByType('window').getDockedComponent('filArianne');
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.type);}
        else { typeFil= Ext.widget('button',{iconCls: "folder", text:record.data.type, itemId:'type'});
        filArianne.add(typeFil);
    }

    Ext.getCmp("ContenusGrid").filterBar.clearFilters();

    Ext.Array.forEach(Ext.getCmp("contributionContenus").getComponent("contextBar").query("buttongroup"), function(btn){btn.enable();});
    Ext.getCmp("ajoutPanierContenus").disable();
    Ext.getCmp("boutonSupprimerContenu").disable();
    Ext.getCmp("boutonModifierContenu").disable();
    Ext.getCmp("boutonCopierContenus").disable();
    Ext.getCmp("contribWorkflowBox").disable();
    var  customMeta = record.get("type");
    var imageMeta = Ext.getCmp('contributionContenus').getDockedComponent('barreMeta').getComponent('imageBarreMeta');
    imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');  
    var boiteMeta = Ext.getCmp("contributionContenus").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
    boiteMeta.update(customMeta);
    var myDependantTypes= [ ];
    Ext.Array.forEach(record.get("dependantTypes"), function(someType){
        myDependantTypes.push(Ext.getStore("DepTypesForContents").findRecord("id",someType));
    });
    Ext.getStore("DepContentsCombo").removeAll();
    Ext.getStore("DepContentsCombo").loadData(myDependantTypes);
    },

    contentSaveAndPublish: function(button, e, eOpts) {
        if (button.specialMode){
            if (Ext.getCmp("boiteAChampsContenus").getForm().isValid()){
                var maskMode = false;
                if (Ext.getCmp(button.targetedId).findParentByType("window").id=="adminFMDP"){
                    maskMode=true;
                }        
                var champs=Ext.getCmp("boiteAChampsContenus").getForm().getValues();
                if (maskMode){
                    champs.text=Ext.getCmp(Ext.getCmp('elementIdField').getValue()).title;
                } else{
                    champs.text=Ext.getCmp(Ext.getCmp('pageElementIdField').getValue()).title;
                }
                champs.summary="";
                if (button.isUpdate) {
                    var myRec =Ext.getStore("CurrentContent").getRange()[0];
                    myRec.beginEdit();
                    if ((myRec.get("text")!="Texte Simple")&&(myRec.get("text")!="Texte Riche")){
                        champs.text=myRec.get("text");
                    }
                    myRec.set("text",champs.text);
                    myRec.set("champs",champs);
                    Ext.getCmp("contentsDLSToolbar").persisti18n(myRec);
                    myRec.endEdit();
                    Ext.getStore("CurrentContent").removeAll();
                    Ext.getStore('TaxonomyForC2').removeAll();
                    Ext.getStore("ContentTypesForContent").removeAll();
                    Ext.getStore("DepContentsCombo2").removeAll();
                    Ext.getStore('NestedContentsStore').removeAll();
                    Ext.getCmp('ajouterContenu').close();

                } else{
                    Ext.getStore("CurrentContent").removeAll();
                    var nativeLanguage=Ext.getCmp("workingLanguageField").getValue();
                    var i18n= { };
                    i18n[nativeLanguage]={fields:champs};
                    var nContenu = Ext.create('Rubedo.model.contenusDataModel', {
                        text: champs.text,
                        champs: champs,
                        nativeLanguage:nativeLanguage,
                        i18n:i18n,
                        online:true,
                        taxonomie:[ ],
                        status: "published",
                        typeId: Ext.getStore("ContentTypesForContent2").getRange()[0].get("id")

                    });
                    if (maskMode){
                        nContenu.set("maskId", Ext.getCmp("masquesGrid").getSelectionModel().getLastSelected().get("id"));
                        nContenu.set("blockId", Ext.getCmp('elementIdField').getValue());
                    } else{
                        nContenu.set("pageId", Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected().get("id"));
                        nContenu.set("blockId", Ext.getCmp('pageElementIdField').getValue());
                    }

                    Ext.getStore("CurrentContent").add(nContenu);   
                    Ext.getStore("CurrentContent").addListener("datachanged",function(){
                        Ext.getCmp(button.targetedId).setValue(nContenu.get("id"));
                        Ext.getStore("ContentTypesForContent2").removeAll();
                        Ext.getStore("CurrentContent").removeAll();
                        Ext.getCmp('ajouterContenu').close();
                    },this,{single:true});

                    }

                }
            } else{
                this.nContenuRecorder('published',button.isUpdate);
            }
    },

    contentSave: function(button, e, eOpts) {
        this.nContenuRecorder('draft', button.isUpdate);
    },

    putNestedContentsOffline: function(button, e, eOpts) {
        var myStore = Ext.getCmp("NestedContentsGrid").getStore();
        myStore.suspendAutoSync();
        Ext.Array.forEach(Ext.getCmp("NestedContentsGrid").getSelectionModel().getSelection(), function(nesC){
            nesC.set("online", false);
        });
        myStore.resumeAutoSync();
        myStore.sync();
    },

    nestedContentsSelect: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)){
            Ext.getCmp("nestedContentsDeleteBtn").disable();
            Ext.getCmp("nestedContentsModifyBtn").disable();
            Ext.getCmp("nestedContentsOnlineBtn").disable();
            Ext.getCmp("nestedContentsOfflineBtn").disable();
        } else if (selected.length==1) {
            Ext.getCmp("nestedContentsDeleteBtn").enable();
            Ext.getCmp("nestedContentsModifyBtn").enable();
            if (selected[0].get("online")){
                Ext.getCmp("nestedContentsOnlineBtn").disable();
                Ext.getCmp("nestedContentsOfflineBtn").enable();
            } else {
                Ext.getCmp("nestedContentsOnlineBtn").enable();
                Ext.getCmp("nestedContentsOfflineBtn").disable();
            }
        } else {
            Ext.getCmp("nestedContentsModifyBtn").disable();
            Ext.getCmp("nestedContentsDeleteBtn").enable();    
            var onlines = [];
            Ext.Array.forEach(selected, function(someContent){
                Ext.Array.include(onlines, someContent.get("online"));
            });
            if (onlines.length>1) {
                Ext.getCmp("nestedContentsOnlineBtn").disable();
                Ext.getCmp("nestedContentsOfflineBtn").disable();        
            } else {
                if (onlines[0]) {
                    Ext.getCmp("nestedContentsOnlineBtn").disable();
                } else {
                    Ext.getCmp("nestedContentsOfflineBtn").disable();
                }}
            }
    },

    onWindowBeforeClose: function(panel, eOpts) {
        if (panel.isXType("window")){
            Ext.getStore("TaxonomyForC").removeAll();
            Ext.getStore("DepContentsCombo").removeAll();
            Ext.getStore("NestedContentsStore").removeAll();
            Ext.getStore("ContenusDataJson").removeAll();
            Ext.getStore("DepTypesForContents").removeAll();
            Ext.getStore("TypesContenusNDepDataJson").removeAll();
        }
    },

    contentDelete: function(button, e, eOpts) {
        var cible = Ext.getCmp('ContenusGrid').getSelectionModel().getSelection();
        if (Ext.isDefined(cible)) {
            var fenetre = Ext.widget('delConfirmZ');
            fenetre.show();
            Ext.getCmp('delConfirmZOui').on('click', function() { 

                Ext.getCmp('delConfirmZ').close();
                this.getContenusDataJsonStore().remove(cible);

            }, this);  

        }
    },

    contentEdit: function(button, e, eOpts) {
        var cible = Ext.getCmp('ContenusGrid').getSelectionModel().getSelection()[0];
        this.unitaryContentEdit(cible.get("id"));
    },

    contentsSelect: function(model, selected, eOpts) {
        Ext.getCmp("boutonModifierContenu").setText(Rubedo.RubedoAutomatedElementsLoc.editText);
        Ext.getCmp("boutonModifierContenu").restricedRead=false;
        //console.log(Ext.getCmp("boutonModifierContenu").restricedRead);
        var boiteMeta = Ext.getCmp("contributionContenus").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        var imageMeta = Ext.getCmp('contributionContenus').getDockedComponent('barreMeta').getComponent('imageBarreMeta');
        var customMeta= "";
        if (selected.length===0) {
            Ext.getCmp("ajoutPanierContenus").disable();
            Ext.getCmp("boutonSupprimerContenu").disable();
            Ext.getCmp("boutonModifierContenu").disable();
            Ext.getCmp("boutonCopierContenus").disable();
            Ext.getCmp("contribWorkflowBox").disable();
            customMeta = Ext.getCmp('TypesContenusGrid').getSelectionModel().getLastSelected().data.type;
            imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');    

        } else if (selected.length==1) {
            Ext.getCmp("ajoutPanierContenus").enable();
            Ext.getCmp("boutonCopierContenus").enable();
            if ((!selected[0].get("readOnly"))&&(ACL.interfaceRights["write.ui.contents."+selected[0].get("status")])){
                Ext.getCmp("boutonModifierContenu").enable();
                Ext.getCmp("boutonSupprimerContenu").enable();
            }else if (ACL.interfaceRights["read.ui.contents."+selected[0].get("status")]){
                Ext.getCmp("boutonModifierContenu").enable();
                Ext.getCmp("boutonModifierContenu").setText(Rubedo.RubedoAutomatedElementsLoc.displayText);
                Ext.getCmp("boutonModifierContenu").enable();
                Ext.getCmp("boutonSupprimerContenu").disable();        
            } else {
                Ext.getCmp("boutonModifierContenu").disable();
                Ext.getCmp("boutonSupprimerContenu").disable();
            }

            Ext.getCmp("contribWorkflowBox").enable();
            Ext.Array.forEach(Ext.getCmp("contribWorkflowBox").items.items, function(item){item.enable();});    
            customMeta=selected[0].get("text")+"</br> "+Rubedo.RubedoAutomatedElementsLoc.creationText+" : "+Ext.Date.format(selected[0].get("createTime"), Ext.Date.defaultFormat)+
            " "+Rubedo.RubedoAutomatedElementsLoc.lastUpdateText+" : "+Ext.Date.format(selected[0].get("lastUpdateTime"), Ext.Date.defaultFormat)+" "+Rubedo.RubedoAutomatedElementsLoc.authorText+" : "+selected[0].get("createUser").fullName;
            boiteMeta.update(customMeta);
            if (selected[0].get("online")) {
                Ext.getCmp("contentOnlineBtn").disable();
            } else {
                Ext.getCmp("contentOfflineBtn").disable();
            }
            if (selected[0].get("status")=="published") {
                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_accept.png');
                Ext.getCmp("contentAcceptPublishBtn").disable();
                Ext.getCmp("contentSubmitValBtn").disable();
                Ext.getCmp("contentRefuseBtn").disable();

            } else if (selected[0].get("status")=="pending") {
                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_process.png');
                Ext.getCmp("contentSubmitValBtn").disable();
            } else if (selected[0].get("status")=="refused") {
                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_remove.png');
                Ext.getCmp("contentRefuseBtn").disable();
            }else if (selected[0].get("status")=="draft") {
                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_edit.png');
                if (!Ext.getCmp("contentSubmitValBtn").isVisible()) {
                    Ext.getCmp("contentAcceptPublishBtn").disable();
                }
                Ext.getCmp("contentRefuseBtn").disable();
            } else {
                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_full.png');
            }
            if (selected[0].get("readOnly")){
                Ext.getCmp("contribWorkflowBox").disable();
            }


        } else {
            Ext.getCmp("ajoutPanierContenus").enable();
            Ext.getCmp("boutonSupprimerContenu").enable();
            Ext.getCmp("boutonModifierContenu").disable();
            Ext.getCmp("boutonCopierContenus").disable();
            Ext.getCmp("contribWorkflowBox").enable();
            var statuses = [];
            var onlines = [];
            var RO = false;
            Ext.Array.forEach(selected, function(someContent){
                Ext.Array.include(statuses, someContent.get("status"));
                Ext.Array.include(onlines, someContent.get("online"));
                if (someContent.get("readOnly")){
                    RO=true;
                }
            });
            if (statuses.length>1){
                Ext.getCmp("contribWorkflowBox").disable();
                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_full.png');

            } else {
                Ext.Array.forEach(Ext.getCmp("contribWorkflowBox").items.items, function(item){item.enable();});
                if (onlines.length>1) {
                    Ext.getCmp("contentOnlineBtn").disable();
                    Ext.getCmp("contentOfflineBtn").disable();

                }else {
                    if (onlines[0]) {
                        Ext.getCmp("contentOnlineBtn").disable();
                    } else {
                        Ext.getCmp("contentOfflineBtn").disable();
                    }}
                    if (statuses[0]=="published") {
                        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_accept.png');
                        Ext.getCmp("contentAcceptPublishBtn").disable();
                        Ext.getCmp("contentSubmitValBtn").disable();
                        Ext.getCmp("contentRefuseBtn").disable();

                    } else if (statuses[0]=="pending") {
                        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_process.png');
                        Ext.getCmp("contentSubmitValBtn").disable();

                    } else if (statuses[0]=="refused") {
                        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_remove.png');
                        Ext.getCmp("contentRefuseBtn").disable();

                    }else if (statuses[0]=="draft") {
                        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_edit.png');
                        if (!Ext.getCmp("contentSubmitValBtn").isVisible()) {
                            Ext.getCmp("contentAcceptPublishBtn").disable();
                        }
                        Ext.getCmp("contentRefuseBtn").disable();
                    }
                }
                customMeta=selected.length+" "+Rubedo.RubedoAutomatedElementsLoc.contentsText;
                if (RO==true){
                    Ext.getCmp("contribWorkflowBox").disable();
                    Ext.getCmp("boutonModifierContenu").disable();
                    Ext.getCmp("boutonSupprimerContenu").disable();
                }
            }

            boiteMeta.update(customMeta);
    },

    doubleClickEdit: function(dataview, record, item, index, e, eOpts) {
        //Ext.getCmp("boutonModifierContenu").fireEvent("click");
        this.unitaryContentEdit(record.get("id"));
    },

    putContentsOnline: function(button, e, eOpts) {
        Ext.getStore("ContenusDataJson").suspendAutoSync();
        Ext.Array.forEach(Ext.getCmp("ContenusGrid").getSelectionModel().getSelection(), function(content){

            content.set("online", true);
        });
        Ext.getStore("ContenusDataJson").resumeAutoSync();
        Ext.getStore("ContenusDataJson").sync();
    },

    contentRefuse: function(button, e, eOpts) {
        Ext.getStore("ContenusDataJson").suspendAutoSync();
        Ext.Array.forEach(Ext.getCmp("ContenusGrid").getSelectionModel().getSelection(), function(content){
            if (content.get("status")=="pending") {
                content.set("status", "refused");
            }});
            Ext.getStore("ContenusDataJson").resumeAutoSync();
            Ext.getStore("ContenusDataJson").sync();
    },

    putContentsOffline: function(button, e, eOpts) {
        Ext.getStore("ContenusDataJson").suspendAutoSync();
        Ext.Array.forEach(Ext.getCmp("ContenusGrid").getSelectionModel().getSelection(), function(content){

            content.set("online", false);
        });
        Ext.getStore("ContenusDataJson").resumeAutoSync();
        Ext.getStore("ContenusDataJson").sync();
    },

    contentSubmitVal: function(button, e, eOpts) {
        Ext.getStore("ContenusDataJson").suspendAutoSync();
        Ext.Array.forEach(Ext.getCmp("ContenusGrid").getSelectionModel().getSelection(), function(content){
            if ((content.get("status")=="draft")||(content.get("status")=="refused")) {
                content.set("status", "pending");
            }});
            Ext.getStore("ContenusDataJson").resumeAutoSync();
            Ext.getStore("ContenusDataJson").sync();
    },

    contentAcceptPublish: function(button, e, eOpts) {
        Ext.getStore("ContenusDataJson").suspendAutoSync();
        Ext.Array.forEach(Ext.getCmp("ContenusGrid").getSelectionModel().getSelection(), function(content){

            content.set("status", "published");
        });
        Ext.getStore("ContenusDataJson").resumeAutoSync();
        Ext.getStore("ContenusDataJson").sync();
    },

    contentSaveAndSubmit: function(button, e, eOpts) {
        this.nContenuRecorder('pending',button.isUpdate);
    },

    nestedContentsDelete: function(button, e, eOpts) {
        Ext.getCmp("NestedContentsGrid").getStore().remove(Ext.getCmp("NestedContentsGrid").getSelectionModel().getSelection());
    },

    putNestedContentsOnline: function(button, e, eOpts) {
        var myStore = Ext.getCmp("NestedContentsGrid").getStore();
        myStore.suspendAutoSync();
        Ext.Array.forEach(Ext.getCmp("NestedContentsGrid").getSelectionModel().getSelection(), function(nesC){
            nesC.set("online", true);
        });
        myStore.resumeAutoSync();
        myStore.sync();
    },

    addNestedContent: function(button, e, eOpts) {
        if (Ext.getCmp("nestedContentsAddCombo").isValid()) {
            var myType=Ext.getCmp("nestedContentsAddCombo").getStore().findRecord("id",Ext.getCmp("nestedContentsAddCombo").getValue());
            var myWindow = Ext.widget('NestedContentAddWindow');
            Ext.getCmp('ViewportPrimaire').add(myWindow);
            if (Ext.isDefined(window.innerHeight)) {
                if (myWindow.height>(window.innerHeight-40)) {myWindow.setHeight((window.innerHeight-40));}
                if (myWindow.width>(window.innerWidth)) {myWindow.setWidth((window.innerWidth));}
            }
            myWindow.show();
            var formulaireTC = Ext.getCmp('nestedContentsFieldBox');
            var champsD =myType.get("champs");
            Ext.Array.forEach(champsD,function(donnees) {
                var configurateur = Ext.clone(donnees.config);
                if (donnees.cType =='treepicker'){ 
                    var monStore= Ext.getStore(donnees.store);
                    configurateur.store = monStore;
                    monStore.load();
                }
                else if (donnees.cType == 'combobox') {
                    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
                    configurateur.store = monStore;
                }
                var nouvChamp = Ext.widget(donnees.cType, configurateur);
                nouvChamp.config=Ext.clone(donnees.config);
                if (donnees.cType =='triggerfield'){ 
                    var Ouvrir = Ext.clone(donnees.ouvrir);
                    nouvChamp.onTriggerClick= function() {
                        var fenetre = Ext.widget(Ouvrir);
                        fenetre.showAt(screen.width/2-200, 100);
                    } ; 
                    nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);
                }  
                nouvChamp.anchor = '90%';
                nouvChamp.style = '{float:left;}';
                var enrobage =Ext.widget('ChampTC');
                enrobage.add(nouvChamp);
                enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);
                if (nouvChamp.multivalued) {
                    enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: 'Valeurs multiples', itemId: 'boutonReplicateurChamps'}));

                };
                formulaireTC.add(enrobage);

            });
        }
    },

    saveNestedContent: function(button, e, eOpts) {
        this.nestedContentRecorder(button.isUpdate);
    },

    nestedContentEdit: function(button, e, eOpts) {
        var cible = Ext.getCmp('NestedContentsGrid').getSelectionModel().getSelection()[0];
        Ext.getCmp("nestedContentsAddCombo").setValue(cible.get("typeId"));
        Ext.getCmp("nestedContentsAddBtn").fireEvent("click");
        Ext.getCmp('nestedContentsFieldBox').getForm().setValues(cible.get("fields"));
        Ext.Object.each(cible.get("fields"), function(key, value, myself){
            if (Ext.isArray(value)) {
                var multiField=Ext.getCmp('nestedContentsFieldBox').query('[name='+key+']')[0];
                var y=0;
                if (multiField.multivalued) {
                    Ext.Array.each(value,function(val,index){
                        if (index>0) {
                            multiField.up().getComponent('boutonReplicateurChamps').fireEvent("click",multiField.up().getComponent('boutonReplicateurChamps'));
                        }
                        Ext.getCmp('nestedContentsFieldBox').query('[name='+key+']')[index].setValue(val);
                    }); 
                }
            }
        });


        Ext.getCmp("nestedContentRecordBtn").isUpdate=true;
        Ext.getCmp('ajouterContenu').setTitle("Modifier un contenu imbriqué");
    },

    NCDblClickEdit: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp("nestedContentsModifyBtn").fireEvent("click");
    },

    onWindowRender: function(component, eOpts) {
        if (component.isXType("window")){
            Ext.getStore("TaxonomyForC").load();
            Ext.getStore("DepTypesForContents").load();
            Ext.getStore("TypesContenusNDepDataJson").load();
        }
    },

    onPageContentGridItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.unitaryContentEdit(record.get("id"), false);
    },

    onBoutonCopierContenusClick: function(button, e, eOpts) {
        var copiedOne = Ext.getCmp("ContenusGrid").getSelectionModel().getLastSelected().copy();
        Ext.data.Model.id(copiedOne);
        copiedOne.data.champs.text=copiedOne.get("text")+" - Copie du "+Ext.Date.format(new Date(), 'j F, Y, G:i');
        copiedOne.set("status", "draft");
        copiedOne.set("text",copiedOne.get("text")+" - Copie du "+Ext.Date.format(new Date(), 'j F, Y, G:i'));
        Ext.getCmp("ContenusGrid").getStore().add(copiedOne);
    },

    onBoutonRefuserNouveauContenuClick: function(button, e, eOpts) {
        this.nContenuRecorder('refused',true);
    },

    nContenuRecorder: function(status, update) {
        if (Ext.getCmp("boiteAChampsContenus").getForm().isValid()){
            if (Ext.getCmp("boiteATaxoContenus").getForm().isValid()){
                if (Ext.getCmp("contentMetadataBox").getForm().isValid()){
                    var champs=Ext.getCmp("boiteAChampsContenus").getForm().getValues();
                    Ext.Array.forEach(Ext.getCmp("boiteAChampsContenus").query("checkboxgroup"),function(cbGroup){
                        champs[cbGroup.name]=cbGroup.getValue();
                    });
                    var taxonomie =Ext.getCmp("boiteATaxoContenus").getForm().getValues();
                    var droits = Ext.getCmp("boiteADroitsContenus").getForm().getValues();
                    var metaData = Ext.getCmp("contentMetadataBox").getForm().getValues();
                    if (update) {
                        var myRec =Ext.getStore("CurrentContent").getRange()[0];
                        myRec.beginEdit();
                        myRec.set("text",champs.text);
                        myRec.set("champs",champs);
                        myRec.set("taxonomie",taxonomie);
                        myRec.set("status",status);
                        myRec.set(metaData);
                        myRec.set(droits);
                        Ext.getCmp("contentsDLSToolbar").persisti18n(myRec);
                        myRec.endEdit();
                        Ext.getStore("CurrentContent").removeAll();
                        Ext.getStore('TaxonomyForC2').removeAll();
                        Ext.getStore("ContentTypesForContent").removeAll();
                        Ext.getStore("DepContentsCombo2").removeAll();
                        Ext.getStore('NestedContentsStore').removeAll();

                    } 
                    else {
                        var nativeLanguage=Ext.getCmp("workingLanguageField").getValue();
                        var i18n= { };
                        i18n[nativeLanguage]={fields:champs};
                        var nContenu = Ext.create('Rubedo.model.contenusDataModel', {
                            text: champs.text,
                            champs: champs,
                            taxonomie:taxonomie,
                            nativeLanguage:nativeLanguage,
                            i18n:i18n,
                            online:true,
                            status: status,
                            typeId: Ext.getCmp('TypesContenusGridView').getSelectionModel().getLastSelected().get("id")

                        });
                        nContenu.set(metaData);
                        nContenu.set(droits);

                        Ext.getCmp('ContenusGrid').getStore().add(nContenu);
                    }
                    Ext.getCmp('ajouterContenu').close();
                } else {
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle,Rubedo.RubedoAutomatedElementsLoc.invalidMetaError);
                    Ext.getCmp("ajouterContenu").getComponent(0).setActiveTab(1);
                }
            } else {
                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle,Rubedo.RubedoAutomatedElementsLoc.invalidTaxoError);
                Ext.getCmp("ajouterContenu").getComponent(0).setActiveTab(2);
            }
        } else {
            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle,Rubedo.RubedoAutomatedElementsLoc.invalidFieldsError);
            Ext.getCmp("ajouterContenu").getComponent(0).setActiveTab(0);
        }
    },

    nestedContentRecorder: function(update) {
        if (Ext.getCmp("nestedContentsFieldBox").getForm().isValid()){
            var fields=Ext.getCmp("nestedContentsFieldBox").getForm().getValues();
            if (update) {
                var myRec =Ext.getCmp("NestedContentsGrid").getSelectionModel().getSelection()[0];
                myRec.beginEdit();
                myRec.set("text",fields.text);
                myRec.set("fields",fields);
                myRec.endEdit();

            } 
            else {
                var nContenu = Ext.create('Rubedo.model.nestedContentModel', {
                    text: fields.text,
                    fields: fields,
                    typeId: Ext.getCmp('nestedContentsAddCombo').getValue()

                });

                Ext.getCmp("NestedContentsGrid").getStore().add(nContenu);
            }
            Ext.getCmp('NestedContentAddWindow').close();
        }
    },

    unitaryContentEdit: function(id, specialMode, targetedId) {
        var me=this;
        Ext.getStore('TaxonomyForC2').load();
        Ext.getStore("CurrentContent").getProxy().extraParams.id = id;
        Ext.getStore("CurrentContent").addListener("load",function(theStore,records,successful){
            if (successful){
                var theContent = records[0];
                if ((!theContent.get("readOnly"))&&(ACL.interfaceRights["write.ui.contents"])&&(ACL.interfaceRights["write.ui.contents."+theContent.get("status")])){
                    me.prepareContext(theContent, true, specialMode, targetedId);
                }else if ((ACL.interfaceRights["read.ui.contents"])&&(ACL.interfaceRights["read.ui.contents."+theContent.get("status")])){
                    me.prepareContext(theContent, false, specialMode, targetedId);
                } else {
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.insufficientContentRightsError);
                    theStore.removeAll();
                }

            }
        },this,{single:true});
            Ext.getStore("CurrentContent").load();
    },

    displayContentEditWindow: function(content, contentType, editMode, specialMode, targetedId) {
        var fenetre = Ext.widget('ajouterContenu', {specialMode:specialMode});
        Ext.getCmp('ViewportPrimaire').add(fenetre);
        if (Ext.isDefined(window.innerHeight)) {
            if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}
            if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}
        }
        fenetre.show();
        Ext.getCmp("nestedContentsAddCombo").bindStore(Ext.getStore("DepContentsCombo2"));
        Ext.getStore("VersioningStore").removeAll();
        Ext.getStore("VersioningStore").clearFilter(true);

        Ext.getStore("VersioningStore").filter([
        Ext.create('Ext.util.Filter', {property: "contentId", value: content.get("id")}),
        Ext.create('Ext.util.Filter', {property:"publishVersion", value:{$gt:0}})
        ]);

        var formulaireTC = Ext.getCmp('boiteAChampsContenus');
        var champsD =contentType.get("champs");
        for (g=0; g<champsD.length; g++) {
            var donnees=champsD[g];
            var configurateur = Ext.clone(donnees.config);
            if (!Ext.isEmpty(configurateur.i18n)){
                var BOLanguage=Ext.getStore("CurrentUserDataStore").getRange()[0].get("language");
                if (!Ext.isEmpty(configurateur.i18n[BOLanguage])){
                    if (!Ext.isEmpty(configurateur.i18n[BOLanguage].fieldLabel)){
                        configurateur.fieldLabel=configurateur.i18n[BOLanguage].fieldLabel;
                    }
                    if (!Ext.isEmpty(configurateur.i18n[BOLanguage].tooltip)){
                        configurateur.tooltip=configurateur.i18n[BOLanguage].tooltip;
                    }
                }
            }
            if (donnees.cType =='treepicker'){ 
                configurateur.store = Ext.create("Ext.data.TreeStore", {
                    isOptimised: true,
                    usedCollection: 'Pages',
                    autoLoad: false,
                    autoSync: false,
                    remoteFilter: true,
                    model: 'Rubedo.model.taxonomyTermModel',
                    proxy: {
                        type: 'ajax',
                        api: {
                            read: 'taxonomy-terms/navigation-tree'
                        },
                        reader: {
                            type: 'json',
                            getResponseData: function(response) {
                                var data, error;

                                try {
                                    data = Ext.decode(response.responseText);
                                    if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                                    return this.readRecords(data);
                                } catch (ex) {
                                    error = new Ext.data.ResultSet({
                                        total  : 0,
                                        count  : 0,
                                        records: [],
                                        success: false,
                                        message: ex.message
                                    });

                                    this.fireEvent('exception', this, response, error);
                                    console.log(ex);

                                    Ext.Logger.warn('Unable to parse the JSON returned by the server');

                                    return error;
                                }
                            },
                            messageProperty: 'message'
                        }
                    },
                    sorters: {
                        property: 'orderValue'
                    }
                });
                configurateur.store.load();
                configurateur.valueField="id";
                configurateur.displayField="text";
                configurateur.plugins=[Ext.create("Ext.ux.form.field.ClearButton")];
            }
            else if (donnees.cType == 'combobox') {
                var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
                configurateur.store = monStore;
            }
            //begin temporary fix
            configurateur.labelSeparator=" ";
            //end temporary fix
            try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){
            var nouvChamp = Ext.create(donnees.cType, configurateur);
        }
        nouvChamp.config=Ext.clone(donnees.config);
        //begin temporary fix
        if(configurateur.tooltip=="help text"){configurateur.tooltip="";}
        //end temporary fix
        if (donnees.cType =='triggerfield'){ 
            var Ouvrir = Ext.clone(donnees.ouvrir);
            nouvChamp.onTriggerClick= function() {
                var fenetre = Ext.widget(Ouvrir);
                fenetre.showAt(screen.width/2-200, 100);
            } ; 
            nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);
        }  
        nouvChamp.anchor = '90%';
        nouvChamp.style = '{float:left;}';
        var enrobage =Ext.widget('ChampTC');
        enrobage.add(nouvChamp);
        enrobage.getComponent('helpBouton').setTooltip(configurateur.tooltip);
        if (Ext.isEmpty(configurateur.tooltip)){
            enrobage.getComponent('helpBouton').hidden=true;
        } 
        if (nouvChamp.multivalued) {
            enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.duplicateText, itemId: 'boutonReplicateurChamps'}));

        };
        if (nouvChamp.localizable) {
            enrobage.localizable=true;
        }
        formulaireTC.add(enrobage);

    }
    var formTaxoTC =  Ext.getCmp('boiteATaxoContenus');
    var lesTaxo = contentType.get("vocabularies");
    var i=0;
    for (i=0; i<lesTaxo.length; i++) {

        var leVocab = Ext.getStore('TaxonomyForC2').findRecord('id', lesTaxo[i]);
        if (!Ext.isEmpty(leVocab)){
            if (leVocab.get("inputAsTree")){
                var storeT = Ext.create("Ext.data.TreeStore", {
                    model:"Rubedo.model.taxonomyTermModel",
                    remoteFilter:"true",
                    proxy: {
                        type: 'ajax',
                        api: {
                            read: 'taxonomy-terms/tree'
                        },
                        reader: {
                            type: 'json',
                            messageProperty: 'message'
                        },
                        encodeFilters: function(filters) {
                            var min = [],
                                length = filters.length,
                                i = 0;

                            for (; i < length; i++) {
                                min[i] = {
                                    property: filters[i].property,
                                    value   : filters[i].value
                                };
                                if (filters[i].type) {
                                    min[i].type = filters[i].type;
                                }
                                if (filters[i].operator) {
                                    min[i].operator = filters[i].operator;
                                }
                            }
                            return this.applyEncoding(min);
                        }
                    },
                    filters: {
                        property: 'vocabularyId',
                        value: leVocab.get("id")
                    }

                });
                var toUse="Ext.ux.TreePicker";
                if(leVocab.get("multiSelect")){toUse="Ext.ux.TreeMultiPicker";}
                if(leVocab.get("id")=='navigation'){storeT.getProxy().api={read:"taxonomy-terms/navigation-tree"};}
                storeT.load();
                var selecteur = Ext.create(toUse, {
                    name:leVocab.get("id"),
                    fieldLabel: leVocab.get("name"),
                    store: storeT,
                    ignoreIsNotPage:true,
                    anchor:"90%",
                    displayField:"text",
                    allowBlank: !leVocab.data.mandatory,
                    plugins:[Ext.create("Ext.ux.form.field.ClearButton")]
                });


            } else {
                var storeT = Ext.create('Ext.data.JsonStore', {
                    model:"Rubedo.model.taxonomyTermModel",
                    remoteFilter:"true",
                    proxy: {
                        type: 'ajax',
                        api: {
                            read: 'taxonomy-terms'
                        },
                        reader: {
                            type: 'json',
                            messageProperty: 'message',
                            root: 'data'
                        },
                        encodeFilters: function(filters) {
                            var min = [],
                                length = filters.length,
                                i = 0;

                            for (; i < length; i++) {
                                min[i] = {
                                    property: filters[i].property,
                                    value   : filters[i].value
                                };
                                if (filters[i].type) {
                                    min[i].type = filters[i].type;
                                }
                                if (filters[i].operator) {
                                    min[i].operator = filters[i].operator;
                                }
                            }
                            return this.applyEncoding(min);
                        }
                    },
                    filters: {
                        property: 'vocabularyId',
                        value: leVocab.get("id")
                    }

                });
                storeT.on("beforeload", function(s,o){
                    o.filters=Ext.Array.slice(o.filters,0,1);
                    if (!Ext.isEmpty(o.params.comboQuery)){

                        var newFilter=Ext.create('Ext.util.Filter', {
                            property:"text",
                            value:o.params.comboQuery,
                            operator:'like'
                        });

                        o.filters.push(newFilter);

                    }


                });
                var selecteur = Ext.widget('comboboxselect', {
                    name:leVocab.get("id"),
                    anchor:"90%",
                    fieldLabel: leVocab.get("name"),
                    autoScroll: false,
                    store: storeT,
                    queryMode: 'remote',
                    queryParam: 'comboQuery',
                    minChars:3,
                    displayField: 'text',
                    valueField: 'id',
                    filterPickList: true,
                    typeAhead: true,
                    forceSelection: !leVocab.data.expandable,
                    createNewOnEnter: leVocab.data.expandable,
                    multiSelect: leVocab.data.multiSelect,
                    allowBlank: !leVocab.data.mandatory
                });

            }
            var enrobage =Ext.widget('ChampTC');
            enrobage.add(selecteur);
            enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);
            if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}
            formTaxoTC.add(enrobage);
        }
    }

    var cible = content;
    var valuesToApply=cible.get("champs");
    try{
        Ext.apply(valuesToApply, cible.get("i18n")[cible.get("locale")].fields);
    }catch(err){
        console.log("failed to localize fields on input");
    }
    try{Ext.getCmp('boiteAChampsContenus').getForm().setValues(valuesToApply);} catch(err){console.log("form set anomaly");}
    Ext.Object.each(valuesToApply, function(key, value, myself){
        if (Ext.isArray(value)) {
            var multiField=Ext.getCmp('boiteAChampsContenus').query('[name='+key+']')[0];
            var y=0;
            if (multiField.multivalued) {
                Ext.Array.each(value,function(val,index){
                    if (index>0) {
                        multiField.up().getComponent('boutonReplicateurChamps').fireEvent("click",multiField.up().getComponent('boutonReplicateurChamps'));
                    }
                    Ext.getCmp('boiteAChampsContenus').query('[name='+key+']')[index].setValue(val);
                }); 
            }
        }
    });
    Ext.getCmp("ajouterContenu").getComponent(0).getLayout().setActiveItem(1);
    Ext.getCmp("ajouterContenu").getComponent(0).getLayout().setActiveItem(0);
    Ext.getCmp("boiteATaxoContenus").getForm().setValues(cible.get("taxonomie"));
    Ext.getCmp("boiteADroitsContenus").getForm().setValues(cible.getData());
    Ext.getCmp("contentMetadataBox").getForm().setValues(cible.getData());

    Ext.getCmp("boutonEnregistrerNouveauContenu").isUpdate=true;
    Ext.getCmp("boutonPublierNouveauContenu").isUpdate=true;
    Ext.getCmp("boutonSoumettreNouveauContenu").isUpdate=true;
    Ext.getCmp('ajouterContenu').setTitle(content.get("text"));
    if (!editMode){
        if ((!content.get("readOnly"))&&(ACL.interfaceRights["write.ui.contents"])&&(content.get("status")=="published")&&(ACL.interfaceRights["write.ui.contents.draft"])) {
            Ext.getCmp("boutonSoumettreNouveauContenu").hide();
            Ext.getCmp("boutonPublierNouveauContenu").hide();
            var nct = Ext.getCmp("nestedContentsTab");
            if (!Ext.isEmpty(nct)){
                Ext.getCmp('nestedContensTabConfig').destroy();
                nct.destroy(); 
            }
        }
        else
        {
            Ext.Array.forEach(Ext.getCmp("ajouterContenu").query("field"), function(thing){thing.setReadOnly(true);})
            Ext.Array.forEach(Ext.getCmp("ajouterContenu").query("button"), function(truc){if (!truc.isXType("tab")){truc.disable();}});

            Ext.getCmp("boutonSoumettreNouveauContenu").up().hide();
            var nct = Ext.getCmp("nestedContentsTab");
            if (!Ext.isEmpty(nct)){
                Ext.getCmp('nestedContensTabConfig').destroy();
                nct.destroy(); 
            }
        }
    } else {
        var myId=cible.get("id");

        var nct = Ext.getCmp("nestedContentsTab");
        if (!Ext.isEmpty(nct)){
            if (Ext.isEmpty(Ext.getCmp("nestedContentsAddCombo").getStore().getRange())){
                Ext.getCmp('nestedContensTabConfig').destroy();
                nct.destroy();

            } else {
                Ext.getStore('NestedContentsStore').removeAll();
                Ext.getStore('NestedContentsStore').getProxy().extraParams.parentId=myId;
                Ext.getStore('NestedContentsStore').load();
            }
        }
    }
    if (content.get("status")=="pending"){
        if (ACL.interfaceRights['write.ui.contents.refused']) {
            Ext.getCmp("boutonRefuserNouveauContenu").show();
        }
        Ext.getCmp("boutonEnregistrerNouveauContenu").hide();
        Ext.getCmp("boutonSoumettreNouveauContenu").hide();
    }
    if (specialMode){
        try{
            var nct5 = Ext.getCmp("nestedContentsTab");
            if (!Ext.isEmpty(nct)){
                Ext.getCmp('nestedContensTabConfig').destroy();
                nct5.destroy();

            }
        } catch(err){ }
            var nct2 = Ext.getCmp('boiteATaxoContenus');
            if (!Ext.isEmpty(nct2)){
                Ext.getCmp('taxoTabConfig').destroy();
                nct2.destroy();

            }
            var nct3 = Ext.getCmp("contentMetadataBox");
            if (!Ext.isEmpty(nct3)){
                Ext.getCmp('metaTabConfig').destroy();
                nct3.destroy();

            }
            var nct4 = Ext.getCmp('boiteADroitsContenus');
            if (!Ext.isEmpty(nct4)){
                Ext.getCmp('rightsTabConfig').destroy();
                nct4.destroy();

            }
            Ext.getCmp("boutonEnregistrerNouveauContenu").hide();
            Ext.getCmp("boutonSoumettreNouveauContenu").hide();
            Ext.getCmp("boutonPublierNouveauContenu").specialMode=true;
            Ext.getCmp("boutonPublierNouveauContenu").targetedId=targetedId;
            Ext.getCmp("cedtr1").destroy();
            Ext.getCmp("cedtr2").destroy();
            Ext.getCmp("cedtrURL").destroy();


        }
        Ext.getCmp("contentsDLSToolbar").recievei18n(cible.get("i18n"),cible.get("locale"),cible.get("nativeLanguage"));
    },

    displaySpecialCreate: function(theCT, targetedId) {
        if (Ext.isDefined(theCT)) {
            var fenetre = Ext.widget('ajouterContenu', {specialMode:true});
            Ext.getCmp('ViewportPrimaire').add(fenetre);
            if (Ext.isDefined(window.innerHeight)) {
                if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}
                if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}
            }
            fenetre.show();
            fenetre.setTitle(Rubedo.RubedoAutomatedElementsLoc.newContentText+theCT.get("type"));
            var formulaireTC = Ext.getCmp('boiteAChampsContenus');
            Ext.getCmp("contentsVersionPanel").up().remove( Ext.getCmp("contentsVersionPanel"));
            var champsD =theCT.data.champs;
            for (g=0; g<champsD.length; g++) {
                var donnees=champsD[g];
                var configurateur = Ext.clone(donnees.config);
                if (!Ext.isEmpty(configurateur.i18n)){
                    var BOLanguage=Ext.getStore("CurrentUserDataStore").getRange()[0].get("language");
                    if (!Ext.isEmpty(configurateur.i18n[BOLanguage])){
                        if (!Ext.isEmpty(configurateur.i18n[BOLanguage].fieldLabel)){
                            configurateur.fieldLabel=configurateur.i18n[BOLanguage].fieldLabel;
                        }
                        if (!Ext.isEmpty(configurateur.i18n[BOLanguage].tooltip)){
                            configurateur.tooltip=configurateur.i18n[BOLanguage].tooltip;
                        }
                    }
                }
                if (donnees.cType =='treepicker'){ 
                    configurateur.store = Ext.create("Ext.data.TreeStore", {
                        isOptimised: true,
                        usedCollection: 'Pages',
                        autoLoad: false,
                        autoSync: false,
                        remoteFilter: true,
                        model: 'Rubedo.model.taxonomyTermModel',
                        proxy: {
                            type: 'ajax',
                            api: {
                                read: 'taxonomy-terms/navigation-tree'
                            },
                            reader: {
                                type: 'json',
                                getResponseData: function(response) {
                                    var data, error;

                                    try {
                                        data = Ext.decode(response.responseText);
                                        if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                                        return this.readRecords(data);
                                    } catch (ex) {
                                        error = new Ext.data.ResultSet({
                                            total  : 0,
                                            count  : 0,
                                            records: [],
                                            success: false,
                                            message: ex.message
                                        });

                                        this.fireEvent('exception', this, response, error);
                                        console.log(ex);

                                        Ext.Logger.warn('Unable to parse the JSON returned by the server');

                                        return error;
                                    }
                                },
                                messageProperty: 'message'
                            }
                        },
                        sorters: {
                            property: 'orderValue'
                        }
                    });
                    configurateur.store.load();
                    configurateur.valueField="id";
                    configurateur.displayField="text";
                    configurateur.plugins=[Ext.create("Ext.ux.form.field.ClearButton")];
                }
                else if (donnees.cType == 'combobox') {
                    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));
                    configurateur.store = monStore;
                }
                //begin temporary fix
                configurateur.labelSeparator=" ";
                //end temporary fix
                try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){
                var nouvChamp = Ext.create(donnees.cType, configurateur);
            }
            nouvChamp.config=Ext.clone(donnees.config);
            //begin temporary fix
            if(configurateur.tooltip=="help text"){configurateur.tooltip="";}
            //end temporary fix
            if (donnees.cType =='triggerfield'){ 
                var Ouvrir = Ext.clone(donnees.openWindow);
                nouvChamp.onTriggerClick= function() {
                    var fenetre = Ext.widget(Ouvrir);
                    fenetre.showAt(screen.width/2-200, 100);
                } ; 
                nouvChamp.openWindow =Ext.clone(donnees.openWindow);
            }  
            nouvChamp.anchor = '90%';
            nouvChamp.style = '{float:left;}';
            var enrobage =Ext.widget('ChampTC');
            enrobage.add(nouvChamp);
            enrobage.getComponent('helpBouton').setTooltip(configurateur.tooltip);
            if (Ext.isEmpty(configurateur.tooltip)){
                enrobage.getComponent('helpBouton').hidden=true;
            } 
            if (nouvChamp.multivalued) {
                enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.duplicateText, itemId: 'boutonReplicateurChamps'}));

            };
            formulaireTC.add(enrobage);

        }

        try{
            var nct = Ext.getCmp("nestedContentsTab");
            if (!Ext.isEmpty(nct)){
                Ext.getCmp('nestedContensTabConfig').destroy();
                nct.destroy();

            }} catch(err){ }
                var nct2 = Ext.getCmp('boiteATaxoContenus');
                if (!Ext.isEmpty(nct2)){
                    Ext.getCmp('taxoTabConfig').destroy();
                    nct2.destroy();

                }
                var nct3 = Ext.getCmp("contentMetadataBox");
                if (!Ext.isEmpty(nct3)){
                    Ext.getCmp('metaTabConfig').destroy();
                    nct3.destroy();

                }
                var nct4 = Ext.getCmp('boiteADroitsContenus');
                if (!Ext.isEmpty(nct4)){
                    Ext.getCmp('rightsTabConfig').destroy();
                    nct4.destroy();

                }
                Ext.getCmp("boutonEnregistrerNouveauContenu").hide();
                Ext.getCmp("boutonSoumettreNouveauContenu").hide();
                Ext.getCmp("boutonPublierNouveauContenu").specialMode=true;
                Ext.getCmp("boutonPublierNouveauContenu").targetedId=targetedId;
                Ext.getCmp("cedtr1").destroy();
                Ext.getCmp("cedtr2").destroy();


            }
    },

    prepareContext: function(content, editMode, specialMode, targetedId) {
        var me=this;
        Ext.getStore("ContentTypesForContent").addListener("load",function(theStore,records,successful){
            if (successful){
                var myContentType=theStore.findRecord("id",content.get("typeId"));
                if (editMode){
                    var myDependantTypes= [ ];
                    Ext.Array.forEach(myContentType.get("dependantTypes"), function(someType){
                        myDependantTypes.push(theStore.findRecord("id",someType));
                    });
                    Ext.getStore("DepContentsCombo2").removeAll();
                    Ext.getStore("DepContentsCombo2").loadData(myDependantTypes);
                }
                me.displayContentEditWindow(content, myContentType,editMode, specialMode, targetedId);

            }
        },this,{single:true});
            Ext.getStore("ContentTypesForContent").load();
    },

    specialContentCreate: function(CTType, targetedId) {
        var me=this;
        Ext.getStore("ContentTypesForContent2").getProxy().extraParams.filter="[{\"property\":\"CTType\",\"value\":\""+CTType+"\"}]";
        Ext.getStore("ContentTypesForContent2").addListener("load",function(theStore,records,successful){
            if (successful){
                var theCT = records[0];
                me.displaySpecialCreate(theCT,targetedId);


            }
        },this,{single:true});
            Ext.getStore("ContentTypesForContent2").load();
    },

    init: function(application) {
        this.control({
            "#TypesContenusGrid": {
                select: this.typeSelect
            },
            "#boutonPublierNouveauContenu": {
                click: this.contentSaveAndPublish
            },
            "#boutonEnregistrerNouveauContenu": {
                click: this.contentSave
            },
            "#nestedContentsOfflineBtn": {
                click: this.putNestedContentsOffline
            },
            "#NestedContentsGrid": {
                selectionchange: this.nestedContentsSelect,
                itemdblclick: this.NCDblClickEdit
            },
            "#contributionContenus": {
                beforeclose: this.onWindowBeforeClose,
                render: this.onWindowRender
            },
            "#boutonSupprimerContenu": {
                click: this.contentDelete
            },
            "#boutonModifierContenu": {
                click: this.contentEdit
            },
            "#ContenusGrid": {
                selectionchange: this.contentsSelect,
                itemdblclick: this.doubleClickEdit
            },
            "#contentOnlineBtn": {
                click: this.putContentsOnline
            },
            "#contentRefuseBtn": {
                click: this.contentRefuse
            },
            "#contentOfflineBtn": {
                click: this.putContentsOffline
            },
            "#contentSubmitValBtn": {
                click: this.contentSubmitVal
            },
            "#contentAcceptPublishBtn": {
                click: this.contentAcceptPublish
            },
            "#boutonSoumettreNouveauContenu": {
                click: this.contentSaveAndSubmit
            },
            "#nestedContentsDeleteBtn": {
                click: this.nestedContentsDelete
            },
            "#nestedContentsOnlineBtn": {
                click: this.putNestedContentsOnline
            },
            "#nestedContentsAddBtn": {
                click: this.addNestedContent
            },
            "#nestedContentRecordBtn": {
                click: this.saveNestedContent
            },
            "#nestedContentsModifyBtn": {
                click: this.nestedContentEdit
            },
            "#pageContentGrid": {
                itemdblclick: this.onPageContentGridItemDblClick
            },
            "#boutonCopierContenus": {
                click: this.onBoutonCopierContenusClick
            },
            "#boutonRefuserNouveauContenu": {
                click: this.onBoutonRefuserNouveauContenuClick
            }
        });
    }

});
