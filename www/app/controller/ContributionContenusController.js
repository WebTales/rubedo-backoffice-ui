/*
 * File: app/controller/ContributionContenusController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.ContributionContenusController', {
    extend: 'Ext.app.Controller',

    models: [
        'contenusDataModel'
    ],
    stores: [
        'ContenusDataJson'
    ],
    views: [
        'AjouterContenu'
    ],

    typeSelect: function(dataviewmodel, record, options) {
        var filArianne = Ext.getCmp("TypesContenusGrid").findParentByType('window').getDockedComponent('filArianne');
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.type);}
        else { typeFil= Ext.widget('button',{iconCls: "folder", text:record.data.type, itemId:'type'});
        filArianne.add(typeFil);
    }
    this.getContenusDataJsonStore().loadData(record.get("contenus"));
    Ext.Array.forEach(Ext.getCmp("contributionContenus").getComponent("contextBar").query("buttongroup"), function(btn){btn.enable();});
    Ext.getCmp("ajoutPanierContenus").disable();
    Ext.getCmp("boutonSupprimerContenu").disable();
    Ext.getCmp("boutonModifierContenu").disable();
    Ext.getCmp("boutonCopierContenus").disable();
    var  customMeta = record.get("type");
    var imageMeta = Ext.getCmp('contributionContenus').getDockedComponent('barreMeta').getComponent('imageBarreMeta');
    imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');  
    var boiteMeta = Ext.getCmp("contributionContenus").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
    boiteMeta.update(customMeta);
    },

    contentSaveAndPublish: function(button, e, options) {
        this.nContenuRecorder('publié');
    },

    contentSave: function(button, e, options) {
        this.nContenuRecorder('brouillon');
    },

    contentDelete: function(button, e, options) {
        var cible = Ext.getCmp('ContenusGrid').getSelectionModel().getSelection();
        this.getContenusDataJsonStore().remove(cible);
    },

    onButtonClick3: function(button, e, options) {
        var cible = Ext.getCmp('ContenusGrid').getSelectionModel().getSelection()[0];
        Ext.getCmp("boutonAjouterContenu").fireEvent("click");
        Ext.getCmp('boiteAChampsContenus').getForm().setValues(cible.get("champs"));
    },

    contentsSelect: function(tablepanel, selections, options) {
        var boiteMeta = Ext.getCmp("contributionContenus").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        var imageMeta = Ext.getCmp('contributionContenus').getDockedComponent('barreMeta').getComponent('imageBarreMeta');
        var customMeta= "";
        if (selections.length===0) {
            Ext.getCmp("ajoutPanierContenus").disable();
            Ext.getCmp("boutonSupprimerContenu").disable();
            Ext.getCmp("boutonModifierContenu").disable();
            Ext.getCmp("boutonCopierContenus").disable();
            customMeta = Ext.getCmp('TypesContenusGrid').getSelectionModel().getLastSelected().data.type;
            imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');    

        } else if (selections.length==1) {
            Ext.getCmp("ajoutPanierContenus").enable();
            Ext.getCmp("boutonSupprimerContenu").enable();
            Ext.getCmp("boutonModifierContenu").enable();
            Ext.getCmp("boutonCopierContenus").enable();
            customMeta=selections[0].data.text+"</br> Creation : "+selections[0].data.creation+
            " Dernière modification : "+selections[0].data.derniereModification+" Version : "+selections[0].data.version+
            " Auteur : "+selections[0].data.auteur;
            imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_full.png');

        } else {
            Ext.getCmp("ajoutPanierContenus").enable();
            Ext.getCmp("boutonSupprimerContenu").enable();
            Ext.getCmp("boutonModifierContenu").disable();
            Ext.getCmp("boutonCopierContenus").disable();
            customMeta=selections.length+" Contenus";
            imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_full.png');

        }

        boiteMeta.update(customMeta);
    },

    nContenuRecorder: function(etat) {
        /*
        var formC = Ext.getCmp('boiteAChampsContenus').items.items;
        for (m=0;  m<formC.length; m++) {
        if((formC[m].getComponent(0).isXType('field'))&&(!formC[m].getComponent(0).isValid())){
        return(false);
        }
        }
        var champs = [ ];
        for (k=1; k<formC.length; k++) {
        if (formC[k].getComponent(0).isXType('field')) {
        var champ= {nom : formC[k].getComponent(0).name, value: formC[k].getComponent(0).getValue()};
        champs.push(champ);
        }
        }
        */
        if (Ext.getCmp("boiteAChampsContenus").getForm().isValid()){
            var champs=Ext.getCmp("boiteAChampsContenus").getForm().getValues();
            var nContenu = Ext.create('model.contenusDataModel', {
                text: champs.text,
                champs: champs,
                etat: etat,
                type: Ext.getCmp('TypesContenusGridView').getSelectionModel().getLastSelected().data.type,
                auteur: MyPrefData.myName
            });

            Ext.getCmp('ContenusGrid').getStore().add(nContenu);
            Ext.getCmp('TypesContenusGridView').getSelectionModel().getLastSelected().data.contenus.push(nContenu.data);//remove after server sync operational

            Ext.getCmp('ajouterContenu').close();
            console.log(nContenu);
        }
    },

    init: function(application) {
        this.control({
            "#TypesContenusGrid": {
                select: this.typeSelect
            },
            "#boutonPublierNouveauContenu": {
                click: this.contentSaveAndPublish
            },
            "#boutonEnregistrerNouveauContenu": {
                click: this.contentSave
            },
            "#boutonSupprimerContenu": {
                click: this.contentDelete
            },
            "#boutonModifierContenu": {
                click: this.onButtonClick3
            },
            "#ContenusGrid": {
                selectionchange: this.contentsSelect
            }
        });
    }

});
