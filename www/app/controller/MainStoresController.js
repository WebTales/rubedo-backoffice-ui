/*
 * File: app/controller/MainStoresController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.MainStoresController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.MainStoresController',

    onComponentRender: function(abstractcomponent, options) {
        if ((abstractcomponent.managesStore)&&(abstractcomponent.store)) {
            abstractcomponent.getStore().load();

            abstractcomponent.on("beforedestroy", function(thing){thing.getStore().clearFilter(true); thing.getStore().removeAll(); });
        }
    },

    init: function(application) {
        var me = this;
        Ext.data.StoreManager.each(function(store){
            //events for optimised stores
            if (store.isOptimised){
                store.on("load", function(theStore,records,successful){
                    if (successful) {
                        theStore.isUsed=true;
                    }
                });
                store.on("clear", function(theStore){
                    theStore.isUsed=false;
                });
                store.on("write", function(theStore,roperation){
                    me.reloadActiveBrothers(theStore.usedCollection, theStore.storeId);
                });






            }

            //error handling (needs work) 
            var proxy = store.getProxy();
            if (!Ext.isEmpty(proxy)) {
                proxy.on("exception", function( proxy, response, operation, options ){
                    var message = "";
                    if (response.status === 0) {message= "Connexion au serveur interrompue";}
                    else if (response.status === 500) {message= "Erreur interne du serveur";}
                    Ext.Msg.alert("Erreur", message);
                    if (operation.action=="update") {
                        Ext.Array.forEach(operation.records, function (record){ record.reject();});
                    }
                    else if (operation.action=="create") {
                        store.remove(operation.records);
                    }
                    else if (operation.action=="destroy") {
                        Ext.Array.forEach(operation.records, function (record){ store.insert(record.index || 0, record);});
                        store.removed= [];
                    }
                    console.log(store);
                    console.log(response);

                });
            }
        });

        this.control({
            "component": {
                render: this.onComponentRender
            }
        });
    },

    reloadActiveBrothers: function(collectionName, myId) {
        Ext.data.StoreManager.each(function(someStore){
            if ((someStore.isOptimised)&&(someStore.isUsed)&&(someStore.usedCollection==collectionName)&&(!someStore.isLoading())&&(someStore.storeId!=myId)) {
                someStore.load();
            }
        });
    }

});
