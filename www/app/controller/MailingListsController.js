/*
 * File: app/controller/MailingListsController.js
 *
 * This file was generated by Sencha Architect version 3.0.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.MailingListsController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.MailingListsController',

    onMLMainGridSelectionChange: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)){
            Ext.getCmp("MailingListsRemove").disable();
            Ext.getCmp("MailingListsUpdate").disable();
            Ext.getCmp("mlUsersManager").disable();
            Ext.getCmp("MLPropsForm").getForm().reset();
            Ext.getCmp("MLPropsForm").up().disable();
            Ext.getStore("MLUsers").removeAll();

        } else {
            Ext.getCmp("MailingListsRemove").enable();
            Ext.getCmp("MailingListsUpdate").enable();
            Ext.getCmp("mlUsersManager").enable();
            Ext.getCmp("MLPropsForm").up().enable();
            Ext.getStore("MLUsers").getProxy().extraParams.id=selected[0].get("id");
            Ext.getStore("MLUsers").loadPage(1);
            Ext.getStore("MLUnsubscribedUsers").getProxy().extraParams.id=selected[0].get("id");
            Ext.getStore("MLUnsubscribedUsers").loadPage(1);
            Ext.getCmp("MLPropsForm").getForm().loadRecord(selected[0]);
            if ((selected[0].get("readOnly"))||(!ACL.interfaceRights["write.ui.mailingLists"])){
                Ext.Array.forEach(Ext.getCmp("MLPropsForm").query("field"), function(field){
                    field.setReadOnly(true);
                });
                Ext.getCmp("MailingListsRemove").disable();
                Ext.getCmp("MailingListsUpdate").disable();
            } else {
                Ext.Array.forEach(Ext.getCmp("MLPropsForm").query("field"), function(field){
                    field.setReadOnly(false);
                });
            }
        }
    },

    onNewMLSubmitBtnClick: function(button, e, eOpts) {
        var form = button.up().getForm();
        if (form.isValid()){
            var newW= Ext.create("Rubedo.model.mailingListsModel", form.getValues());
            Ext.getStore("MailingListsCombo").add(newW);
            Ext.getStore("MailingListsCombo").addListener("datachanged",function(){Ext.getCmp('MLMainGrid').getSelectionModel().select(newW);},this,{single:true});
            button.up().up().close();
        }
    },

    onMailingListsAddClick: function(button, e, eOpts) {
        Ext.widget("newMLWindow").show();
    },

    onMailingListsRemoveClick: function(button, e, eOpts) {
        var delCon = Ext.widget('delConfirmZ');
        delCon.show();
        Ext.getCmp('delConfirmZOui').on('click', function() {
            Ext.getStore("MailingListsCombo").remove(Ext.getCmp("MLMainGrid").getSelectionModel().getLastSelected());
            Ext.getCmp('delConfirmZ').close();
        });
    },

    onMailingListsUpdateClick: function(button, e, eOpts) {
        var target = Ext.getCmp("MLMainGrid").getSelectionModel().getLastSelected();
        var form = Ext.getCmp("MLPropsForm").getForm();
        if (form.isValid()){
            target.set(form.getValues());
        }
    },

    onMlAddUserClick: function(button, e, eOpts) {
        Ext.widget("subscribeUsersWindow").show();
    },

    onMlRemoveUserClick: function(button, e, eOpts) {
        Ext.Ajax.request({
            url: 'mailing-lists/unsubscribe-users',
            method:'POST',
            params: {
                mlId: Ext.getCmp("MLMainGrid").getSelectionModel().getLastSelected().get("id"),
                userEmailArray:Ext.JSON.encode(Ext.Array.pluck(Ext.Array.pluck(Ext.getCmp("MLUsersGrid").getSelectionModel().getSelection(),"data"), "email"))
            },
            success: function(response){
                var answer=Ext.JSON.decode(response.responseText);
                if (answer.success){
                    Ext.getStore("MLUsers").load();
                    Ext.getStore("MLUnsubscribedUsers").load();
                } else {
                    Ext.Msg.alert("Error","User unsubscription error");
                }
            }
        });
    },

    onMLUsersGridSelectionChange: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)){
            Ext.getCmp("mlRemoveUser").disable();
        } else {
            Ext.getCmp("mlRemoveUser").enable();
        }
    },

    onMlExportUsersBtnClick: function(button, e, eOpts) {
        window.onbeforeunload=Ext.emptyFn;
            window.location.href="mailing-lists/export-users?id="+Ext.getCmp("MLMainGrid").getSelectionModel().getLastSelected().get("id");
            var task63 = new Ext.util.DelayedTask(function(){
                window.onbeforeunload = function() { return Rubedo.RubedoAutomatedElementsLoc.windowBeforeUnloadMessage; };
            });
            task63.delay(400);
    },

    onMlImportUsersBtnClick: function(button, e, eOpts) {
        Ext.widget("mlImportWindow").show();
    },

    onMlImportSubmitBtnClick: function(button, e, eOpts) {

        var form=button.up().getForm();
        if (form.isValid()){
            button.up().setLoading(true);
            form.submit({
                url: 'mailing-lists/import-users',
                params: {
                    id:Ext.getCmp("MLMainGrid").getSelectionModel().getLastSelected().get("id")
                },
                success: function(form, action) {
                    var response = Ext.JSON.decode(action.response.responseText);
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, response.importedContentsCount+" Users imported");
                    button.up().setLoading(false);
                    Ext.getStore("MLUsers").load();
                    button.up().up().close();

                },
                failure: function(form, action) {
                    button.up().setLoading(false);
                    var message = "Import error";
                    try {
                        var response = Ext.JSON.decode(action.response.responseText);
                        if (response.message){
                            message=response.message;
                        }
                    } catch(err){}
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, message);
                    }
                });
            }
    },

    onSubscribeUsersSubmitBtnClick: function(button, e, eOpts) {
        var form=button.up().getForm();
        if (form.isValid()){
            Ext.Ajax.request({
                url: 'mailing-lists/subscribe-users',
                method:'POST',
                params: {
                    mlId: Ext.getCmp("MLMainGrid").getSelectionModel().getLastSelected().get("id"),
                    userEmailArray:Ext.JSON.encode(form.getValues().emails)
                },
                success: function(response){
                    var answer=Ext.JSON.decode(response.responseText);
                    if (answer.success){
                        button.up().up().close();
                        Ext.getStore("MLUsers").load();
                    } else {
                        Ext.Msg.alert("Error","User subscription error");
                    }
                }
            });
        }
    },

    onMLMainGridItemDblClick: function(dataview, record, item, index, e, eOpts) {
        if (ACL.interfaceRights['read.ui.users']){
            Rubedo.controller.UserTypesController.prototype.prepareContext(record.get("id"),record.get("typeId"));
        }
    },

    init: function(application) {
        this.control({
            "#MLMainGrid": {
                selectionchange: this.onMLMainGridSelectionChange
            },
            "#newMLSubmitBtn": {
                click: this.onNewMLSubmitBtnClick
            },
            "#MailingListsAdd": {
                click: this.onMailingListsAddClick
            },
            "#MailingListsRemove": {
                click: this.onMailingListsRemoveClick
            },
            "#MailingListsUpdate": {
                click: this.onMailingListsUpdateClick
            },
            "#mlAddUser": {
                click: this.onMlAddUserClick
            },
            "#mlRemoveUser": {
                click: this.onMlRemoveUserClick
            },
            "#MLUsersGrid": {
                selectionchange: this.onMLUsersGridSelectionChange,
                itemdblclick: this.onMLMainGridItemDblClick
            },
            "#mlExportUsersBtn": {
                click: this.onMlExportUsersBtnClick
            },
            "#mlImportUsersBtn": {
                click: this.onMlImportUsersBtnClick
            },
            "#mlImportSubmitBtn": {
                click: this.onMlImportSubmitBtnClick
            },
            "#subscribeUsersSubmitBtn": {
                click: this.onSubscribeUsersSubmitBtnClick
            }
        });
    }

});
