/*
 * File: app/controller/ImportController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.ImportController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.ImportController',

    onMainCSVinportFieldChange: function(filefield, value, eOpts) {
        if ((value)&&(!filefield.notNow)) {
            var form= filefield.up().up().getForm();
            filefield.up().up().up().setLoading(true);
            form.submit({
                clientValidation: true,
                url: 'import/analyse',
                params: {

                },
                success: function(form, action) {
                    var response = Ext.JSON.decode(action.response.responseText);
                    Ext.getStore("NotInportFieldsStore").removeAll();
                    Ext.getStore("InportAsFieldStore").removeAll();
                    Ext.getStore("InportAsTaxoStore").removeAll();
                    Ext.getStore("InportAsFieldTranslationStore").removeAll();
                    Ext.getStore("InportAsTaxoTranslationStore").removeAll();
                    Ext.getCmp("fileFieldHelper1").show();
                    Ext.getStore("NotInportFieldsStore").loadData(response.detectedFields);
                    Ext.getCmp("InportInterface").initailRecoveredCsvFields=response.detectedFields;
                    Ext.getCmp("importPresetsPannel").enable();
                    try {
                        filefield.up().nextSibling().getComponent(0).setTitle(response.detectedFieldsCount+" "+Rubedo.RubedoAutomatedElementsLoc.identifiedFieldsText+" "+response.detectedContentsCount+" "+Rubedo.RubedoAutomatedElementsLoc.importableContentsText);
                    } catch (err){}
                    filefield.up().up().up().setLoading(false);
                    Ext.getCmp("chooseEncodingField").enable();
                    Ext.getCmp("chooseEncodingField").allowBank=false;
                    Ext.getCmp("chooseEncodingField").getStore().removeAll();
                    var possibleEncodings=response.encoding.charsetList;
                    var introducer=[ ];
                    Ext.Array.forEach(possibleEncodings, function(thing){
                        introducer.push([thing,thing]);
                    });
                    Ext.getCmp("chooseEncodingField").getStore().loadData(introducer);
                    Ext.getCmp("chooseEncodingField").notNow=true;
                    Ext.getCmp("chooseEncodingField").setValue(response.encoding.defaultEncoding);
                    var task = new Ext.util.DelayedTask(function(){
                        Ext.getCmp("chooseEncodingField").notNow=false;
                    });
                    task.delay(300);

                },
                failure: function(form, action) {
                    filefield.up().up().up().setLoading(false);
                    var message = Rubedo.RubedoAutomatedElementsLoc.fileAnalysisError;
                    try {
                        var response = Ext.JSON.decode(action.response.responseText);
                        if (response.message){
                            message=response.message;
                        }
                    } catch(err){}
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, message);
                        filefield.reset();
                    }
                });
            }
    },

    onMainImportSubmitBtnClick: function(button, e, eOpts) {
        var myForm = button.up().getForm();
        if (myForm.isValid()){
            var configs=myForm.getValues();
            Ext.Array.forEach(Ext.getStore("InportAsFieldStore").getRange(), function(record){
                if ((record.get("protoId")!="text")&&(record.get("protoId")!="summary")){
                    var protoCType=Ext.getStore("TypesChampsDataStore").findRecord("id", record.get("protoId")).get("cType");
                    var interv2=Ext.clone(Ext.create(protoCType).xtype);
                    record.set("cType",interv2);
                    if (Ext.isEmpty(record.get("newName"))){
                        record.set("newName", record.get("name"));
                    }
                    if (Ext.isEmpty(record.get("label"))){
                        record.set("label", record.get("newName"));
                    }
                }
            });
            Ext.Array.forEach(Ext.getStore("InportAsTaxoStore").getRange(), function(record){
                if (Ext.isEmpty(record.get("newName"))){
                    record.set("newName", record.get("name"));
                }
            });
            var inportAsField=Ext.Array.pluck(Ext.getStore("InportAsFieldStore").getRange(), "data");
            var inportAsTaxo=Ext.Array.pluck(Ext.getStore("InportAsTaxoStore").getRange(), "data");
            var inportAsFieldTranslation=Ext.Array.pluck(Ext.getStore("InportAsFieldTranslationStore").getRange(), "data");
            var inportAsTaxoTranslation=Ext.Array.pluck(Ext.getStore("InportAsTaxoTranslationStore").getRange(), "data");
            var form=Ext.getCmp("mainCSVinportField").up().up().getForm();
            var mainImportWindow=Ext.getCmp("InportInterface");
            if (mainImportWindow.whatToImport=="products"){
                configs.isProduct=true;
                Ext.apply(configs,Ext.getCmp("importProductOptionsForm").getForm().getValues());
            }
            var paramsToSend={
                    configs:Ext.JSON.encode(configs),
                    inportAsField: Ext.JSON.encode(inportAsField),
                    inportAsTaxo: Ext.JSON.encode(inportAsTaxo),
                    inportAsFieldTranslation: Ext.JSON.encode(inportAsFieldTranslation),
                    inportAsTaxoTranslation: Ext.JSON.encode(inportAsTaxoTranslation)
                };

            button.up().up().setLoading(true);
            form.submit({
                url: 'import/import',
                params: paramsToSend,
                success: function(form, action) {
                    var response = Ext.JSON.decode(action.response.responseText);
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, response.importedContentsCount+" "+Rubedo.RubedoAutomatedElementsLoc.importedContentsText);
                    button.up().up().setLoading(false);
                    button.up().up().close();
                    Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers("Taxonomy","fakeStore");
                    Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers("ContentTypes","fakeStore");
                    Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers("contents","fakeStore");

                },
                failure: function(form, action) {
                    button.up().up().setLoading(false);
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.importError);
                }
            });
        }
    },

    onFileFieldHelper1Click: function(button, e, eOpts) {
        Ext.getCmp("mainCSVinportField").reset();
        Ext.getStore("NotInportFieldsStore").removeAll();
        Ext.getStore("InportAsFieldStore").removeAll();
        Ext.getStore("InportAsTaxoStore").removeAll();
        Ext.getStore("InportAsFieldTranslationStore").removeAll();
        Ext.getStore("InportAsTaxoTranslationStore").removeAll();
        Ext.getCmp("chooseEncodingField").getStore().removeAll();
        Ext.getCmp("chooseEncodingField").allowBlank=true;
        Ext.getCmp("chooseEncodingField").disable();
        Ext.getCmp("chooseEncodingField").setValue(null);
        button.hide();
    },

    onImportChoiceSubmitBtnClick: function(button, e, eOpts) {
        var form=button.up().getForm();
        if (form.isValid()){
            Ext.widget("InportInterface", form.getValues()).show();
            button.up().up().close();
        }
    },

    onImportCtSelectorSelect: function(combo, records, eOpts) {
        Ext.getCmp("importCTFFieldset").removeAll();
        Ext.getCmp("importTaxoFieldset").removeAll();
        Ext.getStore("ImportKeyFieldStore").removeAll();
        var record=records[0];
        var uniqueKeyFields=[
            {
                name:"text",
                label:Rubedo.RubedoAutomatedElementsLoc.titleText
            },
            {
                name:"summary",
                label:Rubedo.RubedoAutomatedElementsLoc.summaryText
            }
        ];
        var fieldSelectors=[
        {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    fieldLabel: Rubedo.RubedoAutomatedElementsLoc.titleText,
                                    name: "text",
                                    editable: false,
                                    displayField: 'name',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'NotInportFieldsStore',
            plugins:[Ext.create("Ext.ux.form.field.ClearButton")],
                                    valueField: 'csvIndex'
                                },
            {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    fieldLabel: Rubedo.RubedoAutomatedElementsLoc.summaryText,
                                    name: "summary",
                                    editable: false,
                                    displayField: 'name',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'NotInportFieldsStore',
                plugins:[Ext.create("Ext.ux.form.field.ClearButton")],
                                    valueField: 'csvIndex'
                                }
        ];
        var BOLanguage=Ext.getStore("CurrentUserDataStore").getRange()[0].get("language");
        Ext.Array.forEach(record.get("champs"),function(champ){
            var label=champ.config.fieldLabel;
            if (champ.config.i18n&&champ.config.i18n[BOLanguage]&&(!Ext.isEmpty(champ.config.i18n[BOLanguage].fieldLabel))){
                label=champ.config.i18n[BOLanguage].fieldLabel;
            }
            uniqueKeyFields.push({
                name:champ.config.name,
                label:label
            });
            fieldSelectors.push({
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    fieldLabel: label,
                                    name:champ.config.name,
                                    editable: false,
                                    displayField: 'name',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'NotInportFieldsStore',
                plugins:[Ext.create("Ext.ux.form.field.ClearButton")],
                                    valueField: 'csvIndex'
                                });
        });
        if (record.get("productType")=="configurable"){
            uniqueKeyFields.push({
                name:"sku",
                label:"Base SKU"
            });
        }
        Ext.getStore("ImportKeyFieldStore").loadData(uniqueKeyFields);
        Ext.getCmp("importCTFFieldset").add(fieldSelectors);
        /*
        var taxoSelectors=[];
        Ext.Array.forEach(record.get("vocabularies"),function(vocabulary){
            if (vocabulary!="navigation"){
            taxoSelectors.push({
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    fieldLabel: Ext.getStore("TaxoForImportKeys").findRecord("id",vocabulary).get("name"),
                                    name: "taxonomyFields_"+vocabulary,
                                    editable: false,
                                    displayField: 'name',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'NotInportFieldsStore',
                plugins:[Ext.create("Ext.ux.form.field.ClearButton")],
                                    valueField: 'csvIndex'
                                });
            }
        });
        Ext.getCmp("importTaxoFieldset").add(taxoSelectors);
        */
        if (record.get("productType")=="configurable"){
            Ext.getCmp("updateImportField").setValue(true);
            if (Ext.isEmpty(Ext.getCmp("importProductOptionsFieldset"))){
                Ext.getCmp("importTaxoFieldset").up().add(Ext.widget("importProductOptionsFieldset", {anchor:"100%"}));
            }
        } else {
            Ext.getCmp("updateImportField").setValue(false);
            if (!Ext.isEmpty(Ext.getCmp("importProductOptionsFieldset"))){
                Ext.getCmp("importProductOptionsFieldset").up().remove(Ext.getCmp("importProductOptionsFieldset"));
            }
        }
    },

    onLaunchUpdateImportBtnClick: function(button, e, eOpts) {
        var myForm = button.up().up().getForm();
        if (myForm.isValid()){
            var configs=myForm.getValues();
            var form=Ext.getCmp("mainCSVinportField").up().up().getForm();
            var paramsToSend={
                    configs:Ext.JSON.encode(configs)

                };

            Ext.getCmp("InportInterface").setLoading(true);
            form.submit({
                url: 'import/import',
                params: paramsToSend,
                success: function(form, action) {
                    var response = Ext.JSON.decode(action.response.responseText);
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, response.importedContentsCount+" "+Rubedo.RubedoAutomatedElementsLoc.importedContentsText);
                    Ext.getCmp("InportInterface").setLoading(false);
                    Ext.getCmp("InportInterface").close();
                    Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers("Taxonomy","fakeStore");
                    Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers("ContentTypes","fakeStore");
                    Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers("contents","fakeStore");

                },
                failure: function(form, action) {
                    Ext.getCmp("InportInterface").setLoading(false);
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.importError);
                }
            });
        }
    },

    onImportPresetSelectorFieldChange: function(field, newValue, oldValue, eOpts) {
        if (Ext.isEmpty(newValue)){
            Ext.getCmp("importPresetApplyBtn").disable();
            Ext.getCmp("importPresetDeleteBtn").disable();
        } else {
            Ext.getCmp("importPresetApplyBtn").enable();
            Ext.getCmp("importPresetDeleteBtn").enable();
        }
    },

    onImportPresetApplyBtnClick: function(button, e, eOpts) {
        var preset=Ext.getCmp("importPresetSelectorField").getStore().findRecord("id",Ext.getCmp("importPresetSelectorField").getValue());
        if (preset){
            Ext.Msg.confirm(Rubedo.RubedoAutomatedElementsLoc.warningTitle, "This action wil override all current import settings. Are you sure you want to apply this preset ?" ,function(anser){
              if (anser=="yes"){
                  if (preset.get("howToImport")=="update"){
                      Ext.getCmp("fieldMappingTargetForm").getForm().setValues(preset.get("presetData"));
                      if (!Ext.isEmpty(Ext.getCmp("importCtSelector").getValue())){
                          Ext.getCmp("importCtSelector").fireEvent("select",Ext.getCmp("importCtSelector"),[Ext.getCmp("importCtSelector").getStore().findRecord("id",Ext.getCmp("importCtSelector").getValue())]);
                          var task = new Ext.util.DelayedTask(function(){
                              Ext.getCmp("fieldMappingTargetForm").getForm().setValues(preset.get("presetData"));
                          });
                          task.delay(500);
                      }
                  } else {
                      var notImpStore=Ext.getStore("NotInportFieldsStore");
                      notImpStore.loadData(Ext.getCmp("InportInterface").initailRecoveredCsvFields);
                      Ext.getStore("InportAsFieldStore").removeAll();
                      Ext.getStore("InportAsTaxoStore").removeAll();
                      Ext.getStore("InportAsFieldTranslationStore").removeAll();
                      Ext.getStore("InportAsTaxoTranslationStore").removeAll();

                      Ext.Array.forEach(preset.get("presetData").inportAsField, function(usedField){
                          var movedRec=notImpStore.findRecord("csvIndex",usedField.csvIndex);
                          if (!Ext.isEmpty(movedRec)){
                              notImpStore.remove(movedRec);
                          }
                      });
                      Ext.Array.forEach(preset.get("presetData").inportAsTaxo, function(usedField){
                          var movedRec=notImpStore.findRecord("csvIndex",usedField.csvIndex);
                          if (!Ext.isEmpty(movedRec)){
                              notImpStore.remove(movedRec);
                          }
                      });
                      Ext.Array.forEach(preset.get("presetData").inportAsFieldTranslation, function(usedField){
                          var movedRec=notImpStore.findRecord("csvIndex",usedField.csvIndex);
                          if (!Ext.isEmpty(movedRec)){
                              notImpStore.remove(movedRec);
                          }
                      });
                      Ext.Array.forEach(preset.get("presetData").inportAsTaxoTranslation, function(usedField){
                          var movedRec=notImpStore.findRecord("csvIndex",usedField.csvIndex);
                          if (!Ext.isEmpty(movedRec)){
                              notImpStore.remove(movedRec);
                          }
                      });
                      Ext.getStore("InportAsFieldStore").loadData(preset.get("presetData").inportAsField);
                      Ext.getStore("InportAsTaxoStore").loadData(preset.get("presetData").inportAsTaxo);
                      Ext.getStore("InportAsFieldTranslationStore").loadData(preset.get("presetData").inportAsFieldTranslation);
                      Ext.getStore("InportAsTaxoTranslationStore").loadData(preset.get("presetData").inportAsTaxoTranslation);
                      if (preset.get("whatToImport")=="products"){
                          Ext.getCmp("importProductOptionsForm").getForm().setValues(preset.get("presetData").productSettings);
                      }
                  }
              }
            });
        }
    },

    onImportPresetDeleteBtnClick: function(button, e, eOpts) {
        var preset=Ext.getCmp("importPresetSelectorField").getStore().findRecord("id",Ext.getCmp("importPresetSelectorField").getValue());
        if (preset){
            Ext.Msg.confirm(Rubedo.RubedoAutomatedElementsLoc.warningTitle, "Are you sure you want to delete this preset ?" ,function(anser){
              if (anser=="yes"){
                  Ext.getCmp("importPresetSelectorField").getStore().remove(preset);
                  Ext.getCmp("importPresetSelectorField").setValue(null);
              }
            });
        }
    },

    onImportPresetSaveBtnClick: function(button, e, eOpts) {
        if (Ext.getCmp("importPresetNameField").isValid()){

            var howToImport=Ext.getCmp("InportInterface").howToImport;
            var whatToImport=Ext.getCmp("InportInterface").whatToImport;
            var detectedPresets={ };
            if (howToImport=="update"){
                detectedPresets=Ext.getCmp("fieldMappingTargetForm").getForm().getValues();
            } else {
                detectedPresets={
                    inportAsField : Ext.Array.pluck(Ext.getStore("InportAsFieldStore").getRange(), "data"),
                    inportAsTaxo : Ext.Array.pluck(Ext.getStore("InportAsTaxoStore").getRange(), "data"),
                    inportAsFieldTranslation : Ext.Array.pluck(Ext.getStore("InportAsFieldTranslationStore").getRange(), "data"),
                    inportAsTaxoTranslation : Ext.Array.pluck(Ext.getStore("InportAsTaxoTranslationStore").getRange(), "data")
                };
                if (whatToImport=="products"){
                    detectedPresets.productSettings=Ext.getCmp("importProductOptionsForm").getForm().getValues();

                }
            }
            var newSetting={
                name:Ext.getCmp("importPresetNameField").getValue(),
                howToImport:howToImport,
                whatToImport:whatToImport,
                presetData:detectedPresets
            };
            Ext.getStore("ImportPresets").add(newSetting);
        }
    },

    init: function(application) {
        this.control({
            "#mainCSVinportField, #chooseEncodingField": {
                change: this.onMainCSVinportFieldChange
            },
            "#mainImportSubmitBtn": {
                click: this.onMainImportSubmitBtnClick
            },
            "#fileFieldHelper1": {
                click: this.onFileFieldHelper1Click
            },
            "#importChoiceSubmitBtn": {
                click: this.onImportChoiceSubmitBtnClick
            },
            "#importCtSelector": {
                select: this.onImportCtSelectorSelect
            },
            "#launchUpdateImportBtn": {
                click: this.onLaunchUpdateImportBtnClick
            },
            "#importPresetSelectorField": {
                change: this.onImportPresetSelectorFieldChange
            },
            "#importPresetApplyBtn": {
                click: this.onImportPresetApplyBtnClick
            },
            "#importPresetDeleteBtn": {
                click: this.onImportPresetDeleteBtnClick
            },
            "#importPresetSaveBtn": {
                click: this.onImportPresetSaveBtnClick
            }
        });
    }

});
