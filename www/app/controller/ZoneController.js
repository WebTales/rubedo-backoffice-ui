/*
 * File: app/controller/ZoneController.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.ZoneController', {
    extend: 'Ext.app.Controller',

    views: [
        'Zone',
        'Colonne',
        'UnBloc',
        'DelConfirmZ',
        'ajoutBlocFenetre',
        'ConfigSpecBloc',
        'assistantRequetage'
    ],

    refs: [
        {
            ref: 'MasqueEdition',
            selector: '#masqueEdition'
        }
    ],

    ajouteColonne: function(tool, e, options) {
        var maZone = tool.findParentByType('zone');
        var nouvColonne = Ext.widget('colonne', {flex : 1});
        maZone.add(nouvColonne);
        if ((Ext.isDefined(Ext.getCmp('zoneIdField')))&&(maZone.id==Ext.getCmp('zoneIdField').getValue())) {
            this.updPanProp(maZone);    
        }
    },

    enleveColonne: function(tool, e, options) {
        var maZone = tool.findParentByType('zone');
        var enleverCol = maZone.query('colonne').pop();
        if (enleverCol.previousSibling() !== null) {maZone.remove(enleverCol);}
        if ((Ext.isDefined(Ext.getCmp('zoneIdField')))&&(maZone.id==Ext.getCmp('zoneIdField').getValue())) {
            this.updPanProp(maZone); 

        }
    },

    ajoutBlocZoneFenetre: function(tool, e, options) {
        tool.up().fireEvent('click');
        var delConfirm = Ext.widget('ajoutBlocFenetre');
        delConfirm.showAt(screen.width/2-250, 100);
    },

    deplaceBas: function(tool, e, options) {
        var pos = tool.up().up().up().items.indexOf(tool.up().up());
        tool.up().up().up().move(pos,pos+1);
    },

    deplaceHaut: function(tool, e, options) {
        var pos = tool.up().up().up().items.indexOf(tool.up().up());
        if (pos > 0) {
            tool.up().up().up().move(pos,pos-1);
        }
    },

    onGridpanelItemClick: function(tablepanel, record, item, index, e, options) {
        Ext.getCmp('PaneauBlocsDetail').update(record.data);
    },

    onButtonClick: function(button, e, options) {
        var masque = this.getMasqueEdition();
        var largeurMasque = masque.getWidth();
        largeurMasque = largeurMasque - (largeurMasque % 10);
        var largeur = largeurMasque; 
        var hauteur = 150 ;
        var zonePrec = masque.query('zone').pop();
        if (Ext.isDefined(zonePrec)) {
            var largeurPrec = zonePrec.getWidth();
            var hauteurPrec = zonePrec.getHeight();
            var xPrec = zonePrec.getPosition()[0]- masque.getPosition()[0];
            var nouvLargeur = largeurMasque-xPrec-largeurPrec;
            if (nouvLargeur > 19) {
                largeur = nouvLargeur;
                hauteur = hauteurPrec;
            }
        }
        var zone = Ext.widget('zone' , { width: largeur, height: hauteur, maxWidth : largeurMasque});
        zone.title = zone.id;
        masque.add(zone);
        var zonesM =masque.items.items;
        for (i=0; i<zonesM.length; i++) {
            zonesM[i].getEl().clearOpacity();
        }
    },

    blocDeplaceGauche: function(tool, e, options) {
        var monBloc = tool.findParentByType('unBloc');
        var nouvBloc = monBloc.valueOf();
        var maColonne = monBloc.findParentByType('colonne');
        var colonnePrecedente = maColonne.previousSibling();
        if (colonnePrecedente !== null) {

            colonnePrecedente.add(nouvBloc);
            maColonne.remove(monBloc);

        }
    },

    blocDeplaceDroite: function(tool, e, options) {
        var monBloc = tool.findParentByType('unBloc');
        var nouvBloc = monBloc.valueOf();
        var maColonne = monBloc.findParentByType('colonne');
        var colonneSuivante = maColonne.nextSibling();
        if (colonneSuivante !== null) {

            colonneSuivante.add(nouvBloc);
            maColonne.remove(monBloc);

        }
    },

    majZone: function(button, e, options) {
        var champTitre = Ext.getCmp('zoneTitleField');
        var champLargeur = Ext.getCmp('zoneWidthField');
        var champHauteur = Ext.getCmp('zoneHeightField');
        var champId = Ext.getCmp('zoneIdField');

        zoneModif = Ext.getCmp(champId.getValue());
        if (Ext.isDefined(zoneModif)) {
            zoneModif.setTitle(champTitre.getValue());    
            zoneModif.setHeight(champHauteur.getValue());
            zoneModif.setWidth(champLargeur.getValue());
            var colones = zoneModif.items.items;
            for (om=0; om<colones.length; om++) {
                if (Ext.isDefined(Ext.getCmp('colonnesEdit').items.items[om])) {
                colones[om].flex= Ext.getCmp('colonnesEdit').items.items[om].getValue(); }

            }
            zoneModif.doLayout();
        }

    },

    onPanelBeforeDestroy: function(abstractcomponent, options) {
        if ((Ext.isDefined(Ext.getCmp('blocIdField')))&&(abstractcomponent.id==Ext.getCmp('blocIdField').getValue())) { 
            Ext.getCmp('blocHeightField').setValue();
            Ext.getCmp('blocTitleField').setValue();
            Ext.getCmp('blocIdField').setValue();
            if(Ext.isDefined(Ext.getCmp('paneauPropMasque').getComponent(3))) {
                Ext.getCmp('paneauPropMasque').getComponent(3).destroy();
            }
        }
    },

    majBloc: function(button, e, options) {
        var champTitre = Ext.getCmp('blocTitleField');
        var champHauteur = Ext.getCmp('blocHeightField');
        var champId = Ext.getCmp('blocIdField');

        blocModif = Ext.getCmp(champId.getValue());
        if (Ext.isDefined(blocModif)) {
            blocModif.setTitle(champTitre.getValue());    
            blocModif.flex =champHauteur.getValue();
            blocModif.up().doLayout();
        }

    },

    selectZone: function(abstractcomponent, options) {
        if (abstractcomponent.id !== 'outilsBureau') {
            var moi = this;
            abstractcomponent.header.on('click', function() { 
                this.up().getEl().frame(MyPrefData.themeColor);
                this.up().setIconCls('editZone');
                var champBId = Ext.getCmp('zoneIdField');
                if (Ext.isDefined(champBId)) {    
                    var zonePrec = Ext.getCmp( Ext.getCmp('zoneIdField').getValue());
                    if ((Ext.isDefined(zonePrec))&&(zonePrec.id !== abstractcomponent.id )) { zonePrec.setIconCls(null);}   
                    champBId.setValue(abstractcomponent.id);
                }
                moi.updPanProp(this.up());



            });
        }
    },

    selectBloc: function(abstractcomponent, options) {
        /*abstractcomponent.getEl().on("click", function(e){
        e.stopEvent();
        });
        abstractcomponent.header.on('click', function() { 

        this.up().getEl().frame(MyPrefData.themeColor);
        this.up().setIconCls('editBloc');

        if(Ext.isDefined(Ext.getCmp('paneauPropMasque').getComponent(3))) {
        Ext.getCmp('paneauPropMasque').getComponent(3).destroy();
        }

        var champBTitre = Ext.getCmp('blocTitleField');
        if (Ext.isDefined(champBTitre)) {
        champBTitre.setValue(abstractcomponent.title);}

        var champBHauteur = Ext.getCmp('blocHeightField');
        if (Ext.isDefined(champBTitre)) {
        champBHauteur.setValue(abstractcomponent.flex);}

        var champBId = Ext.getCmp('blocIdField');
        if (Ext.isDefined(champBId)) {    
        var blocPrec = Ext.getCmp( Ext.getCmp('blocIdField').getValue());
        if ((Ext.isDefined(blocPrec))&&(blocPrec.id !== abstractcomponent.id )) { blocPrec.setIconCls(null);}   
        champBId.setValue(abstractcomponent.id);
        }
        var configSpec = Ext.widget('ConfigSpecBloc');
        var categories = abstractcomponent.champsConfig.simple;
        for (j=0; j<categories.length; j++){
        var nCateg = Ext.create('Ext.form.FieldSet', {title: categories[j].categorie, collapsible:true, layout: 'anchor'});

        var champsS = categories[j].champs;
        for (i=0; i<champsS.length; i++) {
        if (champsS[i].type =='Ext.form.field.ComboBox') {
        var monStore=  Ext.create('Ext.data.Store', champsS[i].store);
        champsS[i].config.store= monStore;
        }
        var nChampS = Ext.create(champsS[i].type, champsS[i].config);
        if (champsS[i].type =='Ext.form.field.Trigger'){
        var Ouvrir = Ext.clone(champsS[i].ouvrir);
        nChampS.onTriggerClick= function() {
        var fenetre = Ext.widget(Ouvrir);
        fenetre.showAt(screen.width/2-200, 100);
        } ;  
        }
        nChampS.labelSeparator= ' ';
        nChampS.anchor= '100%';
        nChampS.setValue(abstractcomponent.configBloc[nChampS.name]);
        nChampS.on('change', function(){abstractcomponent.configBloc[this.name]=this.getValue(); });
        nCateg.add(nChampS);
        }
        configSpec.items.items[0].add(nCateg);

        }
        Ext.getCmp('paneauPropMasque').add(configSpec);

        });*/
    },

    supprimerZone: function(tool, e, options) {
        var delConfirm = Ext.widget('delConfirmZ');
        delConfirm.showAt(screen.width/2-100, 100);
        var cible = tool.findParentByType('zone');
        Ext.getCmp('delConfirmZOui').on('click', function() { 
            cible.close();
            Ext.getCmp('delConfirmZ').close();
        });  
    },

    onButtonClick2: function(button, e, options) {
        Ext.getCmp('delConfirmZ').close();
    },

    updPanProp: function(abstractcomponent) {
        var champTitre = Ext.getCmp('zoneTitleField');
        if (Ext.isDefined(champTitre)) {
            champTitre.setValue(abstractcomponent.title);
        }
        var champLargeur = Ext.getCmp('zoneWidthField');
        if (Ext.isDefined(champLargeur)) {
            champLargeur.setValue(abstractcomponent.width);
        }
        var champHauteur = Ext.getCmp('zoneHeightField');
        if (Ext.isDefined(champHauteur)) {
            champHauteur.setValue(abstractcomponent.height);
        }
        var champId = Ext.getCmp('zoneIdField');
        if (Ext.isDefined(champId)) {
            champId.setValue(abstractcomponent.id);
        }

        var colonEd = Ext.getCmp('colonnesEdit');
        if (Ext.isDefined(colonEd)) {
            colonEd.removeAll();
        }

        var colonEd = Ext.getCmp('colonnesEdit');
        if (Ext.isDefined(colonEd)) {
            colonEd.removeAll();
            var colonnes = abstractcomponent.items.items;
            for (pm=0; pm<colonnes.length; pm++) {
                var champ = Ext.create('Ext.form.field.Number', {fieldLabel: 'col '+pm, labelWidth: 40, anchor:'100%' , value: colonnes[pm].flex});
                colonEd.add(champ);

            }


        }
    },

    onControllerClickStub: function() {

    },

    onControllerRenderStub: function() {

    },

    init: function() {
        this.control({
            "[itemId='ajouterColonne']": {
                click: this.ajouteColonne
            },
            "[itemId='enleverColonne']": {
                click: this.enleveColonne
            },
            "[itemId='ajouterBlocZone']": {
                click: this.ajoutBlocZoneFenetre
            },
            "[itemId='zoneBas']": {
                click: this.deplaceBas
            },
            "[itemId='zoneHaut']": {
                click: this.deplaceHaut
            },
            "#BlocsSelectGrid": {
                itemclick: this.onGridpanelItemClick
            },
            "#nouvelleZone": {
                click: this.onButtonClick
            },
            "[itemId='deplaceGaucheBloc']": {
                click: this.blocDeplaceGauche
            },
            "[itemId='deplaceDroiteBloc']": {
                click: this.blocDeplaceDroite
            },
            "#modifierPropZone": {
                click: this.majZone
            },
            "unBloc": {
                beforedestroy: this.onPanelBeforeDestroy,
                render: this.selectBloc
            },
            "#modifierPropBloc": {
                click: this.majBloc
            },
            "zone": {
                render: this.selectZone
            },
            "[itemId='supprimerZone']": {
                click: this.supprimerZone
            },
            "#delConfirmZNon": {
                click: this.onButtonClick2
            }
        });

    }

});
