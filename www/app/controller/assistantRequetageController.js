/*
 * File: app/controller/assistantRequetageController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.assistantRequetageController', {
    extend: 'Ext.app.Controller',

    views: [
        'assisstantRE4',
        'regleChampAR'
    ],

    suivant: function(button, e, eOpts) {
        var me=this;
        var simpleMode = Ext.getCmp("assistantRequetage").simpleMode;
        var initialQuery = Ext.getCmp("assistantRequetage").initialQuery;
        var editorMode = Ext.getCmp("assistantRequetage").editorMode;
        var nextOK = 1;
        var etapeC = button.up().up().getLayout().getActiveItem().items.items;
        var i = 0;
        for (i=0;i<etapeC.length; i++) {
            if ((etapeC[i].isXType('field'))&&(!(etapeC[i].isValid()))) { nextOK = 0;}
        }
        if (nextOK == 1) {

            var etape = button.up().up().getLayout().getActiveItem();
            if (etape.id=='assisstantRE5'){
                this.displayQuery(this.readQuery());
            }
            else if (etape.id=='assisstantRE1') {
                var keepInMind=false;
                if((editorMode)&&(Ext.getCmp('champTCRequeteur').getValue().toString()==initialQuery.contentTypes.toString())){
                    keepInMind=true;
                }

                me.adaptToTCSelect(keepInMind);

            }




            var tousET= Ext.getCmp('assistantRequetage').getLayout().getLayoutItems().length;
            var suivET= Ext.getCmp('assistantRequetage').getLayout().getNext().etape;
            if (suivET==tousET) { Ext.getCmp('boutonNextRequeteur').disable();}
            else if (suivET==2) { Ext.getCmp('boutonPrevRequeteur').enable();}
            if (Ext.isDefined(suivET)) {
                button.up().up().getLayout().next();

                Ext.getCmp('progressAR').updateProgress(suivET/tousET, Rubedo.RubedoAutomatedElementsLoc.stageText+" "+suivET+" "+Rubedo.RubedoAutomatedElementsLoc.onText+" "+tousET);
            }
        }

    },

    precedent: function(button, e, eOpts) {
        var tousET= Ext.getCmp('assistantRequetage').getLayout().getLayoutItems().length;
        var suivET= Ext.getCmp('assistantRequetage').getLayout().getPrev().etape;
        if (suivET==tousET-1) { Ext.getCmp('boutonNextRequeteur').enable();}
        else if (suivET==1) { Ext.getCmp('boutonPrevRequeteur').disable();}
        if (Ext.isDefined(suivET)) {
            button.up().up().getLayout().prev();
            Ext.getCmp('progressAR').updateProgress(suivET/tousET, Rubedo.RubedoAutomatedElementsLoc.stageText+" "+suivET+" "+Rubedo.RubedoAutomatedElementsLoc.onText+" "+tousET);
        }
    },

    enleveRegle: function(button, e, eOpts) {
        if (button.up().up().up().items.items.indexOf(button.up().up())==2) {
            if (!Ext.isEmpty(button.up().up().up().getComponent(3))){
                button.up().up().up().getComponent(3).getComponent(0).getComponent(0).destroy();
            }
        }
        button.up().up().destroy();
    },

    selectAllTC: function(button, e, eOpts) {
        Ext.getCmp('champTCRequeteur').select(Ext.getCmp('champTCRequeteur').getStore().data.items);
    },

    ajoutRegleChamp: function(button, e, eOpts) {
        var nRegle= Ext.getCmp('createurReglesChampsAR').getValue();
        if (nRegle !== null) {
            var enrobage = Ext.widget('regleChampAR');
            enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);
            var mainThing = Ext.widget(nRegle.cType, {flex:1, mame:nRegle.name});
            mainThing.name=nRegle.name;
            mainThing.usedRole="value";
            mainThing.ruleId=nRegle.ruleId;
            mainThing.isAddedRuleField=true;
            enrobage.getComponent(0).insert(1,mainThing);
            if (nRegle.cType== 'checkboxfield') {
                var operateur= Ext.widget('tbtext', {text: ' = '});
            }
            else{
                var storeOper = Ext.create('Ext.data.Store', {
                    fields: ['operateur'],
                    data : [
                    {"operateur":"="},
                    {"operateur":"<="},
                    {"operateur":"<"},
                    {"operateur":">="},
                    {"operateur":">"},
                    {"operateur":"!="}
                    ]
                });
                var operateur= Ext.create('Ext.form.ComboBox', {
                    name:nRegle.name+"Operator",
                    store: storeOper,
                    usedRole:"rule",
                    isAddedRuleField:true,
                    ruleId:nRegle.ruleId,
                    flex:1,
                    queryMode: 'local',
                    displayField: 'operateur',
                    valueField: 'operateur',
                    editable: false,
                    multiSelect:false,
                    allowBlank:false,
                    forceSelect: true
                });


            }
            enrobage.getComponent(0).insert(1,operateur);
            if (Ext.getCmp('assisstantRE4').items.items.length>2){
                enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>'+Rubedo.RubedoAutomatedElementsLoc.andText+'</b>'}));
            }

            Ext.getCmp('assisstantRE4').add(enrobage);
        }
    },

    onQueryBuildSaveBtnClick: function(button, e, eOpts) {
        if ((Ext.getCmp("assistantRequetage").simpleMode)||(button.up().getForm().isValid())){
            var result=this.readQuery();
            if (Ext.getCmp("assistantRequetage").editorMode){
                if (Ext.getCmp("assistantRequetage").directToCombo){
                    var usedStore=Ext.getStore("QueriesStore");
                } else {
                    var usedStore=Ext.getStore("MainQueriesStore");
                }

                var editedOne=usedStore.findRecord("id",Ext.getCmp("assistantRequetage").recId);
                editedOne.beginEdit();
                editedOne.set("query", result);
                if (Ext.getCmp("assistantRequetage").simpleMode){
                    editedOne.set("name", Rubedo.RubedoAutomatedElementsLoc.simpleQueryText);
                } else {
                    editedOne.set("name", result.queryName);
                }
                editedOne.set("returnedFields", result.returnedFields);
                editedOne.endEdit();
                Ext.getStore("QueriesStore").addListener("update", function(){
                    Ext.getCmp(Ext.getCmp("assistantRequetage").mainFieldId).select(editedOne);
                },this,{single:true});
            }else {
                var newQuery = Ext.create("Rubedo.model.queryDataModel", {
                    name:result.queryName,
                    returnedFields:result.returnedFields,
                    type:"advanced",
                    query:result,
                    averageDuration:0,
                    count:0,
                    usage:[]
                });
                if (Ext.getCmp("assistantRequetage").simpleMode){
                    newQuery.set("type", "simple");
                    newQuery.set("name", Rubedo.RubedoAutomatedElementsLoc.simpleQueryText);
                }
                if (Ext.getCmp("assistantRequetage").adminMode){

                    Ext.getStore("MainQueriesStore").add(newQuery);
                    Ext.getStore("MainQueriesStore").addListener("datachanged", function(){
                        Ext.getCmp("mainQueriesGrid").getSelectionModel().select(newQuery);
                        Ext.getCmp("assistantRequetage").close();
                    },this, {single:true});
                } else {
                    Ext.getStore("QueriesStore").add(newQuery);
                    Ext.getStore("QueriesStore").addListener("update", function(){
                        Ext.getCmp(Ext.getCmp("assistantRequetage").mainFieldId).select(newQuery);
                        Ext.getCmp("assistantRequetage").close();
                    },this,{single:true});
                }
            }
            //Ext.getCmp("assistantRequetage").close();
        }
    },

    onBoutonCreateurTrisChampsARClick: function(button, e, eOpts) {
        var nRegle= Ext.getCmp('createurTrisChampsAR').getValue();
        if (nRegle !== null) {
            var enrobage = Ext.widget('regleChampAR');
            enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);


            var storeOper = Ext.create('Ext.data.Store', {
                fields: ['operateur', 'label'],
                data : [
                {"operateur":"ASC", "label": Rubedo.RubedoAutomatedElementsLoc.ascText},
                {"operateur":"DESC", "label": Rubedo.RubedoAutomatedElementsLoc.descText}
                ]
            });
            var operateur= Ext.create('Ext.form.ComboBox', {
                name:nRegle.name+"Direction",
                store: storeOper,
                usedRole:"sort",
                isAddedRuleField:true,
                ruleId:nRegle.ruleId,
                flex:1,
                queryMode: 'local',
                displayField: 'label',
                valueField: 'operateur',
                editable: false,
                multiSelect:false,
                allowBlank:false,
                forceSelect: true
            });



            enrobage.getComponent(0).insert(1,operateur);
            if (Ext.getCmp('assisstantRE5').items.items.length>2){
                enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>'+Rubedo.RubedoAutomatedElementsLoc.thenText+' </b>'}));
            }

            Ext.getCmp('assisstantRE5').add(enrobage);
        }
    },

    onMainQueriesGridSelectionChange: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)){
            Ext.getCmp("queryMainRemoveBtn").disable();
            Ext.getCmp("queryMainEditBtn").disable();
            Ext.getCmp("queryPlayBtn").disable();
        } else if (!selected[0].get("readOnly")){
            Ext.getCmp("queryMainRemoveBtn").enable();
            Ext.getCmp("queryMainEditBtn").enable();
            Ext.getCmp("queryPlayBtn").enable();
        } else  {
            Ext.getCmp("queryMainRemoveBtn").disable();
            Ext.getCmp("queryMainEditBtn").disable();
            Ext.getCmp("queryPlayBtn").enable();
        }
    },

    onQueryMainRemoveBtnClick: function(button, e, eOpts) {

        var delCon = Ext.widget('delConfirmZ');
        delCon.show();
        Ext.getCmp('delConfirmZOui').on('click', function() {
            Ext.getStore("MainQueriesStore").remove(Ext.getCmp("mainQueriesGrid").getSelectionModel().getLastSelected());
            Ext.getCmp('delConfirmZ').close();

        });


    },

    onQueryMainAddBtnClick: function(button, e, eOpts) {
        Ext.widget("assistantRequetage",{adminMode:true}).show();
    },

    onQueryMainEditBtnClick: function(button, e, eOpts) {
        var initialQuery = Ext.clone(Ext.getCmp("mainQueriesGrid").getSelectionModel().getLastSelected().get("query"));
        var recId = Ext.clone(Ext.getCmp("mainQueriesGrid").getSelectionModel().getLastSelected().get("id"));
        Ext.widget("assistantRequetage",{editorMode:true, recId:recId, initialQuery:initialQuery,ROMode:button.ROMode}).show();
    },

    onMainQueriesGridItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp("queryMainEditBtn").fireEvent("click",Ext.getCmp("queryMainEditBtn"));
    },

    onQueryPlayBtnClick: function(button, e, eOpts) {
        Ext.widget("QuerySimWindow",{queryId:Ext.getCmp("mainQueriesGrid").getSelectionModel().getLastSelected().get("id")}).show();
    },

    readQuery: function() {
        var mainWin= Ext.getCmp("assistantRequetage");
        var result = {};
        result.vocabularies={ };
        result.fieldRules=[ ];
        Ext.Array.forEach(mainWin.query("field"),function(field){
            if (field.submitValue){
                if ((field.isVocabularyField)&&(!Ext.isEmpty(field.getValue()))) {
                    if ((Ext.isEmpty(result.vocabularies[field.vocabularyId]))&&(field.usedRole!="rule")){
                        result.vocabularies[field.vocabularyId]={ };
                    }
                    if (!(Ext.isEmpty(result.vocabularies[field.vocabularyId]))){
                        if (Ext.isArray(field.getValue())){
                            result.vocabularies[field.vocabularyId][field.usedRole]=field.getValue();
                        } else {
                            result.vocabularies[field.vocabularyId][field.usedRole]=[field.getValue()];
                        }
                    }

                } else if (field.isAddedRuleField){
                   /* if (Ext.isEmpty(result.fieldRules[field.ruleId])){
                        result.fieldRules[field.ruleId]={ };
                    }
                    result.fieldRules[field.ruleId][field.usedRole]=field.getValue();*/

                } else {
                    if (Ext.Array.contains(["contentTypes","queryName","vocabulariesRule","returnedFields"],field.name)){
                    	result[field.name]=field.getValue();
                    }
                }
            }
        });
        if (!Ext.isEmpty(Ext.getCmp('assisstantRE4'))){
            Ext.Array.forEach(Ext.getCmp('assisstantRE4').query("regleChampAR"), function(newRule){
                var objInter={};
                Ext.Array.forEach(newRule.query("field"),function(field){
                    if (field.isAddedRuleField){
                    	objInter.field=field.ruleId;
                        objInter[field.usedRole]=field.getValue();
                    }
                });
                result.fieldRules.push(objInter);
            });
        }
        if (!Ext.isEmpty(Ext.getCmp('assisstantRE5'))){
            Ext.Array.forEach(Ext.getCmp('assisstantRE5').query("regleChampAR"), function(newRule){
                var objInter={};
                Ext.Array.forEach(newRule.query("field"),function(field){
                    if (field.isAddedRuleField){
                    	objInter.field=field.ruleId;
                        objInter[field.usedRole]=field.getValue();
                    }
                });
                result.fieldRules.push(objInter);
            });
        }
        if (!Ext.isArray(result.contentTypes)){
            result.contentTypes=[result.contentTypes];
        }
        return(result);
    },

    displayQuery: function(query) {
        var htmlDisplay="<h3>"+Rubedo.RubedoAutomatedElementsLoc.eligibleContentTypesText+"</h3><ul>";
        Ext.Array.forEach(query.contentTypes, function(ctid){
            htmlDisplay+="<li>"+Ext.getStore('TCNDepCombo').findRecord("id",ctid).get("type")+"</li>";
        });
        var qVocRule=Rubedo.RubedoAutomatedElementsLoc.eachContentMustVerifyRulesText;
        if (query.vocabulariesRule!="AND"){
            qVocRule=Rubedo.RubedoAutomatedElementsLoc.eachContentMustVerifyAtLeastOneRuleText;
        }
        if (!Ext.isEmpty(query.vocabularies)){
            htmlDisplay+="</ul><h3>"+Rubedo.RubedoAutomatedElementsLoc.taxonomyText+" : "+qVocRule+"</h3>";
            try {Ext.Object.each(query.vocabularies, function(key, value, myself){
                if(!Ext.isEmpty(value.terms)){
                    var myFields = Ext.getCmp("assisstantRE2").query("field[vocabularyId="+key+"]");
                    htmlDisplay+="<h4>"+Ext.getStore('TaxonomyForQA').findRecord("id",key).get("name")+" : "+myFields[1].getStore().findRecord("valeur",value.rule).get("nom")+"</h4><ul>";
                    Ext.Array.forEach(value.terms, function(term){
                        try{
                            htmlDisplay+="<li>"+myFields[0].getStore().findRecord("id",term).get("text")+"</li>";
                        } catch (err){
                            htmlDisplay+="<li>"+myFields[0].getStore().getNodeById(term).get("text")+"</li>";
                        }
                    });
                    htmlDisplay+="</ul>";
                }
            });} catch(err){
                console.log("erreur de recuperation des libellés des termes");
            }
        }
        if (!Ext.isEmpty(query.fieldRules)){
            htmlDisplay+="<h3>"+Rubedo.RubedoAutomatedElementsLoc.rulesAndSortsOnFieldsText+"</h3><ul>";
            Ext.Array.forEach(query.fieldRules, function(value){
                var key=value.field;
                var interKey=Ext.clone(key);
                try {
                    var possiblesArry=Ext.Array.pluck(Ext.Array.pluck(Ext.getStore('champsTCARStore').getRange(),"data"),"valeur");
                    Ext.Array.forEach(possiblesArry,function(possibleField){
                        if (possibleField.ruleId==key){
                            interKey=possibleField.label;
                        }
                    });

                } catch(err){
                    console.log("failed to get field label")
                }
                var tri = "";
                var a = value.rule||"";
                var b = value.value||"";
                var c=Ext.clone(b);
                if(Ext.isDate(c)){c=Ext.Date.format(c, 'j F, Y, G:i');}
                if (!Ext.isEmpty(value.sort)){
                    if (value.sort=="ASC") {tri=", "+Rubedo.RubedoAutomatedElementsLoc.ascSortText;} else {tri=", "+Rubedo.RubedoAutomatedElementsLoc.descSortText;}
                }

                htmlDisplay+="<li>"+interKey+" "+a+" "+c+" "+tri+"</li>";
            });
            htmlDisplay+="</ul>";
        }
        var target= Ext.getCmp("querySummaryBox");
        target.update(htmlDisplay);
    },

    adaptToTCSelect: function(keepInMind) {
        var simpleMode = Ext.getCmp("assistantRequetage").simpleMode;
        var editorMode = Ext.getCmp("assistantRequetage").editorMode;
        var initialQuery = Ext.getCmp("assistantRequetage").initialQuery;
        Ext.getCmp('assisstantRE2').removeAll();
        if(!simpleMode){
            var reglesAnciennes= Ext.clone(Ext.getCmp('assisstantRE4').items.items.length);
            var m =2;
            for (m=2; m<reglesAnciennes; m++){
                Ext.getCmp('assisstantRE4').getComponent(2).destroy();
            }}

        var storeL = Ext.create('Ext.data.Store', {
            fields: ['valeur', 'nom'],
            data : [
                {valeur: 'AND', nom:Rubedo.RubedoAutomatedElementsLoc.andText},
                {valeur: 'OR', nom: Rubedo.RubedoAutomatedElementsLoc.orText}
            ]
        });

        var lien = Ext.create('Ext.form.ComboBox', {
            anchor: '100%',
            fieldLabel: Rubedo.RubedoAutomatedElementsLoc.relationBetweenRulesText,
            store: storeL,
            value: 'OR',
            name: "vocabulariesRule",
            queryMode: 'local',
            displayField: 'nom',
            valueField: 'valeur',
            labelWidth: 150,
            editable: false,
            forceSelect: true,
            allowBlank: false

        });
        if (simpleMode) {
            lien.setValue('AND');
            lien.setReadOnly(true);
            lien.hide();
        } else if (editorMode&&keepInMind) {
            lien.setValue(initialQuery.vocabulariesRule);
        }


        var typesContenus = Ext.getCmp('champTCRequeteur').getValue();
        if(!Ext.isEmpty(typesContenus)){
            if (simpleMode) {
                typesContenus=[typesContenus];
            }
            var champsRegles = [ ];
            champsRegles.push({nom:Rubedo.RubedoAutomatedElementsLoc.creationText,
                               valeur: {
                                   cType: 'datefield',
                                   name: 'creation',
                                   ruleId:'createTime',
                                   label: Rubedo.RubedoAutomatedElementsLoc.creationText
                               }
                              });
            champsRegles.push({nom:Rubedo.RubedoAutomatedElementsLoc.lastUpdateText,
                               valeur: {
                                   cType: 'datefield',
                                   name: 'derniereModification',
                                   ruleId:'lastUpdateTime',
                                   label: Rubedo.RubedoAutomatedElementsLoc.lastUpdateText
                               }});
            if (typesContenus.length==1) {
                var myThingType=Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]);
                var champsReq = Ext.clone(myThingType.data.champs);
                var champsEligibles = ["datefield", "numberfield", "timefield", "slider","ratingField"];
                var champsReqF = Ext.Array.filter(champsReq, function(champ){
                    if (Ext.Array.contains(champsEligibles, champ.cType)) {return true;} else {return false;}
                });
                champsReqF = Ext.Array.map(champsReqF, function(champ){
                    return ({nom:champ.config.fieldLabel, valeur:{cType: champ.cType, ruleId: "fields."+champ.config.name, name: "fields."+champ.config.name, label: champ.config.fieldLabel}});
                });

                champsRegles = Ext.Array.merge(champsRegles, champsReqF);

            }



            Ext.getStore('champsTCARStore').loadData(champsRegles);


            var vocabulaires = Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]).data.vocabularies;
            var j = 1;
            for (j=1; j<typesContenus.length; j++) {
                var vocabSuivant = Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[j]).data.vocabularies;
                vocabulaires = Ext.Array.intersect(vocabulaires, vocabSuivant);
            }
            if(Ext.isEmpty(vocabulaires)){
                Ext.getCmp('assisstantRE2').add(Ext.widget("container", {styleHtmlContent:true, html:"<p>"+Rubedo.RubedoAutomatedElementsLoc.noVocabForTheseCTText+"</p>"}));
            }
            if (vocabulaires.length>1) {Ext.getCmp('assisstantRE2').add(lien);}
            //Ext.Array.remove(vocabulaires,"navigation");
            var k =0;
            for (k=0; k<vocabulaires.length; k++) {
                try{

                    var leVocab = Ext.getStore('TaxonomyForQA').findRecord('id', vocabulaires[k]);
                    if (leVocab.get("inputAsTree")){
                        var storeT = Ext.create("Ext.data.TreeStore", {
                            model:"Rubedo.model.taxonomyTermModel",
                            remoteFilter:"true",
                            proxy: {
                                type: 'ajax',
                                api: {
                                    read: 'taxonomy-terms/tree'
                                },
                                reader: {
                                    type: 'json',
                                    messageProperty: 'message'
                                },
                                encodeFilters: function(filters) {
                                    var min = [],
                                        length = filters.length,
                                        i = 0;

                                    for (; i < length; i++) {
                                        min[i] = {
                                            property: filters[i].property,
                                            value   : filters[i].value
                                        };
                                        if (filters[i].type) {
                                            min[i].type = filters[i].type;
                                        }
                                        if (filters[i].operator) {
                                            min[i].operator = filters[i].operator;
                                        }
                                    }
                                    return this.applyEncoding(min);
                                }
                            },
                            filters: {
                                property: 'vocabularyId',
                                value: leVocab.get("id")
                            }

                        });
                        var toUse="Ext.ux.TreePicker";
                        if((leVocab.get("multiSelect"))&&(!simpleMode)){toUse="Ext.ux.TreeMultiPicker";}
                        if(leVocab.get("id")=='navigation'){storeT.getProxy().api={read:"taxonomy-terms/navigation-tree?add-current-page=true"};}
                        storeT.load();
                        var selecteur = Ext.create(toUse, {
                            name:leVocab.get("id"),
                            fieldLabel: leVocab.get("name"),
                            vocabularyId:leVocab.get("id"),
                            isVocabularyField:true,
                            usedRole:"terms",
                            store: storeT,
                            anchor:"100%",
                            ignoreIsNotPage:true,
                            displayField:"text",
                            allowBlank: !leVocab.data.mandatory,
                            plugins:[Ext.create("Ext.ux.form.field.ClearButton")]
                        });


                    } else {
                        var storeT = Ext.create('Ext.data.JsonStore', {
                            model:"Rubedo.model.taxonomyTermModel",
                            remoteFilter:"true",
                            pageSize:2000,
                            proxy: {
                                type: 'ajax',
                                api: {
                                    read: 'taxonomy-terms'
                                },
                                reader: {
                                    type: 'json',
                                    messageProperty: 'message',
                                    root: 'data'
                                },
                                encodeFilters: function(filters) {
                                    var min = [],
                                        length = filters.length,
                                        i = 0;

                                    for (; i < length; i++) {
                                        min[i] = {
                                            property: filters[i].property,
                                            value   : filters[i].value
                                        };
                                        if (filters[i].type) {
                                            min[i].type = filters[i].type;
                                        }
                                        if (filters[i].operator) {
                                            min[i].operator = filters[i].operator;
                                        }
                                    }
                                    return this.applyEncoding(min);
                                }
                            },
                            filters: {
                                property: 'vocabularyId',
                                value: leVocab.get("id")
                            }

                        });
                        storeT.on("beforeload", function(s,o){
                            o.filters=Ext.Array.slice(o.filters,0,1);
                            if (!Ext.isEmpty(o.params.comboQuery)){

                                var newFilter=Ext.create('Ext.util.Filter', {
                                    property:"text",
                                    value:o.params.comboQuery,
                                    operator:'like'
                                });

                                o.filters.push(newFilter);

                            }


                        });
                        var selecteur = Ext.widget('comboboxselect', {
                            name:leVocab.get("id"),
                            anchor:"100%",
                            vocabularyId:leVocab.get("id"),
                            isVocabularyField:true,
                            usedRole:"terms",
                            fieldLabel: leVocab.get("name"),
                            autoScroll: false,
                            store: storeT,
                            queryMode: 'remote',
                            queryParam: 'comboQuery',
                            minChars:3,
                            displayField: 'text',
                            valueField: 'id',
                            filterPickList: true,
                            typeAhead: true,
                            forceSelection: !leVocab.data.expandable,
                            createNewOnEnter: leVocab.data.expandable,
                            multiSelect: leVocab.data.multiSelect,
                            allowBlank: !leVocab.data.mandatory
                        });

                    }

                    var storeR = Ext.create('Ext.data.Store', {
                        fields: ['valeur', 'nom'],
                        data : [
                            {valeur: 'all', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleAllText},
                            {valeur: 'allRec', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleAllRecText},
                            {valeur: 'some', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleSomeText},
                            {valeur: 'someRec', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleSomeREcText},
                            {valeur: 'not', nom : Rubedo.RubedoAutomatedElementsLoc.tRuleNotText},
                            {valeur: 'notRec', nom : Rubedo.RubedoAutomatedElementsLoc.tRuleNotRecText}
                        ]
                    });

                    var regle = Ext.create('Ext.form.ComboBox', {
                        name:leVocab.get("id")+"QueryRule",
                        anchor: '100%',
                        vocabularyId:leVocab.get("id"),
                        isVocabularyField:true,
                        usedRole:"rule",
                        fieldLabel: Rubedo.RubedoAutomatedElementsLoc.ruleText,
                        store: storeR,
                        queryMode: 'local',
                        displayField: 'nom',
                        valueField: 'valeur',
                        editable: false,
                        value: 'some',
                        forceSelect: true,
                        allowBlank: false

                    });
                    if ((keepInMind)&&(editorMode)&&(!Ext.isEmpty(initialQuery.vocabularies[leVocab.get("id")]))){
                        regle.setValue(initialQuery.vocabularies[leVocab.get("id")].rule[0]);
                        selecteur.setValue(initialQuery.vocabularies[leVocab.get("id")].terms);
                    }
                    if (simpleMode) {
                        regle.setValue("all");
                        regle.setReadOnly(true);
                        regle.hide();
                        selecteur.multiSelect=false;
                        var enrobage=Ext.widget("container", {anchor:"100%", layout:"anchor"});
                    } else {


                        var enrobage = Ext.widget('fieldset', {
                            title : leVocab.get("name"),
                            collapsible: true,
                            collapsed:true


                        });}
                    enrobage.add(selecteur);
                    enrobage.add(regle);

                    Ext.getCmp('assisstantRE2').add(enrobage);

                }catch(err) {console.log("vocabulary error");}

            }
        }


    },

    restoreFieldRules: function(fieldRules) {
        if (Ext.isObject(fieldRules)){
            var arrayFixer=[ ];
            Ext.Object.each(fieldRules, function(key, value, myself) {
                var newFix=value;
                newFix.field=key;
                arrayFixer.push(newFix);
            });
            fieldRules=arrayFixer;
        }
        Ext.Array.forEach(fieldRules, function(value){
            var key=value.field;
            try{
                if (!Ext.isEmpty(value.rule)) {

                    var tester = Ext.getCmp('createurReglesChampsAR').getStore().getRange()[Ext.getCmp('createurReglesChampsAR').getStore().findBy(function(record){
                        if (record.data.valeur.ruleId==key) {
                            return(true);
                        }
                    })];
                    if (!Ext.isEmpty(tester)){
                        var nRegle= tester.data.valeur;
                        var enrobage = Ext.widget('regleChampAR');
                        enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);
                        var mainThing = Ext.widget(nRegle.cType, {flex:1, mame:nRegle.name});
                        var insertus=Ext.clone(value.value);
                        if(mainThing.isXType("datefield")){ insertus= new Date(value.value);}
                        mainThing.setValue(insertus);
                        mainThing.name=nRegle.name;
                        mainThing.usedRole="value";
                        mainThing.ruleId=nRegle.ruleId;
                        mainThing.isAddedRuleField=true;
                        enrobage.getComponent(0).insert(1,mainThing);
                        if (nRegle.cType== 'checkboxfield') {
                            var operateur= Ext.widget('tbtext', {text: ' = '});
                        }
                        else{
                            var storeOper = Ext.create('Ext.data.Store', {
                                fields: ['operateur'],
                                data : [
                                    {"operateur":"="},
                                    {"operateur":"<="},
                                    {"operateur":"<"},
                                    {"operateur":">="},
                                    {"operateur":">"},
                                    {"operateur":"!="}
                                ]
                            });
                            var operateur= Ext.create('Ext.form.ComboBox', {
                                name:nRegle.name+"Operator",
                                store: storeOper,
                                usedRole:"rule",
                                isAddedRuleField:true,
                                ruleId:nRegle.ruleId,
                                flex:1,
                                queryMode: 'local',
                                displayField: 'operateur',
                                valueField: 'operateur',
                                editable: false,
                                multiSelect:false,
                                allowBlank:false,
                                forceSelect: true
                            });
                            operateur.setValue(value.rule);

                        }
                        enrobage.getComponent(0).insert(1,operateur);
                        if (Ext.getCmp('assisstantRE4').items.items.length>2){
                            enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>ET </b>'}));
                        }

                        Ext.getCmp('assisstantRE4').add(enrobage);
                    }


                }
                if (!Ext.isEmpty(value.sort)) {

                    var tester = Ext.getStore("champsTCARStore").getRange()[Ext.getStore("champsTCARStore").findBy(function(record){
                        if (record.data.valeur.ruleId==key) {
                            return(true);
                        }
                    })];
                    if (!Ext.isEmpty(tester)){
                        var nRegle= tester.data.valeur;
                        var enrobage = Ext.widget('regleChampAR');
                        enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);


                        var storeOper = Ext.create('Ext.data.Store', {
                            fields: ['operateur', 'label'],
                            data : [
                                {"operateur":"ASC", "label": Rubedo.RubedoAutomatedElementsLoc.ascText},
                                {"operateur":"DESC", "label": Rubedo.RubedoAutomatedElementsLoc.descText}
                            ]
                        });
                        var operateur= Ext.create('Ext.form.ComboBox', {
                            name:nRegle.name+"Direction",
                            store: storeOper,
                            usedRole:"sort",
                            isAddedRuleField:true,
                            ruleId:nRegle.ruleId,
                            flex:1,
                            queryMode: 'local',
                            displayField: 'label',
                            valueField: 'operateur',
                            editable: false,
                            multiSelect:false,
                            allowBlank:false,
                            forceSelect: true
                        });

                        operateur.setValue(value.sort);

                        enrobage.getComponent(0).insert(1,operateur);
                        if (Ext.getCmp('assisstantRE5').items.items.length>2){
                            enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>'+Rubedo.RubedoAutomatedElementsLoc.thenText+' </b>'}));
                        }

                        Ext.getCmp('assisstantRE5').add(enrobage);
                    }

                }
            } catch(err){console.log("field error");}});
    },

    init: function(application) {
        this.control({
            "#boutonNextRequeteur": {
                click: this.suivant
            },
            "#boutonPrevRequeteur": {
                click: this.precedent
            },
            "[itemId='boutonEnleveRegleAR']": {
                click: this.enleveRegle
            },
            "#boutonSelectAllTCAR": {
                click: this.selectAllTC
            },
            "#boutonCreateurReglesChampsAR": {
                click: this.ajoutRegleChamp
            },
            "#queryBuildSaveBtn": {
                click: this.onQueryBuildSaveBtnClick
            },
            "#boutonCreateurTrisChampsAR": {
                click: this.onBoutonCreateurTrisChampsARClick
            },
            "#mainQueriesGrid": {
                selectionchange: this.onMainQueriesGridSelectionChange,
                itemdblclick: this.onMainQueriesGridItemDblClick
            },
            "#queryMainRemoveBtn": {
                click: this.onQueryMainRemoveBtnClick
            },
            "#queryMainAddBtn": {
                click: this.onQueryMainAddBtnClick
            },
            "#queryMainEditBtn": {
                click: this.onQueryMainEditBtnClick
            },
            "#queryPlayBtn": {
                click: this.onQueryPlayBtnClick
            }
        });
    }

});
