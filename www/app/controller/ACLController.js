/*
 * File: app/controller/ACLController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.ACLController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.ACLController',

    onComponentRender: function(component, eOpts) {
        if (!Ext.isEmpty(component.ACL)) {
            if (ACL.interfaceRights[component.ACL]===false){
                component.hide();
                component.clearListeners();
                component.fireEvent=Ext.emptyFn;
            }
        }
    },

    init: function(application) {
                Ext.define('ACL', {
                    singleton:true,
                    CSRFToken:"notYetSet",
                    interfaceRights:{
                        "read.ui.taxonomy":false,
                        "write.ui.taxonomy":false,
                        "write.ui.taxonomyTerms":false,
                        "read.ui.contentTypes":false,
                        "write.ui.contentTypes":false,
                        "read.ui.contents":false,
                        "write.ui.contents":false,
                        "read.ui.contents.draft":false,
                        "read.ui.contents.pending":false,
                        "read.ui.contents.published":false,
                        "read.ui.contents.refused":false,
                        "write.ui.contents.draft":false,
                        "write.ui.contents.pending":false,
                        "write.ui.contents.refused":false,
                        "write.ui.contents.published":false,
                        "write.ui.contents.draftToPending":false,
                        "write.ui.contents.pendingToDraft":false,
                        "write.ui.contents.pendingToPublished":false,
                        "write.ui.contents.putOnline":false,
                        "write.ui.contents.putOffline":false,
                        "read.ui.masks":false,
                        "write.ui.masks":false,
                        "read.ui.users":false,
                        "write.ui.users":false,
                        "read.ui.sites":false,
                        "write.ui.sites":false,
                        "read.ui.pages":false,
                        "write.ui.pages":false,
                        "read.ui.dam":false,
                        "write.ui.dam":false,
                        "read.ui.damTypes":false,
                        "write.ui.damTypes":false,
                        "read.ui.workspaces":false,
                        "write.ui.workspaces":false,
                        "read.ui.queries":false,
                        "write.ui.queries":false,
                        "read.ui.technicalDashboard":false,
                        "execute.ui.technicalDashboard":false,
                        "read.ui.groups":false,
                        "write.ui.groups":false,
                        "read.ui.workflows":false,
                        "write.ui.workflows":false,
                        "exe.ui.elasticSearch":false,
                        "read.ui.dependantTypes":false,
                        "write.ui.dependantTypes":false,
                        "read.ui.forms":false,
                        "write.ui.forms":false,
                        "admin.ui.groups":false,
                        "exe.ui.import":false,
                        "write.ui.mailingLists":false,
                        "read.ui.mailingLists":false,
                        "exe.ui.purgeContentType":false,
                        "exe.ui.purgeDamType":false,
                        "read.ui.directories":false,
                        "write.ui.directories":false,
                        "read.ui.languages":false,
                        "write.ui.languages":false,
                        "read.ui.customThemes":false,
                        "write.ui.customThemes":false,
                        "read.ui.userTypes":false,
                        "write.ui.userTypes":false,
                        "read.ui.emails":false,
                        "read.ui.emailTemplates":false,
                        "write.ui.emails":false,
                        "write.ui.emailTemplates":false,
                        "read.ui.applicationLogs":false,
                        "read.ui.shippers":false,
                        "write.ui.shippers":false,
                        "read.ui.orders":false,
                        "write.ui.orders":false,
                        "read.ui.taxes":false,
                        "write.ui.taxes":false,
                        "read.ui.stock":false,
                        "write.ui.stock":false,
                        "read.ui.paymentMeans":false
                    }
                });
                Ext.Ajax.on("beforerequest", function(conn, options){
                    if (Ext.isEmpty(options.params)){
                        options.params={};
                    }
                    if(!Ext.isEmpty(Ext.getCmp("workingLanguageField").getValue())){
                        options.params.workingLanguage=Ext.getCmp("workingLanguageField").getValue();
                    }
                    options.params.token=ACL.CSRFToken;
                });
                /*Ext.override(Ext.form.field.Text, {
                stripCharsRe:/<\/?[^>]+>/gi
                });*/

        this.control({
            "component": {
                render: this.onComponentRender
            }
        });
    },

    onLaunch: function() {
        var me=this;
        Ext.Ajax.request({
            url:'current-user/get-token',
            method:"GET",
            params:{
            },
            success:function(response){
                ACL.CSRFToken=Ext.JSON.decode(response.responseText).token;
            },
            failure:function(){
                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.tokenRecoveryError);
            }
        });
        Ext.Ajax.request({
            url:'acl',
            params:{
                data: Ext.JSON.encode(ACL.interfaceRights)
            },
            success:function(response){
                ACL.interfaceRights=Ext.JSON.decode(response.responseText);
                Ext.getCmp('boutonPincipalInterface').enable();
                var task = new Ext.util.DelayedTask(function(){
                    if(MyPrefData.simpleMode){
                        Ext.getCmp("ViewportPrimaire").insert(0,Ext.widget("simpleModeMainBar"));
                    }
                });
                task.delay(300);
            },
            failure:function(){
                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.rightsRecoveryError);
            }
        });
        ACL.sessionCheckIterator=setInterval(function(){me.checkSessionStatus();},60000);
    },

    checkSessionStatus: function() {
        var accessToken=Ext.util.Cookies.get("accessToken");
        var refreshToken=Ext.util.Cookies.get("refreshToken");
        if (!accessToken&&!refreshToken){
            if (Ext.isEmpty(Ext.getCmp("sessionExpiredWindow"))){
                        Ext.widget("sessionExpiredWindow").show();
                    }
            clearInterval(ACL.sessionCheckIterator);
        } else if (!accessToken&&refreshToken){
            Ext.Ajax.request({
            url:'/api/v1/auth/oauth2/refresh',
            params:{
                "refresh_token":refreshToken
            },
            success:function(response){
                var decodedResponse=Ext.JSON.decode(response.responseText);
                if (decodedResponse.success) {
                    var expirationDate=decodedResponse.token.createTime+decodedResponse.token.lifetime;
                    expirationDate=new Date(expirationDate*1000);
                    Ext.util.Cookies.set("accessToken",decodedResponse.token.access_token,expirationDate);
                    Ext.util.Cookies.set("refreshToken",decodedResponse.token.refresh_token);
                } else {
                    if (Ext.isEmpty(Ext.getCmp("sessionExpiredWindow"))){
                        Ext.widget("sessionExpiredWindow").show();
                    }
                    clearInterval(ACL.sessionCheckIterator);

                }
            },
            failure:function(){
                if (Ext.isEmpty(Ext.getCmp("sessionExpiredWindow"))){
                        Ext.widget("sessionExpiredWindow").show();
                    }
                clearInterval(ACL.sessionCheckIterator);
            }
        });
        }

    }

});
