/*
 * File: app/controller/UserTypesController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.UserTypesController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.UserTypesController',

    onNewUTBtnClick: function(button, e, eOpts) {
        Ext.widget("newUTWindow").show();
    },

    onCreateNewUTBtnClick: function(button, e, eOpts) {
        if (button.up().getForm().isValid()) {
            var newMT=Ext.create("Rubedo.model.userType",button.up().getForm().getValues());
            newMT.set("vocabularies", [ ]);
            newMT.set("fields", [ ]);
            newMT.set("layouts", [ ]);
            newMT.set("signUpType","none");
            newMT.set("defaultGroup",Ext.getStore("GroupsComboStore2").findRecord("name","public").get("id"));
            Ext.getStore("UserTypes").add(newMT);
            button.up().up().close();
        }
    },

    onMainUTGridSelectionChange: function(rowmodel, record, index, eOpts) {
        this.resetInterfaceSelect(record);
    },

    onRemoveUTBtnClick: function(button, e, eOpts) {
        var me=this;
        var cible = Ext.getCmp('mainUTGrid').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(cible)) {
            Ext.Ajax.request({
                url: 'user-types/is-used',
                method:"GET",
                params: {
                    id: cible.get("id")
                },
                success: function(response){
                    var maskIsUsed=Ext.JSON.decode(response.responseText).used;
                    if (maskIsUsed){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.userTypeIsUsedError);
                    } else {
                        var fenetre = Ext.widget('delConfirmZ');
                        fenetre.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisUserTypeText;
                        fenetre.show();
                        Ext.getCmp('delConfirmZOui').on('click', function() {
                            Ext.getCmp('mainUTGrid').getStore().remove(cible);
                            Ext.getCmp('delConfirmZ').close();
                            me.resetInterfaceNoSelect();
                        });
                    }
                }
            });
        }
    },

    onSaveUTBtnClick: function(button, e, eOpts) {
        var me=this;
        var rec=Ext.getCmp("CTLayoutsGrid1").getSelectionModel().getLastSelected();
        if (!Ext.isEmpty(rec)){
            rec.set("rows",me.saveLayout(Ext.getCmp("layoutEditionPanel1")));
        }
        var record=Ext.getCmp("mainUTGrid").getSelectionModel().getLastSelected();
        var form = Ext.getCmp("userTypesEditForm").getForm();
        if (form.isValid()){
            record.beginEdit();
            record.set(form.getValues());
            var newVocabularies=Ext.Array.pluck(Ext.Array.pluck(Ext.getCmp("vocabulariesUTGrid").getSelectionModel().getSelection(), "data"), "id");
            record.set("vocabularies", newVocabularies);
            record.set("layouts",Ext.Array.pluck(Ext.getStore("UTLayouts").getRange(),"data"));
            record.set("fields", me.recordFields(Ext.getCmp('UTeditFields')));
            record.endEdit();
        } else {
            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.invalidRightsPropertiesError);
        }
    },

    onCopyUTBtnClick: function(button, e, eOpts) {
        var rec = Ext.clone(Ext.getCmp("mainUTGrid").getSelectionModel().getLastSelected().data);
        delete(rec.id);
        rec.type=rec.type+" - Copy "+Ext.Date.format(new Date(), 'j F, Y, G:i');
        rec.readOnly=false;
        delete(rec.version);
        delete(rec.createTime);
        delete(rec.lastUpdateTime);
        delete(rec.UTType);
        Ext.getCmp("mainUTGrid").getStore().add(rec);
    },

    onNewUTFieldBtnClick: function(button, e, eOpts) {
        Ext.widget("UTFieldAddWindow").show();
    },

    onUTFieldInsertBtnClick: function(button, e, eOpts) {
        var proto=Ext.clone(Ext.getCmp("UTFieldSelectGrid").getSelectionModel().getLastSelected().getData());
        proto.protoId=proto.id;
        this.renderUTField(proto, Ext.getCmp('UTeditFields'));
        button.up().up().close();
    },

    selectionEvents: function(component, eOpts) {
        var usedNames=["email","login","password"]; //ADD OTHER ONES
        var me=this;
        var TCfield=component.getComponent(1);
        TCfield.getEl().on('click', function() {
            Ext.getCmp("UTfieldUp").enable();
            Ext.getCmp("UTfieldDown").enable();
            Ext.getCmp("UTfieldDeleter").enable();
            if (Ext.getCmp('UTFieldId').getValue() != TCfield.id) {
                if (Ext.isDefined(Ext.getCmp(Ext.getCmp('UTFieldId').getValue()))){
                    Ext.getCmp(Ext.getCmp('UTFieldId').getValue()).labelEl.applyStyles('color:#000000');
                    var companion =Ext.getCmp(Ext.getCmp('UTFieldId').getValue()).up().getComponent(2);
                    if (Ext.isDefined(companion)) {
                        companion.getEl().applyStyles('color:#000000');
                    }
                }
                Ext.getCmp('UTFieldId').setValue(TCfield.id);
                if ((TCfield.isXType("ImagePickerField"))||(TCfield.isXType("RECField"))||(TCfield.isXType("urlField"))||(TCfield.isXType("RDirectObjectField"))||(TCfield.isXType("embeddedImageField"))||(TCfield.isXType("localiserField"))||(TCfield.isXType("externalMediaField"))||(TCfield.isXType("DCEField"))) {
                    TCfield.up().getComponent(2).getEl().frame(MyPrefData.themeColor);
                    TCfield.up().getComponent(2).getEl().applyStyles('color:'+MyPrefData.themeColor);
                } else {
                    this.frame(MyPrefData.themeColor);
                    TCfield.labelEl.applyStyles('color:'+MyPrefData.themeColor);
                }
                var mesChamps = TCfield.configFields;
                var boiteParam = Ext.getCmp('UTFieldConfigsBox').getComponent(0).getComponent(0);
                var boiteParam1 = Ext.getCmp('UTFieldConfigsBox').getComponent(0).getComponent(1);
                boiteParam.removeAll();
                boiteParam1.removeAll();
                for(t=0; t<mesChamps.length; t++) {
                    if (mesChamps[t].type =='Ext.form.field.ComboBox') {
                        var monStore=  Ext.create('Ext.data.Store', mesChamps[t].store);
                        mesChamps[t].config.store= monStore;
                    }
                    var nouvChamp= Ext.create(mesChamps[t].type, mesChamps[t].config);
                    nouvChamp.labelSeparator= ' ';
                    nouvChamp.anchor='100%';
                    if (nouvChamp.name=="name"){
                        nouvChamp.validator=me.nameValidator;
                    }
                    nouvChamp.setValue(TCfield.config[nouvChamp.name]);
                    if ((mesChamps[t].type =='Rubedo.view.CTMTField')||(mesChamps[t].type =='Rubedo.view.CTCField')){

                        var properMT =Ext.clone(TCfield.config[nouvChamp.name]);
                        nouvChamp.getStore().targetField=nouvChamp.id;
                        nouvChamp.getStore().addListener("load", function(){
                            Ext.getCmp(this.targetField).setValue(properMT);
                        },nouvChamp.getStore(),{single:true});
                        }
                        if ((nouvChamp.name=="fieldLabel")||(nouvChamp.name=="tooltip")){
                            nouvChamp.hide();
                            var replacerField=Ext.widget('genericLocTextField',{
                                fieldLabel:nouvChamp.fieldLabel,
                                anchor:"100%",
                                targetEntity:TCfield.getId(),
                                targetEntityProp:nouvChamp.name,
                                CTMode:true,
                                companionFieldId:nouvChamp.getId(),
                                initialLanguage:Ext.getStore("CurrentUserDataStore").getRange()[0].get("language")
                            });
                            boiteParam.add(replacerField);
                        }
                        if ((nouvChamp.name=="localizable")){
                            nouvChamp.hide();
                        }
                        nouvChamp.setReadOnly((!ACL.interfaceRights["write.ui.userTypes"])||(Ext.getCmp("mainUTGrid").getSelectionModel().getLastSelected().get("readOnly")));
                        nouvChamp.on('change', function (thing) {
                            if (thing.isValid()){
                                if(this.isXType("timefield")){
                                    TCfield.config[this.name]=Ext.Date.format(this.getValue(),"H:i");
                                } else if(this.isXType("datefield")){
                                    TCfield.config[this.name]=Ext.Date.format(this.getValue(),"U");
                                } else {
                                    TCfield.config[this.name]= this.getValue();
                                }
                                if ((this.name=='name')&&((TCfield.isXType("radiogroup"))||(TCfield.isXType("checkboxgroup")))){
                                    var ntcrVal=this.getValue();
                                    Ext.Array.forEach(TCfield.config.items, function(ntch){ntch.name=ntcrVal;});
                                }
                                if (this.name=='fieldLabel') {

                                    if (TCfield.isXType("ImagePickerField")) {
                                        TCfield.up().getComponent(2).getComponent(0).setText(this.getValue());
                                    } else if ((TCfield.isXType("localiserField"))||(TCfield.isXType("RECField"))||(TCfield.isXType("urlField"))||(TCfield.isXType("RDirectObjectField"))||(TCfield.isXType("embeddedImageField"))||(TCfield.isXType("externalMediaField"))||(TCfield.isXType("DCEField"))){
                                        TCfield.up().getComponent(2).setFieldLabel(this.getValue());
                                    } else {
                                        TCfield.setFieldLabel(this.getValue());
                                    }
                                }
                                else if (this.name=='value') {

                                    TCfield.setValue(this.getValue());

                                }
                                else if (this.name=='allowBlank') {
                                    var currentOne=TCfield.config.fieldLabel;
                                    if (this.getValue()) {
                                        currentOne=currentOne.replace(" *","");
                                    } else {
                                        currentOne=currentOne+" *";
                                    }
                                    TCfield.config.fieldLabel=currentOne;
                                    if (TCfield.isXType("ImagePickerField")) {
                                        TCfield.up().getComponent(2).getComponent(0).setText(currentOne+" ");
                                    } else if ((TCfield.isXType("localiserField"))||(TCfield.isXType("RECField"))||(TCfield.isXType("urlField"))||(TCfield.isXType("RDirectObjectField"))||(TCfield.isXType("embeddedImageField"))||(TCfield.isXType("externalMediaField"))||(TCfield.isXType("DCEField"))){
                                        TCfield.up().getComponent(2).setFieldLabel(currentOne);
                                    } else {
                                        TCfield.setFieldLabel(currentOne);
                                    }
                                }
                                else if (this.name=='editable') {
                                    TCfield.setEditable(this.getValue());
                                    TCfield.reset();
                                }
                                else if (this.name=='multiSelect') {
                                    TCfield.multiSelect = this.getValue();
                                    TCfield.reset();
                                }
                                else if (this.name=='tooltip') {
                                    component.getComponent('helpBouton').setTooltip(this.getValue());
                                    if (Ext.isEmpty(this.getValue())){
                                        component.getComponent('helpBouton').hide();
                                    } else {
                                        component.getComponent('helpBouton').show();
                                    }
                                }
                                else if (this.name=='regex') {
                                    TCfield.regex = new RegExp(this.getValue());
                                }
                                else {
                                    TCfield[this.name]= this.getValue();
                                }
                                TCfield.validate();
                            }});
                            if (mesChamps[t].isASearchField){
                                boiteParam1.add(nouvChamp);
                            } else {
                                boiteParam.add(nouvChamp);
                            }

                        }
                        if ((TCfield.isXType('combobox'))&&(!(TCfield.isXType('timefield')))) {
                            var optionsLC = Ext.widget('optionsLCGrid', {store : TCfield.getStore()});
                            boiteParam.add(optionsLC);

                        }
                        if ((TCfield.isXType("radiogroup"))||(TCfield.isXType("checkboxgroup"))) {
                            var itemsConfigurator=Ext.widget("specialTCFieldItemsConfigurator");
                            itemsConfigurator.targetedId=TCfield.id;
                            boiteParam.add(itemsConfigurator);
                        }
                    }
                });
    },

    onUTfieldUpClick: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp('UTFieldId').getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().up().items.indexOf(field.up());
            if (pos > 0) {
                field.up().up().move(pos,pos-1);
            }
        }
    },

    onUTfieldDownClick: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp('UTFieldId').getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().up().items.indexOf(field.up());
            field.up().up().move(pos,pos+1);
        }
    },

    onUTfieldDeleterClick: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp('UTFieldId').getValue());
        if (!Ext.isEmpty(field)) {
            field.up().destroy();
            Ext.getCmp("UTfieldUp").disable();
            Ext.getCmp("UTfieldDown").disable();
            Ext.getCmp('UTFieldId').setValue();
            Ext.getCmp("UTfieldDeleter").disable();
            Ext.getCmp("UTFieldConfigsBox").getComponent(0).getComponent(0).removeAll();
        	Ext.getCmp("UTFieldConfigsBox").getComponent(0).getComponent(1).removeAll();
        }
    },

    onUTFieldSelectGridItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.onUTFieldInsertBtnClick(Ext.getCmp("UTFieldInsertBtn"));
    },

    onUsersInterfaceTypeGridSelectionChange: function(model, selected, eOpts) {
        Ext.getCmp("usersInterfaceStatusCol").hide();
        Ext.getCmp("usersSignUpModeration").hide();
        var imageMeta = Ext.getCmp('UsersInterface').getDockedComponent('barreMeta').getComponent('imageBarreMeta');
        var boiteMeta = Ext.getCmp("UsersInterface").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        if (Ext.isEmpty(selected)){
            Ext.Array.forEach(Ext.getCmp("UsersInterface").getComponent("contextBar").query("buttongroup"), function(btn){btn.disable();});
            Ext.getStore("UsersAdminDataStore").clearFilter(true);
            Ext.getStore("UsersAdminDataStore").removeAll();
            Ext.getCmp("addUserBtn").disable();
            Ext.getCmp("exportUsersBtn").disable();
            imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/user.png');
            boiteMeta.hide();
        } else {
            Ext.Array.forEach(Ext.getCmp("UsersInterface").getComponent("contextBar").query("buttongroup"), function(btn){btn.enable();});
            Ext.getStore("UsersAdminDataStore").clearFilter(true);
            Ext.getStore("UsersAdminDataStore").filter("typeId",selected[0].get("id"));
            Ext.getStore("UsersAdminDataStore").loadPage(1);
            Ext.getCmp("addUserBtn").enable();
            Ext.getCmp("exportUsersBtn").enable();
            if (selected[0].get("signUpType")=="moderated"){
                Ext.getCmp("usersInterfaceStatusCol").show();
                Ext.getCmp("usersSignUpModeration").show();
                Ext.getCmp("usersSignUpModeration").disable();
            } else if (selected[0].get("signUpType")=="emailConfirmation") {
                Ext.getCmp("usersInterfaceStatusCol").show();
            }
            imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');
            var  customMeta = selected[0].get("type");
            boiteMeta.show();
            boiteMeta.update(customMeta);
        }
    },

    onUsersInterfaceCenterGridSelectionChange: function(model, selected, eOpts) {
        Ext.getCmp("editUserBtn").disable();
        Ext.getCmp("removeUserBtn").disable();
        Ext.getCmp("usersSignUpModeration").disable();
        var imageMeta = Ext.getCmp('UsersInterface').getDockedComponent('barreMeta').getComponent('imageBarreMeta');
        var boiteMeta = Ext.getCmp("UsersInterface").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        if (Ext.isEmpty(selected)){
            var lastOne=Ext.getCmp("usersInterfaceTypeGrid").getSelectionModel().getLastSelected();
            if (!Ext.isEmpty(lastOne)){
                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');
                var  customMeta = lastOne.get("type");
                boiteMeta.update(customMeta);
            }

        } else if (selected.length==1) {
            Ext.getCmp("editUserBtn").enable();
            Ext.getCmp("removeUserBtn").enable();
            if (selected[0].get("status")=="pending"){
                Ext.getCmp("usersSignUpModeration").enable();
            }
            imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/user.png');
            var customMeta=selected[0].get("name")+"</br> "+selected[0].get("email")+"</br> "+Rubedo.RubedoAutomatedElementsLoc.creationText+" : "+Ext.Date.format(selected[0].get("createTime"), Ext.Date.defaultFormat)+
            " "+Rubedo.RubedoAutomatedElementsLoc.lastUpdateText+" : "+Ext.Date.format(selected[0].get("lastUpdateTime"), Ext.Date.defaultFormat);
            boiteMeta.update(customMeta);
        } else {
            Ext.getCmp("removeUserBtn").enable();
            imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/users.png');
            var  customMeta = selected.length+" Users";
            boiteMeta.update(customMeta);
        }
    },

    onAddUserBtnClick: function(button, e, eOpts) {
        var myType=Ext.getCmp("usersInterfaceTypeGrid").getSelectionModel().getLastSelected();
        this.fireUserCreate(myType);
    },

    onEditUserBtnClick: function(button, e, eOpts) {
        var record=Ext.getCmp("usersInterfaceCenterGrid").getSelectionModel().getLastSelected();
        this.fireUserEdit(record);
    },

    onRemoveUserBtnClick: function(button, e, eOpts) {
        Ext.getCmp("usersInterfaceCenterGrid").getStore().remove(Ext.getCmp("usersInterfaceCenterGrid").getSelectionModel().getSelection());
    },

    onUsersInterfaceCenterGridItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp("editUserBtn").fireEvent("click",Ext.getCmp("editUserBtn"));
    },

    onUserCUChangePictureBtnClick: function(button, e, eOpts) {
        Ext.widget("PersoPicUploadWindow").show();
    },

    onUserCUProfilePictureDeleteClick: function(button, e, eOpts) {
        Ext.getCmp("userCUAdminProfilePicture").setSrc("resources/images/userBig.png");
        Ext.getCmp("userUpdateCreadentialsForm").targetRecord.set("photo", null);
    },

    onUserCUChangePwdClick: function(button, e, eOpts) {
        var window=Ext.widget("AdminPasswordChange");
        window.show();
        window.getComponent(0).getForm().loadRecord(Ext.getCmp("userUpdateCreadentialsForm").targetRecord);
    },

    onApproveSignUpBtnClick: function(button, e, eOpts) {
        Ext.getCmp("usersInterfaceCenterGrid").getSelectionModel().getLastSelected().set("status", "approved");
        button.up().disable();
    },

    onDenySignUpBtnClick: function(button, e, eOpts) {
        Ext.getCmp("usersInterfaceCenterGrid").getSelectionModel().getLastSelected().set("status", "denied");
        button.up().disable();
    },

    onAddCTLayoutBtn1Click: function(button, e, eOpts) {
        Ext.widget("NewUTLayoutWindow").show();
    },

    onCopyCTLayoutBtn1Click: function(button, e, eOpts) {
        var target = Ext.getCmp('CTLayoutsGrid1').getSelectionModel().getSelection()[0];
        if (Ext.isDefined(target)) {
            var fenetre = Ext.widget('UTLCopyWindow');
            fenetre.show();
            fenetre.getComponent(0).getComponent(0).setValue(target.get("name")+" - Copie du "+Ext.Date.format(new Date(), 'j F, Y, G:i'));
        }
    },

    onRemoveCTLayoutBtn1Click: function(button, e, eOpts) {
        Ext.getCmp("CTLayoutsGrid1").getStore().remove(Ext.getCmp("CTLayoutsGrid1").getSelectionModel().getLastSelected());
    },

    onLayoutActivatorBtn1Click: function(button, e, eOpts) {
        if (button.deactivateMode){
            Ext.getCmp("CTLayoutsGrid1").getSelectionModel().getLastSelected().set("active",false);
            Ext.getCmp("layoutActivatorBtn1").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);
            Ext.getCmp("layoutActivatorBtn1").setIconCls("ouiS");
            Ext.getCmp("layoutActivatorBtn1").deactivateMode=false;

        } else {
            var mySite=Ext.getCmp("CTLayoutsGrid1").getSelectionModel().getLastSelected().get("site");
            Ext.Array.forEach(Ext.getCmp("CTLayoutsGrid1").getStore().query("site",mySite).items,function(record){
                record.set("active",false);
            });
            Ext.getCmp("CTLayoutsGrid1").getSelectionModel().getLastSelected().set("active",true);
            Ext.getCmp("layoutActivatorBtn1").setText(Rubedo.RubedoAutomatedElementsLoc.deactivateText);
            Ext.getCmp("layoutActivatorBtn1").setIconCls("nonS");
            Ext.getCmp("layoutActivatorBtn1").deactivateMode=true;
        }
    },

    onCTLayoutsGrid1SelectionChange: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)){
            this.resetLayoutsInterfaceNoSelect();
        } else {
            this.resetLayoutsInterfaceSelect(selected[0]);
        }
    },

    onNewCTLayoutWindowSubmitBtn1Click: function(button, e, eOpts) {
        var form=button.up().getForm();
        if (form.isValid()){
            var obs=form.getValues();
            obs.rows=[ ];
            Ext.getStore("UTLayouts").add(obs);
            button.up().up().close();
        }
    },

    onCTLCopyLSubitBtn1Click: function(button, e, eOpts) {
        var form=button.up().getForm();
        if (form.isValid()){
            var data = Ext.getCmp('CTLayoutsGrid1').getSelectionModel().getSelection()[0].getData();
            data.active=false;
            Ext.apply(data, form.getValues());
            Ext.getCmp('CTLayoutsGrid1').getStore().add(data);
            button.up().up().close();
        }
    },

    onCTLayoutsGrid1BeforeSelect: function(rowmodel, record, index, eOpts) {
        var me=this;
        var rec=Ext.getCmp("CTLayoutsGrid1").getSelectionModel().getLastSelected();
        if (!Ext.isEmpty(rec)){
            rec.set("rows",me.saveLayout(Ext.getCmp("layoutEditionPanel1")));
        }
    },

    onPanelAfterRender: function(component, eOpts) {
        var me=this;
        if (!component.isXType("unBloc")){
            component.addBodyCls('contrastBorder');
            if (component.mType=="col"){
                component.addBodyCls('contrastRow');
            }
            component.getEl().on("mouseover", function(e){
                e.stopEvent();
                component.setBorder(4);

            });
            component.getEl().on("mouseout", function(e){
                e.stopEvent();
                component.setBorder(2);

            });
            component.getEl().on("click", function(e){
                e.stopEvent();
                Ext.getCmp("layoutElementIdField1").setValue(component.getId());

            });
        } else {
            component.getEl().on("mouseover", function(e){
                e.stopEvent();
                var prevSelected = Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());
                if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {
                    component.setIconCls('selectBloc');
                }

            });
            component.getEl().on("mouseout", function(e){
                e.stopEvent();
                var prevSelected = Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());
                if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {
                component.setIconCls();}

            });
            component.getEl().on("click", function(e){
                e.stopEvent();
                Ext.getCmp("layoutElementIdField1").setValue(component.getId());

            });
            component.header.add(Ext.widget("tool",{
                type:"close",
                handler:function(){
                    component.up().remove(component);
                    me.getFieldsListForLayout();
                }
            }));

        }
    },

    onLayoutEditionPanel1AfterRender: function(component, eOpts) {
        component.setBorder(2);
        component.addBodyCls('contrastCBorder');
        component.getEl().on("mouseover", function(e){
            component.setBorder(4);
            e.stopEvent();
        });
        component.getEl().on("mouseout", function(e){
            component.setBorder(2);
            e.stopEvent();
        });
        component.getEl().on("click", function(e){
            Ext.getCmp("layoutElementIdField1").setValue(component.getId());
            e.stopEvent();
        });
    },

    onLayoutElementIdField1Change: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var newSelected=Ext.getCmp(newValue);
        Ext.Array.forEach(Ext.getCmp("layoutsEditToolbar1").items.items,function(item){
            item.disable();
        });
        Ext.getCmp("layoutPropsPanel1").removeAll();
        Ext.getCmp("layoutPropsPanel1").setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);
        Ext.getCmp("layoutPropsPanel1").setIconCls();
        Ext.getCmp("saveCTLayoutBtn1").enable();
        if (!Ext.isEmpty(newSelected)){
            newSelected.getEl().frame(MyPrefData.themeColor);
            newSelected.addBodyCls('selectedelement');


            if (newSelected.getId()=="layoutEditionPanel1"){
                Ext.getCmp("addRowToLayoutBtn1").enable();
                Ext.getCmp("layoutPropsPanel1").setTitle(Rubedo.RubedoAutomatedElementsLoc.rootText);
                Ext.getCmp("layoutPropsPanel1").setIconCls('editZone');
                me.renderMainBoxTools(newSelected);
            } else if (newSelected.mType=="row"){
                Ext.getCmp("removeLayoutElementBtn1").enable();
                Ext.getCmp("layoutPropsPanel1").setTitle(Rubedo.RubedoAutomatedElementsLoc.lignText);
                Ext.getCmp("layoutPropsPanel1").setIconCls('editZone');
                Ext.getCmp("moveLayoutItemUpBtn1").enable();
                Ext.getCmp("moveLayoutItemDownBtn1").enable();
                if (newSelected.getComponent("eol").flex>0){
                    Ext.getCmp("addColToLayoutBtn1").enable();
                }
                me.renderRowTools(newSelected);
            } else if (newSelected.mType=="col"){
                Ext.getCmp("removeLayoutElementBtn1").enable();
                if (!Ext.isEmpty(Ext.getStore("UTFieldsForLayouts").getRange())){
                    Ext.getCmp("assignFieldToColBtn1").enable();
                }
                Ext.getCmp("layoutPropsPanel1").setTitle(Rubedo.RubedoAutomatedElementsLoc.columnText);
                Ext.getCmp("layoutPropsPanel1").setIconCls('editZone');
                me.renderColumnTools(newSelected);
            } else if (newSelected.isXType("unBloc")){
                Ext.getCmp("removeLayoutElementBtn1").enable();
                newSelected.setIconCls('editBloc');
                newSelected.removeBodyCls('selectedelement');
                Ext.getCmp("moveLayoutItemUpBtn1").enable();
                Ext.getCmp("moveLayoutItemDownBtn1").enable();
                Ext.getCmp("layoutPropsPanel1").setIconCls('editBloc');
                Ext.getCmp("layoutPropsPanel1").setTitle(Rubedo.RubedoAutomatedElementsLoc.fieldText+" : "+newSelected.title);
                me.renderFieldTools(newSelected);

            }
        }



        var oldSelected=Ext.getCmp(oldValue);
        if (!Ext.isEmpty(oldSelected)){
            oldSelected.removeBodyCls('selectedelement');
            oldSelected.setIconCls();
        }
    },

    onAddRowToLayoutBtn1Click: function(button, e, eOpts) {
        var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());
        var row = Ext.widget('panel', {
            header:false,
            mType:"row",
            flex:1,
            id:"UTLayout-"+Ext.id(),
            plugins:[Ext.create("Ext.ux.BoxReorderer")],
            responsive:{
                phone:true,
                tablet:true,
                desktop:true,
                largeDesktop:true
            },
            margin:4,
            layout: {
                type: 'hbox',
                align: 'stretch'
            }
        });
        row.add(Ext.widget('container', {flex:12,reorderable:false,itemId:"eol"}));
        cible.insert(cible.items.items.length,row);
        Ext.getCmp('layoutElementIdField1').setValue(row.getId());
    },

    onAddColToLayoutBtn1Click: function(button, e, eOpts) {
        var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());
        var myEol=cible.getComponent('eol');

        if (myEol.flex>0) {
            var isFinalCol=true;
            var newCol=Ext.widget('panel', {
                header:false,
                flex:1,
                final:isFinalCol,
                id:"UTLayout-"+Ext.id(),
                stackThreshold:"sm",
                plugins:[Ext.create("Ext.ux.BoxReorderer")],
                responsive:{
                    phone:true,
                    tablet:true,
                    desktop:true,
                    largeDesktop:true
                },
                mType:'col',
                margin:4,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                }
            });
            myEol.flex=myEol.flex-1;
            cible.insert(cible.items.items.length-1,newCol);
            if (myEol.flex===0){
                button.disable();
            }
            Ext.getCmp('layoutElementIdField1').setValue(newCol.getId());
        }

    },

    onAssignFieldToColBtn1Click: function(button, e, eOpts) {
        Ext.widget("AssignFieldToColWindow1").show();
    },

    onRemoveLayoutElementBtn1Click: function(button, e, eOpts) {
        var me=this;
        var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());
        var recalc=false;
        if (cible.isXType("unBloc")){
            recalc=true;
        }
        if (cible.mType=="col"){
            var myEol=cible.up().getComponent("eol");
            var myOffset=cible.previousSibling();
            if (!Ext.isEmpty(myOffset)) {
                if ((myOffset.isXType("container"))&&(!(myOffset.isXType("panel")))) {
                    myEol.flex=myEol.flex+myOffset.flex;
                    myOffset.up().remove(myOffset);
                }
            }
            myEol.flex=myEol.flex+cible.flex;

        }
        cible.up().remove(cible);
        Ext.getCmp('layoutElementIdField1').setValue(null);
        if (recalc){
            me.getFieldsListForLayout();
        }
    },

    onMoveLayoutItemUpBtn1Click: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp("layoutElementIdField1").getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().items.indexOf(field);
            if (pos > 0) {
                field.up().move(pos,pos-1);
            }
        }
    },

    onMoveLayoutItemDownBtn1Click: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp("layoutElementIdField1").getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().items.indexOf(field);
            field.up().move(pos,pos+1);
        }
    },

    onCTLayoutFieldInjectorGrid1ItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var me=this;
        var target=Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());
        if ((!Ext.isEmpty(target))&&(target.mType=="col")){
            var name=record.get("name");
            var label=record.get("label");
            var newField = Ext.widget('unBloc', {title:label,id:"UTLayout-"+Ext.id()});
            newField.responsive={
                "phone":true,
                "tablet":true,
                "desktop":true,
                "largeDesktop":true,
            };
            newField.flex=1;
            newField.name=name;
            target.add(newField);
            me.getFieldsListForLayout();
        }
    },

    onAssignFieldToLayoutSubmitBtn2Click: function(button, e, eOpts) {
        var me=this;
        var form=button.up().getForm();
        if (form.isValid()){
            var name=form.getValues().field;
            var label=Ext.getStore("UTFieldsForLayouts").findRecord("name",name).get("label");
            var newField = Ext.widget('unBloc', {title:label,id:"UTLayout-"+Ext.id()});
            newField.responsive={
                "phone":true,
                "tablet":true,
                "desktop":true,
                "largeDesktop":true
            };
            newField.flex=1;
            newField.name=name;
            Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue()).add(newField);
            button.up().up().close();
            me.getFieldsListForLayout();
        }

    },

    resetInterfaceNoSelect: function() {
        Ext.Array.forEach(Ext.getCmp("UserTypesInterface").getComponent("contextBar").query("buttongroup"), function(btng){btng.disable();});
        Ext.getCmp("removeUTBtn").disable();
        Ext.getCmp("UserTypesInterface").getComponent("breadcrumb").removeAll();
        Ext.getCmp("UserTypesInterface").getComponent("breadcrumb").add(Ext.widget("button", {text: "User types ", iconCls:"user",localiserId:"userTypesLaunchBtn"}));
        Ext.getCmp('UTeditFields').removeAll();
        Ext.getCmp("UTfieldUp").disable();
        Ext.getCmp("UTfieldDown").disable();
        Ext.getCmp("UTfieldDeleter").disable();
        Ext.getCmp('UTFieldId').setValue();
        Ext.getCmp("UTFieldConfigsBox").getComponent(0).getComponent(0).removeAll();
        Ext.getCmp("UTFieldConfigsBox").getComponent(0).getComponent(1).removeAll();
        Ext.getCmp("UTcenterZone").disable();
        Ext.getCmp("userTypesEditForm").getForm().reset();
        Ext.getCmp("UserTypesInterface").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();
        this.resetLayoutsInterfaceNoSelect();
    },

    resetInterfaceSelect: function(record) {
        var me =this;

        Ext.Array.forEach(Ext.getCmp("UserTypesInterface").getComponent("contextBar").query("buttongroup"), function(btng){btng.enable();});
        Ext.getCmp("removeUTBtn").enable();
        Ext.getCmp("UserTypesInterface").getComponent("breadcrumb").removeAll();
        Ext.getCmp("UserTypesInterface").getComponent("breadcrumb").add(Ext.widget("button", {text: "User types ", iconCls:"user",localiserId:"userTypesLaunchBtn"}));
        Ext.getCmp("UserTypesInterface").getComponent("breadcrumb").add(Ext.widget("button", {text: record.get("type"), iconCls:"user"}));
        Ext.getCmp("UTcenterZone").enable();
        Ext.getCmp("UTfieldUp").disable();
        Ext.getCmp("UTfieldDown").disable();
        Ext.getCmp('UTFieldId').setValue();
        Ext.getCmp("userTypesEditForm").getForm().setValues(record.getData());
        Ext.getCmp("UTfieldDeleter").disable();
        Ext.getCmp("UTFieldConfigsBox").getComponent(0).getComponent(0).removeAll();
        Ext.getCmp("UTFieldConfigsBox").getComponent(0).getComponent(1).removeAll();
        var metaBox = Ext.getCmp("UserTypesInterface").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
        var values= record.getData();
        values.creation= Ext.Date.format(values.createTime, Ext.Date.defaultFormat);
        values.derniereModification= Ext.Date.format(values.lastUpdateTime, Ext.Date.defaultFormat);
        metaBox.update(values);
        metaBox.show();
        var selector= [];
        Ext.Array.forEach(record.get("vocabularies"),function(vocabId){
            if (!Ext.isEmpty(Ext.getCmp("vocabulariesUTGrid").getStore().findRecord("id", vocabId))){
                selector.push(Ext.getCmp("vocabulariesUTGrid").getStore().findRecord("id", vocabId));
            }
        });
        Ext.getCmp("vocabulariesUTGrid").getSelectionModel().select(selector);


        var targetZone=Ext.getCmp('UTeditFields');
        Ext.suspendLayouts();
        targetZone.removeAll();
        Ext.Array.forEach(record.get("fields"),function(field){
            me.renderUTField(field, targetZone);
        });
        Ext.resumeLayouts();
        Ext.getCmp("UTeditFields").doLayout();
        var task = new Ext.util.DelayedTask(function(){
            Ext.getCmp("UTeditFields").doLayout();
        });
        task.delay(200);
        if ((!ACL.interfaceRights["write.ui.userTypes"])||(record.get("readOnly"))) {
            Ext.Array.forEach(Ext.getCmp("userTypesEditForm").query("field"), function(thing){thing.setReadOnly(true);});
            Ext.getCmp("removeUTBtn").disable();
            Ext.getCmp("saveUTBtn").disable();
            Ext.getCmp("UTImportBtn").disable();
            Ext.getCmp("UTfieldDeleter").up().disable();
        } else {
            Ext.Array.forEach(Ext.getCmp("userTypesEditForm").query("field"), function(thing){thing.setReadOnly(false);});
            Ext.getCmp("removeUTBtn").enable();
            Ext.getCmp("saveUTBtn").enable();
            Ext.getCmp("UTImportBtn").enable();
            Ext.getCmp("UTfieldDeleter").up().enable();
        }
        Ext.getStore("UTLayouts").removeAll();
        Ext.getStore("UTLayouts").loadData(record.get("layouts"));



    },

    renderUTField: function(protoData, renderTarget, isUserCU) {
        var me=this;
        var configurator=protoData.config;
        if (!Ext.isEmpty(configurator.i18n)){
            var BOLanguage=Ext.getStore("CurrentUserDataStore").getRange()[0].get("language");
            if (!Ext.isEmpty(configurator.i18n[BOLanguage])){
                if (!Ext.isEmpty(configurator.i18n[BOLanguage].fieldLabel)){
                    configurator.fieldLabel=configurator.i18n[BOLanguage].fieldLabel;
                }
                if (!Ext.isEmpty(configurator.i18n[BOLanguage].tooltip)){
                    configurator.tooltip=configurator.i18n[BOLanguage].tooltip;
                }
            }
        }
        if (protoData.cType == 'combobox') {
            var myStore=  Ext.create('Ext.data.Store', Ext.clone(protoData.config.store));
            configurator.store = myStore;
        }
        var newField= Ext.create(protoData.cType, configurator);
        newField.config=protoData.config;
        newField.protoId=protoData.protoId;
        newField.configFields=Ext.getStore("UTFieldTypes").findRecord("id", protoData.protoId).get("configFields");
        newField.cType=protoData.cType;
        newField.anchor = '90%';
        newField.style = '{float:left;}';
        var casing =Ext.widget('ChampTC');
        casing.add(newField);
        casing.getComponent('helpBouton').setTooltip(configurator.tooltip);
        if (Ext.isEmpty(configurator.tooltip)){
            casing.getComponent('helpBouton').hidden=true;
        }
        if (isUserCU){
        } else {
            if (!me.nameAvailable(newField.name)) {
                var duplic = 1;
                while (!me.nameAvailable(newField.name+duplic)){
                    duplic++;
                }
                newField.name=newField.name+duplic;
                newField.config.name=newField.config.name+duplic;

            }
        }
        renderTarget.add(casing);
    },

    nameAvailable: function(name) {
        var usedNames=["email","login","password"]; //ADD OTHER ONES
        Ext.Array.forEach(Ext.getCmp('UTeditFields').query("field"), function(field){
            Ext.Array.include(usedNames,field.name);
        });
        if (Ext.Array.contains(usedNames,name)){
            return(false);
        } else {
            return(true);
        }
    },

    recordFields: function(target) {
        var result = [ ];
        Ext.Array.forEach(target.query("ChampTC"), function(ctc){
            var field=ctc.getComponent(1);
            var newField = {
                cType:field.cType,
                config:field.config,
                protoId:field.protoId
            };
            if (field.isXType('combobox')) {
                var dones = field.getStore().data.items;
                var donesR = [ ];
                for (i=0; i<dones.length; i++) {
                    donesR.push({valeur: dones[i].data.valeur, nom: dones[i].data.nom });
                }
                newField.config.store = {
                    fields: ['valeur', 'nom'],
                    data: donesR
                };
            }
            result.push(newField);
        });
        return(result);



    },

    nameValidator: function(name) {
        var usedNames=["email","login","password"]; //ADD OTHER ONES
        Ext.Array.forEach(Ext.getCmp('UTeditFields').query("field"), function(field){
            if (field.getId()!=Ext.getCmp(Ext.getCmp('UTFieldId').getValue()).getId()){
                Ext.Array.include(usedNames,field.name);
            }
        });
        if (Ext.Array.contains(usedNames,name)){
            return(Rubedo.RubedoAutomatedElementsLoc.fieldNameAlreadyUsedError);
        } else {
            return(true);
        }
    },

    fireUserCreate: function(userType) {
        var me=this;
        var myEditor=Ext.widget("UserCreateUpdateWindow", {title:"New user "+userType.get("type")});
        myEditor.show();
        var targetZone=Ext.getCmp("userCUFields");
        Ext.Array.forEach(userType.get("fields"),function(field){
            me.renderUTField(field, targetZone, true);
        });
        me.renderTaxoFields(userType);
        Ext.getCmp("userCUSaveBtn").on("click", function(){
            me.createUser(userType);
        });
    },

    renderTaxoFields: function(DAMType, useSep) {
        var formTaxoTC =  Ext.getCmp('userCUTaxonomy');
        var lesTaxo = DAMType.get("vocabularies");
        if (Ext.isEmpty(lesTaxo)) {
            //formTaxoTC.hide();
        } else {
            var i=0;
            for (i=0; i<lesTaxo.length; i++) {
                if (useSep){
                    var leVocab = Ext.getStore('TaxonomyForUT2').findRecord('id', lesTaxo[i]);
                } else {
                    var leVocab = Ext.getStore('TaxonomyForU').findRecord('id', lesTaxo[i]);
                }
                if (!Ext.isEmpty(leVocab)){
                    if (leVocab.get("inputAsTree")){
                        var storeT = Ext.create("Ext.data.TreeStore", {
                            model:"Rubedo.model.taxonomyTermModel",
                            remoteFilter:"true",
                            proxy: {
                                type: 'ajax',
                                api: {
                                    read: 'taxonomy-terms/tree'
                                },
                                reader: {
                                    type: 'json',
                                    messageProperty: 'message'
                                },
                                encodeFilters: function(filters) {
                                    var min = [],
                                        length = filters.length,
                                        i = 0;

                                    for (; i < length; i++) {
                                        min[i] = {
                                            property: filters[i].property,
                                            value   : filters[i].value
                                        };
                                        if (filters[i].type) {
                                            min[i].type = filters[i].type;
                                        }
                                        if (filters[i].operator) {
                                            min[i].operator = filters[i].operator;
                                        }
                                    }
                                    return this.applyEncoding(min);
                                }
                            },
                            filters: {
                                property: 'vocabularyId',
                                value: leVocab.get("id")
                            }

                        });
                        var toUse="Ext.ux.TreePicker";
                        if(leVocab.get("multiSelect")){toUse="Ext.ux.TreeMultiPicker";}
                        if(leVocab.get("id")=='navigation'){storeT.getProxy().api={read:"taxonomy-terms/navigation-tree"};}
                        storeT.load();
                        var selecteur = Ext.create(toUse, {
                            name:leVocab.get("id"),
                            fieldLabel: leVocab.get("name"),
                            store: storeT,
                            anchor:"90%",
                            ignoreIsNotPage:true,
                            displayField:"text",
                            allowBlank: !leVocab.data.mandatory,
                            plugins:[Ext.create("Ext.ux.form.field.ClearButton")]
                        });


                    } else {
                        var storeT = Ext.create('Ext.data.JsonStore', {
                            model:"Rubedo.model.taxonomyTermModel",
                            remoteFilter:"true",
                            proxy: {
                                type: 'ajax',
                                api: {
                                    read: 'taxonomy-terms'
                                },
                                reader: {
                                    type: 'json',
                                    messageProperty: 'message',
                                    root: 'data'
                                },
                                encodeFilters: function(filters) {
                                    var min = [],
                                        length = filters.length,
                                        i = 0;

                                    for (; i < length; i++) {
                                        min[i] = {
                                            property: filters[i].property,
                                            value   : filters[i].value
                                        };
                                        if (filters[i].type) {
                                            min[i].type = filters[i].type;
                                        }
                                        if (filters[i].operator) {
                                            min[i].operator = filters[i].operator;
                                        }
                                    }
                                    return this.applyEncoding(min);
                                }
                            },
                            filters: {
                                property: 'vocabularyId',
                                value: leVocab.get("id")
                            }

                        });
                        storeT.on("beforeload", function(s,o){
                            o.filters=Ext.Array.slice(o.filters,0,1);
                            if (!Ext.isEmpty(o.params.comboQuery)){

                                var newFilter=Ext.create('Ext.util.Filter', {
                                    property:"text",
                                    value:o.params.comboQuery,
                                    operator:'like'
                                });

                                o.filters.push(newFilter);

                            }


                        });
                        var selecteur = Ext.widget('comboboxselect', {
                            name:leVocab.get("id"),
                            anchor:"90%",
                            fieldLabel: leVocab.get("name"),
                            autoScroll: false,
                            store: storeT,
                            queryMode: 'remote',
                            queryParam: 'comboQuery',
                            minChars:3,
                            grow:false,
                            displayField: 'text',
                            valueField: 'id',
                            filterPickList: true,
                            typeAhead: true,
                            forceSelection: !leVocab.data.expandable,
                            createNewOnEnter: leVocab.data.expandable,
                            multiSelect: leVocab.data.multiSelect,
                            allowBlank: !leVocab.data.mandatory
                        });

                    }
                    var enrobage =Ext.widget('ChampTC');
                    enrobage.add(selecteur);
                    enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);
                    if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}
                    formTaxoTC.add(enrobage);

                }}}
    },

    fireUserEdit: function(record, untethered) {
        var me=this;
        var myEditor=Ext.widget("UserCreateUpdateWindow", {title:record.get("name")});
        if (untethered){
            var userType=Ext.getStore("UserTypesForUsers2").findRecord("id",record.get("typeId"));
        } else {
            var userType=Ext.getStore("UserTypesForUsers").findRecord("id",record.get("typeId"));
        }
        myEditor.show();
        var targetZone=Ext.getCmp("userCUFields");
        Ext.Array.forEach(userType.get("fields"),function(field){
            me.renderUTField(field, targetZone, true);
        });
        me.renderTaxoFields(userType, untethered);
        var fieldUpdater=record.get("fields");
        if (Ext.isEmpty(fieldUpdater)){
            fieldUpdater={ };
        }
        fieldUpdater.name=record.get("name");
        fieldUpdater.email=record.get("email");
        Ext.getCmp('userCUFields').getForm().setValues(fieldUpdater);
        Ext.getCmp('userCUTaxonomy').getForm().setValues(record.get("taxonomy"));
        var credentialsForm=Ext.widget("userUpdateCreadentialsForm");
        myEditor.getComponent(0).add(credentialsForm);
        credentialsForm.getForm().setValues(record.getData());
        credentialsForm.targetRecord=record;
        if (Ext.isEmpty(record.get("photo"))) {
            Ext.getCmp("userCUAdminProfilePicture").setSrc("resources/images/userBig.png");
        } else {
            Ext.getCmp("userCUAdminProfilePicture").setSrc("image/get?file-id="+record.get("photo"));
        }
        if(untethered){
            Ext.getCmp("directUserKiller").show();
        }

        Ext.getCmp("userCUSaveBtn").on("click", function(){
            me.editUser(record);
        });
    },

    createUser: function(userType) {
        var fieldsForm=Ext.getCmp("userCUFields");
        var taxoForm=Ext.getCmp("userCUTaxonomy");
        if ((fieldsForm.isValid())&&(taxoForm.isValid())){
            var newUser={ };
            var fieldValues=fieldsForm.getValues();
            newUser.name=fieldValues.name;
            newUser.email=fieldValues.email;
            newUser.login=newUser.email;
            delete fieldValues.name;
            delete fieldValues.email;
            Ext.Array.forEach(Ext.getCmp("userCUFields").query("checkboxgroup"),function(cbGroup){
                        fieldValues[cbGroup.name]=cbGroup.getValue();
                    });
            newUser.fields=fieldValues;
            newUser.taxonomy=taxoForm.getValues();
            newUser.typeId=userType.get("id");
            newUser.groups=[ ];
            newUser.groups.push(userType.get("defaultGroup"));
            newUser.defaultGroup=userType.get("defaultGroup");
            newUser.status="approved";
            newUser.startValidity=null;
            newUser.endValidity=null;
            Ext.getCmp("usersInterfaceCenterGrid").getStore().add(newUser);
            Ext.getCmp("UserCreateUpdateWindow").close();
        }
    },

    editUser: function(record) {
        var fieldsForm=Ext.getCmp("userCUFields");
        var taxoForm=Ext.getCmp("userCUTaxonomy");
        var credentialsForm=Ext.getCmp("userUpdateCreadentialsForm");
        if ((fieldsForm.isValid())&&(taxoForm.isValid())&&(credentialsForm.isValid())){
            var newUser={ };
            var fieldValues=fieldsForm.getValues();
            newUser.name=fieldValues.name;
            newUser.email=fieldValues.email;
            delete fieldValues.name;
            delete fieldValues.email;
            Ext.Array.forEach(Ext.getCmp("userCUFields").query("checkboxgroup"),function(cbGroup){
                fieldValues[cbGroup.name]=cbGroup.getValue();
            });
            newUser.fields=fieldValues;
            newUser.taxonomy=taxoForm.getValues();
            Ext.apply(newUser,credentialsForm.getValues());
            record.set(newUser);
            Ext.getCmp("UserCreateUpdateWindow").close();
        }
    },

    prepareContext: function(id, typeId) {
        var me=this;
        Ext.getStore("TaxonomyForUT2").load();
        if (Ext.isEmpty(Ext.getStore("GroupsComboStore").getRange())){
            Ext.getStore("GroupsComboStore").load();
        }
        Ext.getStore("UserTypesForUsers2").clearFilter(true);
        Ext.getStore("UserTypesForUsers2").filter("id",typeId);
        Ext.getStore("UserTypesForUsers2").load();
        Ext.getStore("UnitaryUsersDataStore").clearFilter(true);
        Ext.getStore("UnitaryUsersDataStore").filter("id",id);
        Ext.getStore("UnitaryUsersDataStore").load();
        var task = new Ext.util.DelayedTask(function(){
            me.fireUserEdit(Ext.getStore("UnitaryUsersDataStore").getRange()[0],true);
        });
        task.delay(600);
    },

    resetLayoutsInterfaceSelect: function(record) {
        Ext.getCmp("RemoveCTLayoutBtn1").enable();
        Ext.getCmp("copyCTLayoutBtn1").enable();
        Ext.getCmp("layoutEditionPanel1").removeAll();
        Ext.getCmp("layoutsEditToolbar1").enable();
        this.restoreLayout(record.get("rows"),0,Ext.getCmp("layoutEditionPanel1"));
        Ext.getCmp("layoutElementIdField1").setValue(null);
        Ext.getCmp("layoutActivatorBtn1").enable();
        if (record.get("active")){
            Ext.getCmp("layoutActivatorBtn1").setText(Rubedo.RubedoAutomatedElementsLoc.deactivateText);
            Ext.getCmp("layoutActivatorBtn1").setIconCls("nonS");
            Ext.getCmp("layoutActivatorBtn1").deactivateMode=true;
        } else {
            Ext.getCmp("layoutActivatorBtn1").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);
            Ext.getCmp("layoutActivatorBtn1").setIconCls("ouiS");
            Ext.getCmp("layoutActivatorBtn1").deactivateMode=false;
        }
        this.getFieldsListForLayout();
    },

    resetLayoutsInterfaceNoSelect: function() {
        Ext.getCmp("layoutEditionPanel1").removeAll();
        Ext.getCmp("RemoveCTLayoutBtn1").disable();
        Ext.getCmp("copyCTLayoutBtn1").disable();
        Ext.getCmp("layoutsEditToolbar1").disable();
        Ext.getCmp("layoutActivatorBtn1").disable();
        Ext.getStore("UTFieldsForLayouts").removeAll();
        Ext.getCmp("layoutElementIdField1").setValue(null);
        Ext.getCmp("layoutActivatorBtn1").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);
        Ext.getCmp("layoutActivatorBtn1").setIconCls("ouiS");
        Ext.getCmp("layoutActivatorBtn1").deactivateMode=false;
    },

    getFieldsListForLayout: function() {
        var discoveredFields=[ ];
        var usedFields=Ext.Array.pluck(Ext.getCmp("layoutEditionPanel1").query("unBloc"),"name");
        if (!Ext.Array.contains(usedFields,"email")){
            discoveredFields.push({name:"email",label:"E-mail"});
        }
        if (!Ext.Array.contains(usedFields,"name")){
            discoveredFields.push({name:"name",label:"Name"});
        }
        if (!Ext.Array.contains(usedFields,"photo")){
            discoveredFields.push({name:"photo",label:"Photo"});
        }
        Ext.Array.forEach(Ext.getCmp('UTeditFields').query("ChampTC"), function(field){
            if (!Ext.Array.contains(usedFields,field.getComponent(1).name)){
                discoveredFields.push({name:field.getComponent(1).name, label:field.getComponent(1).fieldLabel});
            }
        });
        Ext.getStore("UTFieldsForLayouts").removeAll();
        Ext.getStore("UTFieldsForLayouts").add(discoveredFields);
    },

    saveLayout: function(startComp) {
        var me=this;
        var nRows=[ ];
        Ext.Array.forEach(startComp.items.items, function(row){
            var newCols = [ ];
            var offset=0;
            Ext.Array.forEach(row.items.items, function(col){
                if (col.isXType("panel")) {
                    var fields=[ ];
                    Ext.Array.forEach(col.items.items, function(field){
                        fields.push({
                            title:field.title,
                            responsive:field.responsive,
                            name:field.name,
                            showLabel:field.showLabel,
                            flex:field.flex
                        });
                    });
                    newCols.push({
                        eTitle:col.eTitle,
                        responsive:col.responsive,
                        stackThreshold:col.stackThreshold,
                        span:col.flex,
                        mType:"col",
                        fields:fields,
                        offset:offset

                    });
                    offset=0;
                } else {offset=offset+col.flex;}

                });
                nRows.push({
                    mType:"row",
                    responsive:row.responsive,
                    displayAsTabs:row.displayAsTabs,
                    columns: newCols

                });
            });
            return nRows;
    },

    renderRowTools: function(component) {
        var me=this;
        var configSpec = Ext.widget('ConfigSpecBloc');
        configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,
            anchor:"100%",
            labelWidth:60,
            margin:"0 0 10 0",
            vertical:true,
            columns:1,
            items: [
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}
            },{ boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}

            ]

        }));

        configSpec.getComponent(0).add(Ext.widget('checkbox',{
            itemId:"eDisplayAsTabsField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayAsTabsText,
            onChange:function(){

                component.displayAsTabs=this.getValue();

            },
            labelWidth:60,
            inputValue:true,
            anchor:"100%",
            margin:"10 0 10 0",
            checked:component.displayAsTabs
        }));

        Ext.getCmp("layoutPropsPanel1").add(configSpec);
    },

    renderFieldTools: function(component) {
        var me=this;
        var configSpec = Ext.widget('ConfigSpecBloc');
        configSpec.getComponent(0).add(Ext.widget('checkbox',{
            itemId:"eTitleShowField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayLabelText,
            onChange:function(){

                component.showLabel=this.getValue();

            },
            labelWidth:60,
            inputValue:true,
            anchor:"100%",
            margin:"10 0 10 0",
            checked:component.showLabel
        }));

        configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,
            anchor:"100%",
            labelWidth:60,
            margin:"0 0 10 0",
            vertical:true,
            columns:1,
            items: [
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}
            },{ boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}
            ]

        }));

        Ext.getCmp("layoutPropsPanel1").add(configSpec);
    },

    renderMainBoxTools: function(component) {
        var configSpec = Ext.widget('ConfigSpecBloc');
        var rec=Ext.getCmp("CTLayoutsGrid1").getSelectionModel().getLastSelected();
        configSpec.getComponent(1).add(Ext.create('Rubedo.view.ACEField',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.customTemplateText,
            onChange:function(){

                rec.set("customTemplate",this.getValue());

            },
            labelWidth:60,
            anchor:"100%",
            margin:"10 0 10 0",
            twigMode:false,
            defaultTemplateUrl:"blocks/userDetail/customLayout.html",
            value:Ext.clone(rec.get("customTemplate"))
        }));
        Ext.getCmp("layoutPropsPanel1").add(configSpec);
    },

    renderColumnTools: function(component) {
        var me=this;
        var configSpec = Ext.widget('ConfigSpecBloc');
        configSpec.getComponent(0).add(Ext.widget('displayfield',{
            value:"",
            labelWidth:180,
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.dbclickToAssignText


        }));
        configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,
            anchor:"100%",
            labelWidth:60,
            margin:"0 0 10 0",
            vertical:true,
            columns:1,
            items: [
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},
            { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}
            },{ boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}
            ]

        }));
        var offsetEdit=Ext.widget('numberfield',{
            itemId:"offsetEditor",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.offsetText,
            editable:false,
            labelWidth:60,
            allowDecimals:false,
            anchor:"100%",
            value:0,
            minValue:0
        });

        var spanEdit=Ext.widget('numberfield',{
            itemId:"spanEditor",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.spanText,
            labelWidth:60,
            editable:false,
            allowDecimals:false,
            anchor:"100%",
            value:component.flex,
            minValue:1
        });
        var stackThreshold=Ext.widget('combobox',{
                        itemId:"stackThreshold",
                        fieldLabel:Rubedo.RubedoAutomatedElementsLoc.stackingThresholdText,
                        labelWidth:60,
                        editable:false,
                        forceSelect:true,
                        anchor:"100%",
                        value:component.stackThreshold ? component.stackThreshold : "sm",
                        onChange:function(){

                            component.stackThreshold=this.getValue();

                        },
                        queryMode:"local",
                        store:[
                            ["xs",Rubedo.RubedoAutomatedElementsLoc.neverText],
                            ["sm",Rubedo.RubedoAutomatedElementsLoc.telephoneText],
                            ["md",Rubedo.RubedoAutomatedElementsLoc.tabletText],
                            ["lg",Rubedo.RubedoAutomatedElementsLoc.computerText]
                        ]
                    });


        configSpec.getComponent(0).add(offsetEdit);
        configSpec.getComponent(0).add(spanEdit);
        configSpec.getComponent(0).add(stackThreshold);
        me.applyConstrain(component,offsetEdit,spanEdit,false);
        offsetEdit.on("change",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});
        spanEdit.on("change",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});
        configSpec.getComponent(0).add(Ext.widget('textfield',{
            itemId:"eTitleField",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.titleText,
            onChange:function(){
                if (this.isValid()){
                    component.eTitle=this.getValue();
                }
            },
            labelWidth:60,
            allowBlank:true,
            anchor:"100%",
            margin:"10 0 0 0",
            value:component.eTitle
        }));
        Ext.getCmp("layoutPropsPanel1").add(configSpec);
    },

    applyConstrain: function(target, offsetF, spanF, applyFirst) {
        var myEol=target.up().getComponent("eol");
        var myOffset=null;
        if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType("container"))&&(!(target.prev().isXType("panel")))) {
            myOffset=target.prev();
        }
        if (applyFirst) {
            myEol.flex=myEol.flex+target.flex-spanF.getValue();
            target.flex=spanF.getValue();
            spanF.setMaxValue(target.flex+myEol.flex);
            offsetF.setMaxValue(offsetF.getValue()+myEol.flex);
            target.up().doLayout();
            if (offsetF.getValue()>0){
                if (Ext.isEmpty(myOffset)) {
                    myOffset=Ext.widget("container",{flex:0,reorderable: false,style:"{background-image:url(resources/images/stripes.png);}"});
                    target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);


                }
                myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                myOffset.flex=offsetF.getValue();
                offsetF.setMaxValue(myOffset.flex+myEol.flex);
                spanF.setMaxValue(spanF.getValue()+myEol.flex);
                target.up().doLayout();

            } else if((offsetF.getValue()===0)) {
                if (!Ext.isEmpty(myOffset)) {
                    myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();
                    myOffset.flex=offsetF.getValue();
                    offsetF.setMaxValue(myOffset.flex+myEol.flex);
                    spanF.setMaxValue(spanF.getValue()+myEol.flex);
                    myOffset.destroy();
                    target.up().doLayout();
                }

            }
        }
        else {
            if (Ext.isEmpty(myOffset)){
                offsetF.setValue(0);
                offsetF.setMaxValue(myEol.flex);
            }
            else {
                offsetF.setValue(myOffset.flex);
                offsetF.setMaxValue(myOffset.flex+myEol.flex);
            }

            spanF.setValue(target.flex);
            spanF.setMaxValue(target.flex+myEol.flex);
        }
    },

    deudceResposiveClass: function(responsiveObj) {
        var responsiveArray=[ ];
        Ext.Object.each(responsiveObj, function(key, value, myself) {
            if (value===true){
                responsiveArray.push(key);
            }
        });
        if (responsiveArray.length==3){
            return("");
        } else if (responsiveArray.length==2){
            var hiddenArray=["tablet","desktop","phone"];
            var hiddenMedia=Ext.Array.difference(hiddenArray,responsiveArray);
            return("hidden-"+hiddenMedia[0]);
        } else if (responsiveArray.length==1){
            return("visible-"+responsiveArray[0]);
        } else {
            return("hidden");
        }
    },

    restoreLayout: function(mRows, its, cible) {
        var me=this;
        Ext.Array.forEach(mRows, function(row){
            var newRow = Ext.widget('panel', {
                header:false,
                mType:"row",
                plugins:[Ext.create("Ext.ux.BoxReorderer")],
                displayAsTabs:row.displayAsTabs,
                responsive:row.responsive,
                id:"UTLayout-"+Ext.id(),
                margin:4,
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                }
            });
            var rFlex=1;
            var eolWidth=12;
            Ext.Array.forEach(row.columns, function(column){
                if (column.offset>0) {
                    newRow.add(Ext.widget('container', {
                        flex:column.offset,
                        reorderable:false,
                        style:"{background-image:url(resources/images/stripes.png);}"
                    }));
                    eolWidth=eolWidth-column.offset;
                }
                var isFinalCol=false;
                if (its<=0){isFinalCol=true;}
                var newCol=Ext.widget('panel', {
                    header:false,
                    flex:column.span,
                    eTitle:column.eTitle,
                    stackThreshold:column.stackThreshold,
                    plugins:[Ext.create("Ext.ux.BoxReorderer")],
                    final:isFinalCol,
                    mType:'col',
                    id:"UTLayout-"+Ext.id(),
                    responsive:column.responsive,
                    margin:4,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    }
                });
                if ((its>0)&&(column.isTerminal===false)) {
                    rFlex=Ext.Array.max([rFlex,column.rows.length]);
                    me.masqueRestit(column.rows,its-1,newCol);
                }

                eolWidth=eolWidth-column.span;
                Ext.Array.forEach(column.fields,function(field){
                    var cloned=Ext.clone(field);
                    cloned.id="UTLayout-"+Ext.id();
                    newCol.add(Ext.widget("unBloc",cloned));
                });
                newRow.add(newCol);

            });
            newRow.add(Ext.widget("container",{
                flex:eolWidth,
                reorderable:false,
                itemId:"eol"
            }));
            if (Ext.isEmpty(row.height)) {
                newRow.flex=rFlex;
            } else {
                newRow.height=row.height;
            }
            cible.add(newRow);
        });
    },

    init: function(application) {
        this.control({
            "#newUTBtn": {
                click: this.onNewUTBtnClick
            },
            "#createNewUTBtn": {
                click: this.onCreateNewUTBtnClick
            },
            "#mainUTGrid": {
                select: this.onMainUTGridSelectionChange
            },
            "#removeUTBtn": {
                click: this.onRemoveUTBtnClick
            },
            "#saveUTBtn": {
                click: this.onSaveUTBtnClick
            },
            "#copyUTBtn": {
                click: this.onCopyUTBtnClick
            },
            "#newUTFieldBtn": {
                click: this.onNewUTFieldBtnClick
            },
            "#UTFieldInsertBtn": {
                click: this.onUTFieldInsertBtnClick
            },
            "#UTeditFields ChampTC": {
                afterrender: this.selectionEvents
            },
            "#UTfieldUp": {
                click: this.onUTfieldUpClick
            },
            "#UTfieldDown": {
                click: this.onUTfieldDownClick
            },
            "#UTfieldDeleter": {
                click: this.onUTfieldDeleterClick
            },
            "#UTFieldSelectGrid": {
                itemdblclick: this.onUTFieldSelectGridItemDblClick
            },
            "#usersInterfaceTypeGrid": {
                selectionchange: this.onUsersInterfaceTypeGridSelectionChange
            },
            "#usersInterfaceCenterGrid": {
                selectionchange: this.onUsersInterfaceCenterGridSelectionChange,
                itemdblclick: this.onUsersInterfaceCenterGridItemDblClick
            },
            "#addUserBtn": {
                click: this.onAddUserBtnClick
            },
            "#editUserBtn": {
                click: this.onEditUserBtnClick
            },
            "#removeUserBtn": {
                click: this.onRemoveUserBtnClick
            },
            "#userCUChangePictureBtn": {
                click: this.onUserCUChangePictureBtnClick
            },
            "#userCUProfilePictureDelete": {
                click: this.onUserCUProfilePictureDeleteClick
            },
            "#UserCUChangePwd": {
                click: this.onUserCUChangePwdClick
            },
            "#approveSignUpBtn": {
                click: this.onApproveSignUpBtnClick
            },
            "#denySignUpBtn": {
                click: this.onDenySignUpBtnClick
            },
            "#addCTLayoutBtn1": {
                click: this.onAddCTLayoutBtn1Click
            },
            "#copyCTLayoutBtn1": {
                click: this.onCopyCTLayoutBtn1Click
            },
            "#RemoveCTLayoutBtn1": {
                click: this.onRemoveCTLayoutBtn1Click
            },
            "#layoutActivatorBtn1": {
                click: this.onLayoutActivatorBtn1Click
            },
            "#CTLayoutsGrid1": {
                selectionchange: this.onCTLayoutsGrid1SelectionChange,
                beforeselect: this.onCTLayoutsGrid1BeforeSelect
            },
            "#NewCTLayoutWindowSubmitBtn1": {
                click: this.onNewCTLayoutWindowSubmitBtn1Click
            },
            "#CTLCopyLSubitBtn1": {
                click: this.onCTLCopyLSubitBtn1Click
            },
            "#layoutEditionPanel1 panel": {
                afterrender: this.onPanelAfterRender
            },
            "#layoutEditionPanel1": {
                afterrender: this.onLayoutEditionPanel1AfterRender
            },
            "#layoutElementIdField1": {
                change: this.onLayoutElementIdField1Change
            },
            "#addRowToLayoutBtn1": {
                click: this.onAddRowToLayoutBtn1Click
            },
            "#addColToLayoutBtn1": {
                click: this.onAddColToLayoutBtn1Click
            },
            "#assignFieldToColBtn1": {
                click: this.onAssignFieldToColBtn1Click
            },
            "#removeLayoutElementBtn1": {
                click: this.onRemoveLayoutElementBtn1Click
            },
            "#moveLayoutItemUpBtn1": {
                click: this.onMoveLayoutItemUpBtn1Click
            },
            "#moveLayoutItemDownBtn1": {
                click: this.onMoveLayoutItemDownBtn1Click
            },
            "#CTLayoutFieldInjectorGrid1": {
                itemdblclick: this.onCTLayoutFieldInjectorGrid1ItemDblClick
            },
            "#assignFieldToLayoutSubmitBtn2": {
                click: this.onAssignFieldToLayoutSubmitBtn2Click
            }
        });
    }

});
