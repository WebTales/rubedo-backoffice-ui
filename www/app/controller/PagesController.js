/*
 * File: app/controller/PagesController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.PagesController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.PagesController',

    pageSiteSelect: function(combo, records, eOpts) {
        Ext.getStore("PagesDataStore").getProxy().extraParams.filter="[{\"property\":\"site\",\"value\":\""+records[0].get("id")+"\"}]";
        Ext.getStore("PagesDataStore").load();
        Ext.getStore("MasksComboStore").getProxy().extraParams.filter="[{\"property\":\"site\",\"value\":\""+records[0].get("id")+"\"}]";
        Ext.getStore("MasksComboStore").load();
        Ext.getCmp("contributionPages").siteHasEC=records[0].get("enableECommerceFeatures");
        if (Ext.getCmp("contributionPages").siteHasEC){
            Ext.getCmp("primaryPageECFS").show();
        } else {
            Ext.getCmp("primaryPageECFS").hide();
        }
        var filArianne = combo.up().up().up().getDockedComponent('filArianne');
        var typeFil = filArianne.getComponent('type');
        if (Ext.isDefined(typeFil)) {typeFil.setText(records[0].get("text"));}
        else { typeFil= Ext.widget('button',{iconCls: "masque-icon", text:records[0].get("text")+"<b> ></b>", itemId:'type'});
        typeFil.on("click", function(){Ext.getCmp("mainPageTree").getSelectionModel().select(Ext.getCmp("mainPageTree").getRootNode());});
        filArianne.insert(1,typeFil);
        }
        Ext.getCmp("pageTreeBreadcrumb").removeAll();
        Ext.getCmp("addPageBtn").enable();
        Ext.getCmp("removePageBtn").disable();
        Ext.Array.forEach(Ext.getCmp("contributionPages").getComponent("contextBar").query("buttongroup"), function(btn){btn.disable();});
        Ext.getCmp("mainPageEdition").removeAll();
        this.resetInterface();
    },

    openPageAddWindow: function(button, e, eOpts) {
        Ext.widget("newPageWindow").show();
    },

    createNewPage: function(button, e, eOpts) {
        var me=this;
        var form=button.up().getForm();
        var target=Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected();
        if (Ext.isEmpty(target)) {
            target=Ext.getCmp("mainPageTree").getRootNode();
        }
        if (form.isValid()){
            var newPage=form.getValues();
            newPage.blocks=[ ];
            newPage.expandable=false;

            newPage.iconCls="masque-icon";
            newPage.site=Ext.getCmp("pagesSitesCombo").getValue();
            newPage.inheritWorkspace=true;
            newPage.i18n={ };
            var nativeLanguage=Ext.getCmp("workingLanguageField").getValue();
            newPage.nativeLanguage=nativeLanguage;
            newPage.i18n[nativeLanguage]={text:form.getValues().title, title:form.getValues().title, pageURL:me.removeDiacritics(form.getValues().title.replace(/ /g, "-").toLowerCase())};
            var store=Ext.getCmp("mainPageTree").getStore();
            store.suspendAutoSync();
            var resync=false;
            target.set("expandable",true);
            if (target.isLoaded()){
                resync=true;
            }
            target.expand(false, function(){
                if (!target.hasChildNodes()){
                    newPage.orderValue=100;
                    resync=true;
                } else {
                    newPage.orderValue=target.lastChild.get("orderValue")+100;
                }
                target.appendChild(newPage);
                store.resumeAutoSync();
                if (resync){
                    store.sync();
                }
                button.up().up().close();
            });

        }
    },

    deletePage: function(button, e, eOpts) {
        var me=this;
        var target=Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected();
        if (Ext.isDefined(target)) {
            Ext.Ajax.request({
                url: 'pages/holds-site-default',
                params: {
                    id: target.get('id')
                },
                success: function(response){
                    var answer = Ext.JSON.decode(response.responseText);
                    if (answer.holdsDefault){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle,Rubedo.RubedoAutomatedElementsLoc.pageHoldsDefaultError);
                    } else {
                        var delCon = Ext.widget('delConfirmZ');
                        delCon.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisPageText;
                        delCon.show();
                        var store=Ext.getCmp("mainPageTree").getStore();
                        Ext.getCmp('delConfirmZOui').on('click', function() {
                            store.suspendAutoSync();
                            var myParent=target.parentNode;
                            if ((myParent.childNodes.length==1)&&(!myParent.isRoot())){
                                myParent.set("expandable",false);
                            }
                            target.remove();
                            store.resumeAutoSync();
                            store.sync();
                            Ext.getCmp("addPageBtn").enable();
                            Ext.getCmp("removePageBtn").disable();
                            Ext.Array.forEach(Ext.getCmp("contributionPages").getComponent("contextBar").query("buttongroup"), function(btn){btn.disable();});
                            Ext.getCmp("mainPageEdition").removeAll();
                            Ext.getCmp('delConfirmZ').close();
                            me.resetInterface();
                        });
                    }
                },
                failure:function(){
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle,Rubedo.RubedoAutomatedElementsLoc.pageHoldsDefaultServerError);

                }
            });


        }
    },

    pageSelect: function(rowmodel, record, index, eOpts) {
        Ext.getStore("PageDisplayedContentsStore").removeAll();
        var me=this;
        if (!record.isRoot()){

            Ext.getCmp("removePageBtn").enable();
            Ext.Array.forEach(Ext.getCmp("contributionPages").getComponent("contextBar").query("buttongroup"), function(btn){btn.enable();});

            Ext.getCmp("mainPageEdition").removeAll();
            var myMask =Ext.getStore("MasksComboStore").findRecord("id", record.get("maskId"));
            Ext.suspendLayouts();
            me.renderPage(Ext.clone(myMask.get("rows")),1,Ext.getCmp("mainPageEdition"));
            me.renderBlocks(Ext.clone(myMask.get("blocks")), false);
            me.renderBlocks(Ext.clone(record.get("blocks")), true);
            me.resetInterface();
            Ext.resumeLayouts();
            Ext.getCmp("pageMaskDisplayBtn").setText(Rubedo.RubedoAutomatedElementsLoc.associatedMaskText+" : "+myMask.get("text"));
            Ext.getCmp("pageMaskDisplayBtn").show();
            var valueSetter=Ext.clone(record.getData());
            try {
                Ext.apply(valueSetter, valueSetter.i18n[record.get('locale')]);
            } catch(err) {console.log("page i18n fail");}
                Ext.getCmp("mainPageAttributeForm").getForm().setValues(valueSetter);
                Ext.getCmp("pagesDLSToolbar").recievei18n(record.get('i18n'),record.get('locale'),record.get("nativeLanguage"));
                Ext.Array.forEach(Ext.getCmp("mainPageAttributeForm").query("field"), function(field){
                    field.setReadOnly(false);
                });
            Ext.Array.forEach(Ext.getCmp("pagesTaxoForm").query("field"), function(field){
                    field.setReadOnly(false);
                });
                Ext.Ajax.request({
                    url: 'xhr-get-page-url',
                    params: {
                        "page-id": record.get("id"),
                        "locale": Ext.getCmp("pagesDLSToolbar").getComponent(0).getValue()
                    },
                    success: function(response){
                        var targetedUrl = Ext.JSON.decode(response.responseText).url;
                        Ext.getCmp("pagesInternalPreview").add(Ext.widget("component",{
                            autoEl: {
                                tag: 'iframe',
                                src: targetedUrl+"?preview=1"
                            }
                        }));
                    },
                    failure:function(){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.pageURLRecoveryError);
                    }
                });

                Ext.getCmp("pagePreviewTextItem").setText(Rubedo.RubedoAutomatedElementsLoc.pagePreviewText+" "+Ext.Date.format(new Date(), 'F j, Y, G:i '));
                var metaBox = Ext.getCmp("contributionPages").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
                var values= record.getData();
                values.creation= Ext.Date.format(values.createTime, Ext.Date.defaultFormat);
                values.derniereModification= Ext.Date.format(values.lastUpdateTime, Ext.Date.defaultFormat);
                metaBox.update(values);
                metaBox.show();
                Ext.getCmp("addPageBtn").enable();
            Ext.getCmp("addPageBtn1").enable();
            Ext.getCmp("pagesTaxoForm").getForm().reset();
            var pageTaxo=Ext.clone(record.get("taxonomy"));
            if (Ext.isEmpty(pageTaxo)){
                pageTaxo={ };

            }
            Ext.getCmp("pagesTaxoForm").getForm().setValues(pageTaxo);
                if((!ACL.interfaceRights["write.ui.pages"])||(record.get("readOnly"))){
                    Ext.getCmp("removePageBtn").disable();
                    Ext.getCmp("addPageBtn").disable();
                    Ext.getCmp("addPageBtn1").disable();
                    Ext.getCmp("contributionPages").getComponent("contextBar").query("buttongroup")[0].disable();
                    Ext.getCmp("contributionPages").getComponent("contextBar").query("buttongroup")[2].disable();
                    Ext.Array.forEach(Ext.getCmp("mainPageAttributeForm").query("field"), function(field){
                        field.setReadOnly(true);
                    });
                    Ext.Array.forEach(Ext.getCmp("pagesTaxoForm").query("field"), function(field){
                        field.setReadOnly(true);
                    });
                }
            } else {
                Ext.getCmp("addPageBtn").enable();
                Ext.getCmp("removePageBtn").disable();
                Ext.Array.forEach(Ext.getCmp("contributionPages").getComponent("contextBar").query("buttongroup"), function(btn){btn.disable();});
                Ext.getCmp("mainPageEdition").removeAll();
                me.resetInterface();
                Ext.getCmp("addPageBtn").enable();
            }
            var arButtons = [ ];
            me.breadcrumbBuilder(record,arButtons);
            Ext.getCmp("pageTreeBreadcrumb").removeAll();
            Ext.getCmp("pageTreeBreadcrumb").add(arButtons.reverse());
    },

    moveElementUp: function(button, e, eOpts) {
        var target=Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());
        if (!Ext.isEmpty(target)) {
            var pos = target.up().items.indexOf(target);
            if (pos > 0) {
                target.up().move(pos,pos-1);
                if (Ext.isEmpty(target.previousSibling())){
                    target.orderValue=target.nextSibling().orderValue-1;
                } else {
                    target.orderValue=(target.nextSibling().orderValue+target.previousSibling().orderValue)/2;
                }
            }
        }
    },

    moveElementDown: function(button, e, eOpts) {
        var target=Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());
        if (!Ext.isEmpty(target)) {
            if (!Ext.isEmpty(target.nextSibling())){
                var pos = target.up().items.indexOf(target);
                target.up().move(pos,pos+1);
                if (Ext.isEmpty(target.nextSibling())){
                    target.orderValue=target.previousSibling().orderValue+1;
                } else {
                    target.orderValue=(target.nextSibling().orderValue+target.previousSibling().orderValue)/2;
                }
            }

        }
    },

    deleteElement: function(button, e, eOpts) {
        var target=Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());
        target.destroy();
        Ext.getCmp("newPageBloc").disable();
        Ext.getCmp("deletePageElement").disable();
        Ext.getCmp("addPageBtn").disable();
        Ext.getCmp("pageElementUp").disable();
        Ext.getCmp("pageElementDown").disable();
        Ext.getCmp('pageElementPropsPanel').removeAll();
        Ext.getCmp('pageElementPropsPanel').setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);
        Ext.getCmp('pageElementPropsPanel').setIconCls();
        Ext.getCmp('pageElementIdField').setValue();
    },

    columnSelector: function(component, eOpts) {
        if ((component.mType=="col")&&((Ext.isEmpty(component.items.items))||(component.items.items[0].isXType("unBloc")))){
            component.addBodyCls('contrastBorder');
            component.addBodyCls('contrastRow');
            component.getEl().on("mouseover", function(e){
                component.setBorder(4);
                e.stopEvent();
            });
            component.getEl().on("mouseout", function(e){
                component.setBorder(2);
                e.stopEvent();
            });
            component.getEl().on("click", function(e){
                var prevSelected = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());
                if (!Ext.isEmpty(prevSelected)) {
                    if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
                prevSelected.removeBodyCls('selectedelement');}
            }
            component.addBodyCls('selectedelement');
            this.frame(MyPrefData.themeColor);
            Ext.getCmp('pageElementIdField').setValue(component.id);
            Ext.getCmp("newPageBloc").enable();
            Ext.getCmp("deletePageElement").disable();
            Ext.getCmp("pageElementUp").disable();
            Ext.getCmp("pageElementDown").disable();
            var propEdit=Ext.getCmp('pageElementPropsPanel');
            propEdit.removeAll();
            propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.columnText);
            propEdit.setIconCls('editZone');
            e.stopEvent();
        });
        }
    },

    showBlocAddWindow: function(button, e, eOpts) {
        Ext.widget("ajoutBlocFenetre").show();
        Ext.getCmp("boutonAjouterBloc").hide();
        Ext.getCmp("addPageBlocBtn").show();
        Ext.getCmp("BlocsSelectGrid").pageMode=true;
    },

    insertBloc: function(button, e, eOpts) {
        var donnees = Ext.getCmp('BlocsSelectGrid').getSelectionModel().getLastSelected().data;
        var configurator = Ext.clone(donnees.configBasique);
        if (Ext.isEmpty(configurator.configBloc)){
            configurator.configBloc={ };
        }
        delete configurator.champsConfig;
        var nouvBloc = Ext.widget('unBloc', configurator);
        nouvBloc.responsive={
            "phone":true,
            "tablet":true,
            "desktop":true,
            "largeDesktop":true
        };
        nouvBloc.canEdit=true;
        nouvBloc.flex=1;

        var target = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());
        var orderValue = 1;
        if (!Ext.isEmpty(target.items.items)) {
            orderValue=target.items.items[target.items.items.length-1].orderValue+1;
        }
        nouvBloc.orderValue=orderValue;
        target.add(nouvBloc);
        Ext.getCmp("ajoutBlocFenetre").close();
        nouvBloc.getEl().dom.click();
    },

    blocSelection: function(component, eOpts) {
        if (component.canEdit){
            component.getEl().on("mouseover", function(e){
                var prevSelected = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());
                if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {
                    component.setIconCls('selectBloc');
                }
                e.stopEvent();
            });
            component.getEl().on("mouseout", function(e){
                var prevSelected = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());
                if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {
                    component.setIconCls();}
                e.stopEvent();
            });
            component.getEl().on("click", function(e){
                var prevSelected = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());
                if (!Ext.isEmpty(prevSelected)) {
                    if (prevSelected.isXType("unBloc")) {prevSelected.setIconCls();} else {
                        prevSelected.removeBodyCls('selectedelement');}
                }
                component.setIconCls('editBloc');
                Ext.getCmp("newPageBloc").disable();
                Ext.getCmp("deletePageElement").enable();
                Ext.getCmp("pageElementUp").enable();
                Ext.getCmp("pageElementDown").enable();
                this.frame(MyPrefData.themeColor);
                Ext.getCmp('pageElementIdField').setValue(component.id);
                var propEdit=Ext.getCmp('pageElementPropsPanel');
                try{
                    propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.blockText+" "+Ext.getStore("BlocsDataStore").findRecord('bType', component.bType,0,false,false,true).get("type"));
                }catch(err){
                    propEdit.setTitle(component.id.replace("unBloc", "Bloc"));
                }
                propEdit.setIconCls('editBloc');
                propEdit.removeAll();
                var configSpec = Ext.widget('ConfigSpecBloc');

                var eventsConfig=Ext.clone(Ext.getStore("BlocsDataStore").findRecord('bType', component.bType,0,false,false,true).get("configBasique").champsConfig.csEvents);
                if(!Ext.isEmpty(eventsConfig)){
                    if(Ext.isEmpty(component.configBloc.csEventConfig)){
                        component.configBloc.csEventConfig=Ext.clone(eventsConfig);
                    }
                    Ext.applyIf(component.configBloc.csEventConfig,eventsConfig);
                    configSpec.add(Ext.create('Ext.grid.property.Grid', {
                        title: 'Events',
                        source: component.configBloc.csEventConfig
                    }));
                }

                configSpec.getComponent(0).add(Ext.widget('genericLocTextField',{
                    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.titleText,
                    labelWidth:60,
                    anchor:"100%",
                    margin:"10 0 10 0",
                    targetEntity:component.getId(),
                    targetEntityProp:"title",
                    initialLanguage:Ext.getCmp("workingLanguageField").getValue()
                }));
                configSpec.getComponent(0).add(Ext.widget('checkbox',{
                    itemId:"eTitleShowField",
                    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayTitleText,
                    onChange:function(){

                        component.displayTitle=this.getValue();

                    },
                    labelWidth:60,
                    inputValue:true,
                    anchor:"100%",
                    margin:"10 0 10 0",
                    checked:component.displayTitle
                }));




                configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{
                    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,
                    anchor:"100%",
                    labelWidth:60,
                    margin:"0 0 10 0",
                    vertical:true,
                    columns:1,
                    items: [
                        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },
                        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText,checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},
                        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText,checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}},
                        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}

                    ]

                }));

                configSpec.getComponent(1).add(Ext.widget('textfield',{
                    fieldLabel:"Code",
                    onChange:function(){
                        if (this.isValid()){
                            component.code=this.getValue();
                        }
                    },
                    labelWidth:60,
                    allowBlank:true,
                    anchor:"100%",
                    margin:"10 0 0 0",
                    value:component.code
                }));
                var languagesPicker = Ext.create("Ext.ux.form.field.BoxSelect", {
                    anchor:"100%",
                    name:"localeFilters",
                    labelWidth:70,
                    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.languagesText,
                    multiSelect:true,
                    forceSelection:true,
                    store: Ext.getStore("AllLanguagesStore4"),
                    displayField:"label",
                    valueField:"locale",
                    plugins:[Ext.create("Ext.ux.form.field.ClearButton")],
                    queryMode:"local",
                    "labelTpl": "<img src=\"/assets/flags/16/{flagCode}.png\" style=\"height: 16px; vertical-align: middle; margin: 2px;\" /> {label}",
                    "listConfig": {
                        "tpl": [
                            "<ul><tpl for=\".\">",
                            "<li role=\"option\" class=\"x-boundlist-item\" style=\"background-image:url(/assets/flags/16/{flagCode}.png); background-repeat: no-repeat; background-size: 16px; padding-left: 16px;\">{label}</li>",
                            "</tpl></ul>"
                        ]
                    }
                });
                languagesPicker.on("change",function(){
                    var newValue=languagesPicker.getValue();
                    if (Ext.isEmpty(newValue)){
                        languagesPicker.setValue(["all"]);
                    } else if((newValue.length>1)&&(Ext.Array.contains(newValue,"all"))){
                        languagesPicker.setValue(Ext.Array.remove(newValue,"all"));
                    }
                    component.localeFilters=languagesPicker.getValue();
                });
                if (Ext.isEmpty(component.localeFilters)){
                    languagesPicker.setValue(["all"]);
                } else {
                    languagesPicker.setValue(component.localeFilters);
                }
                if (Ext.getStore("AllLanguagesStore3").getRange().length==1){
                    languagesPicker.hide();
                }
                configSpec.getComponent(0).add(languagesPicker);

                if (Ext.isEmpty(component.bType)){
                    var categories = Ext.clone(component.champsConfig.simple);
                    var categoriesADV = Ext.clone(component.champsConfig.avance);
                } else {
                    var categories=Ext.clone(Ext.getStore("BlocsDataStore").findRecord('bType', component.bType,0,false,false,true).get("configBasique").champsConfig.simple);
                    var categoriesADV=Ext.clone(Ext.getStore("BlocsDataStore").findRecord('bType', component.bType,0,false,false,true).get("configBasique").champsConfig.avance);
                }

                Ext.Array.forEach(categoriesADV,function(someCat){someCat.isAdv=true;});
                categories=Ext.Array.merge(categories,categoriesADV);

                categories.push({
                    categorie:"Optimized render",
                    isAdv:true,
                    champs:[
                        {
                            "type": "Ext.form.field.Checkbox",
                            "config": {
                                "fieldLabel": "Always render",
                                "name": "bypassOptimizer",
                                "inputValue": true
                            }
                        },{
                            "type": "Ext.form.field.Number",
                            "config": {
                                "fieldLabel": "Placeholder height",
                                "name": "orPlaceholderMinHeight",
                                "allowDecimals": false,
                                "minValue": 0
                            }
                        }
                    ]

                });

                categories.push({
                    categorie:"Behaviour",
                    isAdv:true,
                    champs:[
                        {
                            "type": "Ext.form.field.Checkbox",
                            "config": {
                                "fieldLabel": "Render only in modal",
                                "name": "renderAsEventModal",
                                "inputValue": true
                            }
                        }

                    ]

                });

                for (j=0; j<categories.length; j++){
                    var nCateg = Ext.create('Ext.form.FieldSet', {title: categories[j].categorie, collapsible:true, layout: 'anchor'});
                    nCateg.isAdv=categories[j].isAdv;

                    var champsS = Ext.clone(categories[j].champs);
                    for (i=0; i<champsS.length; i++) {
                        if (champsS[i].type =='Ext.ux.TreePicker') {
                            var filteredStore=  Ext.create("Ext.data.TreeStore",{autoLoad: false,
                                                                                 autoSync: false,
                                                                                 isOptimised:true,
                                                                                 usedCollection:"Pages",
                                                                                 model: 'Rubedo.model.pageDataModel',
                                                                                 proxy: {
                                                                                     type: 'ajax',
                                                                                     api: {
                                                                                         create: 'pages/create',
                                                                                         read: 'pages/tree',
                                                                                         update: 'pages/update',
                                                                                         destroy: 'pages/delete'
                                                                                     },
                                                                                     reader: {
                                                                                         type: 'json',
                                                                                         getResponseData: function(response) {
                                                                                             var data, error;

                                                                                             try {
                                                                                                 data = Ext.decode(response.responseText);
                                                                                                 if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                                                                                                 return this.readRecords(data);
                                                                                             } catch (ex) {
                                                                                                 error = new Ext.data.ResultSet({
                                                                                                     total  : 0,
                                                                                                     count  : 0,
                                                                                                     records: [],
                                                                                                     success: false,
                                                                                                     message: ex.message
                                                                                                 });

                                                                                                 this.fireEvent('exception', this, response, error);
                                                                                                 console.log(ex);

                                                                                                 Ext.Logger.warn('Unable to parse the JSON returned by the server');

                                                                                                 return error;
                                                                                             }
                                                                                         },
                                                                                         messageProperty: 'message'
                                                                                     }
                                                                                 },
                                                                                 sorters: {
                                                                                     property: 'orderValue'
                                                                                 }
                                                                                });

                            filteredStore.getProxy().extraParams.filter="[{\"property\":\"site\",\"value\":\""+Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected().get("site")+"\"}]";
                            filteredStore.load();
                            champsS[i].config.store= filteredStore;
                            champsS[i].config.displayField="text";
                            champsS[i].config.plugins=[Ext.create("Ext.ux.form.field.ClearButton")];



                        }else if (champsS[i].isAutoStored){
                            var miniStore=Ext.create('Ext.data.Store', {
                                fields:[{name:"value"},{name:"label"}],
                                data:champsS[i].autoStoreData,
                                autoload:true
                            });
                            champsS[i].config.store= miniStore;
                            champsS[i].config.displayField="label";
                            champsS[i].config.valueField="value";
                        }
                        var nChampS = Ext.create(champsS[i].type, champsS[i].config);
                        if (champsS[i].type =='Ext.form.field.Trigger'){
                            var Ouvrir = Ext.clone(champsS[i].ouvrir);
                            var targeting=Ext.clone(nChampS.id);
                            nChampS.onTriggerClick= function() {
                                var fenetre = Ext.widget(Ouvrir);
                                fenetre.show();
                                fenetre.mainFieldId=targeting;

                            } ;
                        }
                        nChampS.labelSeparator= ' ';
                        nChampS.anchor= '100%';
                        nChampS.labelWidth=100;
                        nChampS.setValue(component.configBloc[nChampS.name]);
                        if ((nChampS.name=="magicQuery")&&(!PHPOptions.activateMagic)){
                            nChampS.hide();
                        }
                        if ((nChampS.isXType("combobox"))&&(!nChampS.isXType("treepicker"))){
                            nChampS.getStore().fieldId=Ext.clone(nChampS.id);
                            nChampS.getStore().fieldValue=Ext.clone(component.configBloc[nChampS.name]);
                            nChampS.getStore().addListener("load",function(storeThing){
                                if (!Ext.isEmpty(Ext.getCmp(storeThing.fieldId))){
                                    Ext.getCmp(storeThing.fieldId).setValue(storeThing.fieldValue);
                                }
                            },this,{single:true});
                        }
                        if (nChampS.isXType("treepicker")){
                            nChampS.on('select', function(){component.configBloc[this.name]=this.getValue(); });

                        }
                        if (nChampS.isXType("comboboxselect")){
                            nChampS.on('afterrender', function(thing){thing.fireEvent("change");});

                        }
                        nChampS.on('change', function(){ component.configBloc[this.name]=this.getValue();});

                        nCateg.add(nChampS);
                    }
                    if(nCateg.isAdv){
                        configSpec.getComponent(1).add(nCateg);
                    }else{
                        configSpec.getComponent(0).add(nCateg);
                    }


                }
                propEdit.add(configSpec);


                if ((!ACL.interfaceRights['write.ui.pages'])||(Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected().get("readOnly"))){
                    Ext.Array.forEach(Ext.getCmp("pageElementPropsPanel").query("field"), function(truc){truc.setReadOnly(true);});
                    Ext.Array.forEach(Ext.getCmp("pageElementPropsPanel").query("button"), function(truc){if (!truc.isXType("tab")){truc.disable();}});
                }
                e.stopEvent();

            });}
    },

    savePage: function(button, e, eOpts) {
        var me=this;
        if (Ext.getCmp("mainPageAttributeForm").getForm().isValid()) {
            var editedPage=Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected();
            var newBlocks=this.saveBlocks(Ext.getCmp("mainPageEdition"));
            var store=Ext.getCmp("mainPageTree").getStore();
            var newTaxo=Ext.getCmp("pagesTaxoForm").getForm().getValues();
            store.suspendAutoSync();
            editedPage.beginEdit();
            editedPage.set("blocks",newBlocks);
            editedPage.set(Ext.getCmp("mainPageAttributeForm").getForm().getFieldValues());
            editedPage.set("taxonomy",newTaxo);
            Ext.getCmp("pagesDLSToolbar").persisti18n(editedPage);
            editedPage.endEdit();
            store.resumeAutoSync();
            store.sync();
            store.addListener("update", function(a, record){

                Ext.getCmp("mainPageAttributeForm").getForm().loadRecord(record);
                var arButtons = [ ];
                me.breadcrumbBuilder(record,arButtons);
                Ext.getCmp("pageTreeBreadcrumb").removeAll();
                Ext.getCmp("pageTreeBreadcrumb").add(arButtons.reverse());
                var metaBox = Ext.getCmp("contributionPages").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');
                var values= record.getData();
                values.creation= Ext.Date.format(values.createTime, 'd-m-Y');
                values.derniereModification= Ext.Date.format(values.lastUpdateTime, 'd-m-Y');
                metaBox.update(values);
                metaBox.show();

            },this,{single:true});
                Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected().collapseChildren(true);
                Ext.getCmp("mainPageTree").getStore().load({"node":Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected()});
                Ext.getCmp("pagesInternalPreview").removeAll();
                Ext.Ajax.request({
                    url: 'xhr-get-page-url',
                    params: {
                        "page-id": editedPage.get("id")
                    },
                    success: function(response){
                        var targetedUrl = Ext.JSON.decode(response.responseText).url;
                        Ext.getCmp("pagesInternalPreview").add(Ext.widget("component",{
                            autoEl: {
                                tag: 'iframe',
                                src: targetedUrl+"?preview=1"
                            }
                        }));
                    },
                    failure:function(){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.pageURLRecoveryError);
                    }
                });
                var task = new Ext.util.DelayedTask(function(){
                    Ext.getCmp("mainPageTree").getSelectionModel().deselectAll();
                    Ext.getCmp("mainPageTree").getSelectionModel().select(editedPage);
                });
                task.delay(200);

            } else {
                Ext.getCmp("mainPageAttributeForm").up().up().setActiveTab(2);
                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.pagePropertiesInvalidError);
            }
    },

    onWindowBeforeDestroy: function(component, eOpts) {
        if (component.isXType("window")){
            Ext.getStore("MasksComboStore").removeAll();
            Ext.getStore("PagesDataStore").getProxy().extraParams.filter="[{\"property\":\"site\",\"value\":\"emptyDecoy\"}]";
            Ext.getStore("PagesDataStore").load();
            Ext.getStore("PageDisplayedContentsStore").removeAll();
        }
    },

    onPagesSitesComboBeforeRender: function(component, eOpts) {
        var me=this;
        component.getStore().addListener("load",function(store,records){
            if (!Ext.isEmpty(records)){
                component.select(records[0]);
                if (component.id=="previewSitesCombo"){
                    me.pagePreviewSelect(component, [records[0]]);
                } else if (component.id=="pagesSitesCombo"){
                    Ext.getCmp("contributionPages").siteHasEC=records[0].get("enableECommerceFeatures");
                    me.pageSiteSelect(component, [records[0]]);
                }
                if (records.length==1){
                    component.up().hide();
                }
            }
        },this,{single:true});
    },

    pagePreviewSelect: function(combo, records, eOpts) {
        Ext.getStore("PagesPreviewStore").getProxy().extraParams.filter="[{\"property\":\"site\",\"value\":\""+records[0].get("id")+"\"}]";
        Ext.getStore("PagesPreviewStore").load();
        Ext.getCmp("previewLanguageCombo").getStore().removeAll();
        var record=records[0];
        Ext.Array.forEach(record.get("languages"), function(key){
            try{
                var potentialLabel=Ext.getStore("AllLanguagesStore3").query("locale",key,false,false,true).items[0].get("label");
                var betterLabel=Ext.getStore("AllLanguagesStore3").query("locale",key,false,false,true).items[0].get("ownLabel");
                if (!Ext.isEmpty(betterLabel)){
                    potentialLabel=betterLabel;
                }
                Ext.getCmp("previewLanguageCombo").getStore().add({"locale":key,"label":potentialLabel, "flagCode":Ext.getStore("AllLanguagesStore3").query("locale",key,false,false,true).items[0].get("flagCode")});
            }catch(err){}
            });
            Ext.getCmp("previewLanguageCombo").setValue(record.get("defaultLanguage"));
            Ext.getCmp("contribPreviewMain").removeAll();
    },

    onPreviewPageTreeSelect: function(rowmodel, record, index, eOpts) {
        Ext.getCmp("contribPreviewMain").removeAll();
        var dateValue="";
        if (!Ext.isEmpty(Ext.getCmp("advancedPreviewDateField").getValue())){
            dateValue="&preview_date="+Ext.Date.format(Ext.getCmp("advancedPreviewDateField").getValue(), "U");

        }
        if (!Ext.isEmpty(record)){
            Ext.getCmp("contribPreviewMain").removeAll();
            if(!record.isRoot()){
                Ext.Ajax.request({
                    url: 'xhr-get-page-url',
                    params: {
                        "page-id": record.get("id"),
                        "locale":Ext.getCmp("previewLanguageCombo").getValue()
                    },
                    success: function(response){
                        var targetedUrl = Ext.JSON.decode(response.responseText).url;
                        var showArg =encodeURIComponent(targetedUrl+"?preview=1"+"&preview_draft="+Ext.getCmp("advancedPreviewDraftField").getValue()+dateValue);
                        Ext.getCmp("contribPreviewMain").add(Ext.widget("component",{
                            autoEl: {
                                tag: 'iframe',
                                src: "resources/responsiveShow/?device="+Ext.getCmp("previewDeviceCombo").getActiveItem().deviceValue+"&url="+showArg
                            }
                        }));
                    },
                    failure:function(){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.pageURLRecoveryError);
                    }
                });
            }}
    },

    onPagePreviewRefreshBtnClick: function(button, e, eOpts) {
        var record = Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected();
        if ((!Ext.isEmpty(record))&&(!record.isRoot())){
            Ext.getCmp("pagesInternalPreview").removeAll();
            Ext.Ajax.request({
                url: 'xhr-get-page-url',
                params: {
                    "page-id": record.get("id"),
                    "locale": Ext.getCmp("pagesDLSToolbar").getComponent(0).getValue()
                },
                success: function(response){
                    var targetedUrl = Ext.JSON.decode(response.responseText).url;
                    Ext.getCmp("pagesInternalPreview").add(Ext.widget("component",{
                        autoEl: {
                            tag: 'iframe',
                            src: targetedUrl+"?preview=1"
                        }
                    }));
                },
                failure:function(){
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.pageURLRecoveryError);
                }
            });
        }
    },

    onAdvancedPreviewPageRefreshClick: function(button, e, eOpts) {
        var record=Ext.getCmp("previewPageTree").getSelectionModel().getLastSelected();
        var dateValue="";
        if (!Ext.isEmpty(Ext.getCmp("advancedPreviewDateField").getValue())){
            dateValue="&preview_date="+Ext.Date.format(Ext.getCmp("advancedPreviewDateField").getValue(), "U");

        }
        if (!Ext.isEmpty(record)){
            Ext.getCmp("contribPreviewMain").removeAll();
            if(!record.isRoot()){
                Ext.Ajax.request({
                    url: 'xhr-get-page-url',
                    params: {
                        "page-id": record.get("id"),
                        "locale":Ext.getCmp("previewLanguageCombo").getValue()
                    },
                    success: function(response){
                        var targetedUrl = Ext.JSON.decode(response.responseText).url;
                        var showArg =encodeURIComponent(targetedUrl+"?preview=1"+"&preview_draft="+Ext.getCmp("advancedPreviewDraftField").getValue()+dateValue);
                        Ext.getCmp("contribPreviewMain").add(Ext.widget("component",{
                            autoEl: {
                                tag: 'iframe',
                                src: "resources/responsiveShow/?device="+Ext.getCmp("previewDeviceCombo").getActiveItem().deviceValue+"&url="+showArg
                            }
                        }));
                    },
                    failure:function(){
                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.pageURLRecoveryError);
                    }
                });
            }}
    },

    onPanelActivate: function(component, eOpts) {
        var record = Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected();
        if ((!Ext.isEmpty(record))&&(!record.isRoot())){
            component.getComponent(0).getStore().getProxy().extraParams.id=record.get("id");
            component.getComponent(0).getStore().load();
        }
    },

    onNewPageMaskSelectorAfterRender: function(component, eOpts) {
        var target=Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected();
        if (!target.isRoot()){
            component.setValue(target.get("maskId"));
        }
    },

    onPageMaskDisplayBtnClick: function(button, e, eOpts) {
        var recordM = Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected().get("maskId");
        var fenetre = Ext.getCmp("adminFMDP");
        if (Ext.isDefined(fenetre)){fenetre.show();  fenetre.toFront(); }
        else {
            fenetre = Ext.widget("adminFMDP");
            if (MyPrefData.simpleMode){
                fenetre.maximized=true;
                fenetre.draggable=false;
            }
            Ext.getCmp('desktopCont').add(fenetre);
            if (Ext.isDefined(window.innerHeight)) {
                if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}
                if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}
            }
            fenetre.show();
        }
        var target=Ext.getCmp("adminFMDP").getComponent(0);
        if (!Ext.isEmpty(target)) {

            if (target.getStore().isLoading()) {
                target.getStore().addListener("load", function(){target.getSelectionModel().select(target.getStore().findRecord("id",recordM));},this,{single:true});
            } else {
                target.getSelectionModel().select(target.getStore().findRecord("id",recordM));
            }
        }
    },

    renderPage: function(mRows, its, cible) {
        var me=this;
        Ext.Array.forEach(mRows, function(row){

            if (row.id.indexOf("page-")==-1) {
                row.id="page-"+row.id;
            }
            var newRow = Ext.widget('panel', {
                header:false,
                mType:"row",
                eTitle:row.eTitle,
                id:row.id,
                responsive:row.responsive,
                classHTML:row.classHTML,
                idHTML:row.idHTML,
                displayTitle:row.displayTitle,
                margin:4,
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                }
            });
            var rFlex=1;
            var eolWidth=12;
            Ext.Array.forEach(row.columns, function(column){
                if (column.offset>0) {
                    newRow.add(Ext.widget('container', {
                        flex:column.offset,
                        style:"{background-image:url(resources/images/stripes.png);}"
                    }));
                    eolWidth=eolWidth-column.offset;
                }
                var isFinalCol=false;
                if (its<=0){isFinalCol=true;}

                if (column.id.indexOf("page-")==-1) {
                    column.id="page-"+column.id;
                }
                var newCol=Ext.widget('panel', {
                    header:false,
                    flex:column.span,
                    final:isFinalCol,
                    mType:'col',
                    id:column.id,
                    eTitle:column.eTitle,
                    responsive:column.responsive,
                    classHTML:column.classHTML,
                    displayTitle:column.displayTitle,
                    idHTML:column.idHTML,
                    margin:4,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    }
                });
                if ((its>0)&&(column.isTerminal===false)) {
                    rFlex=Ext.Array.max([rFlex,column.rows.length]);
                    me.renderPage(column.rows,its-1,newCol);
                }

                eolWidth=eolWidth-column.span;
                newRow.add(newCol);

            });
            newRow.add(Ext.widget("container",{
                flex:eolWidth,
                itemId:"eol"
            }));
            if (Ext.isEmpty(row.height)) {
                newRow.flex=rFlex;
            } else {
                newRow.height=row.height;
            }
            cible.add(newRow);


        });
    },

    resetInterface: function() {
        Ext.getCmp("newPageBloc").disable();
        Ext.getCmp("deletePageElement").disable();
        Ext.getCmp("addPageBtn").disable();
        Ext.getCmp("addPageBtn1").disable();
        Ext.getCmp("pageElementUp").disable();
        Ext.getCmp("pageElementDown").disable();
        Ext.getCmp('pageElementPropsPanel').removeAll();
        Ext.getCmp('pageElementPropsPanel').setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);
        Ext.getCmp('pageElementPropsPanel').setIconCls();
        Ext.getCmp('pageElementIdField').setValue();
        Ext.getCmp("pagesInternalPreview").removeAll();
        Ext.getCmp("pageMaskDisplayBtn").hide();
        Ext.getCmp("mainPageAttributeForm").getForm().setValues();
        Ext.getCmp("mainPageAttributeForm").getForm().reset();
        Ext.getCmp("pagePreviewTextItem").setText();
        Ext.getCmp("contributionPages").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();
    },

    renderBlocks: function(mBlocks, editable) {
        Ext.Array.forEach(mBlocks, function(block){
            block.title=Ext.util.Format.stripTags(block.title);
            if (block.parentCol.indexOf("page-")==-1) {
                block.parentCol="page-"+block.parentCol;
            }
            if (block.id.indexOf("page-")==-1) {
                block.id="page-"+block.id;
            }
            var targetCol=Ext.getCmp(block.parentCol);
            if ((!Ext.isEmpty(targetCol))&&(targetCol.mType=='col')){
                block.canEdit=editable;
                if (Ext.isEmpty(block.configBloc)){
                    block.configBloc={ };
                }
                block.flex=1;
                if (editable) {
                    var insertIndex=0;
                    Ext.Array.forEach(targetCol.items.items, function(brother){
                        if (brother.orderValue<block.orderValue){
                            insertIndex=insertIndex+1;
                        }
                    });
                    targetCol.insert(insertIndex, Ext.widget("unBloc",block));
                } else{
                    targetCol.add(Ext.widget("unBloc",block));
                }
            }
        });
    },

    saveBlocks: function(startComp) {
        var newBlocks = [ ];
        Ext.Array.forEach(startComp.query("unBloc"), function(nBloc){
            if (nBloc.canEdit){
                var myLocaleFilters=nBloc.localeFilters;
                if (Ext.isEmpty(myLocaleFilters)){
                    myLocaleFilters=['all'];
                }
                newBlocks.push({
                    bType:nBloc.bType,
                    id:nBloc.getId().replace("page-",""),
                    i18n:nBloc.i18n,
                    parentCol:nBloc.up().getId().replace("page-",""),
                    mType:"block",
                    champsConfig:nBloc.champsConfig,
                    configBloc:nBloc.configBloc,
                    orderValue:nBloc.orderValue,
                    title:nBloc.title,
                    localeFilters:myLocaleFilters,
                    responsive:nBloc.responsive,
                    displayTitle:nBloc.displayTitle,
                    flex:nBloc.flex,
                    code:nBloc.code,
                    canEdit:nBloc.canEdit,
                    checksum:nBloc.checksum
                });
            }
        });
        return(newBlocks);
    },

    breadcrumbBuilder: function(node, array) {
        var me=this;
        if (node.isRoot()) {

        } else {
            var button = Ext.widget("button", {text:node.get("text")+"<b> ></b>", iconCls:"masque-icon"});
            button.on("click",function(){ Ext.getCmp("contributionPages").getComponent(0).getSelectionModel().select(node);});
            array.push(button);
            me.breadcrumbBuilder(node.parentNode,array);
        }
    },

    removeDiacritics: function(str) {

          var defaultDiacriticsRemovalMap = [
            {'base':'A', 'letters':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},
            {'base':'AA','letters':/[\uA732]/g},
            {'base':'AE','letters':/[\u00C6\u01FC\u01E2]/g},
            {'base':'AO','letters':/[\uA734]/g},
            {'base':'AU','letters':/[\uA736]/g},
            {'base':'AV','letters':/[\uA738\uA73A]/g},
            {'base':'AY','letters':/[\uA73C]/g},
            {'base':'B', 'letters':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},
            {'base':'C', 'letters':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},
            {'base':'D', 'letters':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},
            {'base':'DZ','letters':/[\u01F1\u01C4]/g},
            {'base':'Dz','letters':/[\u01F2\u01C5]/g},
            {'base':'E', 'letters':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},
            {'base':'F', 'letters':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
            {'base':'G', 'letters':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},
            {'base':'H', 'letters':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},
            {'base':'I', 'letters':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},
            {'base':'J', 'letters':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},
            {'base':'K', 'letters':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},
            {'base':'L', 'letters':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},
            {'base':'LJ','letters':/[\u01C7]/g},
            {'base':'Lj','letters':/[\u01C8]/g},
            {'base':'M', 'letters':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
            {'base':'N', 'letters':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},
            {'base':'NJ','letters':/[\u01CA]/g},
            {'base':'Nj','letters':/[\u01CB]/g},
            {'base':'O', 'letters':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},
            {'base':'OI','letters':/[\u01A2]/g},
            {'base':'OO','letters':/[\uA74E]/g},
            {'base':'OU','letters':/[\u0222]/g},
            {'base':'P', 'letters':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
            {'base':'Q', 'letters':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
            {'base':'R', 'letters':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},
            {'base':'S', 'letters':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},
            {'base':'T', 'letters':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},
            {'base':'TZ','letters':/[\uA728]/g},
            {'base':'U', 'letters':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},
            {'base':'V', 'letters':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
            {'base':'VY','letters':/[\uA760]/g},
            {'base':'W', 'letters':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
            {'base':'X', 'letters':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
            {'base':'Y', 'letters':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},
            {'base':'Z', 'letters':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},
            {'base':'a', 'letters':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},
            {'base':'aa','letters':/[\uA733]/g},
            {'base':'ae','letters':/[\u00E6\u01FD\u01E3]/g},
            {'base':'ao','letters':/[\uA735]/g},
            {'base':'au','letters':/[\uA737]/g},
            {'base':'av','letters':/[\uA739\uA73B]/g},
            {'base':'ay','letters':/[\uA73D]/g},
            {'base':'b', 'letters':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},
            {'base':'c', 'letters':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},
            {'base':'d', 'letters':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},
            {'base':'dz','letters':/[\u01F3\u01C6]/g},
            {'base':'e', 'letters':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},
            {'base':'f', 'letters':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
            {'base':'g', 'letters':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},
            {'base':'h', 'letters':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},
            {'base':'hv','letters':/[\u0195]/g},
            {'base':'i', 'letters':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},
            {'base':'j', 'letters':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
            {'base':'k', 'letters':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},
            {'base':'l', 'letters':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},
            {'base':'lj','letters':/[\u01C9]/g},
            {'base':'m', 'letters':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
            {'base':'n', 'letters':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},
            {'base':'nj','letters':/[\u01CC]/g},
            {'base':'o', 'letters':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},
            {'base':'oi','letters':/[\u01A3]/g},
            {'base':'ou','letters':/[\u0223]/g},
            {'base':'oo','letters':/[\uA74F]/g},
            {'base':'p','letters':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
            {'base':'q','letters':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
            {'base':'r','letters':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},
            {'base':'s','letters':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},
            {'base':'t','letters':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},
            {'base':'tz','letters':/[\uA729]/g},
            {'base':'u','letters':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},
            {'base':'v','letters':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
            {'base':'vy','letters':/[\uA761]/g},
            {'base':'w','letters':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
            {'base':'x','letters':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
            {'base':'y','letters':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},
            {'base':'z','letters':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}
          ];

          for(var i=0; i<defaultDiacriticsRemovalMap.length; i++) {
            str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);
          }

          return str;


    },

    init: function(application) {
        this.control({
            "#pagesSitesCombo": {
                select: this.pageSiteSelect
            },
            "#addPageBtn": {
                click: this.openPageAddWindow
            },
            "#newPageSubmitBtn": {
                click: this.createNewPage
            },
            "#removePageBtn": {
                click: this.deletePage
            },
            "#mainPageTree": {
                select: this.pageSelect
            },
            "#pageElementUp": {
                click: this.moveElementUp
            },
            "#pageElementDown": {
                click: this.moveElementDown
            },
            "#deletePageElement": {
                click: this.deleteElement
            },
            "#mainPageEdition panel": {
                render: this.columnSelector
            },
            "#newPageBloc": {
                click: this.showBlocAddWindow
            },
            "#addPageBlocBtn": {
                click: this.insertBloc
            },
            "#mainPageEdition unBloc": {
                render: this.blocSelection
            },
            "#pageSaveBtn": {
                click: this.savePage
            },
            "#contributionPages": {
                beforedestroy: this.onWindowBeforeDestroy
            },
            "#pagesSitesCombo, #previewSitesCombo": {
                beforerender: this.onPagesSitesComboBeforeRender
            },
            "#previewSitesCombo": {
                select: this.pagePreviewSelect
            },
            "#previewPageTree": {
                select: this.onPreviewPageTreeSelect
            },
            "#pagePreviewRefreshBtn": {
                click: this.onPagePreviewRefreshBtnClick
            },
            "#advancedPreviewPageRefresh": {
                click: this.onAdvancedPreviewPageRefreshClick
            },
            "#pageContentDisplayer": {
                activate: this.onPanelActivate
            },
            "#newPageMaskSelector": {
                afterrender: this.onNewPageMaskSelectorAfterRender
            },
            "#pageMaskDisplayBtn": {
                click: this.onPageMaskDisplayBtnClick
            }
        });
    }

});
