/*
 * File: app/controller/EmailController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.controller.EmailController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.EmailController',

    onNewETRowBtnClick: function(button, e, eOpts) {
        var newRow=Ext.widget("panel",{
            eType:"row",
            plugins:[Ext.create("Ext.ux.BoxReorderer")],
            id:"emailType-"+Ext.id(),
            layout: {
                type: 'hbox',
                align: 'stretchmax'
            },
            eConfig:{
                styles:"",
                bgColor:""
            },
            flex:undefined,
            minHeight:30
        });
        Ext.getCmp(Ext.getCmp("elementETIdField").getValue()).add(newRow);
        newRow.getEl().dom.click();
    },

    onMainETContainerAfterRender: function(component, eOpts) {
        component.getComponent(0).addBodyCls('contrastEMBorder');
        component.getEl().on("click", function(e){
            e.stopEvent();
            Ext.getCmp("elementETIdField").setValue(component.getComponent(0).getId());

        });
    },

    onMainETHolderAfterRender: function(component, eOpts) {
        if ((component.eType=="imageComponent")||(component.eType=="textComponent")){
            component.addBodyCls('contrastCBorder');
        } else {
            component.addBodyCls('contrastEMBorder');
        }
        component.getEl().on("click", function(e){
            e.stopEvent();
            Ext.getCmp("elementETIdField").setValue(component.getId());

        });
    },

    onElementETIdFieldChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        if (!Ext.isEmpty(oldValue)){
            var oldOne=Ext.getCmp(oldValue);
            if (!Ext.isEmpty(oldOne)){
                oldOne.removeBodyCls('selectedEMElement');
                if (oldOne.eType=="col"){
                    oldOne.up().removeBodyCls("contrastEMPadding");
                    oldOne.up().doLayout();
                } else if ((oldOne.eType=="imageComponent")||(oldOne.eType=="textComponent")){
                    oldOne.up().removeBodyCls("contrastEMPadding");
                    oldOne.up().up().removeBodyCls("contrastEMPadding");
                    oldOne.up().up().doLayout();
                }
            }
        }
        if (!Ext.isEmpty(newValue)){
            var newOne=Ext.getCmp(newValue);
            if (!Ext.isEmpty(newOne)){
                newOne.getEl().frame(MyPrefData.themeColor);
                newOne.addBodyCls('selectedEMElement');
                if (newOne.eType=="col"){
                    newOne.up().addBodyCls("contrastEMPadding");
                    newOne.up().doLayout();
                } else if ((newOne.eType=="imageComponent")||(newOne.eType=="textComponent")){
                    newOne.up().addBodyCls("contrastEMPadding");
                    newOne.up().up().addBodyCls("contrastEMPadding");
                    newOne.up().up().doLayout();
                }
            }
        } else {

        }
        me.adaptETEditButtons(newValue);
    },

    onNewETColBtnClick: function(button, e, eOpts) {
        var me=this;
        var newCol=Ext.widget("panel",{
            eType:"col",
            id:"emailType-"+Ext.id(),
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            eConfig:{
                styles:"",
                bgColor:""
            },
            width:Ext.Array.min([100,me.calculateRemainingRowWidth(Ext.getCmp(Ext.getCmp("elementETIdField").getValue()))]),
            minHeight:28

        });
        Ext.getCmp(Ext.getCmp("elementETIdField").getValue()).add(newCol);
        newCol.getEl().dom.click();
    },

    onMoveUPETBtnClick: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp("elementETIdField").getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().items.indexOf(field);
            if (pos > 0) {
                field.up().move(pos,pos-1);
            }
        }
    },

    onMoveDownETBTnClick: function(button, e, eOpts) {
        var field = Ext.getCmp(Ext.getCmp("elementETIdField").getValue());
        if (!Ext.isEmpty(field)) {
            var pos = field.up().items.indexOf(field);
            field.up().move(pos,pos+1);
        }
    },

    onETAddImageBtnClick: function(button, e, eOpts) {
        var me=this;
        var newImage=Ext.widget("panel",{
            eType:"imageComponent",
            id:"emailType-"+Ext.id(),
            layout: {
                type: 'fit'
            },
            eConfig:{
                image:null,
                url:null,
                styles:""
            },
            flex:undefined,
                                minHeight:26

        });
        Ext.getCmp(Ext.getCmp("elementETIdField").getValue()).add(newImage);
        me.syncEComponent(newImage, true);
        newImage.getEl().dom.click();
    },

    onETAddTextBtnClick: function(button, e, eOpts) {
        var me=this;
        var newText=Ext.widget("panel",{
            eType:"textComponent",
            id:"emailType-"+Ext.id(),
            layout: {
                type: 'fit'
            },
            eConfig:{
                html:null,
                styles:""
            },
            flex:undefined,
            minHeight:26

        });
        Ext.getCmp(Ext.getCmp("elementETIdField").getValue()).add(newText);
        me.syncEComponent(newText, true);
        newText.getEl().dom.click();
    },

    onDeleteETElBtnClick: function(button, e, eOpts) {
        Ext.getCmp(Ext.getCmp("elementETIdField").getValue()).up().remove(Ext.getCmp(Ext.getCmp("elementETIdField").getValue()));
        Ext.getCmp("elementETIdField").setValue(null);
    },

    onNewETBtnClick: function(button, e, eOpts) {
        Ext.widget("newEmailTemplateWindow").show();
    },

    onDeleteEtBtnClick: function(button, e, eOpts) {
        var fenetre = Ext.widget('delConfirmZ');
        fenetre.show();
        Ext.getCmp('delConfirmZOui').on('click', function() {
            Ext.getCmp("mainETGrid").getStore().remove(Ext.getCmp("mainETGrid").getSelectionModel().getLastSelected());
            Ext.getCmp('delConfirmZ').close();
        });
    },

    onNewETSubmitBtnClick: function(button, e, eOpts) {
        var form=button.up().getForm();
        if (form.isValid()){
            var values=form.getValues();
            var newET=Ext.create("Rubedo.model.emailTemplateModel",{
                text:values.text,
                subject:values.text,
                isMailModel:values.isModel,
                rows: [ ],
                bodyProperties:{
                    style:"",
                    centered:true,
                    bodyWidth:values.bodyWidth,
                    bgColor:"",
                    bodyBgColor:""
                }

            });
            if ((!values.isModel)&&(values.useModel)){
                var record=Ext.getCmp("mainETGrid").getStore().findRecord("id",values.model);
                newET.set("bodyProperties", Ext.clone(record.get("bodyProperties")));
                newET.set("rows", Ext.clone(record.get("rows")));
            }
            Ext.getStore("EmailTemplates").add(newET);
            button.up().up().close();
        }
    },

    onMainETGridSelectionChange: function(model, selected, eOpts) {
        var me=this;
        if (Ext.isEmpty(selected)){
            me.resetETNoSelect();
        } else {
            me.resetETSelect(selected[0]);
        }
    },

    onSaveETBtnClick: function(button, e, eOpts) {
        var me=this;
        var form=Ext.getCmp("mainEmailForm").getForm();
        if (form.isValid()){
            var record=Ext.getCmp("mainETGrid").getSelectionModel().getLastSelected();
            record.beginEdit();
            record.set("bodyProperties",Ext.getCmp("mainETHolder").eConfig);
            record.set("rows",me.saveRows());
            record.set(form.getValues());
            record.endEdit();
        } else {
            Ext.getCmp("mainEmailForm").up().setActiveTab(1);
        }
    },

    onETPreviewPanelActivate: function(component, eOpts) {
        component.removeAll();
        component.add(Ext.widget("component",{
                        autoEl: {
                            tag: 'iframe',
                            src: window.location.protocol+"//"+window.location.host+"/backoffice/emails/preview?id="+Ext.getCmp("mainETGrid").getSelectionModel().getLastSelected().get("id")
                        }
                    }));
    },

    onETSendBtnClick: function(button, e, eOpts) {
        Ext.widget("sendEmailWindow").show();
    },

    onSendEmailSubmitBtnClick: function(button, e, eOpts) {
        var form=button.up().getForm();
        if (form.isValid()){

            Ext.Msg.confirm(Rubedo.RubedoAutomatedElementsLoc.warningTitle, Rubedo.RubedoAutomatedElementsLoc.emailSendWarning ,function(anser){
                if (anser=="yes"){
                    button.setLoading(true);
                    Ext.Ajax.request({
                        url: 'emails/send',
                        timeout: 240000,
                        method: 'POST',
                        params: {
                            list: form.getValues().mailingList,
                            id:Ext.getCmp("mainETGrid").getSelectionModel().getLastSelected().get("id")
                        },
                        success: function(response){
                            var text = Ext.JSON.decode(response.responseText);
                            if (text.success){
                                var message="Mail sent.";
                                if (!Ext.isEmpty(text.badEmails)){
                                    message="Mail sent to all recipients except to the following invalid email addresses : ";
                                    message=message+text.badEmails.join(", ");
                                }
                                Ext.Msg.alert("Success", message);
                                button.setLoading(false);
                                button.up().up().close();
                            } else {
                                Ext.Msg.alert("Error", "Error sending mail");
                                button.setLoading(false);
                            }
                        }
                    });

                }
            }

                           );



        }
    },

    onETAddSimpleTextBtnClick: function(button, e, eOpts) {
        var me=this;
        var newText=Ext.widget("panel",{
            eType:"textComponent",
            id:"emailType-"+Ext.id(),
            layout: {
                type: 'fit'
            },
            eConfig:{
                html:null,
                               simpleTextMode:true,
                styles:""
            },
            flex:undefined,
            minHeight:26

        });
        Ext.getCmp(Ext.getCmp("elementETIdField").getValue()).add(newText);
        me.syncEComponent(newText, true);
        newText.getEl().dom.click();
    },

    adaptETEditButtons: function(selectedElement) {
        var me=this;
        Ext.Array.forEach(Ext.getCmp("eTTopBarBox").query("button"), function(button){button.disable();});
        Ext.getCmp("ETAddComponentsBtnGr").disable();
        Ext.getCmp("eTEditControl").removeAll();
        Ext.getCmp("eTEditControl").setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);
        var thing=Ext.getCmp(selectedElement);
        if (!Ext.isEmpty(thing)){
            if (selectedElement=="mainETHolder"){
                Ext.getCmp("newETRowBtn").enable();
                Ext.getCmp("eTEditControl").setTitle(Rubedo.RubedoAutomatedElementsLoc.emailBodyText);
                me.displayBodyControls();
            } else if (thing.eType=="row"){
                Ext.getCmp("eTEditControl").setTitle(Rubedo.RubedoAutomatedElementsLoc.lignText);
                if(me.calculateRemainingRowWidth(thing)>=10){
                    Ext.getCmp("newETColBtn").enable();
                }
                Ext.getCmp("moveUPETBtn").enable();
                Ext.getCmp("moveDownETBTn").enable();
                Ext.getCmp("deleteETElBtn").enable();
                me.displayRowControls(thing);
                me.displayGenericControls(thing,Ext.getCmp("eTEditControl"));
            } else if (thing.eType=="col"){
                Ext.getCmp("eTEditControl").setTitle(Rubedo.RubedoAutomatedElementsLoc.columnText);
                if (Ext.isEmpty(thing.getComponent(0))){
                    Ext.getCmp("ETAddComponentsBtnGr").enable();
                }
                Ext.getCmp("moveUPETBtn").enable();
                Ext.getCmp("moveDownETBTn").enable();
                Ext.getCmp("deleteETElBtn").enable();
                me.displayColControls(thing);
                me.displayGenericControls(thing,Ext.getCmp("eTEditControl"));
            } else if (thing.eType=="imageComponent"){
                Ext.getCmp("eTEditControl").setTitle(Rubedo.RubedoAutomatedElementsLoc.imageText);
                Ext.getCmp("deleteETElBtn").enable();
                me.displayImageControls(thing,Ext.getCmp("eTEditControl"));
                me.displayGenericControls(thing,Ext.getCmp("eTEditControl"));
            } else if (thing.eType=="textComponent"){
                Ext.getCmp("eTEditControl").setTitle(Rubedo.RubedoAutomatedElementsLoc.textText);
                Ext.getCmp("deleteETElBtn").enable();
                me.displayTextControls(thing,Ext.getCmp("eTEditControl"));
                me.displayGenericControls(thing,Ext.getCmp("eTEditControl"));
            }
        }
    },

    applyWidthConstraints: function(field, col) {
        var maxWidth=col.up().getWidth()-2;
        Ext.Array.forEach(col.up().items.items, function(otherCol){
            if (otherCol.getId()!=col.getId()){
                maxWidth=maxWidth-otherCol.getWidth();
            }
        });
        field.setMaxValue(maxWidth);
    },

    calculateRemainingRowWidth: function(row) {
        var maxWidth=row.getWidth()-2;
        Ext.Array.forEach(row.items.items, function(otherCol){
            maxWidth=maxWidth-otherCol.getWidth();
        });
        return(maxWidth);
    },

    syncEComponent: function(component, firstTime) {
        if (component.eType=="imageComponent"){
            if (firstTime){
                component.add(Ext.create('Ext.Img'));
            }

            if (Ext.isEmpty(component.eConfig.image)){
                component.getComponent(0).setSrc("resources/icones/generic/image_add.png");
            } else {
                component.getComponent(0).setSrc("/dam?media-id="+component.eConfig.image);
            }
        } else if (component.eType=="textComponent"){
            if (firstTime){
                component.add(Ext.create('Ext.Component'));
            }
            component.getComponent(0).update(component.eConfig.html);
        }
    },

    displayImageControls: function(imageComponent, target) {
        var me=this;
        var imageField=Ext.create('Rubedo.view.ImagePickerField',{
            itemId:"imageEditor",
            fieldLabel:"Image",
            allowedFileType:Rubedo.RubedoAutomatedElementsLoc.imageText,
            smallMode:true,
            labelWidth:60,
            anchor:"100%",
            value:Ext.clone(imageComponent.eConfig.image)
        });
        imageField.on("change",function(){
            imageComponent.eConfig.image=imageField.getValue();
            me.syncEComponent(imageComponent);
        });
        target.add(imageField);
        var urlField=Ext.widget("textfield", {
            fieldLabel:"URL",
            labelWidth:60,
            anchor:"100%",
            vtype:"url",
            value:Ext.clone(imageComponent.eConfig.url)
        });
        urlField.on("change", function(){
            imageComponent.eConfig.url=urlField.getValue();
        });
        target.add(urlField);
    },

    displayTextControls: function(textComponent, target) {
        var me=this;
        if (textComponent.eConfig.simpleTextMode){
            var textField=Ext.widget('textareafield',{
                itemId:"textTEditor",
                fieldLabel:Rubedo.RubedoAutomatedElementsLoc.textText,
                labelWidth:60,
                grow:true,
                anchor:"100%",
                value:Ext.clone(textComponent.eConfig.html)
            });
        } else {
            var textField=Ext.widget('directRTEField',{
                itemId:"textTEditor",
                fieldLabel:Rubedo.RubedoAutomatedElementsLoc.textText,
                labelWidth:60,
                anchor:"100%",
                value:Ext.clone(textComponent.eConfig.html)
            });
        }
        textField.on("change",function(){
            textComponent.eConfig.html=textField.getValue();
            me.syncEComponent(textComponent);
        });
        target.add(textField);
    },

    displayRowControls: function(row) {
        var container=Ext.getCmp("eTEditControl");
        var bgColorEdit=Ext.widget("AdvancedColorField",{
            noPickerDisplay:true,
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.bgColorText,
            labelWidth:60,
            allowBlank:true,
            anchor:"100%"
        });
        bgColorEdit.on("change", function(){
            if (bgColorEdit.isValid()){
                row.eConfig.bgColor=bgColorEdit.getValue();
            }
        });
        container.add(bgColorEdit);
        bgColorEdit.setValue(Ext.clone(row.eConfig.bgColor));
    },

    displayColControls: function(col) {
        var me=this;
        var container=Ext.getCmp("eTEditControl");
        var spanEdit=Ext.widget('numberfield',{
            itemId:"spanEditor",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.widthText,
            labelWidth:60,
            editable:true,
            allowDecimals:false,
            anchor:"100%",
            value:col.getWidth(),
            minValue:10
        });
        spanEdit.on("change",function(){
            if (spanEdit.isValid()){
                col.setWidth(spanEdit.getValue());
                me.applyWidthConstraints(spanEdit,col);
            }
        });
        me.applyWidthConstraints(spanEdit,col);
        container.add(spanEdit);

        var bgColorEdit=Ext.widget("AdvancedColorField",{
            noPickerDisplay:true,
            allowBlank:true,
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.bgColorText,
            labelWidth:60,
            anchor:"100%"
        });
        bgColorEdit.on("change", function(){
            if (bgColorEdit.isValid()){
                col.eConfig.bgColor=bgColorEdit.getValue();
            }
        });
        container.add(bgColorEdit);
        bgColorEdit.setValue(Ext.clone(col.eConfig.bgColor));
    },

    displayGenericControls: function(component, target) {
        var styleEdit=Ext.widget("textareafield",{
            itemId:"styleEditor",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.styleText,
            labelWidth:60,
            anchor:"100%",
            grow:true,
            value:Ext.clone(component.eConfig.styles)

        });
        styleEdit.on("change", function(){
            component.eConfig.styles=styleEdit.getValue();
        });
        target.add(styleEdit);
    },

    displayBodyControls: function() {
        var container=Ext.getCmp("eTEditControl");
        var mainBody=Ext.getCmp("mainETHolder");
        if (Ext.isEmpty(mainBody.eConfig)){
            mainBody.eConfig={ };
        }
        var widthDisplayer=Ext.widget("displayfield",{
            labelWidth:60,
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.widthText,
            value:mainBody.getWidth()-4
        });
        container.add(widthDisplayer);
        var centerCheckbox=Ext.widget("checkbox",{
            labelWidth:60,
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.centeredText,
            inputValue:true,
            checked:Ext.clone(mainBody.eConfig.centered)
        });
        centerCheckbox.on("change",function(){
            mainBody.eConfig.centered=centerCheckbox.getValue();
        });
        container.add(centerCheckbox);
        var styleEdit=Ext.widget("textareafield",{
            itemId:"styleEditor",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.styleText,
            labelWidth:60,
            anchor:"100%",
            grow:true,
            value:Ext.clone(mainBody.eConfig.styles)

        });
        styleEdit.on("change", function(){
            mainBody.eConfig.styles=styleEdit.getValue();
        });
        container.add(styleEdit);
        var bgColorEdit=Ext.widget("AdvancedColorField",{
            noPickerDisplay:true,
            allowBlank:true,
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.bgColorText,
            labelWidth:60,
            anchor:"100%"
        });
        bgColorEdit.on("change", function(){
            if (bgColorEdit.isValid()){
                mainBody.eConfig.bgColor=bgColorEdit.getValue();
            }
        });
        container.add(bgColorEdit);
        bgColorEdit.setValue(Ext.clone(mainBody.eConfig.bgColor));
        var bodybgColorEdit=Ext.widget("AdvancedColorField",{
            noPickerDisplay:true,
            allowBlank:true,
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.bbgColorText,
            labelWidth:60,
            anchor:"100%"
        });
        bodybgColorEdit.on("change", function(){
            if (bodybgColorEdit.isValid()){
                mainBody.eConfig.bodyBgColor=bodybgColorEdit.getValue();
            }
        });
        container.add(bodybgColorEdit);
        bodybgColorEdit.setValue(Ext.clone(mainBody.eConfig.bodyBgColor));
    },

    resetETSelect: function(record) {
        Ext.getCmp("deleteEtBtn").enable();
        Ext.getCmp("ETSaverBG").enable();
        Ext.getCmp("ETppBG").enable();
        Ext.getCmp("mainETHolder").removeAll();
        Ext.getCmp("elementETIdField").setValue(null);
        Ext.getCmp("mainETHolder").setWidth(record.get("bodyProperties").bodyWidth+4);
        Ext.getCmp("mainEmailForm").getForm().setValues(record.getData());
        this.renderRows(record.get("rows"), Ext.getCmp("mainETHolder"));
        Ext.getCmp("mainETHolder").eConfig=Ext.clone(record.get("bodyProperties"));
        if (record.get("isMailModel")){
            Ext.getCmp("ETEploit").disable();
        } else {
            Ext.getCmp("ETEploit").enable();
        }
        if (Ext.getCmp("ETPreviewPanel").up().getLayout().getActiveItem()==Ext.getCmp("ETPreviewPanel")){
            Ext.getCmp("ETPreviewPanel").removeAll();
        Ext.getCmp("ETPreviewPanel").add(Ext.widget("component",{
                        autoEl: {
                            tag: 'iframe',
                            src: window.location.protocol+"//"+window.location.host+"/backoffice/emails/preview?id="+record.get("id")
                        }
                    }));
        }
    },

    resetETNoSelect: function() {
        Ext.getCmp("deleteEtBtn").disable();
        Ext.getCmp("ETSaverBG").disable();
        Ext.getCmp("ETppBG").disable();
        Ext.getCmp("ETEploit").disable();
        Ext.getCmp("mainETHolder").removeAll();
        Ext.getCmp("mainEmailForm").getForm().reset();
        Ext.getCmp("elementETIdField").setValue(null);
        Ext.getCmp("ETPreviewPanel").removeAll();
    },

    renderRows: function(rows, target) {
        var me=this;
        var newRows=[ ];
        Ext.Array.forEach(rows, function(row){
            var newRow=Ext.widget("panel",{
                eType:"row",
                plugins:[Ext.create("Ext.ux.BoxReorderer")],
                id:row.id,
                layout: {
                    type: 'hbox',
                    align: 'stretchmax'
                },
                eConfig:row.config,
                flex:undefined,
                minHeight:30

            });
            Ext.Array.forEach(row.cols, function(col){
                var newCol=Ext.widget("panel",{
                    eType:"col",
                    id:col.id,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    eConfig:col.config,
                    width:col.width,
                    flex:undefined,
                    minHeight:28
                });
                Ext.Array.forEach(col.components, function(component){
                    var newComponent=Ext.widget("panel",{
                        eType:component.type,
                        id:component.id,
                        layout: {
                            type: 'fit'
                        },
                        eConfig:component.config,
                        flex:undefined,
                        minHeight:26

                    });
                    newCol.add(newComponent);
                    me.syncEComponent(newComponent, true);

                });
                newRow.add(newCol);
            });
            newRows.push(newRow);
        });
        target.add(newRows);
        var task = new Ext.util.DelayedTask(function(){
            target.doLayout();
        });
        task.delay(300);
    },

    saveRows: function() {
        var rows=[ ];
        Ext.Array.forEach(Ext.getCmp("mainETHolder").items.items, function(row){
            var myCols=[ ];
            Ext.Array.forEach(row.items.items, function(col){
                var myComponents=[ ];
                Ext.Array.forEach(col.items.items, function(component){
                    myComponents.push({
                        type:component.eType,
                        id:component.getId(),
                        config:component.eConfig
                    });
                });
                var newCol={
                    width:col.width,
                    config:col.eConfig,
                    id:col.getId(),
                    components:myComponents
                };
                myCols.push(newCol);
            });
            var newRow={
                config:row.eConfig,
                id:row.getId(),
                cols:myCols
            };
            rows.push(newRow);
        });
        return(rows);
    },

    init: function(application) {
        this.control({
            "#newETRowBtn": {
                click: this.onNewETRowBtnClick
            },
            "#mainETContainer": {
                afterrender: this.onMainETContainerAfterRender
            },
            "#mainETHolder panel": {
                afterrender: this.onMainETHolderAfterRender
            },
            "#elementETIdField": {
                change: this.onElementETIdFieldChange
            },
            "#newETColBtn": {
                click: this.onNewETColBtnClick
            },
            "#moveUPETBtn": {
                click: this.onMoveUPETBtnClick
            },
            "#moveDownETBTn": {
                click: this.onMoveDownETBTnClick
            },
            "#ETAddImageBtn": {
                click: this.onETAddImageBtnClick
            },
            "#ETAddTextBtn": {
                click: this.onETAddTextBtnClick
            },
            "#deleteETElBtn": {
                click: this.onDeleteETElBtnClick
            },
            "#newETBtn": {
                click: this.onNewETBtnClick
            },
            "#deleteEtBtn": {
                click: this.onDeleteEtBtnClick
            },
            "#newETSubmitBtn": {
                click: this.onNewETSubmitBtnClick
            },
            "#mainETGrid": {
                selectionchange: this.onMainETGridSelectionChange
            },
            "#saveETBtn": {
                click: this.onSaveETBtnClick
            },
            "#ETPreviewPanel": {
                activate: this.onETPreviewPanelActivate
            },
            "#ETSendBtn": {
                click: this.onETSendBtnClick
            },
            "#sendEmailSubmitBtn": {
                click: this.onSendEmailSubmitBtnClick
            },
            "#ETAddSimpleTextBtn": {
                click: this.onETAddSimpleTextBtnClick
            }
        });
    }

});
