/*
 * File: app/view/contributionPages.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.contributionPages', {
    extend: 'Ext.window.Window',
    alias: 'widget.contributionPages',

    requires: [
        'Rubedo.view.WorkspaceCombo',
        'Rubedo.view.pagesECommerceFieldset',
        'Rubedo.view.DLSToolbar',
        'Ext.panel.Tool',
        'Ext.toolbar.Toolbar',
        'Ext.container.ButtonGroup',
        'Ext.toolbar.Fill',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.tree.plugin.TreeViewDragDrop',
        'Ext.form.field.ComboBox',
        'Ext.tree.Column',
        'Ext.grid.plugin.BufferedRenderer',
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.form.Panel',
        'Ext.form.field.Hidden',
        'Ext.toolbar.TextItem',
        'Ext.form.field.Checkbox',
        'Ext.form.FieldSet',
        'Ext.form.field.TextArea',
        'Ext.Img',
        'Ext.XTemplate',
        'Ext.slider.Single'
    ],

    favoriteIcon: 'application.png',
    ACL: 'read.ui.pages',
    localiserId: 'pageWindow',
    height: 578,
    id: 'contributionPages',
    width: 1200,
    constrainHeader: true,
    iconCls: 'masque-icon',
    title: 'Pages',

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            tools: [
                {
                    xtype: 'tool',
                    itemId: 'windowMinimize',
                    type: 'minimize'
                },
                {
                    xtype: 'tool',
                    itemId: 'windowMaximize',
                    type: 'maximize'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'top',
                    height: 30,
                    itemId: 'filArianne',
                    items: [
                        {
                            xtype: 'button',
                            localiserId: 'pagesLaunchBtn',
                            itemId: 'origine',
                            iconCls: 'masque-icon',
                            text: 'Pages'
                        },
                        {
                            xtype: 'toolbar',
                            border: 0,
                            id: 'pageTreeBreadcrumb'
                        }
                    ]
                },
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'top',
                    height: 86,
                    itemId: 'contextBar',
                    items: [
                        {
                            xtype: 'button',
                            ACL: 'write.ui.pages',
                            localiserId: 'addBtn',
                            disabled: true,
                            id: 'addPageBtn',
                            iconAlign: 'top',
                            iconCls: 'add_big',
                            scale: 'large',
                            text: 'Ajouter'
                        },
                        {
                            xtype: 'button',
                            ACL: 'write.ui.pages',
                            localiserId: 'duplicateBtn',
                            disabled: true,
                            id: 'addPageBtn1',
                            iconAlign: 'top',
                            iconCls: 'applications_big',
                            scale: 'large',
                            text: 'Copier',
                            listeners: {
                                click: {
                                    fn: me.onAddPageBtn1Click,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            ACL: 'write.ui.pages',
                            localiserId: 'removeBtn',
                            disabled: true,
                            id: 'removePageBtn',
                            iconAlign: 'top',
                            iconCls: 'remove_big',
                            scale: 'large',
                            text: 'Supprimer'
                        },
                        {
                            xtype: 'buttongroup',
                            ACL: 'write.ui.pages',
                            localiserId: 'editGroup',
                            disabled: true,
                            headerPosition: 'bottom',
                            title: 'Edition',
                            columns: 6,
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    localiserId: 'newBlocBtn',
                                    disabled: true,
                                    id: 'newPageBloc',
                                    iconAlign: 'top',
                                    iconCls: 'window_add_big',
                                    scale: 'large',
                                    text: 'Nouveau Bloc'
                                },
                                {
                                    xtype: 'button',
                                    localiserId: 'removeBtn',
                                    disabled: true,
                                    id: 'deletePageElement',
                                    iconAlign: 'top',
                                    iconCls: 'window_remove_big',
                                    scale: 'large',
                                    text: 'Supprimer'
                                },
                                {
                                    xtype: 'button',
                                    localiserId: 'moveBtn',
                                    disabled: true,
                                    id: 'pageElementUp',
                                    iconAlign: 'top',
                                    iconCls: 'arrow_up_big',
                                    scale: 'large',
                                    text: 'Déplacer'
                                },
                                {
                                    xtype: 'button',
                                    localiserId: 'moveBtn',
                                    disabled: true,
                                    id: 'pageElementDown',
                                    iconAlign: 'top',
                                    iconCls: 'arrow_down_big',
                                    scale: 'large',
                                    text: 'Déplacer'
                                }
                            ]
                        },
                        {
                            xtype: 'buttongroup',
                            localiserId: 'clipboardGroup',
                            disabled: true,
                            headerPosition: 'bottom',
                            title: 'Presse-papiers',
                            columns: 4,
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    hidden: true,
                                    iconAlign: 'top',
                                    iconCls: 'shopping_cart_add_big',
                                    scale: 'large',
                                    text: 'Ajouter au panier'
                                },
                                {
                                    xtype: 'button',
                                    localiserId: 'shortcutBtn',
                                    itemId: 'boutonCreerRaccourci',
                                    iconAlign: 'top',
                                    iconCls: 'favorite_add_big',
                                    scale: 'large',
                                    text: 'Ajouter aux favoris'
                                }
                            ]
                        },
                        {
                            xtype: 'buttongroup',
                            ACL: 'write.ui.pages',
                            localiserId: 'saveGroup',
                            disabled: true,
                            headerPosition: 'bottom',
                            title: 'Sauvegarde',
                            columns: 4,
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    localiserId: 'saveBtn',
                                    id: 'pageSaveBtn',
                                    iconAlign: 'top',
                                    iconCls: 'floppy_disc_big',
                                    scale: 'large',
                                    text: 'Enregistrer',
                                    listeners: {
                                        afterrender: {
                                            fn: me.onPageSaveBtnAfterRender,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            RApplication: 'pages',
                            itemId: 'RHelpBtn',
                            iconCls: 'info_big',
                            scale: 'large',
                            text: ''
                        }
                    ]
                },
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'bottom',
                    height: 50,
                    itemId: 'barreMeta',
                    items: [
                        {
                            xtype: 'image',
                            height: 45,
                            width: 48,
                            listeners: {
                                render: {
                                    fn: me.onImageRender1,
                                    scope: me
                                }
                            }
                        },
                        me.processBoiteBarreMeta({
                            xtype: 'container',
                            flex: 2,
                            itemId: 'boiteBarreMeta',
                            margin: '0 0 0 10',
                            tpl: [
                                '<b>{text}</b> </br> <b>Création : </b> {creation} <b>Dernière modification : </b> {derniereModification} <b>Auteur : </b> {createUser}  <b>Version : </b>{version}'
                            ]
                        }),
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'slider',
                            localiserId: 'zoomLevelSlider',
                            id: 'MaskZoomControlSlider1',
                            width: 400,
                            fieldLabel: 'Niveau de zoom',
                            value: 1007,
                            maxValue: 6000,
                            minValue: 200,
                            useTips: false,
                            listeners: {
                                change: {
                                    fn: me.onMaskZoomControlSliderChange1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            hidden: true,
                            id: 'pageMaskDisplayBtn',
                            margin: '0 0 5 0',
                            text: 'Masque associé : '
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'treepanel',
                    id: 'mainPageTree',
                    width: 225,
                    resizable: true,
                    resizeHandles: 'e',
                    title: '',
                    forceFit: false,
                    store: 'PagesDataStore',
                    useArrows: true,
                    viewConfig: {
                        plugins: [
                            Ext.create('Ext.tree.plugin.TreeViewDragDrop', {
                                dragText: '{0} page{1} séléctionnée{1}'
                            })
                        ],
                        listeners: {
                            beforedrop: {
                                fn: me.onTreedragdroppluginBeforeDrop,
                                scope: me
                            },
                            drop: {
                                fn: me.onTreedragdroppluginDrop,
                                scope: me
                            }
                        }
                    },
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'combobox',
                                    managesStore: true,
                                    localiserId: 'siteField',
                                    flex: 1,
                                    id: 'pagesSitesCombo',
                                    fieldLabel: 'Site ',
                                    labelWidth: 40,
                                    editable: false,
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'SitesComboPages',
                                    valueField: 'id'
                                }
                            ]
                        }
                    ],
                    columns: [
                        {
                            xtype: 'treecolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (record.isRoot()){
                                    return("<i style=\"color:#777;\">"+Rubedo.RubedoAutomatedElementsLoc.rootText+"</i>");
                                }
                                else if (record.get("readOnly")) {
                                    record.data.allowDrop=false;
                                    record.data.allowDrag=false;
                                    return("<i style=\"color:#777;\">"+value+"</i>");

                                } else {
                                    return(value);
                                }
                            },
                            localiserId: 'nameColumn',
                            sortable: false,
                            dataIndex: 'text',
                            menuDisabled: true,
                            text: 'Nom',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if(record.isRoot()){return("");}
                                try{var myFlagCode=Ext.getStore("AllLanguagesStore3").query("locale",record.get("locale"),false,false,true).items[0].get("flagCode");}
                                catch(err){var myFlagCode="_unknown";}
                                var returner =" <img src=\"/assets/flags/16/"+myFlagCode+".png\"> ";
                                if(!Ext.isEmpty(value)){
                                    Ext.Object.each(value, function(key, value, myself) {
                                        if (key!=record.get("locale")){
                                            try{var myFlagCode2=Ext.getStore("AllLanguagesStore3").query("locale",key,false,false,true).items[0].get("flagCode");}
                                            catch(err){var myFlagCode2="_unknown";}
                                            if (myFlagCode2!="_unknown"){
                                                returner=returner+" <img src=\"/assets/flags/16/"+myFlagCode2+".png\"> ";
                                            }
                                        }
                                    });
                                }
                                return(returner);
                            },
                            localiserId: 'languageCoumn',
                            sortable: false,
                            dataIndex: 'i18n',
                            menuDisabled: true,
                            text: 'Languages',
                            flex: 0.5,
                            listeners: {
                                afterrender: {
                                    fn: me.onGridcolumnAfterRender,
                                    scope: me
                                }
                            }
                        }
                    ],
                    plugins: [
                        Ext.create('Ext.grid.plugin.BufferedRenderer', {

                        })
                    ]
                },
                {
                    xtype: 'tabpanel',
                    flex: 1,
                    id: 'pagesCenterTabBox',
                    activeTab: 0,
                    items: [
                        {
                            xtype: 'panel',
                            title: 'Edition',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            tabConfig: {
                                xtype: 'tab',
                                localiserId: 'editTab'
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    flex: 1,
                                    autoScroll: true,
                                    layout: {
                                        type: 'vbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'panel',
                                            height: 600,
                                            id: 'mainPageEdition',
                                            title: '',
                                            layout: {
                                                type: 'vbox',
                                                align: 'stretch'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    localiserId: 'propsPanel',
                                    width: 300,
                                    resizable: true,
                                    resizeHandles: 'w',
                                    bodyPadding: 5,
                                    collapseDirection: 'right',
                                    collapsible: true,
                                    title: 'Propriétés',
                                    layout: {
                                        type: 'vbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'form',
                                            localiserId: 'selectElementPanel',
                                            flex: 1,
                                            id: 'pageElementPropsPanel',
                                            autoScroll: true,
                                            title: 'Sélectionnez un élément'
                                        },
                                        {
                                            xtype: 'hiddenfield',
                                            id: 'pageElementIdField',
                                            fieldLabel: 'Label'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            id: 'pagesInternalPreview',
                            layout: 'fit',
                            title: 'Aperçu',
                            tabConfig: {
                                xtype: 'tab',
                                localiserId: 'overviewTab'
                            },
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    height: 24,
                                    items: [
                                        {
                                            xtype: 'tbtext',
                                            id: 'pagePreviewTextItem',
                                            text: ''
                                        },
                                        {
                                            xtype: 'tbfill'
                                        },
                                        {
                                            xtype: 'button',
                                            localiserId: 'refreshBtn',
                                            id: 'pagePreviewRefreshBtn',
                                            iconCls: 'refresh',
                                            text: 'Actualiser'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            id: 'PagesPropFormsHolder',
                            layout: 'card',
                            title: 'Propriétés',
                            tabConfig: {
                                xtype: 'tab',
                                localiserId: 'propsTab'
                            },
                            items: [
                                {
                                    xtype: 'form',
                                    id: 'mainPageAttributeForm',
                                    itemId: 'mainLocItem',
                                    autoScroll: true,
                                    bodyPadding: 10,
                                    header: false,
                                    title: 'Propriétés',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            localiserId: 'nameField',
                                            anchor: '100%',
                                            fieldLabel: 'Nom *',
                                            name: 'text',
                                            allowBlank: false
                                        },
                                        {
                                            xtype: 'textfield',
                                            localiserId: 'urlField',
                                            anchor: '100%',
                                            fieldLabel: 'URL ',
                                            name: 'pageURL'
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            localiserId: 'excludeFromMenuField',
                                            anchor: '100%',
                                            fieldLabel: 'Hors navigation',
                                            name: 'excludeFromMenu',
                                            boxLabel: '',
                                            inputValue: 'true'
                                        },
                                        {
                                            xtype: 'WorkspaceCombo',
                                            store: 'ContributeWorkspacesCombo',
                                            anchor: '100%'
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            localiserId: 'inheritWorkspaceField',
                                            anchor: '100%',
                                            fieldLabel: 'Hérite de l\'espace de travail',
                                            name: 'inheritWorkspace',
                                            boxLabel: '',
                                            inputValue: 'true',
                                            listeners: {
                                                change: {
                                                    fn: me.onCheckboxfieldChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'fieldset',
                                            localiserId: 'referencingFieldSEt',
                                            collapsed: true,
                                            collapsible: true,
                                            title: 'Référencement',
                                            items: [
                                                {
                                                    xtype: 'textfield',
                                                    localiserId: 'titleField',
                                                    anchor: '100%',
                                                    fieldLabel: 'Titre *',
                                                    name: 'title'
                                                },
                                                {
                                                    xtype: 'textareafield',
                                                    localiserId: 'descriptionField',
                                                    anchor: '100%',
                                                    fieldLabel: 'Description ',
                                                    name: 'description',
                                                    maxLength: 250
                                                },
                                                me.processRobot({
                                                    xtype: 'fieldset',
                                                    localiserId: 'robotFieldset',
                                                    collapsed: true,
                                                    collapsible: true,
                                                    title: 'Robot'
                                                })
                                            ],
                                            listeners: {
                                                render: {
                                                    fn: me.onMainPageAttributeFormRender,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'fieldset',
                                            collapsed: true,
                                            collapsible: true,
                                            title: 'Rich text',
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onFieldsetAfterRender,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'pagesECommerceFieldset',
                                            id: 'primaryPageECFS'
                                        }
                                    ]
                                }
                            ],
                            dockedItems: [
                                {
                                    xtype: 'DLSToolbar',
                                    replicatorEntity: 'pagesLocProps',
                                    id: 'pagesDLSToolbar',
                                    dock: 'top'
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            id: 'pagesTaxoForm',
                            autoScroll: true,
                            bodyPadding: 10,
                            title: 'Taxonomy',
                            tabConfig: {
                                xtype: 'tab',
                                localiserId: 'taxonomyTab'
                            },
                            listeners: {
                                added: {
                                    fn: me.onFormAdded,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'form',
                            ACL: 'exe.ui.personalization',
                            id: 'pagesPersoForm',
                            bodyPadding: 10,
                            title: 'Personalization',
                            tabConfig: {
                                xtype: 'tab',
                                listeners: {
                                    beforerender: {
                                        fn: me.onTabBeforeRender,
                                        scope: me
                                    }
                                }
                            },
                            items: [
                                me.processPhilters({
                                    xtype: 'fieldset',
                                    collapsible: true,
                                    title: 'Philters'
                                }),
                                {
                                    xtype: 'fieldset',
                                    collapsible: true,
                                    title: 'Events',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'Page view',
                                            name: 'clickStreamEvent'
                                        }
                                    ]
                                }
                            ],
                            listeners: {
                                beforerender: {
                                    fn: me.onPagesPersoFormBeforeRender,
                                    scope: me
                                }
                            }
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onPagesCenterTabBoxAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    processRobot: function(config) {
        config.items=[
        {
            xtype: 'checkboxfield',
            anchor: '100%',
            fieldLabel: 'noindex',
            name: 'noIndex',
            boxLabel: '',
            inputValue: 'true',
            uncheckedValue: 'false'
        },
        {
            xtype: 'checkboxfield',
            anchor: '100%',
            fieldLabel: 'nofollow',
            name: 'noFollow',
            boxLabel: '',
            inputValue: 'true',
            uncheckedValue: 'false'
        }
        ];
        return config;
    },

    processPhilters: function(config) {
        config.items=[
        {
            xtype: 'ACEField',
            anchor: '100%',
            fieldLabel: 'Philters',
            name: 'UXInstructions',
            textMode:true
        }
        ];
        return config;
    },

    processBoiteBarreMeta: function(config) {
        config.tpl=[
                                        '<b>{text}</b> </br> <b>'+Rubedo.RubedoAutomatedElementsLoc.creationText+' : </b> {creation} <b>'+Rubedo.RubedoAutomatedElementsLoc.lastUpdateText+' : </b> {derniereModification} <b>'+Rubedo.RubedoAutomatedElementsLoc.authorText+' : </b> {createUser}  <b>'+Rubedo.RubedoAutomatedElementsLoc.versionText+' : </b>{version}'
                                    ];
        return config;
    },

    onAddPageBtn1Click: function(button, e, eOpts) {
        var currentPage=Ext.getCmp("mainPageTree").getSelectionModel().getLastSelected();
        var target=currentPage.parentNode;
        var newPage=Ext.clone(currentPage.raw);
        delete(newPage.id);
        delete(newPage.version);
        delete(newPage.createUser);
        delete(newPage.createTime);
        delete(newPage.lastUpdateUser);
        delete(newPage.lastUpdateTime);
        delete(newPage.orderValue);
        newPage.pageURL=newPage.pageURL+"-copy";
        newPage.text=newPage.text+"-copy";
        newPage.title=newPage.title+"-copy";
        Ext.Object.each(newPage.i18n,function(key,value){
            value.pageURL=value.pageURL+"-copy";
            value.text=value.text+"-copy";
            value.title=value.title+"-copy";
        });
        Ext.Array.forEach(newPage.blocks,function(block){
            delete(block.id);
        });
        newPage.expandable=false;
        newPage.orderValue=target.lastChild.get("orderValue")+100;
        target.appendChild(newPage);
    },

    onPageSaveBtnAfterRender: function(component, eOpts) {
        component.findParentByType("window").getEl().addKeyListener({key:"s", ctrl:true}, function(e,t){
        if (!component.disabled){
            component.fireEvent("click", component);
            t.stopEvent();
        }
        });
    },

    onTreedragdroppluginBeforeDrop: function(node, data, overModel, dropPosition, dropHandlers) {

        if (!ACL.interfaceRights["write.ui.pages"]){
            return(false);
        }
        Ext.getStore("PagesDataStore").suspendAutoSync();
        var movedOne=data.records[0];
        var interm=0;
        var targeted=overModel.get("orderValue");

        if (dropPosition=="before"){
            if ((movedOne.parentNode!=overModel.parentNode)&&(movedOne.parentNode.childNodes.length==1)){
                movedOne.parentNode.set("expandable", false);
            }
            if (!Ext.isEmpty(overModel.previousSibling)){interm=overModel.previousSibling.get("orderValue");}
            movedOne.set("orderValue", (interm+targeted)/2);
        } else if (dropPosition=="after"){
            if ((movedOne.parentNode!=overModel.parentNode)&&(movedOne.parentNode.childNodes.length==1)){
                movedOne.parentNode.set("expandable", false);
            }
            if (!Ext.isEmpty(overModel.nextSibling)){interm=overModel.nextSibling.get("orderValue");}
            else{interm=10000;}
            movedOne.set("orderValue", (interm+targeted)/2);
        } else if (dropPosition=="append"){
            if (movedOne.parentNode.childNodes.length==1){
                movedOne.parentNode.set("expandable", false);
            }

            if (overModel.hasChildNodes()){
                movedOne.set("orderValue", overModel.lastChild.get("orderValue")+100);
            } else {
                movedOne.set("orderValue", 100);
                overModel.set("expandable", true);
            }
        }
    },

    onTreedragdroppluginDrop: function(node, data, overModel, dropPosition) {
        var task= new Ext.util.DelayedTask(function(){
            Ext.getStore("PagesDataStore").resumeAutoSync();
            Ext.getStore("PagesDataStore").sync();
        });
        task.delay(200);
    },

    onGridcolumnAfterRender: function(component, eOpts) {
        if (Ext.getStore("AllLanguagesStore3").getRange().length==1){
            component.hide();
        }
    },

    onCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        if (newValue) {
            var task = new Ext.util.DelayedTask(function(){
                field.previousSibling().setReadOnly(true);
            });
            task.delay(100);

        } else {
            field.previousSibling().setReadOnly(false);
        }
    },

    onMainPageAttributeFormRender: function(component, eOpts) {
        var tagPicker = Ext.create("Ext.ux.form.field.BoxSelect", {
            store:[],
            anchor:"100%",
            name:"keywords",
            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.keywordsText,
            localiserId:"keywordsField",
            multiSelect:true,
            forceSelection:false,
            createNewOnEnter:true,
            hideTrigger:true,
            triggerOnClick:false,
            createNewOnBlur:true,
            pinList:false
        });
        component.insert(2,tagPicker);
    },

    onFieldsetAfterRender: function(component, eOpts) {
        component.add(Ext.create("Rubedo.view.DCEField",{
                                        "fieldLabel": "Rich text",
                                        "name": "richTextId",
                                        "allowedCT": "richText",
                                        "addOnly": true
                                }));
    },

    onPagesCenterTabBoxAfterRender: function(component, eOpts) {
        component.setActiveTab(2);
        component.setActiveTab(3);
        component.setActiveTab(0);
    },

    onFormAdded: function(component, container, pos, eOpts) {
        Ext.Ajax.request({
            url: 'taxonomy',
            params: {
            },
            success: function(response){
                var data=Ext.JSON.decode(response.responseText);
                Ext.Array.forEach(data.data,function(leVocab){
                    if(leVocab.id!="navigation"){
                        leVocab.multiSelect=true;
                        leVocab.mandatory=false;
                        if (leVocab.inputAsTree){
                            var storeT = Ext.create("Ext.data.TreeStore", {
                                model:"Rubedo.model.taxonomyTermModel",
                                remoteFilter:"true",
                                proxy: {
                                    type: 'ajax',
                                    api: {
                                        read: 'taxonomy-terms/tree'
                                    },
                                    reader: {
                                        type: 'json',
                                        messageProperty: 'message'
                                    },
                                    encodeFilters: function(filters) {
                                        var min = [],
                                            length = filters.length,
                                            i = 0;

                                        for (; i < length; i++) {
                                            min[i] = {
                                                property: filters[i].property,
                                                value   : filters[i].value
                                            };
                                            if (filters[i].type) {
                                                min[i].type = filters[i].type;
                                            }
                                            if (filters[i].operator) {
                                                min[i].operator = filters[i].operator;
                                            }
                                        }
                                        return this.applyEncoding(min);
                                    }
                                },
                                filters: {
                                    property: 'vocabularyId',
                                    value: leVocab.id
                                }

                            });
                            var toUse="Ext.ux.TreePicker";
                            if(leVocab.multiSelect){toUse="Ext.ux.TreeMultiPicker";}
                            if(leVocab.id=='navigation'){storeT.getProxy().api={read:"taxonomy-terms/navigation-tree"};}
                            storeT.load();
                            var selecteur = Ext.create(toUse, {
                                name:leVocab.id,
                                fieldLabel: leVocab.name,
                                store: storeT,
                                anchor:"90%",
                                ignoreIsNotPage:true,
                                displayField:"text",
                                allowBlank: !leVocab.mandatory,
                                plugins:[Ext.create("Ext.ux.form.field.ClearButton")]
                            });


                        } else {
                            var storeT = Ext.create('Ext.data.JsonStore', {
                                model:"Rubedo.model.taxonomyTermModel",
                                remoteFilter:"true",
                                proxy: {
                                    type: 'ajax',
                                    api: {
                                        read: 'taxonomy-terms'
                                    },
                                    reader: {
                                        type: 'json',
                                        messageProperty: 'message',
                                        root: 'data'
                                    },
                                    encodeFilters: function(filters) {
                                        var min = [],
                                            length = filters.length,
                                            i = 0;

                                        for (; i < length; i++) {
                                            min[i] = {
                                                property: filters[i].property,
                                                value   : filters[i].value
                                            };
                                            if (filters[i].type) {
                                                min[i].type = filters[i].type;
                                            }
                                            if (filters[i].operator) {
                                                min[i].operator = filters[i].operator;
                                            }
                                        }
                                        return this.applyEncoding(min);
                                    }
                                },
                                filters: {
                                    property: 'vocabularyId',
                                    value: leVocab.id
                                }

                            });
                            storeT.on("beforeload", function(s,o){
                                o.filters=Ext.Array.slice(o.filters,0,1);
                                if (o.params&&!Ext.isEmpty(o.params.comboQuery)){

                                    var newFilter=Ext.create('Ext.util.Filter', {
                                        property:"text",
                                        value:o.params.comboQuery,
                                        operator:'like'
                                    });

                                    o.filters.push(newFilter);

                                }


                            });
                            var selecteur = Ext.widget('comboboxselect', {
                                name:leVocab.id,
                                anchor:"90%",
                                fieldLabel: leVocab.name,
                                autoScroll: false,
                                store: storeT,
                                queryMode: 'remote',
                                queryParam: 'comboQuery',
                                minChars:3,
                                grow:false,
                                displayField: 'text',
                                valueField: 'id',
                                filterPickList: true,
                                typeAhead: true,
                                forceSelection: !leVocab.expandable,
                                createNewOnEnter: leVocab.expandable,
                                multiSelect: leVocab.multiSelect,
                                allowBlank: !leVocab.mandatory
                            });

                        }
                        var enrobage =Ext.widget('ChampTC');
                        enrobage.add(selecteur);
                        enrobage.getComponent('helpBouton').setTooltip(leVocab.helpText);
                        if (Ext.isEmpty(leVocab.helpText)){enrobage.getComponent('helpBouton').hide();}
                        component.add(enrobage);
                        storeT.load();
                    }
                });
            }
        });
    },

    onTabBeforeRender: function(component, eOpts) {
        if(!ACL.interfaceRights["exe.ui.personalization"]){
            component.hide();
        }
    },

    onPagesPersoFormBeforeRender: function(component, eOpts) {
        if(!ACL.interfaceRights["exe.ui.personalization"]){
            component.hide();
        }
    },

    onImageRender1: function(component, eOpts) {
        component.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/application.png');
    },

    onMaskZoomControlSliderChange1: function(slider, newValue, thumb, eOpts) {
        Ext.getCmp("mainPageEdition").setHeight(newValue);
    }

});