/*
 * File: app/view/DLSToolbar.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.DLSToolbar', {
    extend: 'Ext.toolbar.Toolbar',
    alias: 'widget.DLSToolbar',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                me.processLocSelectorCombo({
                    xtype: 'combobox',
                    itemId: 'LocSelectorCombo',
                    fieldLabel: 'Current language',
                    editable: false,
                    displayField: 'label',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'locale',
                    listeners: {
                        change: {
                            fn: me.onLocSelectorComboChange,
                            scope: me
                        }
                    }
                }),
                {
                    xtype: 'button',
                    handler: function(button, event) {
                        var me=button.up();
                        var restricted=Ext.Array.pluck(Ext.getStore("AllLanguagesStore3").getRange(),"data");
                        Ext.getStore("TranslationAdderStore").removeAll();
                        var alreadyHere=Ext.Array.pluck(Ext.Array.pluck(me.getComponent(0).getStore().getRange(),"data"),"locale");
                        Ext.Array.forEach(restricted,function(candidate){
                            if(!Ext.Array.contains(alreadyHere,candidate.locale)){
                                Ext.getStore("TranslationAdderStore").add(candidate);
                            }
                        });
                        Ext.widget("TranslationAdderWindow").show();
                        Ext.getCmp("TranslationAdderWindowSubmitBtn").on("click",function(){
                            var form=Ext.getCmp("TranslationAdderWindow").getComponent(0).getForm();
                            if (form.isValid()){
                                me.addTranslation(form.getValues().language);
                                Ext.getCmp("TranslationAdderWindow").close();
                            }

                        });
                    },
                    itemId: 'LocAddBtn',
                    iconCls: 'add',
                    text: 'Add translation'
                },
                {
                    xtype: 'button',
                    handler: function(button, event) {
                        var comboValue=button.up().getComponent("LocSelectorCombo").getValue();
                        button.up().getComponent("LocSelectorCombo").setValue(button.up().mainLocale);
                        button.up().getComponent("LocSelectorCombo").getStore().remove(button.up().getComponent("LocSelectorCombo").getStore().query("locale",comboValue).items[0]);
                        button.up().up().remove(button.up().up().getComponent(comboValue));
                    },
                    disabled: true,
                    itemId: 'LocRemoveBtn',
                    iconCls: 'close',
                    text: 'Remove translation'
                }
            ]
        });

        me.callParent(arguments);
    },

    processLocSelectorCombo: function(config) {
        config.store=Ext.create('Ext.data.Store', {
            fields:[{name:"locale"},{name:"label"}]
        });
        return config;
    },

    onLocSelectorComboChange: function(field, newValue, oldValue, eOpts) {
        var me=field.up();
        me.getComponent("LocRemoveBtn").disable();
        if (!Ext.isEmpty(newValue)){
            if(newValue==me.mainLocale){
                me.up().getLayout().setActiveItem(me.up().getComponent("mainLocItem"));
            } else {
                me.up().getLayout().setActiveItem(me.up().getComponent(newValue));
                me.getComponent("LocRemoveBtn").enable();
            }
        }
    },

    recievei18n: function(i18n, locale) {
        var me=this;
        me.mainLocale=locale;
        me.up().getLayout().setActiveItem(me.up().getComponent("mainLocItem"));
        me.getComponent(0).getStore().removeAll();
        Ext.Array.forEach(me.up().items.items, function(item){
            if(item.itemId!="mainLocItem"){
                me.up().remove(item);
            }
        });
        Ext.Object.each(i18n, function(key, value, myself) {
            me.getComponent(0).getStore().add({"locale":key,"label":Ext.getStore("AllLanguagesStore3").query("locale",key,false,false,true).items[0].get("label")});
            if(key!=locale){
                var toAdd=Ext.widget(me.replicatorEntity,{itemId:key});
                me.up().add(toAdd);
                toAdd.getForm().setValues(value);
            }
        });
        me.getComponent("LocSelectorCombo").setValue(locale);
    },

    persisti18n: function(record) {
        var me=this;
        var newOne={ };
        var items=me.up().items.items;
        Ext.Array.forEach(items,function(item){
            if(item.itemId=="mainLocItem"){
                newOne[me.mainLocale]=item.getForm().getValues();
            } else {
                newOne[item.itemId]=item.getForm().getValues();
            }
        });
        record.set("i18n",newOne);
    },

    addTranslation: function(locale) {
        var me=this;
        me.getComponent(0).getStore().add({"locale":locale,"label":Ext.getStore("AllLanguagesStore3").query("locale",locale,false,false,true).items[0].get("label")});
        var toAdd=Ext.widget(me.replicatorEntity,{itemId:locale});
        me.up().add(toAdd);
        toAdd.getForm().setValues(me.up().getComponent("mainLocItem").getForm().getValues());
        me.getComponent(0).setValue("fr");
    }

});