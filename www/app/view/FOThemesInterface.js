/*
 * File: app/view/FOThemesInterface.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.FOThemesInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.FOThemesInterface',

    requires: [
        'Rubedo.view.MyTool16',
        'Rubedo.view.MyTool17',
        'Ext.panel.Tool',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.container.ButtonGroup',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.tree.plugin.TreeViewDragDrop',
        'Ext.tree.Column',
        'Ext.form.field.Text',
        'Ext.grid.plugin.CellEditing',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Date',
        'Ext.selection.RowModel'
    ],

    localiserId: 'foThemesInterface',
    height: 533,
    id: 'FOThemesInterface',
    width: 852,
    constrainHeader: true,
    iconCls: 'media-icon',
    title: 'Themes',

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            tools: [
                {
                    xtype: 'mytool16'
                },
                {
                    xtype: 'mytool17'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            localiserId: 'importThemeBtn',
                            id: 'foThemeImportBtn',
                            iconAlign: 'top',
                            iconCls: 'database_up_big',
                            scale: 'large',
                            text: 'Import theme'
                        },
                        {
                            xtype: 'buttongroup',
                            localiserId: 'manageFodersBtnGroup',
                            disabled: true,
                            id: 'themeFolderBtnGroup',
                            headerPosition: 'bottom',
                            title: 'Manage folders',
                            columns: 2,
                            items: [
                                {
                                    xtype: 'button',
                                    localiserId: 'addChildBtn',
                                    id: 'themeFolderAddChildBtn',
                                    iconAlign: 'top',
                                    iconCls: 'folder_add_big',
                                    scale: 'large',
                                    text: 'Add child'
                                },
                                {
                                    xtype: 'button',
                                    localiserId: 'removeChildBtn',
                                    id: 'themeFolderRemoveBtn',
                                    iconAlign: 'top',
                                    iconCls: 'folder_remove_big',
                                    scale: 'large',
                                    text: 'Remove',
                                    listeners: {
                                        click: {
                                            fn: me.onThemeFolderRemoveBtnClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'buttongroup',
                            localiserId: 'manageFilesBtnGroup',
                            disabled: true,
                            id: 'themeFileBtnGroup',
                            headerPosition: 'bottom',
                            title: 'Manage files',
                            columns: 3,
                            items: [
                                {
                                    xtype: 'button',
                                    localiserId: 'downloadFileBtn',
                                    id: 'themeFileDownloadBtn',
                                    iconAlign: 'top',
                                    iconCls: 'database_down_big',
                                    scale: 'large',
                                    text: 'Download'
                                },
                                {
                                    xtype: 'button',
                                    localiserId: 'replaceFileBtn',
                                    id: 'themeFileUploadBtn',
                                    iconAlign: 'top',
                                    iconCls: 'database_up_big',
                                    scale: 'large',
                                    text: 'Replace'
                                },
                                {
                                    xtype: 'button',
                                    localiserId: 'deleteFileBtn',
                                    id: 'themeFileDeleteBtn',
                                    iconAlign: 'top',
                                    iconCls: 'remove_big',
                                    scale: 'large',
                                    text: 'Delete'
                                }
                            ]
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'treepanel',
                    height: 250,
                    id: 'mainDirectoriesTree1',
                    width: 200,
                    title: '',
                    store: 'ThemeDirectoriesStore',
                    useArrows: true,
                    viewConfig: {
                        plugins: [
                            Ext.create('Ext.tree.plugin.TreeViewDragDrop', {
                                ddGroup: 'DirectoriesThemeDD'
                            })
                        ],
                        listeners: {
                            beforedrop: {
                                fn: me.onTreeViewDragDropBeforeDrop1,
                                scope: me
                            },
                            drop: {
                                fn: me.onTreeViewDragDropDrop1,
                                scope: me
                            }
                        }
                    },
                    columns: [
                        {
                            xtype: 'treecolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (record.isRoot()){
                                    return("<i style=\"color:#777;\">"+Rubedo.RubedoAutomatedElementsLoc.rootText+"</i>");
                                    record.data.allowDrop=false;
                                    record.data.allowDrag=false;
                                } else if (record.get("id")=="notFiled") {
                                    record.data.allowDrag=false;
                                    return(Rubedo.RubedoAutomatedElementsLoc.notFiledText);

                                } else if (record.get("text")=="theme") {
                                    record.data.allowDrop=false;
                                    record.data.allowDrag=false;
                                    return("<i style=\"color:#777;\">"+value+"</i>");

                                } else if (record.parentNode.get("text")=="theme"){
                                    record.data.allowDrag=false;
                                    return("<i style=\"color:#777;\">"+value+"</i>");

                                }
                                else if (record.get("readOnly")) {
                                    record.data.allowDrop=false;
                                    record.data.allowDrag=false;
                                    return("<i style=\"color:#777;\">"+value+"</i>");

                                } else {
                                    return(value);
                                }
                            },
                            localiserId: 'damFolderCol',
                            dataIndex: 'text',
                            text: 'Folder',
                            flex: 1,
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        }
                    ],
                    plugins: [
                        Ext.create('Ext.grid.plugin.CellEditing', {
                            listeners: {
                                beforeedit: {
                                    fn: me.onCellEditingBeforeEdit1,
                                    scope: me
                                },
                                edit: {
                                    fn: me.onCellEditingEdit1,
                                    scope: me
                                }
                            }
                        })
                    ],
                    listeners: {
                        selectionchange: {
                            fn: me.onMainDirectoriesTree1SelectionChange,
                            scope: me
                        }
                    }
                },
                me.processThemeFileManagerGrid({
                    xtype: 'gridpanel',
                    flex: 1,
                    localiserId: 'themeFilesGrid',
                    id: 'themeFileManagerGrid',
                    title: 'Files',
                    store: 'DAMFolderViewStore1',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            localiserId: 'titleCol',
                            dataIndex: 'text',
                            text: 'Title',
                            flex: 2,
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false,
                                allowOnlyWhitespace: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return(Ext.util.Format.fileSize(value));
                            },
                            localiserId: 'fileSizeCol',
                            dataIndex: 'fileSize',
                            text: 'File size',
                            flex: 1
                        },
                        {
                            xtype: 'datecolumn',
                            localiserId: 'lastUpdateCol',
                            dataIndex: 'lastUpdateTime',
                            text: 'Last update',
                            flex: 1
                        }
                    ],
                    plugins: [
                        Ext.create('Ext.grid.plugin.CellEditing', {

                        })
                    ],
                    selModel: Ext.create('Ext.selection.RowModel', {
                        mode: 'MULTI'
                    })
                })
            ],
            listeners: {
                beforeclose: {
                    fn: me.onFOThemesInterfaceBeforeClose,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    processThemeFileManagerGrid: function(config) {
        config.columns.push(Ext.create("Ext.ux.CheckColumn",{
            text: 'Load on launch',
            dataIndex: 'loadOnLaunch',
            width:110
        }));
        return config;
    },

    onThemeFolderRemoveBtnClick: function(button, e, eOpts) {
        var me=this;
        var target=Ext.getCmp("mainDirectoriesTree1").getSelectionModel().getLastSelected();

        var delCon = Ext.widget('delConfirmZ');
        Ext.getCmp("delConMessageHolder").show();
        if (target.parentNode.get("text")=="theme"){
            Ext.getCmp("delConMessageHolder").update("Are you sure you want to delete this theme ?")
        } else {
            Ext.getCmp("delConMessageHolder").update("Are you sure you want to delete this folder and all of its contents ?")
        }
        delCon.show();
        var store=Ext.getCmp("mainDirectoriesTree1").getStore();
        Ext.getCmp('delConfirmZOui').on('click', function() {
            store.suspendAutoSync();
            var myParent=target.parentNode;
            if ((myParent.childNodes.length==1)&&(!myParent.isRoot())){
                myParent.set("expandable",false);
            }
            target.remove();
            store.resumeAutoSync();
            store.sync();
            Ext.getCmp('delConfirmZ').close();
            var task = new Ext.util.DelayedTask(function(){
                if (Ext.getStore("SiteThemesStore").isUsed){
                    Ext.getStore("SiteThemesStore").load();
                }
            });
            task.delay(400);

        });
    },

    onTreeViewDragDropBeforeDrop1: function(node, data, overModel, dropPosition, dropHandlers) {

        if (!ACL.interfaceRights["write.ui.directories"]){
            return(false);
        }
        Ext.getStore("ThemeDirectoriesStore").suspendAutoSync();
        var movedOne=data.records[0];
        if (dropPosition!="append"&&overModel.get("text")=="theme"){return(false);}
        if (!Ext.isEmpty(movedOne.get("typeId"))){
            if (dropPosition!="append"){return(false);}
            if (overModel.isRoot()){return(false);}

            var idArray=Ext.Array.pluck(Ext.Array.pluck(data.records,"data"),"id");
        	Ext.Ajax.request({
                url: 'directories/classify',
                params: {
                    mediaArray: Ext.JSON.encode(idArray),
                    directoryId:overModel.get("id")
                },
                success: function(response){
                    //Ext.getStore("DAMFolderViewStore").load();
                },
                failure:function(response){
            		var msg=Ext.JSON.decode(response.responseText).msg;
                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, msg);
                }
            });



            return(false);
        } else if ((dropPosition=="append")&&(overModel.get("id")=="notFiled")){
            return(false);
        }
        var interm=0;
        var targeted=overModel.get("orderValue");

        if (dropPosition=="before"){
            if ((movedOne.parentNode!=overModel.parentNode)&&(movedOne.parentNode.childNodes.length==1)){
                movedOne.parentNode.set("expandable", false);
            }
            if (!Ext.isEmpty(overModel.previousSibling)){interm=overModel.previousSibling.get("orderValue");}
            movedOne.set("orderValue", (interm+targeted)/2);
        } else if (dropPosition=="after"){
            if ((movedOne.parentNode!=overModel.parentNode)&&(movedOne.parentNode.childNodes.length==1)){
                movedOne.parentNode.set("expandable", false);
            }
            if (!Ext.isEmpty(overModel.nextSibling)){interm=overModel.nextSibling.get("orderValue");}
            else{interm=10000;}
            movedOne.set("orderValue", (interm+targeted)/2);
        } else if (dropPosition=="append"){
            if (movedOne.parentNode.childNodes.length==1){
                movedOne.parentNode.set("expandable", false);
            }

            if (overModel.hasChildNodes()){
                movedOne.set("orderValue", overModel.lastChild.get("orderValue")+100);
            } else {
                movedOne.set("orderValue", 100);
                overModel.set("expandable", true);
            }
        }
    },

    onTreeViewDragDropDrop1: function(node, data, overModel, dropPosition) {
        var task= new Ext.util.DelayedTask(function(){
            Ext.getStore("ThemeDirectoriesStore").resumeAutoSync();
            Ext.getStore("ThemeDirectoriesStore").sync();
        });
        task.delay(200);
    },

    onCellEditingBeforeEdit1: function(editor, e, eOpts) {
        if ((!ACL.interfaceRights["write.ui.directories"])||(Ext.getCmp("mainDirectoriesTree1").getSelectionModel().getLastSelected().get("readOnly"))||(Ext.getCmp("mainDirectoriesTree1").getSelectionModel().getLastSelected().get("id")=="notFiled")||(Ext.getCmp("mainDirectoriesTree1").getSelectionModel().getLastSelected().isRoot())) {
            return false;
        }
        else if ((Ext.getCmp("mainDirectoriesTree1").getSelectionModel().getLastSelected().get("text")=="theme")||(Ext.getCmp("mainDirectoriesTree1").getSelectionModel().getLastSelected().parentNode.get("text")=="theme")){
            return false
        }
    },

    onCellEditingEdit1: function(editor, e, eOpts) {
        Ext.getCmp("mainDirectoriesTree1").getSelectionModel().getLastSelected().collapseChildren(true);
        Ext.getCmp("mainDirectoriesTree1").getStore().load({"node":Ext.getCmp("mainDirectoriesTree1").getSelectionModel().getLastSelected()});
    },

    onMainDirectoriesTree1SelectionChange: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)){
            Ext.getStore("DAMFolderViewStore1").removeAll();
            Ext.getCmp("themeFolderBtnGroup").disable();
        } else {
            Ext.getStore("DAMFolderViewStore1").directoryFilter=selected[0].get("id");
            Ext.getStore("DAMFolderViewStore1").load();
            if (selected[0].isRoot()){
                Ext.getCmp("themeFolderBtnGroup").disable();
            } else {
                Ext.getCmp("themeFolderBtnGroup").enable();
                if (selected[0].get("text")=="theme"){
                    Ext.getCmp("themeFolderBtnGroup").getComponent(0).enable();
                    Ext.getCmp("themeFolderBtnGroup").getComponent(1).disable();
                } else {
                     Ext.getCmp("themeFolderBtnGroup").getComponent(0).enable();
                     Ext.getCmp("themeFolderBtnGroup").getComponent(1).enable();
                }
            }

        }
    },

    onFOThemesInterfaceBeforeClose: function(panel, eOpts) {
        Ext.getStore("DAMFolderViewStore1").removeAll();
    }

});