/*
 * File: app/view/mainDAMDisplay.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.mainDAMDisplay', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.mainDAMDisplay',

    requires: [
        'Ext.ux.container.SwitchButtonSegment'
    ],

    managesStore: true,
    id: 'mainDAMDisplay',
    title: '',
    forceFit: true,
    store: 'MainImageStore',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            viewConfig: {
                id: 'DAMImageDrop'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'filename',
                    text: 'Fichier'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return(value.fullName);
                    },
                    dataIndex: 'createUser',
                    text: 'Auteur'
                },
                {
                    xtype: 'datecolumn',
                    dataIndex: 'createTime',
                    text: 'Date de création',
                    format: 'd-m-Y'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    height: 64,
                    hidden: false,
                    listeners: {
                        afterrender: {
                            fn: me.onGridviewAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onGridviewAfterRender: function(abstractcomponent, options) {
        var contained = Ext.create("Ext.ux.upload.plugin.Window",{title:"Ajoutez des images",height:300,width:440});
        abstractcomponent.add(Ext.create('Ext.ux.upload.Button', {
            text: 'Uploader des images',
            iconCls:"arrow_up",
            hidden:true,
            //singleFile: true,

            plugins: [contained],

            uploader: 
            {
                url: 'image/put?token='+ACL.CSRFToken,
                autoStart: false,
                max_file_size: '2mb',			
                drop_element: "imagesSpecialGrid",
                statusQueuedText: 'Pret à télécharger',
                statusUploadingText: 'Téléchargement ({0}%)',
                statusFailedText: '<span style="color: red">Erreur</span>',
                statusDoneText: '<span style="color: green">Fini</span>',

                statusInvalidSizeText: 'Fichier trop volumineux',
                statusInvalidExtensionText: 'Type de fichier invalide'
            },
            listeners: 
            {
                filesadded: function(uploader, files)								
                {
                    //console.log('filesadded');
                    return true;
                },

                beforeupload: function(uploader, file)								
                {
                    //console.log('beforeupload');			
                },

                fileuploaded: function(uploader, file)								
                {
                    //console.log('fileuploaded');
                },

                uploadcomplete: function(uploader, success, failed)								
                {
                    abstractcomponent.up().getStore().load();
                    contained.window.close();
                },
                scope: this
            }


        }));
    }

});