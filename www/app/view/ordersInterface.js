/*
 * File: app/view/ordersInterface.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.ordersInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.ordersInterface',

    requires: [
        'Rubedo.view.MyTool16',
        'Rubedo.view.MyTool17',
        'Ext.panel.Tool',
        'Ext.grid.Panel',
        'Ext.grid.column.Date',
        'Ext.grid.column.Boolean',
        'Ext.grid.View',
        'Ext.toolbar.Paging'
    ],

    height: 456,
    id: 'ordersInterface',
    width: 1066,
    layout: 'fit',
    constrainHeader: true,
    iconCls: 'content-icon',
    title: 'Orders',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            tools: [
                {
                    xtype: 'mytool16'
                },
                {
                    xtype: 'mytool17'
                }
            ],
            items: [
                {
                    xtype: 'gridpanel',
                    id: 'ordersMainGrid',
                    title: '',
                    forceFit: true,
                    store: 'Orders',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'orderNumber',
                            text: 'Order Number'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'userName',
                            text: 'Client name'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return (value+" â‚¬");
                            },
                            dataIndex: 'finalPrice',
                            text: 'Full Price'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                try {
                                    return value.totalItems;
                                } catch(err){
                                    return "";
                                }
                            },
                            sortable: false,
                            dataIndex: 'detailedCart',
                            text: 'Items'
                        },
                        {
                            xtype: 'datecolumn',
                            dataIndex: 'createTime',
                            text: 'Date'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'paymentMeans',
                            text: 'Payment means'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                try {
                                    return value.name;
                                } catch(err){
                                    return "";
                                }
                            },
                            sortable: false,
                            dataIndex: 'shipper',
                            text: 'Shipper'
                        },
                        {
                            xtype: 'booleancolumn',
                            dataIndex: 'hasStockDecrementIssues',
                            text: 'Stock issues',
                            falseText: 'No',
                            trueText: 'Yes'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'status',
                            text: 'Status'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'Orders'
                        }
                    ]
                }
            ],
            listeners: {
                render: {
                    fn: me.onOrdersInterfaceRender,
                    scope: me
                },
                beforeclose: {
                    fn: me.onOrdersInterfaceBeforeClose,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onOrdersInterfaceRender: function(component, eOpts) {
        Ext.getStore("Orders").clearFilter(true);
        Ext.getStore("Orders").loadPage(1);
    },

    onOrdersInterfaceBeforeClose: function(panel, eOpts) {
        Ext.getStore("Orders").removeAll();
    }

});