/*
 * File: app/view/MultiChoiceConfigurator.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.MultiChoiceConfigurator', {
    extend: 'Ext.window.Window',
    alias: 'widget.MultiChoiceConfigurator',

    requires: [
        'Rubedo.view.CKEField'
    ],

    localiserId: 'multiChoiceQuestionEditor',
    height: 563,
    id: 'MultiChoiceConfigurator',
    width: 828,
    resizable: false,
    layout: {
        type: 'fit'
    },
    title: 'Editeur de question fermée',
    constrain: true,
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            localiserId: 'validateBtn',
                            id: 'MultiChoiceConfiguratorSubmit',
                            iconCls: 'ouiSpetit',
                            text: 'Valider',
                            listeners: {
                                click: {
                                    fn: me.onMultiChoiceConfiguratorSubmitClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'form',
                    autoScroll: true,
                    bodyPadding: 10,
                    title: '',
                    items: [
                        {
                            xtype: 'CKEField',
                            anchor: '100%',
                            fieldLabel: 'Intitulé de la question',
                            labelAlign: 'top',
                            name: 'fieldLabel',
                            CKETBConfig: 'Standard',
                            localiserId: 'questionLabelField'
                        },
                        {
                            xtype: 'textfield',
                            localiserId: 'questionCodeField',
                            anchor: '100%',
                            fieldLabel: 'Code de la question',
                            labelWidth: 140,
                            name: 'qNb'
                        },
                        {
                            xtype: 'textfield',
                            localiserId: 'questionHelpTextField',
                            anchor: '100%',
                            fieldLabel: 'Bulle d\'aide',
                            labelWidth: 140,
                            name: 'tooltip'
                        },
                        {
                            xtype: 'checkboxfield',
                            localiserId: 'mandatoryCheckbox',
                            anchor: '100%',
                            fieldLabel: 'Obligatoire',
                            labelWidth: 140,
                            name: 'mandatory',
                            boxLabel: '',
                            inputValue: 'true',
                            uncheckedValue: 'false'
                        },
                        {
                            xtype: 'numberfield',
                            localiserId: 'colNumberField',
                            anchor: '100%',
                            fieldLabel: 'Nombre de colonnes',
                            labelWidth: 140,
                            name: 'columns',
                            allowDecimals: false,
                            minValue: 1
                        },
                        {
                            xtype: 'radiogroup',
                            localiserId: 'answerTypeCheckboxGroup',
                            fieldLabel: 'Réponse',
                            labelSeparator: ' ',
                            labelWidth: 140,
                            items: [
                                {
                                    xtype: 'radiofield',
                                    localiserId: 'sipleChoiceRadio',
                                    name: 'fieldType',
                                    boxLabel: 'choix simple',
                                    inputValue: 'radiogroup'
                                },
                                {
                                    xtype: 'radiofield',
                                    localiserId: 'multiChoiceRadio',
                                    name: 'fieldType',
                                    boxLabel: 'choix multiple',
                                    inputValue: 'checkboxgroup'
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            height: 160,
                            id: 'formsMCCGrid',
                            title: '',
                            forceFit: true,
                            store: 'MultiChoiceOptionsStore',
                            viewConfig: {
                                plugins: [
                                    Ext.create('Ext.grid.plugin.DragDrop', {

                                    })
                                ]
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    localiserId: 'optionsCol',
                                    dataIndex: 'boxLabel',
                                    text: 'Options',
                                    editor: {
                                        xtype: 'textfield',
                                        allowBlank: false
                                    }
                                }
                            ],
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'right',
                                    width: 28,
                                    items: [
                                        {
                                            xtype: 'button',
                                            handler: function(button, event) {
                                                Ext.Ajax.request({
                                                    url: 'xhr-get-mongo-id',
                                                    params: { },
                                                    success: function(response){
                                                        var servedId = Ext.JSON.decode(response.responseText).mongoID;
                                                        Ext.getStore("MultiChoiceOptionsStore").add({
                                                            inputValue:servedId,
                                                            name:Ext.getCmp("MultiChoiceConfigurator").targetedId,
                                                            boxLabel:"Option "+ (Ext.getStore("MultiChoiceOptionsStore").count()+1)
                                                        });
                                                    },
                                                    failure: function(){
                                                        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.identifierRecoverError);

                                                    }
                                                });
                                            },
                                            localiserId: 'closedQuestionAddOptionBtn',
                                            id: 'formsMCCGridAdd',
                                            iconCls: 'add',
                                            text: '',
                                            tooltip: 'Ajouter une option'
                                        },
                                        {
                                            xtype: 'button',
                                            handler: function(button, event) {
                                                Ext.getCmp("formsMCCGrid").getStore().remove(Ext.getCmp("formsMCCGrid").getSelectionModel().getLastSelected());
                                            },
                                            localiserId: 'closedQuestionRemoveOptionBtn',
                                            disabled: true,
                                            id: 'formsMCCGridRemove',
                                            iconCls: 'close',
                                            text: '',
                                            tooltip: 'Supprimer cette option'
                                        }
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.CellEditing', {

                                })
                            ],
                            listeners: {
                                selectionchange: {
                                    fn: me.onFormsMCCGridSelectionChange,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onWindowAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onMultiChoiceConfiguratorSubmitClick: function(button, e, eOpts) {
        var initialValues = Ext.clone(button.up().up().initialItemConfig);
        var myId = Ext.clone(button.up().up().targetedId);
        var form = button.up().up().getComponent(0).getForm();
        if (form.isValid()) {
            var newData = Ext.clone(form.getFieldValues());
            initialValues.fieldType=newData.fieldType;
            initialValues.label=newData.fieldLabel;
            initialValues.tooltip=newData.tooltip;
            initialValues.qNb=newData.qNb;
            delete newData.fieldType;
            delete newData.fieldLabel;
            delete newData.tooltip;
            delete newData.qNb;
            newData.vertical=true;
            newData.items=Ext.Array.pluck(Ext.getStore("MultiChoiceOptionsStore").getRange(), "data");
            delete newData.answers;
            initialValues.fieldConfig=newData;
            Ext.getCmp(myId).itemConfig=initialValues;
            button.up().up().close();
            Ext.getCmp(myId).sync();
        }
    },

    onFormsMCCGridSelectionChange: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)){
            Ext.getCmp("formsMCCGridRemove").disable();
        } else {
            Ext.getCmp("formsMCCGridRemove").enable();
        }
    },

    onWindowAfterRender: function(component, eOpts) {
        var initialValues = Ext.clone(component.initialItemConfig.fieldConfig);
        initialValues.fieldType= Ext.clone(component.initialItemConfig.fieldType);
        Ext.getStore("MultiChoiceOptionsStore").removeAll();
        Ext.getStore("MultiChoiceOptionsStore").loadData(Ext.clone(initialValues.items));
        initialValues.fieldLabel=Ext.clone(component.initialItemConfig.label);
        initialValues.tooltip=Ext.clone(component.initialItemConfig.tooltip);
        initialValues.qNb=Ext.clone(component.initialItemConfig.qNb);
        delete initialValues.items;
        delete initialValues.vertical;
        component.getComponent(0).getForm().setValues(initialValues);
    }

});