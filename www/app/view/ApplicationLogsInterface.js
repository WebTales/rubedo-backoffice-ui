/*
 * File: app/view/ApplicationLogsInterface.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.ApplicationLogsInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.ApplicationLogsInterface',

    requires: [
        'Rubedo.view.MyTool16',
        'Rubedo.view.MyTool17',
        'Ext.ux.RowExpander'
    ],

    height: 418,
    id: 'ApplicationLogsInterface',
    width: 944,
    layout: {
        type: 'fit'
    },
    title: 'Application logs',
    constrainHeader: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            tools: [
                {
                    xtype: 'mytool16'
                },
                {
                    xtype: 'mytool17'
                }
            ],
            items: [
                me.processMyGridPanel6({
                    xtype: 'gridpanel',
                    title: '',
                    disableSelection: true,
                    forceFit: false,
                    store: 'ApplicationLogs',
                    viewConfig: {
                        autoScroll: false
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'message',
                            text: 'Message',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 200,
                            dataIndex: 'datetime',
                            text: 'Datetime'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 100,
                            dataIndex: 'level_name',
                            text: 'Level'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 100,
                            dataIndex: 'channel',
                            text: 'Channel'
                        }
                    ]
                })
            ],
            listeners: {
                afterrender: {
                    fn: me.onApplicationLogsInterfaceAfterRender,
                    scope: me
                },
                beforeclose: {
                    fn: me.onApplicationLogsInterfaceBeforeClose,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    processMyGridPanel6: function(config) {
        config.plugins=[{
            ptype: 'rowexpander',
            selectRowOnExpand : false,  
            rowBodyTpl:"<div class='specialGridRowDisplay'><pre><code>{detail}</code></pre></div>"
        }];
        return config;
    },

    onApplicationLogsInterfaceAfterRender: function(component, eOpts) {
        Ext.getStore("ApplicationLogs").load();
    },

    onApplicationLogsInterfaceBeforeClose: function(panel, eOpts) {
        Ext.getStore("ApplicationLogs").removeAll();
    }

});