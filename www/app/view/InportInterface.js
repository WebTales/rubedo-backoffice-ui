/*
 * File: app/view/InportInterface.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.InportInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.InportInterface',

    requires: [
        'Rubedo.view.MyToolbar56',
        'Rubedo.view.WorkspaceCombo'
    ],

    localiserId: 'importMainWindow',
    height: 439,
    id: 'InportInterface',
    width: 1063,
    resizable: false,
    layout: {
        type: 'card'
    },
    iconCls: 'database_up_small',
    title: 'Import',
    constrainHeader: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'mytoolbar56',
                    dock: 'bottom'
                }
            ],
            items: [
                {
                    xtype: 'form',
                    localiserId: 'importStage1Panel',
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    bodyPadding: 10,
                    title: 'Choix du fichier à importer',
                    timeout: 120,
                    items: [
                        {
                            xtype: 'container',
                            margin: '0 0 10 0',
                            layout: {
                                align: 'stretch',
                                padding: 1,
                                type: 'hbox'
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    localiserId: 'importSeparatorField',
                                    width: 100,
                                    fieldLabel: 'Séparateur',
                                    labelWidth: 60,
                                    name: 'separator',
                                    value: ';',
                                    allowBlank: false,
                                    listeners: {
                                        change: {
                                            fn: me.onTextfieldChange,
                                            scope: me
                                        }
                                    }
                                },
                                me.processChooseEncodingField({
                                    xtype: 'combobox',
                                    margins: '0 0 0 5',
                                    disabled: true,
                                    id: 'chooseEncodingField',
                                    width: 160,
                                    fieldLabel: 'Encoding',
                                    labelWidth: 60,
                                    name: 'encoding',
                                    editable: false,
                                    forceSelection: true,
                                    store: [
                                        
                                    ]
                                }),
                                {
                                    xtype: 'filefield',
                                    extractFileInput: function() {
                                        var fileInput = Ext.getCmp("mainCSVinportField").fileInputEl.dom;
                                        return fileInput;
                                    },
                                    localiserId: 'importCSVFileField',
                                    flex: 1,
                                    id: 'mainCSVinportField',
                                    margin: '0 0 0 5',
                                    width: 380,
                                    fieldLabel: 'Fichier CSV',
                                    labelWidth: 80,
                                    name: 'csvFile',
                                    allowBlank: false,
                                    buttonText: 'Choisir et analyser'
                                },
                                {
                                    xtype: 'button',
                                    localiserId: 'importCSVFieldAuxilaryBtn',
                                    hidden: true,
                                    id: 'fileFieldHelper1',
                                    margin: '0 0 0 4',
                                    iconCls: 'close',
                                    text: ''
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            flex: 1,
                            id: 'mainCSVInportAnalyseContainer',
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            items: [
                                {
                                    xtype: 'panel',
                                    localiserId: 'importStage1MainPanel',
                                    flex: 1,
                                    layout: {
                                        align: 'stretch',
                                        type: 'hbox'
                                    },
                                    title: 'Choisissez un fichier CSV pour afficher ses champs',
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            flex: 1,
                                            title: '',
                                            forceFit: true,
                                            store: 'NotInportFieldsStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    localiserId: 'importIgnoredFieldsCol',
                                                    dataIndex: 'name',
                                                    text: 'Ne pas importer'
                                                }
                                            ],
                                            viewConfig: {
                                                markDirty: false,
                                                plugins: [
                                                    Ext.create('Ext.grid.plugin.DragDrop', {

                                                    })
                                                ]
                                            }
                                        },
                                        {
                                            xtype: 'gridpanel',
                                            flex: 1,
                                            title: '',
                                            forceFit: true,
                                            store: 'InportAsFieldStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    localiserId: 'importImportAsFieldCol',
                                                    dataIndex: 'name',
                                                    text: 'Importer en tant que champ'
                                                }
                                            ],
                                            viewConfig: {
                                                markDirty: false,
                                                plugins: [
                                                    Ext.create('Ext.grid.plugin.DragDrop', {

                                                    })
                                                ]
                                            }
                                        },
                                        {
                                            xtype: 'gridpanel',
                                            flex: 1,
                                            title: '',
                                            forceFit: true,
                                            store: 'InportAsFieldTranslationStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    localiserId: 'importAsFieldTransCol',
                                                    dataIndex: 'name',
                                                    text: 'Import as field translation'
                                                }
                                            ],
                                            viewConfig: {
                                                markDirty: false,
                                                plugins: [
                                                    Ext.create('Ext.grid.plugin.DragDrop', {

                                                    })
                                                ]
                                            },
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridpanelAfterRender1,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridpanel',
                                            flex: 1,
                                            title: '',
                                            forceFit: true,
                                            store: 'InportAsTaxoStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    localiserId: 'importImportAsTaxoCol',
                                                    dataIndex: 'name',
                                                    text: 'Importer en tant que taxonomie'
                                                }
                                            ],
                                            viewConfig: {
                                                markDirty: false,
                                                plugins: [
                                                    Ext.create('Ext.grid.plugin.DragDrop', {

                                                    })
                                                ]
                                            }
                                        },
                                        {
                                            xtype: 'gridpanel',
                                            flex: 1,
                                            title: '',
                                            forceFit: true,
                                            store: 'InportAsTaxoTranslationStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    localiserId: 'ImportAsTaxoTransCol',
                                                    dataIndex: 'name',
                                                    text: 'Import as taxonomy translation'
                                                }
                                            ],
                                            viewConfig: {
                                                markDirty: false,
                                                plugins: [
                                                    Ext.create('Ext.grid.plugin.DragDrop', {

                                                    })
                                                ]
                                            },
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridpanelAfterRender,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    localiserId: 'importStage2',
                    layout: {
                        type: 'fit'
                    },
                    title: 'Paramétrage des champs',
                    items: [
                        {
                            xtype: 'gridpanel',
                            title: '',
                            forceFit: true,
                            store: 'InportAsFieldStore',
                            viewConfig: {
                                markDirty: false,
                                plugins: [
                                    Ext.create('Ext.grid.plugin.DragDrop', {

                                    })
                                ]
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    localiserId: 'importS2NameColumn',
                                    dataIndex: 'name',
                                    text: 'Nom'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    localiserId: 'importS2NewnameCol',
                                    width: 130,
                                    dataIndex: 'newName',
                                    text: 'Nouveau nom (optionnel)',
                                    editor: {
                                        xtype: 'textfield'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    localiserId: 'importS2LabelCol',
                                    dataIndex: 'label',
                                    text: 'Libellé',
                                    editor: {
                                        xtype: 'textfield'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return(Ext.getStore("ImportableFieldTypesStore").findRecord("id", value).get("type"));
                                    },
                                    localiserId: 'importS2TypeCol',
                                    dataIndex: 'protoId',
                                    text: 'Type',
                                    editor: {
                                        xtype: 'combobox',
                                        allowBlank: false,
                                        editable: false,
                                        displayField: 'type',
                                        forceSelection: true,
                                        queryMode: 'local',
                                        store: 'ImportableFieldTypesStore',
                                        valueField: 'id'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (Ext.isEmpty(value)){
                                            return("");
                                        } else {
                                            return(Ext.getStore("MediaTypesFORDAMPicker").findRecord("id", value).get("type"));
                                        }
                                    },
                                    dataIndex: 'mediaTypeId',
                                    text: 'Media type',
                                    editor: {
                                        xtype: 'combobox',
                                        allowBlank: false,
                                        editable: false,
                                        displayField: 'type',
                                        forceSelection: true,
                                        queryMode: 'local',
                                        store: 'MediaTypesFORDAMPicker',
                                        valueField: 'id'
                                    }
                                },
                                me.processRecherchable({
                                    xtype: 'booleancolumn',
                                    localiserId: 'importS2SearchableCol',
                                    dataIndex: 'searchable',
                                    text: 'Recherchable',
                                    falseText: 'Non',
                                    trueText: 'Oui',
                                    editor: {
                                        xtype: 'checkboxfield',
                                        inputValue: 'true',
                                        uncheckedValue: 'false'
                                    }
                                }),
                                me.processLocalizable({
                                    xtype: 'booleancolumn',
                                    localiserId: 'importS2LocalizableCol',
                                    dataIndex: 'localizable',
                                    text: 'Localizable',
                                    falseText: 'Non',
                                    trueText: 'Oui',
                                    editor: {
                                        xtype: 'checkboxfield',
                                        inputValue: 'true',
                                        uncheckedValue: 'false'
                                    }
                                }),
                                me.processObligatoire({
                                    xtype: 'booleancolumn',
                                    localiserId: 'importS2MandatoryCol',
                                    dataIndex: 'mandatory',
                                    text: 'Obligatoire',
                                    falseText: 'Non',
                                    trueText: 'Oui',
                                    editor: {
                                        xtype: 'checkboxfield',
                                        inputValue: 'true',
                                        uncheckedValue: 'false'
                                    }
                                })
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.CellEditing', {
                                    clicksToEdit: 1,
                                    listeners: {
                                        edit: {
                                            fn: me.onCellEditingEdit,
                                            scope: me
                                        }
                                    }
                                })
                            ]
                        },
                        {
                            xtype: 'hiddenfield',
                            isValid: function() {
                                var store=Ext.getStore("InportAsFieldStore");
                                var secondStore= Ext.getStore("LocalizedFieldSelectorStore");
                                secondStore.loadData(Ext.Array.pluck(store.query("localizable",true).items,"data"));
                                var languagesStore=Ext.getStore("ImportTranslationLanguageStore");
                                var newL=[ ];
                                var workingL=Ext.getCmp("workingLanguageField").getValue();
                                Ext.Array.forEach(Ext.getStore("AllLanguagesStore3").getRange(),function(lang){
                                    if (lang.get("locale")!=workingL){
                                        newL.push(lang.getData());
                                    }
                                });
                                languagesStore.loadData(newL);
                                if (newL.length==1){
                                    Ext.Array.forEach(Ext.getStore("InportAsFieldTranslationStore").getRange(),function(target){
                                        target.set("translateToLanguage",newL[0].locale);
                                    });
                                    Ext.Array.forEach(Ext.getStore("InportAsTaxoTranslationStore").getRange(),function(target){
                                        target.set("translateToLanguage",newL[0].locale);
                                    });
                                }
                                if (secondStore.getRange().length==1){
                                    Ext.Array.forEach(Ext.getStore("InportAsFieldTranslationStore").getRange(),function(target){
                                        target.set("translatedElement",secondStore.getRange()[0].get("csvIndex"));
                                    });
                                }
                                if (Ext.getStore("InportAsTaxoStore").getRange().length==1){
                                    Ext.Array.forEach(Ext.getStore("InportAsTaxoTranslationStore").getRange(),function(target){
                                        target.set("translatedElement",Ext.getStore("InportAsTaxoStore").getRange()[0].get("csvIndex"));
                                    });
                                }
                                var mediaError=false;
                                Ext.Array.forEach(Ext.getStore("InportAsFieldStore").query("protoId","506441f8c648043912991123").items, function(mediaield){
                                    if (Ext.isEmpty(mediaield.get("mediaTypeId"))){
                                        mediaError=true;
                                    }
                                });

                                if (store.query("protoId","text").length===0) {
                                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.CTMustHaveTitleError);
                                    return(false);
                                } else if (store.query("protoId","text").length>1) {
                                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.CTMustHaveOnlyOneTitleError);
                                    return(false);
                                } else if (store.query("protoId","summary").length>1) {
                                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.CTMustHaveOnlyOneSummaryError);
                                    return(false);
                                } else if (mediaError){
                                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.MediaFieldNeedsTypeError);
                                    return(false);
                                }
                                else if (store.query("protoId","51234e09c0e0516a0b00000d").length>1) {
                                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.CRMustHaveOnlyOneLocFieldError);
                                    return(false);
                                } else {
                                    return(true);
                                }
                            },
                            fieldLabel: 'Label'
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    localiserId: 'importStage3',
                    title: 'Paramétrage de la taxonomie',
                    forceFit: true,
                    store: 'InportAsTaxoStore',
                    viewConfig: {
                        markDirty: false,
                        plugins: [
                            Ext.create('Ext.grid.plugin.DragDrop', {

                            })
                        ]
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            localiserId: 'importS3NameCol',
                            dataIndex: 'name',
                            text: 'Nom'
                        },
                        {
                            xtype: 'gridcolumn',
                            localiserId: 'importS3NewNameXol',
                            dataIndex: 'newName',
                            text: 'Nouveau nom (optionnel)',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'booleancolumn',
                            localiserId: 'importS3MandatoryCol',
                            dataIndex: 'mandatory',
                            text: 'Obligatoire',
                            falseText: 'Non',
                            trueText: 'Oui',
                            editor: {
                                xtype: 'checkboxfield',
                                inputValue: 'true',
                                uncheckedValue: 'false'
                            }
                        }
                    ],
                    plugins: [
                        Ext.create('Ext.grid.plugin.CellEditing', {
                            clicksToEdit: 1
                        })
                    ]
                },
                {
                    xtype: 'panel',
                    localiserId: 'translationSettingsPanel',
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    title: 'Translation settings',
                    items: [
                        {
                            xtype: 'gridpanel',
                            localiserId: 'FieldTransSetPanel',
                            flex: 1,
                            title: 'Field translations',
                            forceFit: true,
                            store: 'InportAsFieldTranslationStore',
                            viewConfig: {
                                markDirty: false
                            },
                            plugins: [
                                Ext.create('Ext.grid.plugin.CellEditing', {
                                    clicksToEdit: 1
                                })
                            ],
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    localiserId: 'importS3NameCol',
                                    dataIndex: 'name',
                                    text: 'Nom'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (Ext.isEmpty(value)){
                                            return("");
                                        } else {
                                            return(Ext.getStore("InportAsFieldStore").findRecord("csvIndex",value).get("name"));
                                        }
                                    },
                                    localiserId: 'transFieldCol',
                                    dataIndex: 'translatedElement',
                                    text: 'Translated field',
                                    editor: {
                                        xtype: 'combobox',
                                        allowBlank: false,
                                        editable: false,
                                        displayField: 'name',
                                        forceSelection: true,
                                        queryMode: 'local',
                                        store: 'LocalizedFieldSelectorStore',
                                        valueField: 'csvIndex'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (Ext.isEmpty(value)){
                                            return("");
                                        } else {
                                            return(Ext.getStore("AllLanguagesStore3").findRecord("locale",value).get("label"));
                                        }
                                    },
                                    localiserId: 'transLanguageCol',
                                    dataIndex: 'translateToLanguage',
                                    text: 'Translation language',
                                    editor: {
                                        xtype: 'combobox',
                                        allowBlank: false,
                                        editable: false,
                                        displayField: 'label',
                                        forceSelection: true,
                                        queryMode: 'local',
                                        store: 'ImportTranslationLanguageStore',
                                        valueField: 'locale'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            localiserId: 'TaxoTransSetPanel',
                            flex: 1,
                            title: 'Taxonomy translations',
                            forceFit: true,
                            store: 'InportAsTaxoTranslationStore',
                            viewConfig: {
                                markDirty: false
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    localiserId: 'importS3NameCol',
                                    dataIndex: 'name',
                                    text: 'Nom'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (Ext.isEmpty(value)){
                                            return("");
                                        } else {
                                            return(Ext.getStore("InportAsTaxoStore").findRecord("csvIndex",value).get("name"));
                                        }
                                    },
                                    localiserId: 'transVocabCol',
                                    dataIndex: 'translatedElement',
                                    text: 'Translated vocabulary',
                                    editor: {
                                        xtype: 'combobox',
                                        allowBlank: false,
                                        editable: false,
                                        displayField: 'name',
                                        forceSelection: true,
                                        queryMode: 'local',
                                        store: 'InportAsTaxoStore',
                                        valueField: 'csvIndex'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (Ext.isEmpty(value)){
                                            return("");
                                        } else {
                                            return(Ext.getStore("AllLanguagesStore3").findRecord("locale",value).get("label"));
                                        }
                                    },
                                    localiserId: 'transLanguageCol',
                                    dataIndex: 'translateToLanguage',
                                    text: 'Translation language',
                                    editor: {
                                        xtype: 'combobox',
                                        allowBlank: false,
                                        editable: false,
                                        displayField: 'label',
                                        forceSelection: true,
                                        queryMode: 'local',
                                        store: 'ImportTranslationLanguageStore',
                                        valueField: 'locale'
                                    }
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.CellEditing', {
                                    clicksToEdit: 1
                                })
                            ]
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'hiddenfield',
                            isValid: function() {
                                var store1=Ext.getStore("InportAsFieldTranslationStore");
                                var store2=Ext.getStore("InportAsTaxoTranslationStore");
                                var allGood=true;
                                Ext.Array.forEach(store1.getRange(),function(record){
                                    if((Ext.isEmpty(record.get("translatedElement")))||(Ext.isEmpty(record.get("translateToLanguage")))){
                                        allGood=false;
                                    }
                                });
                                if (allGood===true) {
                                    return(true);
                                } else {
                                    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.invalidFieldsError);
                                    return(false);
                                }
                            },
                            flex: 1,
                            dock: 'bottom',
                            fieldLabel: 'Label'
                        }
                    ]
                },
                {
                    xtype: 'form',
                    localiserId: 'importFinalStage',
                    autoScroll: true,
                    bodyPadding: 10,
                    title: 'Finalisation  et import',
                    items: [
                        {
                            xtype: 'fieldset',
                            localiserId: 'importS4Fielset1',
                            title: 'Paramètres du type de contenus',
                            items: [
                                {
                                    xtype: 'textfield',
                                    localiserId: 'nameField',
                                    anchor: '100%',
                                    fieldLabel: 'Nom',
                                    labelWidth: 165,
                                    name: 'ContentTypeType',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'WorkspaceCombo',
                                    fieldLabel: 'Espaces de travail',
                                    labelWidth: 165,
                                    name: 'ContentTypeWorkspaces',
                                    multiSelect: true,
                                    store: 'ContributeWorkspacesCombo',
                                    anchor: '100%'
                                },
                                {
                                    xtype: 'combobox',
                                    localiserId: 'workflowField',
                                    anchor: '100%',
                                    fieldLabel: 'Workflow',
                                    labelWidth: 165,
                                    name: 'ContentTypeWorkflow',
                                    value: 'Aucun',
                                    allowBlank: false,
                                    editable: false,
                                    forceSelection: true,
                                    store: [
                                        'Aucun',
                                        'Basique'
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            localiserId: 'importS4Fieldset2',
                            title: 'Paramètres des contenus',
                            items: [
                                {
                                    xtype: 'WorkspaceCombo',
                                    localiserId: 'contributeWorkspaceField',
                                    fieldLabel: 'Contribution',
                                    labelWidth: 165,
                                    name: 'ContentsWriteWorkspace',
                                    store: 'ContributeWorkspacesCombo',
                                    anchor: '100%'
                                },
                                {
                                    xtype: 'WorkspaceCombo',
                                    localiserId: 'difusionWorkspaceField',
                                    fieldLabel: 'Diffusion',
                                    labelWidth: 165,
                                    name: 'ContentsTarget',
                                    multiSelect: true,
                                    store: 'WorkspacesComboWithAll',
                                    anchor: '100%'
                                }
                            ],
                            listeners: {
                                render: {
                                    fn: me.onFieldsetRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            localiserId: 'importBtn',
                            anchor: '100%',
                            id: 'mainImportSubmitBtn',
                            scale: 'large',
                            text: 'Importer'
                        }
                    ]
                }
            ],
            listeners: {
                beforerender: {
                    fn: me.onInportInterfaceBeforeRender,
                    scope: me
                },
                beforeclose: {
                    fn: me.onInportInterfaceBeforeClose,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    processChooseEncodingField: function(config) {
        config.fieldLabel=Rubedo.RubedoAutomatedElementsLoc.encodingText;
        return config;
    },

    processRecherchable: function(config) {
        config.trueText=Rubedo.RubedoAutomatedElementsLoc.yesText;
        config.falseText=Rubedo.RubedoAutomatedElementsLoc.noText;
        return config;
    },

    processLocalizable: function(config) {
        config.trueText=Rubedo.RubedoAutomatedElementsLoc.yesText;
        config.falseText=Rubedo.RubedoAutomatedElementsLoc.noText;
        return config;
    },

    processObligatoire: function(config) {
        config.trueText=Rubedo.RubedoAutomatedElementsLoc.yesText;
        config.falseText=Rubedo.RubedoAutomatedElementsLoc.noText;
        return config;
    },

    onTextfieldChange: function(field, newValue, oldValue, eOpts) {
        if (Ext.isEmpty(newValue)){
            field.addListener("blur", function(){
                if (Ext.isEmpty(field.getValue())){field.setValue(";");}
            }, this, {single:true});
            }
    },

    onGridpanelAfterRender1: function(component, eOpts) {
        if ((Ext.getStore("AllLanguagesStore3").getRange().length==1)){
            component.hide();
        }
    },

    onGridpanelAfterRender: function(component, eOpts) {
        if ((Ext.getStore("AllLanguagesStore3").getRange().length==1)){
            component.hide();
        }
    },

    onCellEditingEdit: function(editor, e, eOpts) {
        var store=Ext.getStore("InportAsFieldStore");
        Ext.Array.forEach(store.getRange(), function(record){
            if ((record.get("protoId")=="text")||(record.get("protoId")=="summary")){
                record.set("localizable", true);
                record.set("searchable",true);
            } else if ((record.get("protoId")=="51234e09c0e0516a0b00000d")){
                record.set("localizable", false);
                record.set("searchable",true);
            }
        });
    },

    onFieldsetRender: function(component, eOpts) {
        var store = Ext.create("Ext.data.TreeStore", {
            isOptimised: true,
            usedCollection: 'Pages',
            autoLoad: false,
            autoSync: false,
            remoteFilter: true,
            model: 'Rubedo.model.taxonomyTermModel',
            proxy: {
                type: 'ajax',
                api: {
                    read: 'taxonomy-terms/navigation-tree'
                },
                reader: {
                    type: 'json',
                    getResponseData: function(response) {
                        var data, error;

                        try {
                            data = Ext.decode(response.responseText);
                            if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                            return this.readRecords(data);
                        } catch (ex) {
                            error = new Ext.data.ResultSet({
                                total  : 0,
                                count  : 0,
                                records: [],
                                success: false,
                                message: ex.message
                            });

                            this.fireEvent('exception', this, response, error);
                            console.log(ex);

                            Ext.Logger.warn('Unable to parse the JSON returned by the server');

                            return error;
                        }
                    },
                    messageProperty: 'message'
                }
            },
            sorters: {
                property: 'orderValue'
            }
        });
        var navTaxoSelector = Ext.create("Ext.ux.TreeMultiPicker", {
            store:store,
            displayField:"text",
            ignoreIsNotPage:true,
            labelWidth:165,
            fieldLabel:"Navigation",
            anchor: "100%",
            plugins:[Ext.create("Ext.ux.form.field.ClearButton")],
            name:"ContentsNavTaxo"
        });
        component.add(navTaxoSelector);
    },

    onInportInterfaceBeforeRender: function(component, eOpts) {
        Ext.getStore("NotInportFieldsStore").removeAll();
        Ext.getStore("InportAsFieldStore").removeAll();
        Ext.getStore("InportAsTaxoStore").removeAll();
        Ext.getStore("InportAsFieldTranslationStore").removeAll();
        Ext.getStore("InportAsTaxoTranslationStore").removeAll();
        Ext.getStore("MediaTypesFORDAMPicker").load();
        if ((Ext.getStore("AllLanguagesStore3").getRange().length==1)){
            component.remove(component.getComponent(3));
        }
    },

    onInportInterfaceBeforeClose: function(panel, eOpts) {
        Ext.getStore("NotInportFieldsStore").removeAll();
        Ext.getStore("InportAsFieldStore").removeAll();
        Ext.getStore("InportAsTaxoStore").removeAll();
        Ext.getStore("InportAsFieldTranslationStore").removeAll();
        Ext.getStore("InportAsTaxoTranslationStore").removeAll();
        Ext.getStore("MediaTypesFORDAMPicker").removeAll();
    }

});