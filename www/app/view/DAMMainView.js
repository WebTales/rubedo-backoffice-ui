/*
 * File: app/view/DAMMainView.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.DAMMainView', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.DAMMainView',

    requires: [
        'Ext.ux.container.SwitchButtonSegment'
    ],

    title: '',
    forceFit: true,
    store: 'DAMStore',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            viewConfig: {
                id: 'DAMImageDrop'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if (record.get("readOnly")){
                            return("<i style=\"color:#777;\">"+value+"</i>");
                        } else {
                            return(value);
                        }
                    },
                    filter: true,
                    localiserId: 'titleColumn',
                    dataIndex: 'text',
                    text: 'Titre'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if (Ext.getCmp("DAMInterface").currentViewMode=="search"){
                            var availableLanguages=record.get("availableLanguages");
                            var returner="";
                            try{Ext.Array.forEach(availableLanguages,function(item){
                                try{var myFlagCode2=Ext.getStore("AllLanguagesStore3").query("locale",item,false,false,true).items[0].get("flagCode");}
                                catch(err){var myFlagCode2="_unknown";}
                                returner=returner+" <img src=\"/assets/flags/16/"+myFlagCode2+".png\"> ";
                            });}catch(err){returner=returner+" <img src=\"/assets/flags/16/"+"_unknown"+".png\"> ";}
                                return(returner);
                            } else {
                                try{var myFlagCode=Ext.getStore("AllLanguagesStore3").query("locale",record.get("locale"),false,false,true).items[0].get("flagCode");}
                                catch(err){var myFlagCode="_unknown";}
                                var returner =" <img src=\"/assets/flags/16/"+myFlagCode+".png\"> ";
                                if(!Ext.isEmpty(value)){
                                    Ext.Object.each(value, function(key, value, myself) {
                                        if (key!=record.get("locale")){
                                            try{var myFlagCode2=Ext.getStore("AllLanguagesStore3").query("locale",key,false,false,true).items[0].get("flagCode");}
                                            catch(err){var myFlagCode2="_unknown";}
                                            if (myFlagCode2!="_unknown"){
                                                returner=returner+" <img src=\"/assets/flags/16/"+myFlagCode2+".png\"> ";
                                            }
                                        }
                                    });
                                }
                                return(returner);
                            }
                    },
                    localiserId: 'languageCoumn',
                    sortable: false,
                    dataIndex: 'i18n',
                    text: 'Languages',
                    listeners: {
                        afterrender: {
                            fn: me.onGridcolumnAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    localiserId: 'authorColumn',
                    dataIndex: 'author',
                    text: 'Auteur'
                },
                {
                    xtype: 'datecolumn',
                    localiserId: 'createDateColumn',
                    dataIndex: 'lastUpdateTime',
                    text: 'Date de cr√©ation',
                    format: 'd-m-Y'
                }
            ]
        });

        me.processDAMMainView(me);
        me.callParent(arguments);
    },

    processDAMMainView: function(config) {
        config.multiSelect= true;
        config.viewConfig= {
            stripeRows: true,
            chunker: Ext.view.TableChunker,
            plugins: [
            Ext.create('Ext.grid.plugin.DragDrop', {
                ddGroup: 'DirectoriesDD',
                enableDrop:false
            })
            ]

        };

        config.plugins=[Ext.create('Ext.ux.grid.plugin.DragSelector')];

        config.features= [Ext.create('Ext.ux.grid.feature.Tileview', {
            viewMode: 'tileIcons',
            getAdditionalData: function(data, index, record, orig)
            {



                generateThumbnail = function()
                {
                    return "dam/get-thumbnail?id="+record.get("id")+"&version="+record.get("version");
                };

                if(this.viewMode)
                {   
                    var properName=record.get("text");
                    if (record.get("readOnly")){properName="<i style=\"color:#777;\">"+properName+"</i>";}
                    return {
                        thumbnails: generateThumbnail(),
                        author:record.get("author"),
                        date: Ext.Date.format(record.get("lastUpdateTime"), Ext.Date.defaultFormat),
                        filename:properName,
                        fileSize:Ext.util.Format.fileSize(record.get("fileSize"))
                    };
                }
                return {};
            },
            viewTpls:
            {
                mediumIcons: [
                '<td class="{cls} ux-explorerview-medium-icon-row">',
                '<table class="x-grid-row-table">',
                '<tbody>',
                '<tr>',
                '<td class="x-grid-col x-grid-cell ux-explorerview-icon" style="background: transparent;">',
                '<img src=\"{thumbnails}\" height=\"100\" width=\"100\">',			
                '</td>',
                '</tr>',
                '<tr>',
                '<td class="x-grid-col x-grid-cell">',
                '<div class="x-grid-cell-inner" unselectable="on">{filename}</div>',
                '</td>',
                '</tr>',
                '</tbody>',
                '</table>',
                '</td>'].join(''),

                tileIcons: [
                '<td class="{cls} ux-explorerview-detailed-icon-row">',
                '<table class="x-grid-row-table">',
                '<tbody>',
                '<tr>',
                '<td class="x-grid-col x-grid-cell ux-explorerview-icon" style="background: transparent;">',
                '<img src=\"{thumbnails}\" height=\"50\" width=\"50\">',			
                '</td>',

                '<td class="x-grid-col x-grid-cell">',
                '<div class="x-grid-cell-inner" unselectable="on">{filename}<br><span>{fileSize}<br>{author}<br>{date}</span></div>',
                '</td>',
                '</tr>',
                '</tbody>',
                '</table>',
                '</td>'].join('')

            }
        }),
        {
            ftype: 'grouping',
            groupHeaderTpl: '{name} ({rows.length} Item{[values.rows.length > 1 ? "s" : ""]})',
            disabled: false
        }];
        config.tbar= [{},'->', {
        xtype: 'switchbuttonsegment',
        activeItem: 1,
        scope: this,
        items: [{
            tooltip: 'Details',
            viewMode: 'default',
            iconCls: 'icon-default'
        }, {
            tooltip: 'Tiles',
            viewMode: 'tileIcons',
            iconCls: 'icon-tile'
        }, {
            tooltip: 'Icons',
            viewMode: 'mediumIcons',
            iconCls: 'icon-medium'
        }],
        listeners: {
            change: function(btn, item)
            {
                btn.up().up().up().features[0].setView(btn.viewMode);		
            },
            scope: this
        }
    }
    ];
    return(config);
    },

    onGridcolumnAfterRender: function(component, eOpts) {
        if (Ext.getStore("AllLanguagesStore3").getRange().length==1){
            component.hide();
        }
    }

});