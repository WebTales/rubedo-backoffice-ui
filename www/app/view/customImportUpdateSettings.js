/*
 * File: app/view/customImportUpdateSettings.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.customImportUpdateSettings', {
    extend: 'Ext.container.Container',
    alias: 'widget.customImportUpdateSettings',

    requires: [
        'Ext.grid.Panel',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.form.FieldSet'
    ],

    flex: 3,
    id: 'customImportUpdateSettings',

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    title: '',
                    forceFit: true,
                    store: 'NotInportFieldsStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'name',
                            text: 'Detected fields'
                        }
                    ],
                    viewConfig: {
                        markDirty: false
                    }
                },
                {
                    xtype: 'form',
                    flex: 3,
                    bodyPadding: 10,
                    title: 'Field mapping',
                    items: [
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            fieldLabel: 'Content type'
                        },
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            fieldLabel: 'Unique key field'
                        },
                        {
                            xtype: 'fieldset',
                            title: 'Content type fields'
                        },
                        {
                            xtype: 'fieldset',
                            title: 'Taxonomy fields'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});