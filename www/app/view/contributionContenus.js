/*
 * File: app/view/contributionContenus.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.contributionContenus', {
    extend: 'Ext.window.Window',
    alias: 'widget.contributionContenus',

    requires: [
        'Rubedo.view.menuContenusContext',
        'Ext.panel.Tool',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.Img',
        'Ext.XTemplate',
        'Ext.container.ButtonGroup',
        'Ext.toolbar.Fill',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Column',
        'Ext.selection.RowModel',
        'Ext.grid.feature.Grouping'
    ],

    favoriteIcon: 'folder.png',
    localiserId: 'contentWindow',
    height: 578,
    id: 'contributionContenus',
    width: 951,
    constrainHeader: true,
    iconCls: 'content-icon',
    title: 'Contenus',

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            tools: [
                {
                    xtype: 'tool',
                    itemId: 'windowMinimize',
                    type: 'minimize'
                },
                {
                    xtype: 'tool',
                    itemId: 'windowMaximize',
                    type: 'maximize'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'top',
                    height: 30,
                    itemId: 'filArianne',
                    items: [
                        {
                            xtype: 'button',
                            localiserId: 'contentsLaunchBtn',
                            itemId: 'origine',
                            iconCls: 'content-icon',
                            text: 'Contenus'
                        }
                    ]
                },
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'bottom',
                    height: 50,
                    itemId: 'barreMeta',
                    items: [
                        {
                            xtype: 'image',
                            height: 45,
                            itemId: 'imageBarreMeta',
                            width: 48,
                            listeners: {
                                render: {
                                    fn: me.onImageRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'container',
                            itemId: 'boiteBarreMeta',
                            margin: '0 0 0 20',
                            tpl: [
                                '{customMeta}'
                            ]
                        }
                    ]
                },
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'top',
                    height: 86,
                    itemId: 'contextBar',
                    items: [
                        {
                            xtype: 'button',
                            ACL: 'write.ui.contents',
                            localiserId: 'addBtn',
                            disabled: true,
                            id: 'boutonAjouterContenu',
                            iconAlign: 'top',
                            iconCls: 'add_big',
                            scale: 'large',
                            text: 'Ajouter'
                        },
                        {
                            xtype: 'button',
                            ACL: 'write.ui.contents',
                            localiserId: 'editBtn',
                            disabled: true,
                            id: 'boutonModifierContenu',
                            iconAlign: 'top',
                            iconCls: 'pencil_big',
                            scale: 'large',
                            text: 'Modifier'
                        },
                        {
                            xtype: 'button',
                            ACL: 'write.ui.contents',
                            localiserId: 'removeBtn',
                            disabled: true,
                            id: 'boutonSupprimerContenu',
                            iconAlign: 'top',
                            iconCls: 'remove_big',
                            scale: 'large',
                            text: 'Supprimer'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                Ext.widget("contentsExportWindow").show();
                            },
                            disabled: true,
                            id: 'contentsExportBtn',
                            iconAlign: 'top',
                            iconCls: 'database_down_big',
                            scale: 'large',
                            text: 'Export'
                        },
                        {
                            xtype: 'buttongroup',
                            localiserId: 'clipboardGroup',
                            disabled: true,
                            headerPosition: 'bottom',
                            title: 'Presse-papiers',
                            columns: 4,
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    ACL: 'write.ui.contents',
                                    localiserId: 'duplicateBtn',
                                    disabled: true,
                                    id: 'boutonCopierContenus',
                                    iconAlign: 'top',
                                    iconCls: 'applications_big',
                                    scale: 'large',
                                    text: 'Copier'
                                },
                                {
                                    xtype: 'button',
                                    disabled: true,
                                    hidden: true,
                                    id: 'ajoutPanierContenus',
                                    iconAlign: 'top',
                                    iconCls: 'shopping_cart_add_big',
                                    scale: 'large',
                                    text: 'Ajouter au panier'
                                },
                                {
                                    xtype: 'button',
                                    localiserId: 'shortcutBtn',
                                    itemId: 'boutonCreerRaccourci',
                                    iconAlign: 'top',
                                    iconCls: 'favorite_add_big',
                                    scale: 'large',
                                    text: 'Ajouter aux favoris'
                                }
                            ]
                        },
                        {
                            xtype: 'buttongroup',
                            ACL: 'write.ui.contents',
                            localiserId: 'workflowGroup',
                            disabled: true,
                            id: 'contribWorkflowBox',
                            headerPosition: 'bottom',
                            title: 'Workflow',
                            columns: 5,
                            items: [
                                {
                                    xtype: 'button',
                                    ACL: 'write.ui.contents.pendingToPublished',
                                    localiserId: 'publishBtn',
                                    id: 'contentAcceptPublishBtn',
                                    iconAlign: 'top',
                                    iconCls: 'accept_big',
                                    scale: 'large',
                                    text: 'Publier'
                                },
                                {
                                    xtype: 'button',
                                    ACL: 'write.ui.contents.draftToPending',
                                    localiserId: 'submitBtn',
                                    id: 'contentSubmitValBtn',
                                    iconAlign: 'top',
                                    iconCls: 'validation_submit_big',
                                    scale: 'large',
                                    text: 'Soumettre'
                                },
                                {
                                    xtype: 'button',
                                    ACL: 'write.ui.contents.pendingToDraft',
                                    localiserId: 'refuseBtn',
                                    id: 'contentRefuseBtn',
                                    iconAlign: 'top',
                                    iconCls: 'nonS',
                                    scale: 'large',
                                    text: 'Refuser'
                                },
                                {
                                    xtype: 'button',
                                    ACL: 'write.ui.contents.putOnline',
                                    localiserId: 'onlineBtn',
                                    id: 'contentOnlineBtn',
                                    iconAlign: 'top',
                                    iconCls: 'online_big',
                                    scale: 'large',
                                    text: 'Mettre en ligne'
                                },
                                {
                                    xtype: 'button',
                                    ACL: 'write.ui.contents.putOffline',
                                    localiserId: 'offlineBtn',
                                    id: 'contentOfflineBtn',
                                    iconAlign: 'top',
                                    iconCls: 'offline_big',
                                    scale: 'large',
                                    text: 'Mettre hors ligne'
                                }
                            ]
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            RApplication: 'contents',
                            itemId: 'RHelpBtn',
                            iconCls: 'info_big',
                            scale: 'large',
                            text: ''
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'gridpanel',
                    id: 'TypesContenusGrid',
                    width: 150,
                    autoScroll: true,
                    resizable: true,
                    resizeHandles: 'e',
                    title: '',
                    store: 'TypesContenusNDepDataJson',
                    viewConfig: {
                        id: 'TypesContenusGridView'
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var nValue=value;
                                if ((!Ext.isEmpty(record.get("productType")))&&(record.get("productType")!="none")){
                                    nValue=nValue+" : "+record.get("productType");
                                }
                                var returner = nValue;

                                if ((!Ext.isEmpty(record.get("productType")))&&(record.get("productType")!="none")){
                                    return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/shopping_cart.png"> ' + returner );
                                }
                                else if (record.data.dependant===false) {return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/folder.png"> ' + returner );}
                                else {return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/attach_document.png"> ' + returner );}

                            },
                            localiserId: 'typeColumn',
                            width: 672,
                            dataIndex: 'type',
                            text: 'Type',
                            flex: 1
                        }
                    ],
                    selModel: Ext.create('Ext.selection.RowModel', {

                    }),
                    features: [
                        {
                            ftype: 'grouping',
                            groupHeaderTpl: Ext.create('Ext.XTemplate', 
                                '{name:this.formatName}',
                                {
                                    formatName: function(name) {
                                        if (name!="none"){
                                            return(Rubedo.RubedoAutomatedElementsLoc.productTypeText);
                                        } else {
                                            return(Rubedo.RubedoAutomatedElementsLoc.contentTypeText);
                                        }
                                    }
                                }
                            )
                        }
                    ]
                },
                {
                    xtype: 'menuContenusContext',
                    flex: 1
                }
            ]
        });

        me.callParent(arguments);
    },

    onImageRender: function(component, eOpts) {
        component.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_full.png');
    }

});