/*
 * File: app/view/RECField.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.RECField', {
    extend: 'Ext.form.field.Hidden',
    alias: 'widget.RECField',

    queryMode: true,
    geoQueryMode: false,
    fieldLabel: 'Label',
    labelSeparator: ' ',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            listeners: {
                render: {
                    fn: me.onHiddenfieldRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onHiddenfieldRender: function(component, eOpts) {
        Ext.Ajax.request({
            url: 'content-types/find-one',
            method:"GET",
            params: {
                id: component.usedCT
            },
            success: function(response){
                var result = Ext.JSON.decode(response.responseText);
                component.structureFields=result.data.fields;
            }
        });
        var myComponent = Ext.widget("ACEFieldComponent");
        myComponent.on("afterrender",function(){
            myComponent.getEl().on("click",function(){

                component.getEl().dom.click();
            });
        });
        myComponent.setFieldLabel(component.fieldLabel+" ");
        component.on("change", function(a,newValue){
            if (Ext.isEmpty(newValue)){
                myComponent.getComponent("addBtn").show();
                myComponent.getComponent("editBtn").hide();
                myComponent.getComponent("removeBtn").hide();
            } else {
                myComponent.getComponent("addBtn").hide();
                myComponent.getComponent("editBtn").show();
                myComponent.getComponent("removeBtn").show();
            }
        });
        myComponent.getComponent("removeBtn").on("click", function(){
            component.setValue(null);
        });
        myComponent.getComponent("addBtn").on("click", function(){
            var myEditor = Ext.widget("RECWindow");
            myEditor.targetedId=component.getId();
            myEditor.initialValue=component.getValue();
            myEditor.structureFields=component.structureFields;
            myEditor.setTitle(component.fieldLabel);
            myEditor.show();

        });

        myComponent.getComponent("editBtn").on("click", function(){
            var myEditor = Ext.widget("RECWindow");
            myEditor.targetedId=component.getId();
            myEditor.initialValue=component.getValue();
            myEditor.structureFields=component.structureFields;
            myEditor.setTitle(component.fieldLabel);
            myEditor.show();


        });
        component.up().add(myComponent);
        component.fireEvent("change",component, component.getValue());

    },

    setValue: function(value) {
        var me=this;
        me.value=value;
        me.fireEvent("change",me,value);
    },

    getValue: function() {
        return(this.value);
    },

    getSubmitValue: function() {
        return(this.value);
    }

});