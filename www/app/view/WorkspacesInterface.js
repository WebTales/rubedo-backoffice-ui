/*
 * File: app/view/WorkspacesInterface.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.WorkspacesInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.WorkspacesInterface',

    requires: [
        'Rubedo.view.MyTool16',
        'Rubedo.view.MyTool17'
    ],

    height: 456,
    id: 'WorkspacesInterface',
    width: 723,
    layout: {
        align: 'stretch',
        type: 'hbox'
    },
    iconCls: 'user',
    title: 'Workspaces',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            id: 'workspaceAdd',
                            iconAlign: 'top',
                            iconCls: 'add_big',
                            scale: 'large',
                            text: 'Ajouter',
                            listeners: {
                                click: {
                                    fn: me.onWorkspaceAddClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            id: 'workspaceRemove',
                            iconAlign: 'top',
                            iconCls: 'remove_big',
                            scale: 'large',
                            text: 'Supprimer',
                            listeners: {
                                click: {
                                    fn: me.onWorkspaceRemoveClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            id: 'workspaceSave',
                            iconAlign: 'top',
                            iconCls: 'floppy_disc_big',
                            scale: 'large',
                            text: 'Enregistrer',
                            listeners: {
                                click: {
                                    fn: me.onWorkspaceSaveClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'info_big',
                            scale: 'large',
                            text: ''
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'gridpanel',
                    id: 'workspacesGrid',
                    width: 200,
                    title: '',
                    forceFit: true,
                    store: 'WorkspacesStore',
                    viewConfig: {

                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'text',
                            text: 'Nom'
                        }
                    ],
                    listeners: {
                        selectionchange: {
                            fn: me.onWorkspacesGridSelectionChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'form',
                    flex: 1,
                    id: 'workspacesMainForm',
                    bodyPadding: 10,
                    title: 'Propriétés',
                    items: [
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            name: 'text',
                            fieldLabel: 'Nom',
                            allowBlank: false
                        }
                    ]
                }
            ],
            listeners: {
                render: {
                    fn: me.onWorkspacesInterfaceRender,
                    scope: me
                },
                beforeclose: {
                    fn: me.onWorkspacesInterfaceBeforeClose,
                    scope: me
                }
            },
            tools: [
                {
                    xtype: 'mytool16'
                },
                {
                    xtype: 'mytool17'
                }
            ]
        });

        me.callParent(arguments);
    },

    onWorkspaceAddClick: function(button, e, options) {
        Ext.widget("newWorkspaceWindow").show();
    },

    onWorkspaceRemoveClick: function(button, e, options) {
        var delCon = Ext.widget('delConfirmZ');
        delCon.show();
        Ext.getCmp('delConfirmZOui').on('click', function() { 
            Ext.getStore("WorkspacesStore").remove(Ext.getCmp("workspacesGrid").getSelectionModel().getLastSelected());
            Ext.getCmp('delConfirmZ').close();
        });  
    },

    onWorkspaceSaveClick: function(button, e, options) {
        var target = Ext.getCmp("workspacesGrid").getSelectionModel().getLastSelected();
        var form = Ext.getCmp("workspacesMainForm").getForm();
        if (form.isValid()){
            target.set(form.getValues());
        }  
    },

    onWorkspacesGridSelectionChange: function(tablepanel, selections, options) {
        if (Ext.isEmpty(selections)){
            Ext.getCmp("workspaceRemove").disable();
            Ext.getCmp("workspaceSave").disable();
        } else {
            Ext.getCmp("workspaceRemove").enable();
            Ext.getCmp("workspaceSave").enable();
        }
    },

    onWorkspacesInterfaceRender: function(abstractcomponent, options) {
        Ext.getStore("WorkspacesStore").load();
    },

    onWorkspacesInterfaceBeforeClose: function(panel, options) {
        Ext.getStore("WorkspacesStore").removeAll();
    }

});