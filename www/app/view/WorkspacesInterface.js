/*
 * File: app/view/WorkspacesInterface.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.WorkspacesInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.WorkspacesInterface',

    requires: [
        'Rubedo.view.DLSToolbar',
        'Rubedo.view.MyTool16',
        'Rubedo.view.MyTool17'
    ],

    localiserId: 'workspaceWindow',
    height: 456,
    id: 'WorkspacesInterface',
    width: 723,
    layout: {
        align: 'stretch',
        type: 'hbox'
    },
    iconCls: 'user',
    title: 'Espaces de travail',
    constrainHeader: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            ACL: 'write.ui.workspaces',
                            localiserId: 'addBtn',
                            id: 'workspaceAdd',
                            iconAlign: 'top',
                            iconCls: 'add_big',
                            scale: 'large',
                            text: 'Ajouter'
                        },
                        {
                            xtype: 'button',
                            ACL: 'write.ui.workspaces',
                            localiserId: 'removeBtn',
                            disabled: true,
                            id: 'workspaceRemove',
                            iconAlign: 'top',
                            iconCls: 'remove_big',
                            scale: 'large',
                            text: 'Supprimer'
                        },
                        {
                            xtype: 'button',
                            ACL: 'write.ui.workspaces',
                            localiserId: 'saveBtn',
                            disabled: true,
                            id: 'workspaceSave',
                            iconAlign: 'top',
                            iconCls: 'floppy_disc_big',
                            scale: 'large',
                            text: 'Enregistrer',
                            listeners: {
                                afterrender: {
                                    fn: me.onWorkspaceSaveAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            RApplication: 'workspaces',
                            itemId: 'RHelpBtn',
                            iconCls: 'info_big',
                            scale: 'large',
                            text: ''
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'gridpanel',
                    id: 'workspacesGrid',
                    width: 200,
                    title: '',
                    forceFit: true,
                    store: 'WorkspacesStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (record.get("readOnly")) {
                                    return("<i style=\"color:#777;\">"+value+"</i>");
                                } else {
                                    return(value);
                                }
                            },
                            localiserId: 'nameColumn',
                            dataIndex: 'text',
                            text: 'Nom'
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    localiserId: 'propsPanel',
                    flex: 1,
                    disabled: true,
                    layout: {
                        type: 'card'
                    },
                    title: 'Propriétés',
                    dockedItems: [
                        {
                            xtype: 'DLSToolbar',
                            replicatorEntity: 'workspacesReplicator',
                            id: 'workspacesDLSToolbar',
                            dock: 'top'
                        }
                    ],
                    items: [
                        {
                            xtype: 'form',
                            id: 'workspacesMainForm',
                            itemId: 'mainLocItem',
                            bodyPadding: 10,
                            title: '',
                            items: [
                                {
                                    xtype: 'textfield',
                                    localiserId: 'nameField',
                                    anchor: '100%',
                                    fieldLabel: 'Nom',
                                    name: 'text',
                                    allowBlank: false
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                render: {
                    fn: me.onWorkspacesInterfaceRender,
                    scope: me
                },
                beforeclose: {
                    fn: me.onWorkspacesInterfaceBeforeClose,
                    scope: me
                }
            },
            tools: [
                {
                    xtype: 'mytool16'
                },
                {
                    xtype: 'mytool17'
                }
            ]
        });

        me.callParent(arguments);
    },

    onWorkspaceSaveAfterRender: function(component, eOpts) {
        component.findParentByType("window").getEl().addKeyListener({key:"s", ctrl:true}, function(e,t){
        if (!component.disabled){
            component.fireEvent("click", component);
            t.stopEvent();
        }
    });
    },

    onWorkspacesInterfaceRender: function(component, eOpts) {
        Ext.getStore("WorkspacesStore").load();
    },

    onWorkspacesInterfaceBeforeClose: function(panel, eOpts) {
        Ext.getStore("WorkspacesStore").removeAll();
    }

});