/*
 * File: app/view/FTDComboField.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.FTDComboField', {
    extend: 'Ext.form.field.ComboBox',
    alias: 'widget.FTDComboField',

    fieldLabel: 'Label',
    displayField: 'name',
    forceSelection: true,
    multiSelect: true,
    queryMode: 'local',
    store: 'FacetsToDisplayStore',
    valueField: 'id',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            listeners: {
                change: {
                    fn: me.onComboboxChange,
                    scope: me
                },
                render: {
                    fn: me.onComboboxRender,
                    scope: me
                },
                beforedestroy: {
                    fn: me.onComboboxBeforeDestroy,
                    scope: me
                }
            }
        });

        me.processFTDComboField(me);
        me.callParent(arguments);
    },

    processFTDComboField: function(config) {
        config.plugins=[Ext.create("Ext.ux.form.field.ClearButton")];
        return config;
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        if ((!Ext.isEmpty(newValue))&&(newValue.length>1)&&(Ext.Array.contains(newValue,"all"))){
            field.setValue(["all"]);
        }
    },

    onComboboxRender: function(component, eOpts) {
        component.getStore().onlyUserFacets=component.onlyUserFacets;
        component.getStore().load();
    },

    onComboboxBeforeDestroy: function(component, eOpts) {
        component.getStore().removeAll();
    }

});