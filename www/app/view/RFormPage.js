/*
 * File: app/view/RFormPage.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.RFormPage', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.RFormPage',

    margin: '0 0 10 0',
    minHeight: 80,
    bodyBorder: false,
    bodyPadding: 10,
    title: 'My Panel',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            listeners: {
                afterrender: {
                    fn: me.onPanelAfterRender,
                    scope: me
                }
            },
            dockedItems: [
                {
                    xtype: 'container',
                    dock: 'right',
                    hidden: true,
                    hideMode: 'visibility',
                    itemId: 'editBar',
                    width: 20,
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            localiserId: 'formFieldConfiguratorBtn',
                            itemId: 'formFieldCofiguratorBtn',
                            iconCls: 'edit',
                            text: '',
                            tooltip: 'Paramètres',
                            tooltipType: 'title'
                        },
                        {
                            xtype: 'button',
                            localiserId: 'formFieldConditionBtn',
                            itemId: 'formFieldConditionsBtn',
                            margin: '10 0 0 0',
                            iconCls: 'cond_small',
                            text: '',
                            tooltip: 'Condition d\'affichage',
                            tooltipType: 'title'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onPanelAfterRender: function(component, eOpts) {
        this.sync();
    },

    sync: function() {
        var me=this;
        var plusText = "";
        if (!Ext.isEmpty(me.itemConfig.conditionals)){
            var filler="";
            try{
                filler=Ext.getCmp(me.itemConfig.conditionals[0].field).itemConfig.qNb+" "+me.itemConfig.conditionals[0].operator+" ";
                if (Ext.isEmpty(me.itemConfig.conditionals[0].value)) {
                    filler=filler+" non renseigné";
                } else if ((Ext.getCmp(me.itemConfig.conditionals[0].field).itemConfig.fieldType=="radiogroup")||(Ext.getCmp(me.itemConfig.conditionals[0].field).itemConfig.fieldType=="checkboxgroup")) {
                    if (Ext.isObject(me.itemConfig.conditionals[0].value)){
                        if (Ext.isArray(me.itemConfig.conditionals[0].value.value)){
                            var theGoodOption = "";
                            Ext.Array.forEach(me.itemConfig.conditionals[0].value.value, function(value, index){
                                var interMedOption=" "+Rubedo.RubedoAutomatedElementsLoc.notMentionedText;

                                Ext.Array.forEach((Ext.getCmp(me.itemConfig.conditionals[0].field).itemConfig.fieldConfig.items), function(possible){
                                    if (possible.inputValue==value){
                                        interMedOption=possible.boxLabel;
                                    }
                                });
                                if (index > 0){
                                    interMedOption=Rubedo.RubedoAutomatedElementsLoc.orText+" "+interMedOption;
                                }
                                theGoodOption=theGoodOption+interMedOption;
                            });
                            filler=filler+theGoodOption;

                        } else {
                            var theGoodOption = " "+Rubedo.RubedoAutomatedElementsLoc.notMentionedText;
                            Ext.Array.forEach((Ext.getCmp(me.itemConfig.conditionals[0].field).itemConfig.fieldConfig.items), function(possible){
                                if (possible.inputValue==me.itemConfig.conditionals[0].value.value){
                                    theGoodOption=possible.boxLabel;
                                }
                            });
                            filler = filler+theGoodOption;

                        }}
                    } else if (Ext.getCmp(me.itemConfig.conditionals[0].field).itemConfig.fieldType=="datefield"){
                        var failDate=Ext.Date.parse(me.itemConfig.conditionals[0].value,"U");

                        filler=filler+Ext.Date.format(failDate, "d/m/y");
                    }else {
                        filler=filler+me.itemConfig.conditionals[0].value;
                    }
                }catch(err){console.log("error geting condition to display");}
                    plusText="<i style=\"color:"+MyPrefData.themeColor+";\"> ("+Rubedo.RubedoAutomatedElementsLoc.showOnlyIfText+" "+filler+" )</i>";
                }
                this.setTitle(this.itemConfig.label+" "+plusText);
    }

});