/*
 * File: app/view/stockInterface.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.stockInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.stockInterface',

    requires: [
        'Rubedo.view.MyTool16',
        'Rubedo.view.MyTool17'
    ],

    height: 456,
    id: 'stockInterface',
    width: 1039,
    layout: {
        align: 'stretch',
        type: 'hbox'
    },
    constrainHeader: true,
    iconCls: 'package',
    title: 'Stock',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            listeners: {
                render: {
                    fn: me.onWorkspacesInterfaceRender,
                    scope: me
                },
                beforeclose: {
                    fn: me.onWorkspacesInterfaceBeforeClose,
                    scope: me
                }
            },
            tools: [
                {
                    xtype: 'mytool16'
                },
                {
                    xtype: 'mytool17'
                }
            ],
            items: [
                {
                    xtype: 'gridpanel',
                    width: 200,
                    title: '',
                    forceFit: true,
                    store: 'ProductTypesForStock',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'type',
                            text: 'Product type '
                        }
                    ],
                    listeners: {
                        selectionchange: {
                            fn: me.onGridpanelSelectionChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    id: 'mainStockGrid',
                    title: 'Product variations',
                    forceFit: true,
                    store: 'InitialStockStore',
                    plugins: [
                        Ext.create('Ext.grid.plugin.BufferedRenderer', {

                        })
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'refresh',
                                    text: 'Refersh',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbfill'
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'add',
                                    text: 'Add stock'
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'close',
                                    text: 'Remove stock'
                                },
                                {
                                    xtype: 'button',
                                    width: 100,
                                    iconCls: 'content-icon',
                                    text: 'View product'
                                }
                            ]
                        }
                    ],
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'title',
                            text: 'Title'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'price',
                            text: 'Price'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'stock',
                            text: 'Stock'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'sku',
                            text: 'Sku'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onWorkspacesInterfaceRender: function(component, eOpts) {
        Ext.getStore("ProductTypesForStock").load();
    },

    onWorkspacesInterfaceBeforeClose: function(panel, eOpts) {
        Ext.getStore("ProductTypesForStock").removeAll();
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)) {
            Ext.getCmp("mainStockGrid").getStore().removeAll();
        } else {
            Ext.getCmp("mainStockGrid").getStore().removeAll();
            Ext.getCmp("mainStockGrid").getStore().getProxy().extraParams["type-id"]=selected[0].get("id");
            Ext.getCmp("mainStockGrid").getStore().load();
        }

    },

    onButtonClick: function(button, e, eOpts) {
        button.up().up().getStore().load();
    }

});