/*
 * File: app/view/DBExportInterface.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.DBExportInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.DBExportInterface',

    requires: [
        'Rubedo.view.MyTool16',
        'Rubedo.view.MyTool17',
        'Ext.panel.Tool',
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Checkbox',
        'Ext.button.Button'
    ],

    id: 'DBExportInterface',
    width: 480,
    constrainHeader: true,
    iconCls: 'database_down_small',
    title: 'Dump',

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            tools: [
                {
                    xtype: 'mytool16'
                },
                {
                    xtype: 'mytool17'
                }
            ],
            items: [
                {
                    xtype: 'form',
                    flex: 1,
                    bodyPadding: 10,
                    title: '',
                    items: [
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            fieldLabel: 'Collections',
                            name: 'collection',
                            allowBlank: false,
                            allowOnlyWhitespace: false,
                            editable: false,
                            forceSelection: true,
                            multiSelect: true,
                            store: [
                                'all',
                                'Blocks',
                                'ContentTypes',
                                'Contents',
                                'CustomThemes',
                                'Dam',
                                'DamTypes',
                                'Directories',
                                'Groups',
                                'Languages',
                                'Masks',
                                'Pages',
                                'Queries',
                                'ReusableElements',
                                'Shippers',
                                'Sites',
                                'Taxes',
                                'Taxonomy',
                                'TaxonomyTerms',
                                'Themes',
                                'UserTypes',
                                'Users',
                                'Workspaces'
                            ],
                            listeners: {
                                change: {
                                    fn: me.onComboboxChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'checkboxfield',
                            anchor: '100%',
                            fieldLabel: 'Dump files',
                            name: 'dumpFiles',
                            boxLabel: '',
                            inputValue: 'true'
                        },
                        {
                            xtype: 'button',
                            anchor: '100%',
                            text: 'Download as zip',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        if (newValue&&Ext.Array.contains(newValue,"all")&&newValue.length>1){
            field.setValue(["all"]);
        }
    },

    onButtonClick: function(button, e, eOpts) {
        var form=button.up().getForm();
        if (form.isValid()){
            form.submit({
                url:"/backoffice/dump",
                success: function(form, action) {
               Ext.Msg.alert('Success', action.result.msg);
            },
            failure: function(form, action) {
                switch (action.failureType) {
                    case Ext.form.action.Action.CLIENT_INVALID:
                        Ext.Msg.alert('Error', 'Form fields may not be submitted with invalid values');
                        break;
                    case Ext.form.action.Action.CONNECT_FAILURE:
                        Ext.Msg.alert('Error', 'Ajax communication failed');
                        break;
                    case Ext.form.action.Action.SERVER_INVALID:
                       Ext.Msg.alert('Error', action.result.msg);
               }
            }
            });
        }
    }

});