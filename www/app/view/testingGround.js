/*
 * File: app/view/testingGround.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.testingGround', {
    extend: 'Ext.window.Window',
    alias: 'widget.testingGround',

    requires: [
        'Rubedo.view.queryBuilderField'
    ],

    height: 450,
    id: 'testingGround',
    width: 959,
    layout: {
        type: 'fit'
    },
    title: 'Testing ground',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    overflowY: 'scroll',
                    bodyPadding: 20,
                    title: 'My Form',
                    items: [
                        {
                            xtype: 'fieldcontainer',
                            fieldLabel: 'Label',
                            items: [
                                {
                                    xtype: 'panel',
                                    frame: true,
                                    height: 200,
                                    itemId: 'advanceTreeFieldMain',
                                    padding: 0,
                                    overflowY: 'auto',
                                    layout: {
                                        type: 'fit'
                                    },
                                    collapsed: true,
                                    collapsible: true,
                                    title: 'Open to  edit',
                                    listeners: {
                                        render: {
                                            fn: me.onAdvanceTreeFieldMainRender,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'textareafield',
                            anchor: '100%',
                            fieldLabel: 'Label'
                        },
                        {
                            xtype: 'queryBuilderField'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onAdvanceTreeFieldMainRender: function(abstractcomponent, options) {
        var myStore = Ext.create("Ext.data.TreeStore",{
            isOptimised: true,
            usedCollection: 'Pages',
            autoLoad: false,
            autoSync: false,
            model: 'Rubedo.model.taxonomyTermModel',
            proxy: {
                type: 'ajax',
                api: {                    
                    read: 'taxonomy-terms/navigation-tree'
                },
                reader: {
                    type: 'json',
                    getResponseData: function(response) {
                        var data, error;

                        try {
                            data = Ext.decode(response.responseText);
                            if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                            return this.readRecords(data);
                        } catch (ex) {
                            error = new Ext.data.ResultSet({
                                total  : 0,
                                count  : 0,
                                records: [],
                                success: false,
                                message: ex.message
                            });

                            this.fireEvent('exception', this, response, error);
                            console.log(ex);

                            Ext.Logger.warn('Unable to parse the JSON returned by the server');

                            return error;
                        }
                    },
                    messageProperty: 'message'
                }
            },
            sorters: {
                property: 'orderValue'
            }
        });
        abstractcomponent.add(Ext.widget("selectorTreeForField", {store:myStore, id:"zeTest"}));
        myStore.load();
    }

});