/*
 * File: app/view/EditorialInterface.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.EditorialInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.EditorialInterface',

    requires: [
        'Rubedo.view.MyTool16',
        'Rubedo.view.MyTool17',
        'Ext.panel.Tool',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Boolean',
        'Ext.grid.column.Date',
        'Ext.toolbar.Paging'
    ],

    localiserId: 'EditorialInterface',
    ACL: 'write.ui.contents',
    height: 533,
    id: 'EditorialInterface',
    width: 1119,
    constrainHeader: true,
    iconCls: 'content-icon',
    title: 'Editorial dashboard',

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            tools: [
                {
                    xtype: 'mytool16'
                },
                {
                    xtype: 'mytool17'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'top'
                }
            ],
            items: [
                {
                    xtype: 'panel',
                    width: 200,
                    title: 'Filters'
                },
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    title: 'Contents',
                    forceFit: false,
                    store: 'ContentsEditorial',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'text',
                            text: 'Text',
                            flex: 2
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                try{var myFlagCode=Ext.getStore("AllLanguagesStore3").query("locale",record.get("locale"),false,false,true).items[0].get("flagCode");}
                                catch(err){var myFlagCode="_unknown";}
                                var returner =" <img src=\"/assets/flags/16/"+myFlagCode+".png\"> ";
                                if(!Ext.isEmpty(value)){
                                    Ext.Object.each(value, function(key, value, myself) {
                                        if (key!=record.get("locale")){
                                            try{var myFlagCode2=Ext.getStore("AllLanguagesStore3").query("locale",key,false,false,true).items[0].get("flagCode");}
                                            catch(err){var myFlagCode2="_unknown";}
                                            if (myFlagCode2!="_unknown"){
                                                returner=returner+" <img src=\"/assets/flags/16/"+myFlagCode2+".png\"> ";
                                            }
                                        }
                                    });
                                }
                                return(returner);
                            },
                            localiserId: 'languageCoumn',
                            dataIndex: 'i18n',
                            text: 'Languages',
                            flex: 1,
                            listeners: {
                                afterrender: {
                                    fn: me.onGridcolumnAfterRender1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return(value.fullName);
                            },
                            dataIndex: 'createUser',
                            text: 'Author',
                            flex: 1
                        },
                        me.processEtat({
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (value=="published") {
                                    return(Rubedo.RubedoAutomatedElementsLoc.publishedText);
                                } else if (value=="pending") {
                                    return(Rubedo.RubedoAutomatedElementsLoc.pendingText);
                                } else if (value=="draft") {
                                    return(Rubedo.RubedoAutomatedElementsLoc.draftText);
                                } else if (value=="refused") {
                                    return(Rubedo.RubedoAutomatedElementsLoc.refusedText);
                                }
                            },
                            localiserId: 'stateColumn',
                            dataIndex: 'status',
                            text: 'Etat',
                            flex: 1
                        }),
                        me.processOnline({
                            xtype: 'booleancolumn',
                            dataIndex: 'online',
                            text: 'Online',
                            flex: 0.5
                        }),
                        {
                            xtype: 'datecolumn',
                            dataIndex: 'lastUpdateTime',
                            text: 'Last update',
                            flex: 1,
                            format: 'j/m/Y'
                        },
                        {
                            xtype: 'datecolumn',
                            dataIndex: 'createTime',
                            text: 'Create',
                            flex: 1,
                            format: 'j/m/Y'
                        },
                        {
                            xtype: 'datecolumn',
                            dataIndex: 'startPublicationDate',
                            text: 'Start Publication',
                            flex: 1,
                            format: 'j/m/Y'
                        },
                        {
                            xtype: 'datecolumn',
                            dataIndex: 'endPublicationDate',
                            text: 'End Publication',
                            flex: 1,
                            format: 'j/m/Y'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'ContentsEditorial'
                        }
                    ],
                    listeners: {
                        itemdblclick: {
                            fn: me.onGridpanelItemDblClick,
                            scope: me
                        }
                    }
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onEditorialInterfaceAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    processEtat: function(config) {
        config.filter={
            type:"list",
            options: [
            ["draft", Rubedo.RubedoAutomatedElementsLoc.draftText],
            ["pending", Rubedo.RubedoAutomatedElementsLoc.pendingText],
            ["published", Rubedo.RubedoAutomatedElementsLoc.publishedText],
            ["refused", Rubedo.RubedoAutomatedElementsLoc.refusedText]
            ]
        };
        return config;
    },

    processOnline: function(config) {
        config.trueText=Rubedo.RubedoAutomatedElementsLoc.yesText;
        config.falseText=Rubedo.RubedoAutomatedElementsLoc.noText;
        return config;
    },

    onGridcolumnAfterRender1: function(component, eOpts) {
        if (Ext.getStore("AllLanguagesStore3").getRange().length==1){
            component.hide();
        }
    },

    onGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Rubedo.controller.ContributionContenusController.prototype.unitaryContentEdit(record.get("id"));
    },

    onEditorialInterfaceAfterRender: function(component, eOpts) {
        Ext.getStore("ContentsEditorial").loadPage(1);
    }

});