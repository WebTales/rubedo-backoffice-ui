/*
 * File: app/view/experimentalGrid.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.experimentalGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.experimentalGrid',

    numberOfOptions: '5',
    id: 'experimentalGrid',
    autoScroll: true,
    title: '',
    forceFit: true,
    store: 'experimentalStore',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            initialData: [
                
            ],
            viewConfig: {
                markDirty: false
            },
            columns: [
                {
                    xtype: 'numbercolumn',
                    dataIndex: 'field1',
                    text: 'Souce 1',
                    flex: 1,
                    format: '0,000.0'
                },
                {
                    xtype: 'numbercolumn',
                    dataIndex: 'field2',
                    text: 'Source 2',
                    flex: 1
                },
                {
                    xtype: 'numbercolumn',
                    dataIndex: 'field3',
                    text: 'Source 1',
                    flex: 1
                },
                {
                    xtype: 'numbercolumn',
                    dataIndex: 'field4',
                    text: 'Source 2',
                    flex: 1
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    id: 'experimentalGridCompanionBar',
                    listeners: {
                        render: {
                            fn: me.onExperimentalGridCompanionBarRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'button',
                            handler: function(button, event) {
                                button.up().up().getStore().add({});
                            },
                            text: 'Nouvelle ligne'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, event) {
                                button.up().up().getStore().remove(button.up().up().getSelectionModel().getLastSelected());
                            },
                            disabled: true,
                            id: 'experimentalGridRowDeleter',
                            text: 'Supprimer la ligne'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, event) {
                                button.up().up().getStore().removeAll();
                            },
                            text: 'Remise Ã  zero'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, event) {
                                var target=button.up().up().up().targetedFieldId;
                                Ext.getCmp(target).setValue(Ext.JSON.encode(Ext.Array.pluck(button.up().up().getStore().getRange(),"data")));
                                button.up().up().up().close();
                            },
                            iconCls: 'ouiSpetit',
                            text: 'Enregistrer'
                        }
                    ]
                }
            ],
            listeners: {
                selectionchange: {
                    fn: me.onExperimentalGridSelectionChange,
                    scope: me
                }
            }
        });

        me.processExperimentalGrid(me);
        me.callParent(arguments);
    },

    processExperimentalGrid: function(config) {
        config.plugins=[Ext.create("Ext.ux.grid.DataDrop"),Ext.create('Ext.grid.plugin.CellEditing', {
            clicksToEdit: 2
        })];
        var options=config.numberOfOptions;
        var columnsArray=[ ];
        var fieldsArray=[ ];
        for (i=1;i<=options;i++){
            columnsArray.push({
                xtype: 'numbercolumn',
                dataIndex: 'option'+i+'source1',
                text: 'Souce 1',
                flex: 1,
                format: '0,000.0',
                editor: {
                    xtype: 'numberfield'
                }
            });
            columnsArray.push({
                xtype: 'numbercolumn',
                dataIndex: 'option'+i+'source2',
                text: 'Souce 2',
                flex: 1,
                format: '0,000.0',
                editor: {
                    xtype: 'numberfield'
                }
            });
            fieldsArray.push({
                name: 'option'+i+'source1',
                type:'float',
                convert: function(v, rec) {
                    if (Ext.isString(v)){
                        return(parseFloat(v.replace(",", ".")));
                    } else {
                        return(v);
                    }
                }
            });
            fieldsArray.push({
                name: 'option'+i+'source2',
                type:'float',
                convert: function(v, rec) {
                    if (Ext.isString(v)){
                        return(parseFloat(v.replace(",", ".")));
                    } else {
                        return(v);
                    }
                }
            });
        }
        config.columns=columnsArray;
        var myStore=Ext.create('Ext.data.Store', {
            fields:fieldsArray,
            data:config.initialData
        });
        config.store=myStore;
        return config;
    },

    onExperimentalGridCompanionBarRender: function(component, eOpts) {
        var options=component.up().numberOfOptions;
        for (i=1;i<=options;i++){
            component.add({
                xtype: 'button',
                flex: 1,
                style: '{cursor:default !important;}',
                allowDepress: false,
                enableToggle: true,
                handleMouseEvents: false,
                pressed: true,
                text: 'Option '+i
            });
        }
    },

    onExperimentalGridSelectionChange: function(model, selected, eOpts) {
        if (Ext.isEmpty(selected)){
            Ext.getCmp("experimentalGridRowDeleter").disable();
        } else {
            Ext.getCmp("experimentalGridRowDeleter").enable();
        }
    }

});