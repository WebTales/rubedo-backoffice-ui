/*
 * File: app/view/MQA.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.MQA', {
    extend: 'Ext.window.Window',
    alias: 'widget.MQA',

    requires: [
        'Rubedo.view.MyToolbar56'
    ],

    height: 373,
    id: 'MQA',
    width: 469,
    layout: {
        type: 'card'
    },
    title: 'Assistant de requêtage sur médias',
    constrain: true,
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'mytoolbar56',
                    dock: 'bottom'
                }
            ],
            items: [
                {
                    xtype: 'form',
                    bodyPadding: 10,
                    title: 'Choix des types de médias',
                    items: [
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            id: 'DAMTypeWizCombo',
                            name: 'DAMTypes',
                            fieldLabel: 'Types de media',
                            allowBlank: false,
                            editable: false,
                            displayField: 'type',
                            forceSelection: true,
                            multiSelect: true,
                            store: 'MediaTypesFORDAMPicker',
                            valueField: 'id'
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    title: 'Taxonomie'
                },
                {
                    xtype: 'panel',
                    title: 'Règles de tri'
                }
            ],
            listeners: {
                render: {
                    fn: me.onMQARender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onMQARender: function(abstractcomponent, options) {
        Ext.getStore("MediaTypesFORDAMPicker").getProxy().extraParams.filter="[{\"property\":\"mainFileType\",\"value\":\""+abstractcomponent.allowedFileType+"\"}]";
        Ext.getStore("MediaTypesFORDAMPicker").on("load",function(a,records){
            if (records.length==1){
                Ext.getCmp("DAMTypeWizCombo").select(records[0]);
            }
        });
        Ext.getStore("MediaTypesFORDAMPicker").load();
    }

});