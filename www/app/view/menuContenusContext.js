/*
 * File: app/view/menuContenusContext.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.menuContenusContext', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.menuContenusContext',

    requires: [
        'Rubedo.view.override.menuContenusContext'
    ],

    id: 'ContenusGrid',
    title: '',
    store: 'ContenusDataJson',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        try{var myFlagCode=Ext.getStore("AllLanguagesStore3").query("locale",record.get("locale"),false,false,true).items[0].get("flagCode");}
                        catch(err){var myFlagCode="_unknown";}
                        var returner = value+" <img src=\"/assets/flags/16/"+myFlagCode+".png\">";
                        if (record.get("readOnly")){
                            returner ="<i style=\"color:#777;\">"+value+" <img src=\"/assets/flags/16/"+myFlagCode+".png\"></i>";
                        }
                        if (record.get("status")=="published") {
                            return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/page_accept.png"> '+returner);
                        } else if (record.get("status")=="pending") {
                            return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/page_process.png"> '+returner);
                        } else if (record.get("status")=="draft") {
                            return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/page_edit.png"> '+returner);
                        } else if (record.get("status")=="refused") {
                            return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/page_remove.png"> '+returner);
                        }




                    },
                    filter: true,
                    localiserId: 'titleColumn',
                    dataIndex: 'text',
                    text: 'Titre',
                    flex: 1
                },
                me.processEtat({
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if (value=="published") {
                            return(Rubedo.RubedoAutomatedElementsLoc.publishedText);
                        } else if (value=="pending") {
                            return(Rubedo.RubedoAutomatedElementsLoc.pendingText);
                        } else if (value=="draft") {
                            return(Rubedo.RubedoAutomatedElementsLoc.draftText);
                        } else if (value=="refused") {
                            return(Rubedo.RubedoAutomatedElementsLoc.refusedText);
                        }
                    },
                    localiserId: 'stateColumn',
                    dataIndex: 'status',
                    text: 'Etat',
                    flex: 1
                }),
                me.processEnligne({
                    xtype: 'booleancolumn',
                    filter: '{\r\n    type:"combo",\r\n    store: [\r\n                [true, Rubedo.RubedoAutomatedElementsLoc.yesText],\r\n                [false, Rubedo.RubedoAutomatedElementsLoc.noText]\r\n            ]\r\n}',
                    localiserId: 'onlineColumn',
                    width: 60,
                    dataIndex: 'online',
                    text: 'En ligne'
                })
            ],
            selModel: Ext.create('Ext.selection.CheckboxModel', {

            }),
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    store: 'ContenusDataJson'
                }
            ]
        });

        me.callParent(arguments);
    },

    processEtat: function(config) {
        config.filter={
            type:"combo",
            store: [
            ["draft", Rubedo.RubedoAutomatedElementsLoc.draftText],
            ["pending", Rubedo.RubedoAutomatedElementsLoc.pendingText],
            ["published", Rubedo.RubedoAutomatedElementsLoc.publishedText],
            ["refused", Rubedo.RubedoAutomatedElementsLoc.refusedText]
            ]
        };
        return config;
    },

    processEnligne: function(config) {
        config.trueText=Rubedo.RubedoAutomatedElementsLoc.yesText;
        config.falseText=Rubedo.RubedoAutomatedElementsLoc.noText;
        config.filter={
            type: 'combo',
            store: [
            [
            true,
            Rubedo.RubedoAutomatedElementsLoc.yesText
            ],
            [
            false,
            Rubedo.RubedoAutomatedElementsLoc.noText
            ]
            ]
        };
        return config;
    }

});