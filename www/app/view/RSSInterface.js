/*
 * File: app/view/RSSInterface.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.RSSInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.RSSInterface',

    requires: [
        'Rubedo.view.MyTool16',
        'Rubedo.view.MyTool17',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Fill',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Column',
        'Ext.panel.Tool',
        'Ext.form.Panel',
        'Ext.form.field.Checkbox',
        'Ext.form.field.TextArea'
    ],

    height: 456,
    id: 'RSSInterface',
    width: 723,
    constrainHeader: true,
    iconCls: 'content-icon',
    title: 'RSS Feeds',

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                Ext.widget("newRssWindow").show();
                            },
                            ACL: 'write.ui.sites',
                            localiserId: 'addBtn',
                            id: 'rssAddBtn',
                            iconAlign: 'top',
                            iconCls: 'add_big',
                            scale: 'large',
                            text: 'Ajouter'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                var delCon = Ext.widget('delConfirmZ');
                                delCon.show();
                                Ext.getCmp('delConfirmZOui').on('click', function() {
                                    Ext.getStore("RSSFeeds").remove(Ext.getCmp("rssFeedsGrid").getSelectionModel().getLastSelected());
                                    Ext.getCmp('delConfirmZ').close();
                                });
                            },
                            ACL: 'write.ui.sites',
                            localiserId: 'removeBtn',
                            disabled: true,
                            id: 'rssRemoveBtn',
                            iconAlign: 'top',
                            iconCls: 'remove_big',
                            scale: 'large',
                            text: 'Supprimer'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                var form=Ext.getCmp("rssSettingsForm").getForm();
                                if(form.isValid()){
                                    Ext.getCmp("rssFeedsGrid").getSelectionModel().getLastSelected().set(form.getValues());
                                }
                            },
                            ACL: 'write.ui.sites',
                            localiserId: 'saveBtn',
                            disabled: true,
                            id: 'rssSaveBtn',
                            iconAlign: 'top',
                            iconCls: 'floppy_disc_big',
                            scale: 'large',
                            text: 'Enregistrer',
                            listeners: {
                                afterrender: {
                                    fn: me.onWorkspaceSaveAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbfill'
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'gridpanel',
                    id: 'rssFeedsGrid',
                    width: 200,
                    title: '',
                    forceFit: true,
                    store: 'RSSFeeds',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (record.get("readOnly")) {
                                    return("<i style=\"color:#777;\">"+value+"</i>");
                                } else {
                                    return(value);
                                }
                            },
                            localiserId: 'nameColumn',
                            dataIndex: 'text',
                            text: 'Nom'
                        }
                    ],
                    listeners: {
                        selectionchange: {
                            fn: me.onRssFeedsGridSelectionChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'form',
                    flex: 1,
                    disabled: true,
                    id: 'rssSettingsForm',
                    bodyPadding: 10,
                    title: 'Settings',
                    items: [
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            fieldLabel: 'Name',
                            name: 'text',
                            allowBlank: false,
                            allowOnlyWhitespace: false
                        },
                        {
                            xtype: 'checkboxfield',
                            anchor: '100%',
                            fieldLabel: 'Activated',
                            name: 'isActivated',
                            boxLabel: '',
                            inputValue: 'true',
                            uncheckedValue: 'false'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            fieldLabel: 'Title',
                            name: 'title',
                            allowBlank: false,
                            allowOnlyWhitespace: false
                        },
                        {
                            xtype: 'textareafield',
                            anchor: '100%',
                            fieldLabel: 'Description',
                            name: 'description',
                            allowBlank: false,
                            allowOnlyWhitespace: false
                        }
                    ]
                }
            ],
            listeners: {
                render: {
                    fn: me.onWorkspacesInterfaceRender,
                    scope: me
                },
                beforeclose: {
                    fn: me.onWorkspacesInterfaceBeforeClose,
                    scope: me
                }
            },
            tools: [
                {
                    xtype: 'mytool16'
                },
                {
                    xtype: 'mytool17'
                }
            ]
        });

        me.callParent(arguments);
    },

    onWorkspaceSaveAfterRender: function(component, eOpts) {
        component.findParentByType("window").getEl().addKeyListener({key:"s", ctrl:true}, function(e,t){
        if (!component.disabled){
            component.fireEvent("click", component);
            t.stopEvent();
        }
        });
    },

    onRssFeedsGridSelectionChange: function(model, selected, eOpts) {
        Ext.getCmp("rssSettingsForm").getForm().reset();
        Ext.getCmp("rssSettingsForm").disable();
        if (Ext.isEmpty(selected)){
            Ext.getCmp("rssRemoveBtn").disable();
            Ext.getCmp("rssSaveBtn").disable();
        } else {
            Ext.getCmp("rssRemoveBtn").enable();
            Ext.getCmp("rssSaveBtn").enable();
            Ext.getCmp("rssSettingsForm").enable();
            Ext.getCmp("rssSettingsForm").getForm().setValues(selected[0].getData());

        }
    },

    onWorkspacesInterfaceRender: function(component, eOpts) {
        Ext.getStore("RSSFeeds").load();
    },

    onWorkspacesInterfaceBeforeClose: function(panel, eOpts) {
        Ext.getStore("RSSFeeds").removeAll();
    }

});