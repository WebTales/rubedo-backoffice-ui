/*
 * File: app/view/manualQueryInterface.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.manualQueryInterface', {
    extend: 'Ext.window.Window',
    alias: 'widget.manualQueryInterface',

    requires: [
        'Rubedo.view.MyGridPanel31',
        'Rubedo.view.MyTool17'
    ],

    height: 401,
    id: 'manualQueryInterface',
    width: 946,
    layout: {
        align: 'stretch',
        type: 'hbox'
    },
    title: 'Requête manuelle',
    constrain: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'mygridpanel31',
                    flex: 1
                },
                {
                    xtype: 'toolbar',
                    height: 50,
                    vertical: true,
                    items: [
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            iconAlign: 'right',
                            iconCls: 'arrow_right',
                            text: 'Ajouter'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'arrow_left',
                            text: 'Enlever'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    title: '',
                    store: 'ContentMQueryStore',
                    viewConfig: {
                        plugins: [
                            Ext.create('Ext.grid.plugin.DragDrop', {
                                ptype: 'gridviewdragdrop'
                            })
                        ]
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (record.get("status")=="published") {
                                    return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/page_accept.png"> '+value);
                                } else if (record.get("status")=="pending") {
                                    return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/page_process.png"> '+value);
                                } else if (record.get("status")=="draft") {
                                    return('<img src="resources/icones/'+MyPrefData.iconsDir+'/16x16/page_edit.png"> '+value);
                                }



                            },
                            filter: true,
                            dataIndex: 'text',
                            flex: 1,
                            text: 'Titre'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (Ext.isEmpty(Ext.getStore("TCNDepComboCS").findRecord("id",value))) {
                                    return(value);
                                } else {
                                    return(Ext.getStore("TCNDepComboCS").findRecord("id",value).get("type"));
                                }
                            },
                            filter: {
                                type: 'combo',
                                valueField: 'id',
                                displayField: 'type',
                                store: 'TCNDepComboCS'
                            },
                            dataIndex: 'typeId',
                            flex: 1,
                            text: 'Type'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (value=="published") {
                                    return("publié");
                                } else if (value=="pending") {
                                    return("en attente de validation");
                                } else if (value=="draft") {
                                    return("brouillon");
                                }
                            },
                            filter: {
                                type: 'combo',
                                store: [
                                    [
                                        'draft',
                                        'brouillon'
                                    ],
                                    [
                                        'pending',
                                        'en attente de validation'
                                    ],
                                    [
                                        'published',
                                        'publié'
                                    ]
                                ]
                            },
                            dataIndex: 'status',
                            flex: 1,
                            text: 'Etat'
                        },
                        {
                            xtype: 'booleancolumn',
                            filter: {
                                type: 'combo',
                                store: [
                                    [
                                        true,
                                        'Oui'
                                    ],
                                    [
                                        false,
                                        'Non'
                                    ]
                                ]
                            },
                            width: 60,
                            dataIndex: 'online',
                            text: 'En ligne',
                            falseText: 'Non',
                            trueText: 'Oui'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    xtype: 'tbfill'
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'arrow_up',
                                    text: ''
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'arrow_down',
                                    text: ''
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'ouiSpetit',
                                    text: 'Enregistrer la requête'
                                }
                            ]
                        }
                    ]
                }
            ],
            tools: [
                {
                    xtype: 'mytool17'
                }
            ],
            listeners: {
                render: {
                    fn: me.onManualQueryInterfaceRender,
                    scope: me
                },
                beforeclose: {
                    fn: me.onManualQueryInterfaceBeforeClose,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onManualQueryInterfaceRender: function(abstractcomponent, options) {
        Ext.getStore("TCNDepComboCS").load();
        abstractcomponent.getComponent(0).getStore().clearFilter(true);
        abstractcomponent.getComponent(0).getStore().load();
    },

    onManualQueryInterfaceBeforeClose: function(panel, options) {
        panel.getComponent(0).getStore().clearFilter(true);
        panel.getComponent(0).getStore().removeAll();
        Ext.getStore("TCNDepComboCS").removeAll();
    }

});