/*
 * File: app/view/RECWindow.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.RECWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.RECWindow',

    requires: [
        'Ext.form.Panel',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Fill',
        'Ext.button.Button'
    ],

    width: 800,
    constrain: true,
    title: 'Embedded content',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    itemId: 'embeddedForm',
                    minHeight: 200,
                    bodyPadding: 10,
                    title: ''
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                var target=Ext.getCmp(button.up().up().targetedId);
                                var form=button.up().up().getComponent("embeddedForm").getForm();
                                if (form.isValid()){
                                    target.setValue(form.getValues());
                                    button.up().up().close();
                                }
                            },
                            iconCls: 'save',
                            text: 'Save'
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onWindowAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onWindowAfterRender: function(component, eOpts) {
        var form=component.getComponent("embeddedForm");
        if (component.structureFields&&Ext.isArray(component.structureFields)){
            Ext.Array.forEach(component.structureFields,function(protoData){
                var configurator=protoData.config;
                if (!Ext.isEmpty(configurator.i18n)){
                    var BOLanguage=Ext.getStore("CurrentUserDataStore").getRange()[0].get("language");
                    if (!Ext.isEmpty(configurator.i18n[BOLanguage])){
                        if (!Ext.isEmpty(configurator.i18n[BOLanguage].fieldLabel)){
                            configurator.fieldLabel=configurator.i18n[BOLanguage].fieldLabel;
                        }
                        if (!Ext.isEmpty(configurator.i18n[BOLanguage].tooltip)){
                            configurator.tooltip=configurator.i18n[BOLanguage].tooltip;
                        }
                    }
                }
                if (protoData.cType == 'combobox') {
                    var myStore=  Ext.create('Ext.data.Store', Ext.clone(protoData.config.store));
                    configurator.store = myStore;
                }
                var newField= Ext.widget(protoData.cType, configurator);
                newField.config=protoData.config;
                newField.protoId=protoData.protoId;
                newField.cType=protoData.cType;
                newField.anchor = '90%';
                newField.style = '{float:left;}';
                var casing =Ext.widget('ChampTC');
                casing.add(newField);
                casing.getComponent('helpBouton').setTooltip(configurator.tooltip);
                if (Ext.isEmpty(configurator.tooltip)){
                    casing.getComponent('helpBouton').hidden=true;
                }

                form.add(casing);
             });
            if (component.initialValue){
                form.getForm().setValues(component.initialValue);
            }
        }
    }

});