/*
 * File: app/view/DCEField.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.DCEField', {
    extend: 'Ext.form.field.Hidden',
    alias: 'widget.DCEField',

    fieldLabel: 'Label',
    labelSeparator: ' ',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            listeners: {
                render: {
                    fn: me.onHiddenfieldRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onHiddenfieldRender: function(abstractcomponent, options) {
        var myComponent = Ext.widget("DCEFieldComponent");
        myComponent.setFieldLabel(abstractcomponent.fieldLabel+" ");
        abstractcomponent.on("change", function(a,newValue){
            if (Ext.isEmpty(newValue)){
                myComponent.getComponent("addBtn").show();
                myComponent.getComponent("chooseBtn").show();
                myComponent.getComponent("editBtn").hide();
                myComponent.getComponent("removeBtn").hide();
            } else {
                myComponent.getComponent("addBtn").hide();
                myComponent.getComponent("chooseBtn").hide();
                myComponent.getComponent("editBtn").show();
                myComponent.getComponent("removeBtn").show();
            }
            if (abstractcomponent.chooseOnly){
                myComponent.getComponent("addBtn").hide();
            }
            if (abstractcomponent.addOnly){
                myComponent.getComponent("chooseBtn").hide();
            }
        });
        myComponent.getComponent("removeBtn").on("click", function(){
            abstractcomponent.setValue(null);
        });
        myComponent.getComponent("addBtn").on("click", function(){
            Rubedo.controller.ContributionContenusController.prototype.specialContentCreate(abstractcomponent.allowedCT, abstractcomponent.getId());
        });
        myComponent.getComponent("chooseBtn").on("click", function(){
            var companion = Ext.widget("contentPickerWindow");
            companion.targetId=abstractcomponent.getId();
            companion.show();
        });
        myComponent.getComponent("editBtn").on("click", function(){
            Rubedo.controller.ContributionContenusController.prototype.unitaryContentEdit(abstractcomponent.getValue(), true, abstractcomponent.getId());
        });
        abstractcomponent.up().add(myComponent);
        abstractcomponent.fireEvent("change",abstractcomponent, abstractcomponent.getValue());

    }

});