/*
 * File: app/view/MassDamUploadWindow.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.MassDamUploadWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.MassDamUploadWindow',

    height: 323,
    id: 'MassDamUploadWindow',
    width: 466,
    resizable: false,
    layout: {
        type: 'fit'
    },
    bodyPadding: 2,
    title: 'Digital assets mass upload',
    constrain: true,
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    border: 4,
                    id: 'massDamUploadDropZone',
                    layout: {
                        align: 'center',
                        pack: 'center',
                        type: 'vbox'
                    },
                    bodyBorder: true,
                    bodyCls: 'contrastRow',
                    title: '',
                    listeners: {
                        afterrender: {
                            fn: me.onMassDamUploadDropZoneAfterRender,
                            scope: me
                        }
                    },
                    items: [
                        {
                            xtype: 'image',
                            height: 128,
                            style: '{opacity:0.4;}',
                            width: 128,
                            src: 'resources/icones/generic/image_add.png'
                        },
                        {
                            xtype: 'container',
                            height: 60,
                            html: '<h1 style="color:#999;">Drop files here</h1>',
                            styleHtmlContent: true,
                            width: 179
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    height: 30,
                    hidden: true,
                    listeners: {
                        afterrender: {
                            fn: me.onToolbarAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'tbtext',
                            id: 'damTypeTextItem',
                            text: 'Media type :',
                            listeners: {
                                afterrender: {
                                    fn: me.onDamTypeTextItemAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbtext',
                            uploadedItems: 0,
                            id: 'filesUploadedTextItem',
                            text: '0 files uploaded'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, event) {
                                button.up().up().close();
                            },
                            text: 'Done uploading'
                        }
                    ]
                }
            ],
            listeners: {
                beforeclose: {
                    fn: me.onMassDamUploadWindowBeforeClose,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onMassDamUploadDropZoneAfterRender: function(component, eOpts) {
        component.setBorder(4);
    },

    onToolbarAfterRender: function(component, eOpts) {
        var updBtn=Ext.create('Ext.ux.upload.Button', {
            text: 'Select files',
            plugins: [Ext.create('Ext.ux.upload.plugin.Window',{
                title: 'Upload',
                width: 520,
                height: 350,
                windowModal:true,
                windowId:"auxUploadWindow1"
            })
            ],
            uploader: 
            {
                url: 'dam/mass-upload',
                autoStart: true,
                max_file_size: '2020mb',			
                drop_element: 'massDamUploadDropZone',
                statusQueuedText: 'Ready to upload',
                statusUploadingText: 'Uploading ({0}%)',
                autoRemoveUploaded:false,
                multipart_params:{
                    "activeFacets":Ext.JSON.encode(Ext.getStore("DAMFacetteStore").activeFacettes),
                    "token":ACL.CSRFToken,
                    "writeWorkspace":ACL.defaultWorkspace
                },
                statusFailedText: '<span style="color: red">Error</span>',
                statusDoneText: '<span style="color: green">Complete</span>',
                /*filters: [
                {title: "Image files", extensions: "jpg,gif,png"}
                ],*/
                statusInvalidSizeText: 'File too large',
                statusInvalidExtensionText: 'Invalid file type'
            },
            listeners: 
            {
                filesadded: function(uploader, files)								
                {
                    //console.log('filesadded');
                    return true;
                },

                beforeupload: function(uploader, file)								
                {
                    //console.log('beforeupload');			
                },

                fileuploaded: function(uploader, file)								
                {	
                    var indicator=Ext.getCmp("filesUploadedTextItem");
                    indicator.uploadedItems=indicator.uploadedItems+1;
                    indicator.setText(" "+indicator.uploadedItems+" "+"files uploaded");
                },

                uploadcomplete: function(uploader, success, failed)								
                {
                    if(Ext.isEmpty(Ext.getCmp("buttonToExitUploadWindow"))){
                        Ext.getCmp("auxUploadWindow1").getComponent(0).getDockedComponent(2).add(Ext.widget("button",{
                            text:"<b>OK</b>",
                            id:"buttonToExitUploadWindow",
                            handler:function(btn){
                                uploader.removeAll();
                                Ext.getCmp("auxUploadWindow1").hide();
                                btn.up().remove(btn);
                            }
                        }));	
                    }
                },
                scope: this
            }


        });
        component.add(updBtn);
    },

    onMassDamUploadWindowBeforeClose: function(panel, eOpts) {
        Ext.getStore("DAMFacetteStore").load();
        Ext.getCmp("auxUploadWindow1").close();
    },

    onDamTypeTextItemAfterRender: function(component, eOpts) {
        try {
            var myType=Ext.getStore("MediaTypesForDAM").findRecord("id",Ext.getStore("DAMFacetteStore").activeFacettes.damType).get("type");
            component.setText("Media type : "+myType);
        } catch(err){console.log("error displaying type");}
    }

});