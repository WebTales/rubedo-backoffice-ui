/*
 * File: app/view/ESWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.view.ESWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.ESWindow',

    height: 500,
    id: 'ESWindow',
    width: 1100,
    layout: {
        type: 'fit'
    },
    icon: 'resources/images/esLogo.png',
    title: 'ElasticSearch',
    constrain: false,
    constrainHeader: true,
    maximizable: true,
    maximized: false,
    minimizable: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    autoEl: {
                        tag: 'iframe',
                        src: 'http://178.32.8.116:9200/_plugin/head/'
                    }
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    height: 30,
                    items: [
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, event) {
                                button.setLoading(true);
                                Ext.Ajax.request({
                                    url: 'elastic-indexer',
                                    success: function(response){
                                        var answerMe = Ext.widget("esResponseWindow");
                                        answerMe.getComponent(0).setSource(Ext.JSON.decode(response.responseText));
                                        Ext.getCmp("ViewportPrimaire").add(answerMe);
                                        answerMe.show();
                                        button.setLoading(false);
                                    },
                                    failure: function(form, action) {
                                        switch (action.failureType) {
                                            case Ext.form.action.Action.CONNECT_FAILURE:
                                            Ext.Msg.alert('Erreur', 'Erreur Ajax');
                                            break;
                                            case Ext.form.action.Action.SERVER_INVALID:
                                            Ext.Msg.alert('Erreur', 'Erreur Serveur');
                                        }
                                    }
                                });
                            },
                            text: '<b>Lancer une indexation compl√®te</b>'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});