/*
 * File: app/store/ContentSelectorStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rubedo.store.ContentSelectorStore', {
    extend: 'Ext.data.Store',
    alias: 'store.ContentSelectorStore',

    requires: [
        'Rubedo.model.contenusDataModel'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            remoteFilter: true,
            storeId: 'ContentSelectorStore',
            model: 'Rubedo.model.contenusDataModel',
            proxy: {
                type: 'ajax',
                encodeFilters: function(filters) {
                    var min = [],
                    length = filters.length,
                    i = 0;

                    for (; i < length; i++) {
                        min[i] = {
                            property: filters[i].property,
                            value   : filters[i].value
                        };
                        if (filters[i].type) {
                            min[i].type = filters[i].type;
                        }
                        if (filters[i].operator) {
                            min[i].operator = filters[i].operator;
                        }
                    }
                    return this.applyEncoding(min);
                },
                api: {
                    read: 'contents'
                },
                reader: {
                    type: 'json',
                    messageProperty: 'message',
                    root: 'data'
                }
            },
            listeners: {
                beforeload: {
                    fn: me.onJsonstoreBeforeLoad,
                    scope: me
                }
            }
        }, cfg)]);
    },

    onJsonstoreBeforeLoad: function(store, operation, options) {
        var o=operation;
        o.filters=[ ];
        if (!Ext.isEmpty(o.params.comboQuery)){

            var newFilter=Ext.create('Ext.util.Filter', {
                property:"text",
                value:o.params.comboQuery,
                type:"string",
                operator:"like"
            });


            o.filters.push(newFilter);

        }
    }

});