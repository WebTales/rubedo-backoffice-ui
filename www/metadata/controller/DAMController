{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "DAMController",
        "designer|userAlias": "DAMController"
    },
    "id": "ExtBox1-ext-gen19013",
    "designerId": "be2b5e1d-97ad-4d34-bac5-6baea7859c11",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "resetInterfaceSelect",
                "fn": "resetInterfaceSelect",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "var me =this;\r",
                    "Ext.getCmp(\"addDAMBtn\").enable();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"DAMInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.enable();});\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"Mèdiathéque <b> > </b>\", iconCls:\"mediaTypes\"}));\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: record.get(\"type\"), iconCls:\"folder\"}));\r",
                    "Ext.getStore(\"DAMStore\").getProxy().extraParams.tFilter=\"[{\\\"property\\\":\\\"typeId\\\",\\\"value\\\":\\\"\"+record.get(\"id\")+\"\\\"}]\";\r",
                    "Ext.getStore(\"DAMStore\").load();\r",
                    "var customMeta = \"<b> \"+record.get(\"type\")+ \"</b>\";\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').show();\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').update(customMeta);\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');\r",
                    ""
                ]
            },
            "designerId": "0ef724d8-3feb-47fe-909f-82b69ff25e50"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "resetInterfaceNoSelect",
                "fn": "resetInterfaceNoSelect",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp(\"DAMInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.disable();});\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"Types de médias\", iconCls:\"mediaTypes\"}));\r",
                    "Ext.getCmp(\"addDAMBtn\").disable();\r",
                    "Ext.getStore(\"DAMStore\").removeAll();\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/images.png');"
                ]
            },
            "designerId": "8b1bb213-2eb0-46f6-ab5f-4364e1832f7e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectDAMType",
                "fn": "selectDAMType",
                "implHandler": [
                    "if (Ext.isEmpty(selections)){\r",
                    "    this.resetInterfaceNoSelect();\r",
                    "} else {\r",
                    "    this.resetInterfaceSelect(selections[0]);\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#DAMMTGrid"
            },
            "designerId": "523b4c13-412e-4438-9b57-e4d00a3ec826"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderDAMTypeFields",
                "fn": "renderDAMTypeFields",
                "designer|params": [
                    "DAMType",
                    "updateMode"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var fieldBox=Ext.getCmp(\"DAMFieldBox\");\r",
                    "Ext.Array.forEach(DAMType.get(\"fields\"),function(field){\r",
                    "    me.renderMTField(Ext.clone(field), fieldBox, updateMode);\r",
                    "});"
                ]
            },
            "designerId": "899d0fcf-8b27-47d1-8d29-78c1784ca4de"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderMTField",
                "fn": "renderMTField",
                "designer|params": [
                    "protoData",
                    "renderTarget",
                    "updateMode"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var configurator=protoData.config;\r",
                    "if (protoData.cType == 'combobox') {\r",
                    "    var myStore=  Ext.create('Ext.data.Store', Ext.clone(protoData.config.store));\r",
                    "    configurator.store = myStore;\r",
                    "} else if ((updateMode)&&(protoData.cType == 'Ext.form.field.File')){\r",
                    "    protoData.cType=\"Rubedo.view.GFSFileField\";\r",
                    "}\r",
                    "var newField= Ext.create(protoData.cType, configurator);\r",
                    "newField.config=protoData.config;\r",
                    "newField.protoId=protoData.protoId;\r",
                    "newField.configFields=Ext.getStore(\"MTFieldsStore\").findRecord(\"id\", protoData.protoId).get(\"configFields\");\r",
                    "newField.cType=protoData.cType;\r",
                    "newField.anchor = '90%';\r",
                    "newField.style = '{float:left;}';\r",
                    "var casing =Ext.widget('ChampTC');\r",
                    "casing.add(newField);\r",
                    "casing.getComponent('helpBouton').setTooltip(newField.config.tooltip);\r",
                    "if (Ext.isEmpty(newField.config.tooltip)){\r",
                    "    casing.getComponent('helpBouton').hidden=true;\r",
                    "} \r",
                    "renderTarget.insert(renderTarget.items.items.length-4,casing);"
                ]
            },
            "designerId": "2092c93a-ac01-475b-ba80-2011248055db"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onAddDAMBtnClick",
                "fn": "onAddDAMBtnClick",
                "implHandler": [
                    "if (!Ext.isEmpty(Ext.getStore(\"DAMFacetteStore\").activeFacettes.damType)){\r",
                    "    var DAMType= Ext.getStore(\"MediaTypesForDAM\").findRecord(\"id\",Ext.getStore(\"DAMFacetteStore\").activeFacettes.damType);\r",
                    "    var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "    Ext.getCmp(\"DAMFieldBox\").remove(Ext.getCmp(\"DAMFieldBox\").getComponent(2));\r",
                    "    myEditor.typeId=DAMType.get(\"id\");\r",
                    "    myEditor.mainFileType=DAMType.get(\"mainFileType\");\r",
                    "    myEditor.setTitle(\"Nouveau média \"+DAMType.get(\"type\"));\r",
                    "    myEditor.show();\r",
                    "    this.renderDAMTypeFields(DAMType, false);\r",
                    "    this.renderTaxoFields(DAMType);\r",
                    "    Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();\r",
                    "} else {\r",
                    "    Ext.widget(\"DAMChooseMTWindow\").show();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addDAMBtn"
            },
            "designerId": "d4294581-6975-44d3-a7b8-48c808aabda5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderTaxoFields",
                "fn": "renderTaxoFields",
                "designer|params": [
                    "DAMType",
                    "useSep"
                ],
                "implHandler": [
                    "var formTaxoTC =  Ext.getCmp('DAMTaxoBox');\r",
                    "var lesTaxo = DAMType.get(\"vocabularies\");\r",
                    "var i=0;\r",
                    "for (i=0; i<lesTaxo.length; i++) {\r",
                    "    if (useSep){\r",
                    "        var leVocab = Ext.getStore('TaxonomyForDam2').findRecord('id', lesTaxo[i]);\r",
                    "    } else {\r",
                    "        var leVocab = Ext.getStore('TaxonomyForDAM').findRecord('id', lesTaxo[i]);\r",
                    "    }\r",
                    "    var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "        model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "        remoteFilter:\"true\",\r",
                    "        proxy: {\r",
                    "            type: 'ajax',\r",
                    "            api: {\r",
                    "                read: 'taxonomy-terms'\r",
                    "            },\r",
                    "            reader: {\r",
                    "                type: 'json',\r",
                    "                messageProperty: 'message',\r",
                    "                root: 'data'\r",
                    "            },\r",
                    "            encodeFilters: function(filters) {\r",
                    "                var min = [],\r",
                    "                length = filters.length,\r",
                    "                i = 0;\r",
                    "\r",
                    "                for (; i < length; i++) {\r",
                    "                    min[i] = {\r",
                    "                        property: filters[i].property,\r",
                    "                        value   : filters[i].value\r",
                    "                    };\r",
                    "                    if (filters[i].type) {\r",
                    "                        min[i].type = filters[i].type;\r",
                    "                    }\r",
                    "                    if (filters[i].operator) {\r",
                    "                        min[i].operator = filters[i].operator;\r",
                    "                    }\r",
                    "                }\r",
                    "                return this.applyEncoding(min);\r",
                    "            }\r",
                    "        },\r",
                    "        filters: {\r",
                    "            property: 'vocabularyId',\r",
                    "            value: leVocab.get(\"id\")\r",
                    "        }\r",
                    "\r",
                    "    });\r",
                    "    storeT.on(\"beforeload\", function(s,o){\r",
                    "        o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "        if (!Ext.isEmpty(o.params.comboQuery)){\r",
                    "\r",
                    "            var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                property:\"text\",\r",
                    "                value:o.params.comboQuery,\r",
                    "                operator:'like'\r",
                    "            });\r",
                    "\r",
                    "            o.filters.push(newFilter);\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "    var selecteur = Ext.widget('comboboxselect', {\r",
                    "        name:leVocab.get(\"id\"),\r",
                    "        anchor:\"90%\",\r",
                    "        fieldLabel: leVocab.get(\"name\"),\r",
                    "        submitValue:false,\r",
                    "        autoScroll: false,\r",
                    "        store: storeT,\r",
                    "        queryMode: 'remote',\r",
                    "        queryParam: 'comboQuery',\r",
                    "        minChars:3,\r",
                    "        displayField: 'text',\r",
                    "        valueField: 'id',\r",
                    "        filterPickList: true,\r",
                    "        typeAhead: true,\r",
                    "        forceSelection: !leVocab.data.expandable,\r",
                    "        createNewOnEnter: leVocab.data.expandable,\r",
                    "        multiSelect: leVocab.data.multiSelect,\r",
                    "        allowBlank: !leVocab.data.mandatory\r",
                    "    });\r",
                    "    var enrobage =Ext.widget('ChampTC');\r",
                    "    enrobage.add(selecteur);\r",
                    "    enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);\r",
                    "    if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}\r",
                    "    formTaxoTC.add(enrobage);\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "d1ba1045-af86-4901-9aa5-c79962ca4a7d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectDAM",
                "fn": "selectDAM",
                "implHandler": [
                    "Ext.getCmp(\"DAMDeleteBtn\").enable();\r",
                    "Ext.getCmp(\"DAMUpdateBtn\").enable();\r",
                    "Ext.getCmp(\"DAMROBtn\").enable();\r",
                    "if (Ext.isEmpty(selections)) {\r",
                    "    \r",
                    "        Ext.getCmp(\"DAMDeleteBtn\").disable();\r",
                    "        Ext.getCmp(\"DAMUpdateBtn\").disable();\r",
                    "        Ext.getCmp(\"DAMROBtn\").disable();\r",
                    "        Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();\r",
                    "        Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/images.png');\r",
                    "    \r",
                    "} else if (selections.length==1) {\r",
                    "    var customMeta = \"<b> \"+selections[0].get(\"text\")+\"</b></br><b> Dernière modification : </b>\"+Ext.Date.format(selections[0].get(\"lastUpdateTime\"), 'd-m-Y')+\"<b> Auteur : </b>\"+selections[0].get(\"author\");\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').show();\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').update(customMeta);\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc(\"dam/get-thumbnail?id=\"+selections[0].get(\"id\"));\r",
                    "} else {\r",
                    "    Ext.getCmp(\"DAMUpdateBtn\").disable();\r",
                    "    var customMeta = \"<b> \"+selections.length+\" médias\"+ \"</b>\";\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').show();\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').update(customMeta);\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/images.png');\r",
                    "\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#DAMCenter"
            },
            "designerId": "54e84151-7d25-4893-b80a-090e656b60ba"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMDeleteBtnClick",
                "fn": "onDAMDeleteBtnClick",
                "implHandler": [
                    "Ext.getCmp(\"DAMCenter\").getStore().remove(Ext.getCmp(\"DAMCenter\").getSelectionModel().getSelection());"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMDeleteBtn"
            },
            "designerId": "9b1297a5-1654-43ec-bcea-6a016e1f5293"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMSubmitBtnClick",
                "fn": "onDAMSubmitBtnClick",
                "implHandler": [
                    "button.up().setLoading(true);\r",
                    "var me=this;\r",
                    "var form=button.up().getForm();\r",
                    "form.submit({\r",
                    "    clientValidation: true,\r",
                    "    url: 'dam/create',\r",
                    "    params: { \r",
                    "        typeId: button.up().up().typeId,\r",
                    "        mainFileType: button.up().up().mainFileType,\r",
                    "        taxonomy: Ext.JSON.encode(me.getTaxoValues()),\r",
                    "        targetArray: Ext.JSON.encode(form.getFieldValues().target)\r",
                    "    },\r",
                    "    success: function(form, action) {\r",
                    "        button.up().setLoading(false);\r",
                    "        button.up().up().close();\r",
                    "        Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "    },\r",
                    "    failure: function(form, action) {\r",
                    "        button.up().setLoading(false);\r",
                    "        switch (action.failureType) {\r",
                    "            case Ext.form.action.Action.CLIENT_INVALID:\r",
                    "            Ext.Msg.alert('Erreur', 'Certains champs sont invalides');\r",
                    "            break;\r",
                    "            case Ext.form.action.Action.CONNECT_FAILURE:\r",
                    "            Ext.Msg.alert('Erreur', 'Erreur Ajax');\r",
                    "            break;\r",
                    "            case Ext.form.action.Action.SERVER_INVALID:\r",
                    "            Ext.Msg.alert('Erreur', action.result.msg);\r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSubmitBtn"
            },
            "designerId": "57e2450d-d0f1-44d4-b9ea-10613b64c090"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMUpdateBtnClick",
                "fn": "onDAMUpdateBtnClick",
                "implHandler": [
                    "var record = Ext.getCmp(\"DAMCenter\").getSelectionModel().getLastSelected();\r",
                    "this.prepareContext(record.get(\"id\"), record.get(\"typeId\"));\r",
                    "/*\r",
                    "var DAMType= Ext.getStore(\"MediaTypesForDAM\").findRecord(\"id\", record.get(\"typeId\"));\r",
                    "var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "myEditor.setTitle(\"Edition du média \\\" \"+record.get(\"title\")+\" \\\"\");\r",
                    "Ext.getCmp(\"DAMSubmitBtn\").hide();\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").show();\r",
                    "Ext.getCmp(\"DAMFieldBox\").remove(Ext.getCmp(\"DAMFieldBox\").getComponent(1));\r",
                    "myEditor.show();\r",
                    "this.renderDAMTypeFields(DAMType, true);\r",
                    "this.renderTaxoFields(DAMType);\r",
                    "var valueBox=record.get(\"fields\");\r",
                    "if (Ext.isEmpty(valueBox)){valueBox={ };}\r",
                    "valueBox.title=record.get(\"title\");\r",
                    "valueBox.originalFileId=record.get(\"originalFileId\");\r",
                    "valueBox=Ext.Object.merge(valueBox,record.get(\"taxonomy\"));\r",
                    "myEditor.getComponent(0).getForm().setValues(valueBox);\r",
                    "Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();*/"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMUpdateBtn"
            },
            "designerId": "c586426f-a0ca-4dd4-866b-34a0aa255b20"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getTaxoValues",
                "fn": "getTaxoValues",
                "implHandler": [
                    "var values = { };\r",
                    "Ext.Array.forEach(Ext.getCmp(\"DAMTaxoBox\").query(\"field\"),function(field){\r",
                    "    values[field.name]=field.getValue();\r",
                    "});\r",
                    "return(values);"
                ]
            },
            "designerId": "f85bcb7d-72e0-460c-bbae-9eb0a0b746a0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMSubmitUpdateBtnClick",
                "fn": "onDAMSubmitUpdateBtnClick",
                "implHandler": [
                    "var me = this;\r",
                    "if(Ext.getCmp(\"DAMFieldBox\").getForm().isValid()){\r",
                    "    if (button.indepMode){\r",
                    "        var record = Ext.getStore(\"DAMEditStore\").getRange()[0];\r",
                    "    } else {\r",
                    "        var record = Ext.getCmp(\"DAMCenter\").getSelectionModel().getLastSelected();\r",
                    "    }\r",
                    "    record.beginEdit();\r",
                    "    record.set(\"title\",Ext.getCmp(\"DAMFieldBox\").getComponent(0).getComponent(0).getValue());\r",
                    "    record.set(\"originalFileId\",Ext.getCmp(\"DAMFieldBox\").getComponent(1).getComponent(0).getValue());\r",
                    "    record.set(\"fields\",Ext.getCmp(\"DAMFieldBox\").getForm().getValues());\r",
                    "    record.set(\"writeWorkspace\",Ext.getCmp(\"DAMFieldBox\").getForm().getValues().writeWorkspace);\r",
                    "    record.set(\"target\",Ext.getCmp(\"DAMFieldBox\").getForm().getValues().target);\r",
                    "    record.set(\"taxonomy\", me.getTaxoValues());\r",
                    "    record.endEdit();\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSubmitUpdateBtn"
            },
            "designerId": "47e4e631-cd13-4d44-89d1-7ac517bbd39c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMROBtnClick",
                "fn": "onDAMROBtnClick",
                "implHandler": [
                    "var record = Ext.getCmp(\"DAMCenter\").getSelectionModel().getLastSelected();\r",
                    "var DAMType= Ext.getCmp(\"DAMMTGrid\").getSelectionModel().getLastSelected();\r",
                    "var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "myEditor.setTitle(record.get(\"title\"));\r",
                    "Ext.getCmp(\"DAMSubmitBtn\").hide();\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").hide();\r",
                    "Ext.getCmp(\"DAMSwitchEditBtn\").show();\r",
                    "Ext.getCmp(\"DAMFieldBox\").remove(Ext.getCmp(\"DAMFieldBox\").getComponent(1));\r",
                    "myEditor.show();\r",
                    "this.renderDAMTypeFields(DAMType, true);\r",
                    "this.renderTaxoFields(DAMType);\r",
                    "var valueBox=record.get(\"fields\");\r",
                    "valueBox.title=record.get(\"title\");\r",
                    "valueBox.originalFileId=record.get(\"originalFileId\");\r",
                    "valueBox=Ext.Object.merge(valueBox,record.get(\"taxonomy\"));\r",
                    "myEditor.getComponent(0).getForm().setValues(valueBox);\r",
                    "Ext.Array.forEach(Ext.getCmp(\"DAMFieldBox\").query(\"field\"), function(thing){thing.setReadOnly(true);});\r",
                    "Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMROBtn"
            },
            "designerId": "14c187f7-70c8-43d7-9805-9b56e796fd53"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMSwitchEditBtnClick",
                "fn": "onDAMSwitchEditBtnClick",
                "implHandler": [
                    "var record = Ext.getCmp(\"DAMCenter\").getSelectionModel().getLastSelected();\r",
                    "var myEditor = Ext.getCmp(\"DAMCreateUpdateWindow\");\r",
                    "button.hide();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"DAMFieldBox\").query(\"field\"), function(thing){thing.setReadOnly(false);});\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").show();\r",
                    "myEditor.setTitle(\"Edition du média \\\" \"+record.get(\"title\")+\" \\\"\");\r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSwitchEditBtn"
            },
            "designerId": "80490bdb-13d5-4753-aa36-02d33b8ad112"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onGridpanelItemDblClick",
                "fn": "onGridpanelItemDblClick",
                "implHandler": [
                    "this.prepareContext(record.get(\"id\"), record.get(\"typeId\"));"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#DAMCenter"
            },
            "designerId": "692cc083-f2d2-4d56-a7f8-58ef4059890d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "prepareContext",
                "fn": "prepareContext",
                "designer|params": [
                    "damId",
                    "typeId"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "Ext.getStore(\"DAMEditStore\").clearFilter(true);\r",
                    "Ext.getStore(\"MTForDAMEdit\").clearFilter(true);\r",
                    "Ext.getStore(\"DAMEditStore\").filter(\"id\",damId);\r",
                    "Ext.getStore(\"MTForDAMEdit\").filter(\"id\",typeId);\r",
                    "var counter = 3;\r",
                    "Ext.getStore(\"MTForDAMEdit\").addListener(\"load\", function(){\r",
                    "    counter = counter - 1;\r",
                    "    if (counter === 0) {\r",
                    "        me.fireUnitaryEdit();\r",
                    "    }\r",
                    "},this, {single:true});\r",
                    "    Ext.getStore(\"TaxonomyForDam2\").addListener(\"load\", function(){\r",
                    "        counter = counter - 1;\r",
                    "        if (counter === 0) {\r",
                    "            me.fireUnitaryEdit();\r",
                    "        }\r",
                    "    },this, {single:true});\r",
                    "        Ext.getStore(\"DAMEditStore\").addListener(\"load\", function(){\r",
                    "            counter = counter - 1;\r",
                    "            if (counter === 0) {\r",
                    "                me.fireUnitaryEdit();\r",
                    "            }\r",
                    "        },this, {single:true});\r",
                    "            Ext.getStore(\"MTForDAMEdit\").load();\r",
                    "            Ext.getStore(\"TaxonomyForDam2\").load();\r",
                    "            Ext.getStore(\"DAMEditStore\").load();\r",
                    ""
                ]
            },
            "designerId": "496e818b-9326-452b-972b-aa61778fb62e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "fireUnitaryEdit",
                "fn": "fireUnitaryEdit",
                "implHandler": [
                    "var record = Ext.getStore(\"DAMEditStore\").getRange()[0];\r",
                    "var DAMType= Ext.getStore(\"MTForDAMEdit\").getRange()[0];\r",
                    "var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "myEditor.on(\"beforeclose\", function(){\r",
                    "    Ext.getStore(\"MTForDAMEdit\").removeAll();\r",
                    "    Ext.getStore(\"DAMEditStore\").removeAll();\r",
                    "    Ext.getStore(\"TaxonomyForDam2\").removeAll();\r",
                    "});\r",
                    "myEditor.setTitle(\"Edition du média \\\" \"+record.get(\"title\")+\" \\\"\");\r",
                    "Ext.getCmp(\"DAMSubmitBtn\").hide();\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").show();\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").indepMode=true;\r",
                    "Ext.getCmp(\"DAMFieldBox\").remove(Ext.getCmp(\"DAMFieldBox\").getComponent(1));\r",
                    "myEditor.show();\r",
                    "this.renderDAMTypeFields(DAMType, true);\r",
                    "this.renderTaxoFields(DAMType, true);\r",
                    "var valueBox=record.get(\"fields\");\r",
                    "if (Ext.isEmpty(valueBox)){valueBox={ };}\r",
                    "valueBox.title=record.get(\"title\");\r",
                    "valueBox.originalFileId=record.get(\"originalFileId\");\r",
                    "valueBox=Ext.Object.merge(valueBox,record.get(\"taxonomy\"));\r",
                    "myEditor.getComponent(0).getForm().setValues(valueBox);\r",
                    "Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();"
                ]
            },
            "designerId": "b46baeb9-0cac-4bfa-b961-22357ac8f3bf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderFacets",
                "fn": "renderFacets",
                "designer|params": [
                    "facets"
                ],
                "implHandler": [
                    "/*var me=this;\r",
                    "var target=Ext.getCmp(\"DAMFacetBox\");\r",
                    "target.removeAll();\r",
                    "Ext.Array.forEach(facets, function(facet){\r",
                    "    if (!Ext.isEmpty(facet.terms)){\r",
                    "        var newFacet = Ext.widget(\"fieldset\", {title:facet.name, collapsible:true});\r",
                    "        if(facet.name!=\"damType\"){newFacet.collapse();}\r",
                    "        newFacet.usedProperty=facet.name;\r",
                    "\r",
                    "        Ext.Array.forEach(facet.terms, function(term){\r",
                    "            var newTerm=Ext.widget(\"button\",{\r",
                    "                text:term.term+\" (\"+term.count+\")\",\r",
                    "                usedValue:term.term,\r",
                    "                anchor:\"100%\",\r",
                    "                handler:function(thing){\r",
                    "                    var theProp=Ext.getStore(\"ESFacetteStore\").activeFacettes[thing.up().usedProperty];\r",
                    "                    if (!Ext.isEmpty(theProp)){\r",
                    "                        if (Ext.isArray(theProp)){\r",
                    "                            theProp.push(thing.usedValue);\r",
                    "                        } else {\r",
                    "                            theProp=[theProp,thing.usedValue];\r",
                    "                        }\r",
                    "\r",
                    "                    } else {\r",
                    "                        theProp=thing.usedValue;\r",
                    "\r",
                    "                    }\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.up().usedProperty]=theProp;\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "                }\r",
                    "            });\r",
                    "            newFacet.add(newTerm);\r",
                    "        });\r",
                    "\r",
                    "        target.add(newFacet);\r",
                    "    }\r",
                    "});\r",
                    "*/\r",
                    "var me=this;\r",
                    "var target=Ext.getCmp(\"DAMFacetBox\");\r",
                    "target.removeAll();\r",
                    "Ext.Array.forEach(facets, function(facet){\r",
                    "    if (!Ext.isEmpty(facet.terms)){\r",
                    "        var newFacet = Ext.widget(\"fieldset\", {title:facet.label, collapsible:true});\r",
                    "        if(facet.id!=\"damType\"){newFacet.collapse();}\r",
                    "        newFacet.usedProperty=facet.id;\r",
                    "\r",
                    "        Ext.Array.forEach(facet.terms, function(term){\r",
                    "            var newTerm=Ext.widget(\"button\",{\r",
                    "                text:term.label+\" (\"+term.count+\")\",\r",
                    "                usedValue:term.term,\r",
                    "                anchor:\"100%\",\r",
                    "                handler:function(thing){\r",
                    "                    var theProp=Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.up().usedProperty];\r",
                    "                    if (!Ext.isEmpty(theProp)){\r",
                    "                        if (Ext.isArray(theProp)){\r",
                    "                            theProp.push(thing.usedValue);\r",
                    "                        } else {\r",
                    "                            theProp=[theProp,thing.usedValue];\r",
                    "                        }\r",
                    "\r",
                    "                    } else {\r",
                    "                        theProp=thing.usedValue;\r",
                    "\r",
                    "                    }\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.up().usedProperty]=theProp;\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "                }\r",
                    "            });\r",
                    "            newFacet.add(newTerm);\r",
                    "        });\r",
                    "\r",
                    "        target.add(newFacet);\r",
                    "    }\r",
                    "});\r",
                    ""
                ]
            },
            "designerId": "5f142959-7d2b-45a5-8e1e-144e449e9c07"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderActiveFacets",
                "fn": "renderActiveFacets",
                "designer|params": [
                    "facets"
                ],
                "implHandler": [
                    "/*Ext.getCmp(\"DAMSearchField\").setValue(facets.query);\r",
                    "var target=Ext.getCmp(\"DAMActiveFacetBox\");\r",
                    "target.removeAll();\r",
                    "Ext.Object.each(facets, function(key, value){\r",
                    "    if (Ext.isArray(value)){\r",
                    "        Ext.Array.forEach(value,function(someValue){\r",
                    "            var activeOne = Ext.widget('splitbutton',{\r",
                    "                text:key+\" : \"+someValue,\r",
                    "                arrowHandler:function(){\r",
                    "                    Ext.Array.remove(Ext.getStore(\"DAMFacetteStore\").activeFacettes[key],someValue);\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "                }\r",
                    "            });\r",
                    "            target.add(activeOne);\r",
                    "        });\r",
                    "\r",
                    "    } else {\r",
                    "        var activeOne = Ext.widget('splitbutton',{\r",
                    "            text:key+\" : \"+value,\r",
                    "            arrowHandler:function(){\r",
                    "                delete Ext.getStore(\"DAMFacetteStore\").activeFacettes[key];\r",
                    "                Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "            }\r",
                    "        });\r",
                    "        target.add(activeOne);\r",
                    "    }\r",
                    "});*/\r",
                    "Ext.getCmp(\"DAMSearchField\").setValue(Ext.getStore(\"DAMFacetteStore\").activeFacettes.query);\r",
                    "var target=Ext.getCmp(\"DAMActiveFacetBox\");\r",
                    "target.removeAll();\r",
                    "Ext.Array.forEach(facets, function(thing){\r",
                    "    if (thing.terms.length>1){\r",
                    "        Ext.Array.forEach(thing.terms,function(term){\r",
                    "            var activeOne = Ext.widget('splitbutton',{\r",
                    "                text:thing.label+\" : \"+term.label,\r",
                    "                arrowHandler:function(){\r",
                    "                    Ext.Array.remove(Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.id],term.term);\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "                }\r",
                    "            });\r",
                    "            target.add(activeOne);\r",
                    "        });\r",
                    "    } else {\r",
                    "        var activeOne = Ext.widget('splitbutton',{\r",
                    "            text:thing.label+\" : \"+thing.terms[0].label,\r",
                    "            arrowHandler:function(){\r",
                    "                delete Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.id];\r",
                    "                Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "            }\r",
                    "        });\r",
                    "        target.add(activeOne);\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "b0bcac57-f9cc-4a57-a550-cd4e09c212b5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMSearchBtnClick",
                "fn": "onDAMSearchBtnClick",
                "implHandler": [
                    "Ext.getStore(\"DAMFacetteStore\").activeFacettes.query=Ext.getCmp(\"DAMSearchField\").getValue();\r",
                    "Ext.getStore(\"DAMFacetteStore\").load();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSearchBtn"
            },
            "designerId": "39daff7b-7cc8-4a4d-8a1a-c89e9d6e33ba"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onAddDamAfterTypeBtnClick",
                "fn": "onAddDamAfterTypeBtnClick",
                "implHandler": [
                    "if (button.up().getForm().isValid()){\r",
                    "    var DAMType= Ext.getStore(\"MediaTypesForDAM\").findRecord(\"id\",button.up().getForm().getValues().typeId);\r",
                    "    var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "    Ext.getCmp(\"DAMFieldBox\").remove(Ext.getCmp(\"DAMFieldBox\").getComponent(2));\r",
                    "    myEditor.typeId=DAMType.get(\"id\");\r",
                    "    myEditor.mainFileType=DAMType.get(\"mainFileType\");\r",
                    "    myEditor.setTitle(\"Nouveau média \"+DAMType.get(\"type\"));\r",
                    "    myEditor.show();\r",
                    "    this.renderDAMTypeFields(DAMType, false);\r",
                    "    this.renderTaxoFields(DAMType);\r",
                    "    Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();\r",
                    "    button.up().up().close();\r",
                    "} "
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addDamAfterTypeBtn"
            },
            "designerId": "5b4c25c8-302b-4774-8ebe-f7cce1e6848c"
        }
    ]
}