{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "DAMController",
        "designer|userAlias": "DAMController"
    },
    "designerId": "be2b5e1d-97ad-4d34-bac5-6baea7859c11",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetInterfaceSelect",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "var me =this;\r",
                    "Ext.getCmp(\"addDAMBtn\").enable();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"DAMInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.enable();});\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"Mèdiathéque <b> > </b>\", iconCls:\"mediaTypes\"}));\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: record.get(\"type\"), iconCls:\"folder\"}));\r",
                    "Ext.getStore(\"DAMStore\").getProxy().extraParams.tFilter=\"[{\\\"property\\\":\\\"typeId\\\",\\\"value\\\":\\\"\"+record.get(\"id\")+\"\\\"}]\";\r",
                    "Ext.getStore(\"DAMStore\").load();\r",
                    "var customMeta = \"<b> \"+record.get(\"type\")+ \"</b>\";\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').show();\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').update(customMeta);\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');\r",
                    ""
                ]
            },
            "designerId": "0ef724d8-3feb-47fe-909f-82b69ff25e50"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetInterfaceNoSelect",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp(\"DAMInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.disable();});\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"Types de médias\", iconCls:\"mediaTypes\"}));\r",
                    "Ext.getCmp(\"addDAMBtn\").disable();\r",
                    "Ext.getStore(\"DAMStore\").removeAll();\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();\r",
                    "Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/images.png');"
                ]
            },
            "designerId": "8b1bb213-2eb0-46f6-ab5f-4364e1832f7e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectDAMType",
                "implHandler": [
                    "if (Ext.isEmpty(selected)){\r",
                    "    this.resetInterfaceNoSelect();\r",
                    "} else {\r",
                    "    this.resetInterfaceSelect(selected[0]);\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#DAMMTGrid"
            },
            "designerId": "523b4c13-412e-4438-9b57-e4d00a3ec826"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderDAMTypeFields",
                "designer|params": [
                    "DAMType",
                    "updateMode"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var fieldBox=Ext.getCmp(\"DAMSEcondaryFieldsBox\");\r",
                    "Ext.Array.forEach(DAMType.get(\"fields\"),function(field){\r",
                    "    me.renderMTField(Ext.clone(field), fieldBox, updateMode);\r",
                    "});"
                ]
            },
            "designerId": "899d0fcf-8b27-47d1-8d29-78c1784ca4de"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderMTField",
                "designer|params": [
                    "protoData",
                    "renderTarget",
                    "updateMode"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var configurator=protoData.config;\r",
                    "if (!Ext.isEmpty(configurator.i18n)){\r",
                    "    var BOLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "    if (!Ext.isEmpty(configurator.i18n[BOLanguage])){\r",
                    "        if (!Ext.isEmpty(configurator.i18n[BOLanguage].fieldLabel)){\r",
                    "            configurator.fieldLabel=configurator.i18n[BOLanguage].fieldLabel;\r",
                    "        }\r",
                    "        if (!Ext.isEmpty(configurator.i18n[BOLanguage].tooltip)){\r",
                    "            configurator.tooltip=configurator.i18n[BOLanguage].tooltip;\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "if (protoData.cType == 'combobox') {\r",
                    "    var myStore=  Ext.create('Ext.data.Store', Ext.clone(protoData.config.store));\r",
                    "    configurator.store = myStore;\r",
                    "} else if ((updateMode)&&(protoData.cType == 'Ext.form.field.File')){\r",
                    "    protoData.cType=\"Rubedo.view.GFSFileField\";\r",
                    "}\r",
                    "var newField= Ext.create(protoData.cType, configurator);\r",
                    "newField.config=protoData.config;\r",
                    "newField.protoId=protoData.protoId;\r",
                    "newField.configFields=Ext.getStore(\"MTFieldsStore\").findRecord(\"id\", protoData.protoId).get(\"configFields\");\r",
                    "newField.cType=protoData.cType;\r",
                    "newField.anchor = '90%';\r",
                    "newField.style = '{float:left;}';\r",
                    "var casing =Ext.widget('ChampTC');\r",
                    "casing.add(newField);\r",
                    "casing.getComponent('helpBouton').setTooltip(configurator.tooltip);\r",
                    "if (Ext.isEmpty(configurator.tooltip)){\r",
                    "    casing.getComponent('helpBouton').hidden=true;\r",
                    "} \r",
                    "if (configurator.localizable){\r",
                    "    casing.localizable=true;\r",
                    "}\r",
                    "renderTarget.add(casing);"
                ]
            },
            "designerId": "2092c93a-ac01-475b-ba80-2011248055db"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddDAMBtnClick",
                "implHandler": [
                    "if ((Ext.getCmp(\"DAMInterface\").currentViewMode==\"search\")&&(!Ext.isEmpty(Ext.getStore(\"DAMFacetteStore\").activeFacettes.damType))){\r",
                    "    var DAMType= Ext.getStore(\"MediaTypesForDAM\").findRecord(\"id\",Ext.getStore(\"DAMFacetteStore\").activeFacettes.damType);\r",
                    "    var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "    Ext.getCmp(\"DAMMainFileFieldBox\").up().remove(Ext.getCmp(\"DAMMainFileFieldBox\"));\r",
                    "    myEditor.typeId=DAMType.get(\"id\");\r",
                    "    myEditor.mainFileType=DAMType.get(\"mainFileType\");\r",
                    "    myEditor.setTitle(Rubedo.RubedoAutomatedElementsLoc.newDamText+\" \"+DAMType.get(\"type\"));\r",
                    "    myEditor.show();\r",
                    "    this.renderDAMTypeFields(DAMType, false);\r",
                    "    this.renderTaxoFields(DAMType);\r",
                    "    Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();\r",
                    "} else {\r",
                    "    Ext.widget(\"DAMChooseMTWindow\").show();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addDAMBtn"
            },
            "designerId": "d4294581-6975-44d3-a7b8-48c808aabda5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderTaxoFields",
                "designer|params": [
                    "DAMType",
                    "useSep"
                ],
                "implHandler": [
                    "var formTaxoTC =  Ext.getCmp('DAMTaxoBox');\r",
                    "var lesTaxo = DAMType.get(\"vocabularies\");\r",
                    "if (Ext.isEmpty(lesTaxo)) {\r",
                    "    formTaxoTC.hide();\r",
                    "} else {\r",
                    "    var i=0;\r",
                    "    for (i=0; i<lesTaxo.length; i++) {\r",
                    "        if (useSep){\r",
                    "            var leVocab = Ext.getStore('TaxonomyForDam2').findRecord('id', lesTaxo[i]);\r",
                    "        } else {\r",
                    "            var leVocab = Ext.getStore('TaxonomyForDAM').findRecord('id', lesTaxo[i]);\r",
                    "        }\r",
                    "        if (leVocab.get(\"inputAsTree\")){\r",
                    "            var storeT = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                remoteFilter:\"true\",\r",
                    "                proxy: {\r",
                    "                    type: 'ajax',\r",
                    "                    api: {\r",
                    "                        read: 'taxonomy-terms/tree'\r",
                    "                    },\r",
                    "                    reader: {\r",
                    "                        type: 'json',\r",
                    "                        messageProperty: 'message'\r",
                    "                    },\r",
                    "                    encodeFilters: function(filters) {\r",
                    "                        var min = [],\r",
                    "                            length = filters.length,\r",
                    "                            i = 0;\r",
                    "\r",
                    "                        for (; i < length; i++) {\r",
                    "                            min[i] = {\r",
                    "                                property: filters[i].property,\r",
                    "                                value   : filters[i].value\r",
                    "                            };\r",
                    "                            if (filters[i].type) {\r",
                    "                                min[i].type = filters[i].type;\r",
                    "                            }\r",
                    "                            if (filters[i].operator) {\r",
                    "                                min[i].operator = filters[i].operator;\r",
                    "                            }\r",
                    "                        }\r",
                    "                        return this.applyEncoding(min);\r",
                    "                    }\r",
                    "                },\r",
                    "                filters: {\r",
                    "                    property: 'vocabularyId',\r",
                    "                    value: leVocab.get(\"id\")\r",
                    "                }\r",
                    "\r",
                    "            });\r",
                    "            var toUse=\"Ext.ux.TreePicker\";\r",
                    "            if(leVocab.get(\"multiSelect\")){toUse=\"Ext.ux.TreeMultiPicker\";}\r",
                    "            if(leVocab.get(\"id\")=='navigation'){storeT.getProxy().api={read:\"taxonomy-terms/navigation-tree\"};}\r",
                    "            storeT.load();\r",
                    "            var selecteur = Ext.create(toUse, {\r",
                    "                name:leVocab.get(\"id\"),\r",
                    "                fieldLabel: leVocab.get(\"name\"),\r",
                    "                store: storeT,\r",
                    "                anchor:\"90%\",\r",
                    "                ignoreIsNotPage:true,\r",
                    "                displayField:\"text\",\r",
                    "                allowBlank: !leVocab.data.mandatory,\r",
                    "                plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")]\r",
                    "            });\r",
                    "\r",
                    "\r",
                    "        } else {\r",
                    "            var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "                model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                remoteFilter:\"true\",\r",
                    "                proxy: {\r",
                    "                    type: 'ajax',\r",
                    "                    api: {\r",
                    "                        read: 'taxonomy-terms'\r",
                    "                    },\r",
                    "                    reader: {\r",
                    "                        type: 'json',\r",
                    "                        messageProperty: 'message',\r",
                    "                        root: 'data'\r",
                    "                    },\r",
                    "                    encodeFilters: function(filters) {\r",
                    "                        var min = [],\r",
                    "                            length = filters.length,\r",
                    "                            i = 0;\r",
                    "\r",
                    "                        for (; i < length; i++) {\r",
                    "                            min[i] = {\r",
                    "                                property: filters[i].property,\r",
                    "                                value   : filters[i].value\r",
                    "                            };\r",
                    "                            if (filters[i].type) {\r",
                    "                                min[i].type = filters[i].type;\r",
                    "                            }\r",
                    "                            if (filters[i].operator) {\r",
                    "                                min[i].operator = filters[i].operator;\r",
                    "                            }\r",
                    "                        }\r",
                    "                        return this.applyEncoding(min);\r",
                    "                    }\r",
                    "                },\r",
                    "                filters: {\r",
                    "                    property: 'vocabularyId',\r",
                    "                    value: leVocab.get(\"id\")\r",
                    "                }\r",
                    "\r",
                    "            });\r",
                    "            storeT.on(\"beforeload\", function(s,o){\r",
                    "                o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "                if (!Ext.isEmpty(o.params.comboQuery)){\r",
                    "\r",
                    "                    var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                        property:\"text\",\r",
                    "                        value:o.params.comboQuery,\r",
                    "                        operator:'like'\r",
                    "                    });\r",
                    "\r",
                    "                    o.filters.push(newFilter);\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "\r",
                    "            });\r",
                    "            var selecteur = Ext.widget('comboboxselect', {\r",
                    "                name:leVocab.get(\"id\"),\r",
                    "                anchor:\"90%\",\r",
                    "                fieldLabel: leVocab.get(\"name\"),\r",
                    "                autoScroll: false,\r",
                    "                store: storeT,\r",
                    "                queryMode: 'remote',\r",
                    "                queryParam: 'comboQuery',\r",
                    "                minChars:3,\r",
                    "                grow:false,\r",
                    "                displayField: 'text',\r",
                    "                valueField: 'id',\r",
                    "                filterPickList: true,\r",
                    "                typeAhead: true,\r",
                    "                forceSelection: !leVocab.data.expandable,\r",
                    "                createNewOnEnter: leVocab.data.expandable,\r",
                    "                multiSelect: leVocab.data.multiSelect,\r",
                    "                allowBlank: !leVocab.data.mandatory\r",
                    "            });\r",
                    "\r",
                    "        }\r",
                    "        var enrobage =Ext.widget('ChampTC');\r",
                    "        enrobage.add(selecteur);\r",
                    "        enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);\r",
                    "        if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}\r",
                    "        formTaxoTC.add(enrobage);\r",
                    "\r",
                    "    }}"
                ]
            },
            "designerId": "d1ba1045-af86-4901-9aa5-c79962ca4a7d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectDAM",
                "implHandler": [
                    "Ext.getCmp(\"DAMDeleteBtn\").enable();\r",
                    "Ext.getCmp(\"DAMUpdateBtn\").enable();\r",
                    "Ext.getCmp(\"DAMROBtn\").enable();\r",
                    "if (Ext.isEmpty(selected)) {\r",
                    "\r",
                    "    Ext.getCmp(\"DAMDeleteBtn\").disable();\r",
                    "    Ext.getCmp(\"DAMUpdateBtn\").disable();\r",
                    "    Ext.getCmp(\"DAMROBtn\").disable();\r",
                    "    Ext.getCmp(\"DAMPPBtnGroup\").disable();\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/images.png');\r",
                    "\r",
                    "} else if (selected.length==1) {\r",
                    "    var customMeta = \"<b> \"+selected[0].get(\"text\")+\"</b></br><b> \"+Rubedo.RubedoAutomatedElementsLoc.lastUpdateText+\" : </b>\"+Ext.Date.format(selected[0].get(\"lastUpdateTime\"), Ext.Date.defaultFormat)+\"<b> \"+Rubedo.RubedoAutomatedElementsLoc.authorText+\" : </b>\"+selected[0].get(\"author\");\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').show();\r",
                    "    Ext.getCmp(\"DAMPPBtnGroup\").enable();\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').update(customMeta);\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc(\"dam/get-thumbnail?id=\"+selected[0].get(\"id\")+\"&version=\"+selected[0].get(\"version\"));\r",
                    "} else {\r",
                    "    Ext.getCmp(\"DAMUpdateBtn\").disable();\r",
                    "    var customMeta = \"<b> \"+selected.length+\" \"+Rubedo.RubedoAutomatedElementsLoc.mediasText+\" \"+ \"</b>\";\r",
                    "    Ext.getCmp(\"DAMPPBtnGroup\").disable();\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').show();\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').update(customMeta);\r",
                    "    Ext.getCmp(\"DAMInterface\").getDockedComponent('barreMeta').getComponent(0).setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/images.png');\r",
                    "    Ext.getCmp(\"DAMROBtn\").disable();\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#DAMCenter"
            },
            "designerId": "54e84151-7d25-4893-b80a-090e656b60ba"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDAMDeleteBtnClick",
                "implHandler": [
                    "var fenetre = Ext.widget('delConfirmZ');\r",
                    "fenetre.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisMediaText;\r",
                    "fenetre.show();\r",
                    "Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "    if (Ext.getCmp(\"DAMInterface\").currentViewMode==\"folder\"){\r",
                    "        Ext.getStore(\"DAMFolderViewStore\").remove(Ext.getCmp(\"DAMCenter\").getSelectionModel().getSelection());\r",
                    "    } else {\r",
                    "        Ext.getCmp(\"DAMCenter\").getStore().remove(Ext.getCmp(\"DAMCenter\").getSelectionModel().getSelection());\r",
                    "        //Ext.getStore(\"DAMFacetteStore\").addListener(\"datachanged\", function(){Ext.getStore(\"DAMFacetteStore\").load(); }, this, {delay:800,single:true});\r",
                    "    }\r",
                    "    Ext.getCmp('delConfirmZ').close();\r",
                    "\r",
                    "}, this);  \r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMDeleteBtn"
            },
            "designerId": "9b1297a5-1654-43ec-bcea-6a016e1f5293"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDAMSubmitBtnClick",
                "implHandler": [
                    "button.up().up().setLoading(true);\r",
                    "var me=this;\r",
                    "var form=Ext.getCmp(\"DAMFieldBox\").getForm();\r",
                    "var myDirectory=\"notFiled\";\r",
                    "try{\r",
                    "if ((!Ext.isEmpty(Ext.getCmp(\"DAMInterface\")))&&(Ext.getCmp(\"DAMInterface\").currentViewMode==\"folder\")){\r",
                    "    var realDirectory=Ext.clone(Ext.getStore(\"DAMFolderViewStore\").directoryFilter);\r",
                    "    if ((realDirectory!=\"emptyDecoy\")&&(realDirectory!=\"root\")){\r",
                    "        myDirectory=realDirectory;\r",
                    "    }\r",
                    "}\r",
                    "}catch(err){\r",
                    "console.log(\"directory error\");\r",
                    "}\r",
                    "form.submit({\r",
                    "    clientValidation: true,\r",
                    "    url: 'dam/create',\r",
                    "    params: { \r",
                    "        typeId: button.up().up().typeId,\r",
                    "        mainFileType: button.up().up().mainFileType,\r",
                    "        taxonomy: Ext.JSON.encode(me.getTaxoValues()),\r",
                    "        targetArray: Ext.JSON.encode(form.getFieldValues().target),\r",
                    "        directory:myDirectory\r",
                    "    },\r",
                    "    success: function(form, action) {\r",
                    "        button.up().up().setLoading(false);\r",
                    "        button.up().up().close();\r",
                    "        if (Ext.getCmp(\"DAMCreateUpdateWindow\").directContribute){\r",
                    "            Ext.getStore(\"DAMPickerStore\").load();\r",
                    "        } else if (Ext.getCmp(\"DAMInterface\").currentViewMode==\"search\"){\r",
                    "            Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "        } else {\r",
                    "            Ext.getStore(\"DAMFolderViewStore\").load();\r",
                    "        }\r",
                    "\r",
                    "    },\r",
                    "    failure: function(form, action) {\r",
                    "        button.up().up().setLoading(false);\r",
                    "        switch (action.failureType) {\r",
                    "            case Ext.form.action.Action.CLIENT_INVALID:\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.invalidFieldsError);\r",
                    "            break;\r",
                    "            case Ext.form.action.Action.CONNECT_FAILURE:\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.serverConnectionError);\r",
                    "            break;\r",
                    "            case Ext.form.action.Action.SERVER_INVALID:\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, action.result.msg);\r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSubmitBtn"
            },
            "designerId": "57e2450d-d0f1-44d4-b9ea-10613b64c090"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDAMUpdateBtnClick",
                "implHandler": [
                    "var record = Ext.getCmp(\"DAMCenter\").getSelectionModel().getLastSelected();\r",
                    "this.prepareContext(record.get(\"id\"), record.get(\"typeId\"));\r",
                    "/*\r",
                    "var DAMType= Ext.getStore(\"MediaTypesForDAM\").findRecord(\"id\", record.get(\"typeId\"));\r",
                    "var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "myEditor.setTitle(\"Edition du média \\\" \"+record.get(\"title\")+\" \\\"\");\r",
                    "Ext.getCmp(\"DAMSubmitBtn\").hide();\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").show();\r",
                    "Ext.getCmp(\"DAMFieldBox\").remove(Ext.getCmp(\"DAMFieldBox\").getComponent(1));\r",
                    "myEditor.show();\r",
                    "this.renderDAMTypeFields(DAMType, true);\r",
                    "this.renderTaxoFields(DAMType);\r",
                    "var valueBox=record.get(\"fields\");\r",
                    "if (Ext.isEmpty(valueBox)){valueBox={ };}\r",
                    "valueBox.title=record.get(\"title\");\r",
                    "valueBox.originalFileId=record.get(\"originalFileId\");\r",
                    "valueBox=Ext.Object.merge(valueBox,record.get(\"taxonomy\"));\r",
                    "myEditor.getComponent(0).getForm().setValues(valueBox);\r",
                    "Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();*/"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMUpdateBtn"
            },
            "designerId": "c586426f-a0ca-4dd4-866b-34a0aa255b20"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getTaxoValues",
                "implHandler": [
                    "var values = { };\r",
                    "Ext.Array.forEach(Ext.getCmp(\"DAMTaxoBox\").query(\"field\"),function(field){\r",
                    "    values[field.name]=field.getValue();\r",
                    "});\r",
                    "return(values);"
                ]
            },
            "designerId": "f85bcb7d-72e0-460c-bbae-9eb0a0b746a0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDAMSubmitUpdateBtnClick",
                "implHandler": [
                    "var me = this;\r",
                    "if((Ext.getCmp(\"DAMFieldBox\").getForm().isValid())&&(!Ext.isEmpty(Ext.getCmp(\"DAMOriginalUpd\").getValue()))){\r",
                    "    if (button.indepMode){\r",
                    "        var record = Ext.getStore(\"DAMEditStore\").getRange()[0];\r",
                    "    } else {\r",
                    "        var record = Ext.getCmp(\"DAMCenter\").getSelectionModel().getLastSelected();\r",
                    "    }\r",
                    "    record.beginEdit();\r",
                    "    record.set(\"title\",Ext.getCmp(\"DAMSEcondaryFieldsBox\").getComponent(0).getComponent(1).getValue());\r",
                    "    record.set(\"originalFileId\",Ext.getCmp(\"DAMMainFileFieldBox\").getComponent(0).getValue());\r",
                    "    record.set(\"fields\",Ext.getCmp(\"DAMFieldBox\").getForm().getValues());\r",
                    "    record.set(\"writeWorkspace\",Ext.getCmp(\"DAMFieldBox\").getForm().getValues().writeWorkspace);\r",
                    "    record.set(\"target\",Ext.getCmp(\"DAMFieldBox\").getForm().getValues().target);\r",
                    "    record.set(\"taxonomy\", me.getTaxoValues());\r",
                    "    Ext.getCmp(\"DAMDSLToolbar\").persisti18n(record);\r",
                    "    record.endEdit();\r",
                    "    button.up().up().close();\r",
                    "    if (Ext.getCmp(\"DAMInterface\").currentViewMode==\"search\"){\r",
                    "        Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "    } else {\r",
                    "        Ext.getStore(\"DAMFolderViewStore\").load();\r",
                    "    }\r",
                    "} else {Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle,Rubedo.RubedoAutomatedElementsLoc.invalidFieldsError);}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSubmitUpdateBtn"
            },
            "designerId": "47e4e631-cd13-4d44-89d1-7ac517bbd39c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDAMROBtnClick",
                "implHandler": [
                    "var record = Ext.getCmp(\"DAMCenter\").getSelectionModel().getLastSelected();\r",
                    "this.prepareContext(record.get(\"id\"), record.get(\"typeId\"), true);\r",
                    "/*\r",
                    "var DAMType= Ext.getCmp(\"DAMMTGrid\").getSelectionModel().getLastSelected();\r",
                    "var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "myEditor.setTitle(record.get(\"title\"));\r",
                    "Ext.getCmp(\"DAMSubmitBtn\").hide();\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").hide();\r",
                    "Ext.getCmp(\"DAMSwitchEditBtn\").show();\r",
                    "Ext.getCmp(\"DAMFieldBox\").remove(Ext.getCmp(\"DAMFieldBox\").getComponent(1));\r",
                    "myEditor.show();\r",
                    "this.renderDAMTypeFields(DAMType, true);\r",
                    "this.renderTaxoFields(DAMType);\r",
                    "var valueBox=record.get(\"fields\");\r",
                    "valueBox.title=record.get(\"title\");\r",
                    "valueBox.originalFileId=record.get(\"originalFileId\");\r",
                    "valueBox=Ext.Object.merge(valueBox,record.get(\"taxonomy\"));\r",
                    "myEditor.getComponent(0).getForm().setValues(valueBox);\r",
                    "Ext.Array.forEach(Ext.getCmp(\"DAMFieldBox\").query(\"field\"), function(thing){thing.setReadOnly(true);});\r",
                    "Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();\r",
                    "*/"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMROBtn"
            },
            "designerId": "14c187f7-70c8-43d7-9805-9b56e796fd53"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDAMSwitchEditBtnClick",
                "implHandler": [
                    "var record = Ext.getCmp(\"DAMCenter\").getSelectionModel().getLastSelected();\r",
                    "var myEditor = Ext.getCmp(\"DAMCreateUpdateWindow\");\r",
                    "button.hide();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"DAMFieldBox\").query(\"field\"), function(thing){thing.setReadOnly(false);});\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").show();\r",
                    "myEditor.setTitle(Rubedo.RubedoAutomatedElementsLoc.DAMEditText+\" \\\" \"+record.get(\"title\")+\" \\\"\");\r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSwitchEditBtn"
            },
            "designerId": "80490bdb-13d5-4753-aa36-02d33b8ad112"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridpanelItemDblClick",
                "implHandler": [
                    "if (ACL.interfaceRights[\"write.ui.dam\"]){\r",
                    "    this.prepareContext(record.get(\"id\"), record.get(\"typeId\"), record.get(\"readOnly\"));\r",
                    "} else {\r",
                    "    this.prepareContext(record.get(\"id\"), record.get(\"typeId\"), true);\r",
                    "}"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#DAMCenter"
            },
            "designerId": "692cc083-f2d2-4d56-a7f8-58ef4059890d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "prepareContext",
                "designer|params": [
                    "damId",
                    "typeId",
                    "ROMode"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "Ext.getStore(\"DAMEditStore\").clearFilter(true);\r",
                    "Ext.getStore(\"MTForDAMEdit\").clearFilter(true);\r",
                    "Ext.getStore(\"DAMEditStore\").filter(\"id\",damId);\r",
                    "Ext.getStore(\"MTForDAMEdit\").filter(\"id\",typeId);\r",
                    "var counter = 3;\r",
                    "Ext.getStore(\"MTForDAMEdit\").addListener(\"load\", function(){\r",
                    "    counter = counter - 1;\r",
                    "    if (counter === 0) {\r",
                    "        me.fireUnitaryEdit(ROMode);\r",
                    "    }\r",
                    "},this, {single:true});\r",
                    "    Ext.getStore(\"TaxonomyForDam2\").addListener(\"load\", function(){\r",
                    "        counter = counter - 1;\r",
                    "        if (counter === 0) {\r",
                    "            me.fireUnitaryEdit(ROMode);\r",
                    "        }\r",
                    "    },this, {single:true});\r",
                    "        Ext.getStore(\"DAMEditStore\").addListener(\"load\", function(){\r",
                    "            counter = counter - 1;\r",
                    "            if (counter === 0) {\r",
                    "                me.fireUnitaryEdit(ROMode);\r",
                    "            }\r",
                    "        },this, {single:true});\r",
                    "            Ext.getStore(\"MTForDAMEdit\").load();\r",
                    "            Ext.getStore(\"TaxonomyForDam2\").load();\r",
                    "            Ext.getStore(\"DAMEditStore\").load();\r",
                    ""
                ]
            },
            "designerId": "496e818b-9326-452b-972b-aa61778fb62e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "fireUnitaryEdit",
                "designer|params": [
                    "ROMode"
                ],
                "implHandler": [
                    "var record = Ext.getStore(\"DAMEditStore\").getRange()[0];\r",
                    "var DAMType= Ext.getStore(\"MTForDAMEdit\").getRange()[0];\r",
                    "var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "myEditor.on(\"beforeclose\", function(){\r",
                    "    Ext.getStore(\"MTForDAMEdit\").removeAll();\r",
                    "    Ext.getStore(\"DAMEditStore\").removeAll();\r",
                    "    Ext.getStore(\"TaxonomyForDam2\").removeAll();\r",
                    "});\r",
                    "myEditor.setTitle(Rubedo.RubedoAutomatedElementsLoc.DAMEditText+\" \\\" \"+record.get(\"title\")+\" \\\"\");\r",
                    "Ext.getCmp(\"DAMSubmitBtn\").hide();\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").show();\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").indepMode=true;\r",
                    "Ext.getCmp(\"DAMSEcondaryFieldsBox\").remove(Ext.getCmp(\"DAMSEcondaryFieldsBox\").getComponent(1));\r",
                    "myEditor.show();\r",
                    "this.renderDAMTypeFields(DAMType, true);\r",
                    "this.renderTaxoFields(DAMType, true);\r",
                    "var valueBox=record.get(\"fields\");\r",
                    "if (Ext.isEmpty(valueBox)){valueBox={ };}\r",
                    "valueBox.title=record.get(\"title\");\r",
                    "valueBox.originalFileId=record.get(\"originalFileId\");\r",
                    "valueBox=Ext.Object.merge(valueBox,record.get(\"taxonomy\"));\r",
                    "myEditor.getComponent(0).getForm().setValues(valueBox);\r",
                    "Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();\r",
                    "if (ROMode){\r",
                    "    Ext.Array.forEach(myEditor.query(\"field\"), function(thing){thing.setReadOnly(true);});\r",
                    "    //Ext.Array.forEach(myEditor.query(\"button\"), function(thing){thing.disable();});\r",
                    "    myEditor.setTitle(Rubedo.RubedoAutomatedElementsLoc.DAMDisplayText+\" \\\" \"+record.get(\"title\")+\" \\\"\");\r",
                    "    Ext.getCmp(\"DAMSubmitUpdateBtn\").hide();\r",
                    "}\r",
                    "Ext.getCmp(\"DAMDSLToolbar\").recievei18n(record.get(\"i18n\"),record.get(\"locale\"),record.get(\"nativeLanguage\"));"
                ]
            },
            "designerId": "b46baeb9-0cac-4bfa-b961-22357ac8f3bf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderFacets",
                "designer|params": [
                    "facets"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var target=Ext.getCmp(\"DAMFacetBox\");\r",
                    "target.removeAll();\r",
                    "Ext.Array.forEach(facets, function(facet){\r",
                    "    if (facet._type==\"range\"){\r",
                    "        facet.id=\"lastupdatetime\";\r",
                    "        facet.terms=[ ];\r",
                    "        if (!Ext.isEmpty(facet.ranges)){\r",
                    "            Ext.Array.forEach(facet.ranges, function(rangeTerm){\r",
                    "                if ((rangeTerm.count<Ext.getStore(\"DAMFacetteStore\").getTotalCount())&&(rangeTerm.count!==0)){\r",
                    "                    facet.terms.push(rangeTerm);\r",
                    "                    rangeTerm.term=rangeTerm.from;\r",
                    "\r",
                    "                }\r",
                    "            });\r",
                    "        }\r",
                    "    }\r",
                    "    if (!Ext.isEmpty(facet.terms)){\r",
                    "        var newFacet = Ext.widget(\"fieldset\", {title:facet.label, collapsible:true});\r",
                    "        if(facet.id!=\"damType\"){newFacet.collapse();}\r",
                    "        newFacet.usedProperty=facet.id;\r",
                    "\r",
                    "        Ext.Array.forEach(facet.terms, function(term){\r",
                    "            var newTerm=Ext.widget(\"button\",{\r",
                    "                text:term.label+\" (\"+term.count+\")\",\r",
                    "                usedValue:term.term,\r",
                    "                anchor:\"100%\",\r",
                    "                handler:function(thing){\r",
                    "                    var theProp=Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.up().usedProperty];\r",
                    "                    if ((!Ext.isEmpty(theProp))&&(facet._type!=\"range\")){\r",
                    "                        if (Ext.isArray(theProp)){\r",
                    "                            theProp.push(thing.usedValue);\r",
                    "                        } else {\r",
                    "                            theProp=[theProp,thing.usedValue];\r",
                    "                        }\r",
                    "\r",
                    "                    } else {\r",
                    "                        theProp=thing.usedValue;\r",
                    "\r",
                    "                    }\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.up().usedProperty]=theProp;\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").loadPage(1);\r",
                    "                }\r",
                    "            });\r",
                    "            newFacet.add(newTerm);\r",
                    "        });\r",
                    "\r",
                    "        target.add(newFacet);\r",
                    "    }\r",
                    "});\r",
                    ""
                ]
            },
            "designerId": "5f142959-7d2b-45a5-8e1e-144e449e9c07"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderActiveFacets",
                "designer|params": [
                    "facets"
                ],
                "implHandler": [
                    "Ext.getCmp(\"DAMSearchField\").setValue(Ext.getStore(\"DAMFacetteStore\").activeFacettes.query);\r",
                    "var target=Ext.getCmp(\"DAMActiveFacetBox\");\r",
                    "target.removeAll();\r",
                    "Ext.Array.forEach(facets, function(thing){\r",
                    "    if (thing.terms.length>1){\r",
                    "        Ext.Array.forEach(thing.terms,function(term){\r",
                    "            var activeOne = Ext.widget('splitbutton',{\r",
                    "                pressed:true,\r",
                    "                cls:\"show-cross\",\r",
                    "                text:thing.label+\" : \"+term.label,\r",
                    "                arrowHandler:function(){\r",
                    "                    Ext.Array.remove(Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.id],term.term);\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").loadPage(1);\r",
                    "                },\r",
                    "                handler:function(){\r",
                    "                    Ext.Array.remove(Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.id],term.term);\r",
                    "                    Ext.getStore(\"DAMFacetteStore\").loadPage(1);\r",
                    "                }\r",
                    "            });\r",
                    "            if(thing.label==\"Query\"){\r",
                    "                activeOne.setText(Rubedo.RubedoAutomatedElementsLoc.searchText+\" : \"+thing.terms[0].label);\r",
                    "            }\r",
                    "            target.add(activeOne);\r",
                    "        });\r",
                    "    } else {\r",
                    "        var activeOne = Ext.widget('splitbutton',{\r",
                    "            pressed:true,\r",
                    "            cls:\"show-cross\",\r",
                    "            text:thing.label+\" : \"+thing.terms[0].label,\r",
                    "            arrowHandler:function(){\r",
                    "                delete Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.id];\r",
                    "                Ext.getStore(\"DAMFacetteStore\").loadPage(1);\r",
                    "            },\r",
                    "            handler:function(){\r",
                    "                delete Ext.getStore(\"DAMFacetteStore\").activeFacettes[thing.id];\r",
                    "                Ext.getStore(\"DAMFacetteStore\").loadPage(1);\r",
                    "            }\r",
                    "        });\r",
                    "        if(thing.label==\"Query\"){\r",
                    "            activeOne.setText(Rubedo.RubedoAutomatedElementsLoc.searchText+\" : \"+thing.terms[0].label);\r",
                    "        }\r",
                    "        target.add(activeOne);\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "b0bcac57-f9cc-4a57-a550-cd4e09c212b5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDAMSearchBtnClick",
                "implHandler": [
                    "Ext.getStore(\"DAMFacetteStore\").activeFacettes.query=Ext.getCmp(\"DAMSearchField\").getValue();\r",
                    "Ext.getStore(\"DAMFacetteStore\").load();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSearchBtn"
            },
            "designerId": "39daff7b-7cc8-4a4d-8a1a-c89e9d6e33ba"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddDamAfterTypeBtnClick",
                "implHandler": [
                    "if (!button.nonClassic){\r",
                    "    if (button.up().getForm().isValid()){\r",
                    "        var DAMType= Ext.getStore(\"MediaTypesForDAM\").findRecord(\"id\",button.up().getForm().getValues().typeId);\r",
                    "        var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "        Ext.getCmp(\"DAMMainFileFieldBox\").up().remove(Ext.getCmp(\"DAMMainFileFieldBox\"));\r",
                    "        myEditor.typeId=DAMType.get(\"id\");\r",
                    "        myEditor.mainFileType=DAMType.get(\"mainFileType\");\r",
                    "        myEditor.setTitle(Rubedo.RubedoAutomatedElementsLoc.newDamText+\" \"+DAMType.get(\"type\"));\r",
                    "        myEditor.show();\r",
                    "        this.renderDAMTypeFields(DAMType, false);\r",
                    "        this.renderTaxoFields(DAMType);\r",
                    "        Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();\r",
                    "        button.up().up().close();\r",
                    "    } \r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addDamAfterTypeBtn"
            },
            "designerId": "5b4c25c8-302b-4774-8ebe-f7cce1e6848c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMassDamUploadBtnClick",
                "implHandler": [
                    "if ((Ext.getCmp(\"DAMInterface\").currentViewMode!=\"search\")||(Ext.isEmpty(Ext.getStore(\"DAMFacetteStore\").activeFacettes.damType))){\r",
                    "    Ext.widget(\"damTypeFacetImposeWindow\").show();\r",
                    "} else {\r",
                    "    Ext.widget(\"MassDamUploadWindow\").show();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#massDamUploadBtn"
            },
            "designerId": "90847aad-6b72-445f-b293-77c2a51a5205"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onImposeDamTypeFacetBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){ \r",
                    "    if (Ext.getCmp(\"DAMInterface\").currentViewMode!=\"search\"){\r",
                    "        Ext.widget(\"MassDamUploadWindow\", {usedType:form.getValues().typeId}).show();\r",
                    "    } else {\r",
                    "    Ext.getStore(\"DAMFacetteStore\").activeFacettes.damType=form.getValues().typeId;\r",
                    "    Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "    Ext.widget(\"MassDamUploadWindow\").show();\r",
                    "    }\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#imposeDamTypeFacetBtn"
            },
            "designerId": "00afb5b6-e001-4940-9dc9-d968611b4b48"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onPixlrEditorWindowAfterRender",
                "implHandler": [
                    "var targetedImageId = component.targetedImageId;\r",
                    "var targetedImageTitle = component.targetedImageTitle;\r",
                    "var targetedImageVersion= component.targetedImageVersion;\r",
                    "var iconUrl =encodeURIComponent(window.location.protocol+\"//\"+window.location.host+\"/backoffice/resources/icones/logoRubedo.png\");\r",
                    "var exitUrl =encodeURIComponent(window.location.protocol+\"//\"+window.location.host+\"/backoffice/resources/afterPixlr.html\");\r",
                    "var imageUrl =encodeURIComponent(window.location.protocol+\"//\"+window.location.host+\"/backoffice/image/get?file-id=\"+targetedImageId+\"&version=\"+targetedImageVersion);\r",
                    "var imageResponseUrl =encodeURIComponent(window.location.protocol+\"//\"+window.location.host+\"/backoffice/file/update?originalId=\"+targetedImageId+\"&token=\"+ACL.CSRFToken);\r",
                    "var holder=Ext.widget(\"panel\", {header:false, autoScroll:true});\r",
                    "component.add(holder);\r",
                    "var addHtml='<iframe id=\"pixlr\" type=\"text/html\" width=\"100%\" height=\"1200px\" src=\"http://pixlr.com/editor/?referrer=Rubedo&title='+targetedImageTitle+'&locktitle=true&method=POST&image='+imageUrl+'&target='+imageResponseUrl+'&locktarget=true&icon='+iconUrl+'&exit='+exitUrl+'\" frameborder=\"0\"></iframe>';\r",
                    "holder.update(addHtml);"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.window.Window",
                "designer|controlQuery": "#pixlrEditorWindow"
            },
            "designerId": "f413c44a-1c0d-4e56-ae92-8bb775100d79"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDAMSwitchModeBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var mode =Ext.getCmp(\"DAMInterface\").currentViewMode;\r",
                    "if (mode==\"search\"){\r",
                    "\tme.switchToFolderView();\r",
                    "} else {\r",
                    "\tme.switchToSearchView();\r",
                    "}\r",
                    "button.adaptToCurrentMode();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSwitchModeBtn"
            },
            "designerId": "6b670efe-c050-45f7-9751-34c537d2ccff"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "switchToFolderView",
                "implHandler": [
                    "Ext.getCmp(\"DAMInterface\").currentViewMode=\"folder\";\r",
                    "Ext.getCmp(\"DAMLeftBox\").getLayout().setActiveItem(1);\r",
                    "Ext.getCmp(\"DAMActiveFacetBox\").hide();\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(1).getComponent(0).getView().bindStore(\"DAMFolderViewStore\");\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(1).getComponent(0).store=Ext.getStore(\"DAMFolderViewStore\");\r",
                    "Ext.getStore(\"DAMFolderViewStore\").load();\r",
                    "Ext.getCmp(\"filePlanEditBtnGroup\").show();\r",
                    "Ext.getCmp(\"mainDirectoriesTree\").getSelectionModel().select(Ext.getStore(\"DirectoriesStore\").getNodeById(Ext.getStore(\"DAMFolderViewStore\").directoryFilter));\r",
                    "Ext.getCmp(\"DAMCenter\").plugins[0].silenced=true;\r",
                    "Ext.getCmp(\"DAMCenter\").view.plugins[0].enable();"
                ]
            },
            "designerId": "3dc95abd-f533-49a8-8710-4ac5e9baeb52"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "switchToSearchView",
                "implHandler": [
                    "Ext.getCmp(\"DAMInterface\").currentViewMode=\"search\";\r",
                    "Ext.getCmp(\"DAMLeftBox\").getLayout().setActiveItem(0);\r",
                    "Ext.getCmp(\"DAMActiveFacetBox\").show();\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(1).getComponent(0).getView().bindStore(\"DAMFacetteStore\");\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(1).getComponent(0).store=Ext.getStore(\"DAMFacetteStore\");\r",
                    "Ext.getStore(\"DAMFacetteStore\").load();\r",
                    "Ext.getCmp(\"filePlanEditBtnGroup\").hide();\r",
                    "Ext.getCmp(\"DAMCenter\").plugins[0].silenced=false;\r",
                    "Ext.getCmp(\"DAMCenter\").view.plugins[0].disable();"
                ]
            },
            "designerId": "b028e857-b7f6-429f-b1d7-c23b40f107c2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDAMFolderViewFiltersBtnClick",
                "implHandler": [
                    "var selected=Ext.Array.pluck(Ext.Array.pluck(button.up().up().getSelectionModel().getSelection(),\"data\"),\"id\");\r",
                    "Ext.getStore(\"DAMFolderViewStore\").DAMTypeFilters=selected;\r",
                    "Ext.getStore(\"DAMFolderViewStore\").load();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMFolderViewFiltersBtn"
            },
            "designerId": "8dffcc30-9ce4-4600-916c-83e78f50c912"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddDirectoryBtnClick",
                "implHandler": [
                    "Ext.widget(\"newDirectoryWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addDirectoryBtn"
            },
            "designerId": "27cdaf2c-c812-48bf-a849-095c56d84ab6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewDirectorySubmitBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "var target=Ext.getCmp(\"mainDirectoriesTree\").getSelectionModel().getLastSelected();\r",
                    "if (Ext.isEmpty(target)) {\r",
                    "    target=Ext.getCmp(\"mainDirectoriesTree\").getRootNode();\r",
                    "}\r",
                    "if (form.isValid()){\r",
                    "    var newPage=form.getValues();\r",
                    "    newPage.expandable=false;\r",
                    "    newPage.filePlan=\"default\";\r",
                    "    newPage.inheritWorkspace=true;\r",
                    "    var store=Ext.getCmp(\"mainDirectoriesTree\").getStore();\r",
                    "    store.suspendAutoSync();\r",
                    "    target.set(\"expandable\",true);\r",
                    "    target.expand(false, function(){\r",
                    "        if (!target.hasChildNodes()){\r",
                    "            newPage.orderValue=100;\r",
                    "        } else {\r",
                    "            newPage.orderValue=target.lastChild.get(\"orderValue\")+100;\r",
                    "        }\r",
                    "        target.appendChild(newPage);\r",
                    "        store.resumeAutoSync();\r",
                    "        store.sync();        \r",
                    "        button.up().up().close();\r",
                    "    });\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newDirectorySubmitBtn"
            },
            "designerId": "340a45b1-a99b-4ab1-ab0f-c7fea054547c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRemoveDirectoryBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var target=Ext.getCmp(\"mainDirectoriesTree\").getSelectionModel().getLastSelected();\r",
                    "\r",
                    "var delCon = Ext.widget('delConfirmZ');\r",
                    "delCon.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisFolderText;\r",
                    "delCon.show();\r",
                    "var store=Ext.getCmp(\"mainDirectoriesTree\").getStore();\r",
                    "Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "    store.suspendAutoSync();\r",
                    "    var myParent=target.parentNode;\r",
                    "    if ((myParent.childNodes.length==1)&&(!myParent.isRoot())){\r",
                    "        myParent.set(\"expandable\",false);\r",
                    "    }\r",
                    "    target.remove();\r",
                    "    store.resumeAutoSync();\r",
                    "    store.sync();\r",
                    "    Ext.getCmp('delConfirmZ').close();\r",
                    "    Ext.getCmp(\"removeDirectoryBtn\").disable();\r",
                    "    Ext.getCmp(\"directorySettingsBtn\").disable();\r",
                    "});\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#removeDirectoryBtn"
            },
            "designerId": "99c553ee-39a2-40b1-915e-a005bc244e7e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMainDirectoriesTreeSelectionChange",
                "implHandler": [
                    "Ext.getCmp(\"addDirectoryBtn\").enable();\r",
                    "Ext.getCmp(\"removeDirectoryBtn\").enable();\r",
                    "Ext.getCmp(\"directorySettingsBtn\").enable();\r",
                    "Ext.getCmp(\"DAMCenter\").view.plugins[0].enable();\r",
                    "if (Ext.isEmpty(selected)){\r",
                    "    Ext.getCmp(\"removeDirectoryBtn\").disable();\r",
                    "    Ext.getCmp(\"directorySettingsBtn\").disable();\r",
                    "    Ext.getStore(\"DAMFolderViewStore\").directoryFilter=\"emptyDecoy\";\r",
                    "    Ext.getStore(\"DAMFolderViewStore\").load();\r",
                    "} else {\r",
                    "    if (selected[0].isRoot()){\r",
                    "        Ext.getCmp(\"removeDirectoryBtn\").disable();\r",
                    "        Ext.getCmp(\"directorySettingsBtn\").disable();\r",
                    "    } else if (selected[0].get(\"id\")==\"notFiled\") {\r",
                    "        Ext.getCmp(\"addDirectoryBtn\").disable();\r",
                    "        Ext.getCmp(\"removeDirectoryBtn\").disable();\r",
                    "        Ext.getCmp(\"directorySettingsBtn\").disable();\r",
                    "    } else if (selected[0].get(\"readOnly\")) {\r",
                    "        Ext.getCmp(\"addDirectoryBtn\").disable();\r",
                    "        Ext.getCmp(\"removeDirectoryBtn\").disable();\r",
                    "        Ext.getCmp(\"DAMCenter\").view.plugins[0].disable();\r",
                    "    }\r",
                    "    if (Ext.getStore(\"DAMFolderViewStore\").directoryFilter!=Ext.clone(selected[0].get(\"id\"))){\r",
                    "        Ext.getStore(\"DAMFolderViewStore\").directoryFilter=Ext.clone(selected[0].get(\"id\"));\r",
                    "        Ext.getStore(\"DAMFolderViewStore\").load();\r",
                    "    }\r",
                    "\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.tree.Panel",
                "designer|controlQuery": "#mainDirectoriesTree"
            },
            "designerId": "527a2e69-0295-40f7-95cd-f4694d9cc1b2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDirectorySettingsBtnClick",
                "implHandler": [
                    "Ext.widget(\"directoryConfiguratorWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#directorySettingsBtn"
            },
            "designerId": "7f047c27-2916-4b27-8c68-df895a45dbe5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDirectorySettingsApplyBtnClick",
                "implHandler": [
                    "if (button.up().getForm().isValid()){\r",
                    "    Ext.getCmp(\"mainDirectoriesTree\").getSelectionModel().getLastSelected().set(button.up().getForm().getValues());\r",
                    "    button.up().up().close();\r",
                    "    Ext.getCmp(\"mainDirectoriesTree\").getSelectionModel().getLastSelected().collapseChildren(true);\r",
                    "    Ext.getCmp(\"mainDirectoriesTree\").getStore().load({\"node\":Ext.getCmp(\"mainDirectoriesTree\").getSelectionModel().getLastSelected()});\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#directorySettingsApplyBtn"
            },
            "designerId": "4b295550-eac2-4ddb-ace3-256bffdb2525"
        }
    ]
}