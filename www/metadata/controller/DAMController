{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "DAMController",
        "designer|userAlias": "DAMController"
    },
    "id": "ExtBox1-ext-gen19013",
    "designerId": "be2b5e1d-97ad-4d34-bac5-6baea7859c11",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "resetInterfaceSelect",
                "fn": "resetInterfaceSelect",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "var me =this;\r",
                    "Ext.getCmp(\"addDAMBtn\").enable();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"DAMInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.enable();});\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"Mèdiathéque <b> > </b>\", iconCls:\"mediaTypes\"}));\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: record.get(\"type\"), iconCls:\"folder\"}));\r",
                    "Ext.getStore(\"DAMStore\").getProxy().extraParams.tFilter=\"[{\\\"property\\\":\\\"typeId\\\",\\\"value\\\":\\\"\"+record.get(\"id\")+\"\\\"}]\";\r",
                    "Ext.getStore(\"DAMStore\").load();\r",
                    ""
                ]
            },
            "designerId": "0ef724d8-3feb-47fe-909f-82b69ff25e50"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "resetInterfaceNoSelect",
                "fn": "resetInterfaceNoSelect",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp(\"DAMInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.disable();});\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"DAMInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"Types de médias\", iconCls:\"mediaTypes\"}));\r",
                    "Ext.getCmp(\"addDAMBtn\").disable();\r",
                    "Ext.getStore(\"DAMStore\").removeAll();"
                ]
            },
            "designerId": "8b1bb213-2eb0-46f6-ab5f-4364e1832f7e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectDAMType",
                "fn": "selectDAMType",
                "implHandler": [
                    "if (Ext.isEmpty(selections)){\r",
                    "    this.resetInterfaceNoSelect();\r",
                    "} else {\r",
                    "    this.resetInterfaceSelect(selections[0]);\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#DAMMTGrid"
            },
            "designerId": "523b4c13-412e-4438-9b57-e4d00a3ec826"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderDAMTypeFields",
                "fn": "renderDAMTypeFields",
                "designer|params": [
                    "DAMType",
                    "updateMode"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var fieldBox=Ext.getCmp(\"DAMFieldBox\");\r",
                    "Ext.Array.forEach(DAMType.get(\"fields\"),function(field){\r",
                    "    me.renderMTField(Ext.clone(field), fieldBox, updateMode);\r",
                    "});"
                ]
            },
            "designerId": "899d0fcf-8b27-47d1-8d29-78c1784ca4de"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderMTField",
                "fn": "renderMTField",
                "designer|params": [
                    "protoData",
                    "renderTarget",
                    "updateMode"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var configurator=protoData.config;\r",
                    "if (protoData.cType == 'combobox') {\r",
                    "    var myStore=  Ext.create('Ext.data.Store', Ext.clone(protoData.config.store));\r",
                    "    configurator.store = myStore;\r",
                    "} else if ((updateMode)&&(protoData.cType == 'Ext.form.field.File')){\r",
                    "    protoData.cType=\"Ext.form.field.Text\";\r",
                    "}\r",
                    "var newField= Ext.create(protoData.cType, configurator);\r",
                    "newField.config=protoData.config;\r",
                    "newField.protoId=protoData.protoId;\r",
                    "newField.configFields=Ext.getStore(\"MTFieldsStore\").findRecord(\"id\", protoData.protoId).get(\"configFields\");\r",
                    "newField.cType=protoData.cType;\r",
                    "newField.anchor = '90%';\r",
                    "newField.style = '{float:left;}';\r",
                    "var casing =Ext.widget('ChampTC');\r",
                    "casing.add(newField);\r",
                    "casing.getComponent('helpBouton').setTooltip(newField.config.tooltip);\r",
                    "if (Ext.isEmpty(newField.config.tooltip)){\r",
                    "    casing.getComponent('helpBouton').hidden=true;\r",
                    "} \r",
                    "renderTarget.insert(renderTarget.items.items.length-3,casing);"
                ]
            },
            "designerId": "2092c93a-ac01-475b-ba80-2011248055db"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onAddDAMBtnClick",
                "fn": "onAddDAMBtnClick",
                "implHandler": [
                    "var DAMType= Ext.getCmp(\"DAMMTGrid\").getSelectionModel().getLastSelected();\r",
                    "var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "myEditor.show();\r",
                    "this.renderDAMTypeFields(DAMType, false);\r",
                    "this.renderTaxoFields(DAMType);\r",
                    "Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addDAMBtn"
            },
            "designerId": "d4294581-6975-44d3-a7b8-48c808aabda5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderTaxoFields",
                "fn": "renderTaxoFields",
                "designer|params": [
                    "DAMType"
                ],
                "implHandler": [
                    "var formTaxoTC =  Ext.getCmp('DAMTaxoBox');\r",
                    "var lesTaxo = DAMType.get(\"vocabularies\");\r",
                    "var i=0;\r",
                    "for (i=0; i<lesTaxo.length; i++) {\r",
                    "    var leVocab = Ext.getStore('TaxonomyForDAM').findRecord('id', lesTaxo[i]);\r",
                    "    var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "        model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "        remoteFilter:\"true\",\r",
                    "        proxy: {\r",
                    "            type: 'ajax',\r",
                    "            api: {\r",
                    "                read: 'taxonomy-terms'\r",
                    "            },\r",
                    "            reader: {\r",
                    "                type: 'json',\r",
                    "                messageProperty: 'message',\r",
                    "                root: 'data'\r",
                    "            },\r",
                    "            encodeFilters: function(filters) {\r",
                    "                var min = [],\r",
                    "                length = filters.length,\r",
                    "                i = 0;\r",
                    "\r",
                    "                for (; i < length; i++) {\r",
                    "                    min[i] = {\r",
                    "                        property: filters[i].property,\r",
                    "                        value   : filters[i].value\r",
                    "                    };\r",
                    "                    if (filters[i].type) {\r",
                    "                        min[i].type = filters[i].type;\r",
                    "                    }\r",
                    "                    if (filters[i].operator) {\r",
                    "                        min[i].operator = filters[i].operator;\r",
                    "                    }\r",
                    "                }\r",
                    "                return this.applyEncoding(min);\r",
                    "            }\r",
                    "        },\r",
                    "        filters: {\r",
                    "            property: 'vocabularyId',\r",
                    "            value: leVocab.get(\"id\")\r",
                    "        }\r",
                    "\r",
                    "    });\r",
                    "    storeT.on(\"beforeload\", function(s,o){\r",
                    "        o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "        if (!Ext.isEmpty(o.params.comboQuery)){\r",
                    "\r",
                    "            var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                property:\"text\",\r",
                    "                value:o.params.comboQuery,\r",
                    "                operator:'like'\r",
                    "            });\r",
                    "\r",
                    "            o.filters.push(newFilter);\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "    var selecteur = Ext.widget('comboboxselect', {\r",
                    "        name:leVocab.get(\"id\"),\r",
                    "        anchor:\"90%\",\r",
                    "        fieldLabel: leVocab.get(\"name\"),\r",
                    "        autoScroll: false,\r",
                    "        store: storeT,\r",
                    "        queryMode: 'remote',\r",
                    "        queryParam: 'comboQuery',\r",
                    "        minChars:3,\r",
                    "        displayField: 'text',\r",
                    "        valueField: 'id',\r",
                    "        filterPickList: true,\r",
                    "        typeAhead: true,\r",
                    "        forceSelection: !leVocab.data.expandable,\r",
                    "        createNewOnEnter: leVocab.data.expandable,\r",
                    "        multiSelect: leVocab.data.multiSelect,\r",
                    "        allowBlank: !leVocab.data.mandatory\r",
                    "    });\r",
                    "    var enrobage =Ext.widget('ChampTC');\r",
                    "    enrobage.add(selecteur);\r",
                    "    enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);\r",
                    "    if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}\r",
                    "    formTaxoTC.add(enrobage);\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "d1ba1045-af86-4901-9aa5-c79962ca4a7d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectDAM",
                "fn": "selectDAM",
                "implHandler": [
                    "Ext.getCmp(\"DAMDeleteBtn\").enable();\r",
                    "Ext.getCmp(\"DAMUpdateBtn\").enable();\r",
                    "if (Ext.isEmpty(selections)) {\r",
                    "    Ext.getCmp(\"DAMDeleteBtn\").disable();\r",
                    "    Ext.getCmp(\"DAMUpdateBtn\").disable();\r",
                    "\r",
                    "} else if (selections.length==1) {\r",
                    "\r",
                    "} else {\r",
                    "    Ext.getCmp(\"DAMUpdateBtn\").disable();\r",
                    "\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#DAMCenter"
            },
            "designerId": "54e84151-7d25-4893-b80a-090e656b60ba"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMDeleteBtnClick",
                "fn": "onDAMDeleteBtnClick",
                "implHandler": [
                    "Ext.getCmp(\"DAMCenter\").getStore().remove(Ext.getCmp(\"DAMCenter\").getSelectionModel().getSelection());"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMDeleteBtn"
            },
            "designerId": "9b1297a5-1654-43ec-bcea-6a016e1f5293"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMSubmitBtnClick",
                "fn": "onDAMSubmitBtnClick",
                "implHandler": [
                    "button.up().setLoading(true);\r",
                    "var form=button.up().getForm();\r",
                    "form.submit({\r",
                    "    clientValidation: true,\r",
                    "    url: 'dam/create',\r",
                    "    params: { \r",
                    "        typeId: Ext.getCmp(\"DAMMTGrid\").getSelectionModel().getLastSelected().get(\"id\")\r",
                    "    },\r",
                    "    success: function(form, action) {\r",
                    "        button.up().setLoading(false);\r",
                    "        button.up().up().up().close();\r",
                    "        Ext.getStore(\"DAMStore\").load();\r",
                    "    },\r",
                    "    failure: function(form, action) {\r",
                    "        button.up().setLoading(false);\r",
                    "        switch (action.failureType) {\r",
                    "            case Ext.form.action.Action.CLIENT_INVALID:\r",
                    "            Ext.Msg.alert('Erreur', 'Certains champs sont invalides');\r",
                    "            break;\r",
                    "            case Ext.form.action.Action.CONNECT_FAILURE:\r",
                    "            Ext.Msg.alert('Erreur', 'Erreur Ajax');\r",
                    "            break;\r",
                    "            case Ext.form.action.Action.SERVER_INVALID:\r",
                    "            Ext.Msg.alert('Erreur', action.result.msg);\r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMSubmitBtn"
            },
            "designerId": "57e2450d-d0f1-44d4-b9ea-10613b64c090"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDAMUpdateBtnClick",
                "fn": "onDAMUpdateBtnClick",
                "implHandler": [
                    "var record = Ext.getCmp(\"DAMCenter\").getSelectionModel().getLastSelected();\r",
                    "var DAMType= Ext.getCmp(\"DAMMTGrid\").getSelectionModel().getLastSelected();\r",
                    "var myEditor = Ext.widget(\"DAMCreateUpdateWindow\");\r",
                    "myEditor.setTitle(\"Edition du DAM \\\" \"+record.get(\"title\")+\" \\\"\");\r",
                    "Ext.getCmp(\"DAMSubmitBtn\").hide();\r",
                    "Ext.getCmp(\"DAMSubmitUpdateBtn\").show();\r",
                    "myEditor.show();\r",
                    "this.renderDAMTypeFields(DAMType, true);\r",
                    "this.renderTaxoFields(DAMType);\r",
                    "var valueBox=record.get(\"fields\");\r",
                    "valueBox.title=record.get(\"title\");\r",
                    "valueBox.originalFile=record.get(\"originalFile\");\r",
                    "myEditor.getComponent(0).getForm().setValues(valueBox);\r",
                    "Ext.getCmp(\"DAMCreateUpdateWindow\").doLayout();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#DAMUpdateBtn"
            },
            "designerId": "c586426f-a0ca-4dd4-866b-34a0aa255b20"
        }
    ]
}