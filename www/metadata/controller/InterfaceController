{
    "id": "ExtBox1-ext-gen8159",
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "views": [
            "menuPrincipalInterface"
        ],
        "designer|userClassName": "InterfaceController",
        "designer|userAlias": "InterfaceController"
    },
    "customConfigs": [],
    "designerId": "130f60c3-0d78-444a-92e2-79b56d3ab643",
    "$viewOrder": 0,
    "expanded": true,
    "cn": [
        {
            "id": "ExtBox1-ext-gen12025",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "afficherMenuPrincipal",
                "implHandler": [
                    "if (Ext.isDefined(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "    Ext.getCmp('menuPrincipalInterface').destroy();\r",
                    "}\r",
                    "else {\r",
                    "    var menuPrincipal = Ext.widget('menuPrincipalInterface');\r",
                    "\r",
                    "\r",
                    "    menuPrincipal.showAt(0, Ext.getCmp('desktopCont').getHeight()-310);   \r",
                    "    menuPrincipal.getEl().addListener('mouseover', function(){  Ext.getBody().removeAllListeners(); });\r",
                    "    menuPrincipal.getEl().addListener('mouseout', function(){  Ext.getBody().addListener('click', function(){ if (Ext.isDefined(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "        Ext.getCmp('menuPrincipalInterface').destroy();\r",
                    "    }}); });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonPincipalInterface",
                "designer|userClassName": "afficherMenuPrincipal"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen69912",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "maximize",
                "implHandler": [
                    "tool.up().up().toggleMaximize();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.panel.Tool",
                "designer|controlQuery": "[itemId='windowMaximize']",
                "designer|userClassName": "maximize"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen18307",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "compenserResize",
                "implHandler": [
                    "Ext.getCmp('boiteAIconesBureau').setHeight(abstractcomponent.getHeight());\r",
                    "Ext.getCmp('boiteAIconesBureau').setWidth(abstractcomponent.getWidth());\r",
                    "if (Ext.isDefined(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "    Ext.getCmp('menuPrincipalInterface').showAt(0, abstractcomponent.getHeight()-310);\r",
                    "}"
                ],
                "name": "resize",
                "scope": "me",
                "designer|targetType": "Ext.container.Container",
                "designer|controlQuery": "#desktopCont",
                "designer|userClassName": "compenserResize"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen50527",
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onLaunch",
                "implHandler": [
                    "Ext.getBody().addListener('click', function(){ if (Ext.isDefined(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "    Ext.getCmp('menuPrincipalInterface').destroy();\r",
                    "}});\r",
                    "Ext.getCmp('boutonPincipalInterface').addListener('mouseover', function(){  Ext.getBody().removeAllListeners(); });\r",
                    "Ext.getCmp('boutonPincipalInterface').addListener('mouseout', function(){  Ext.getBody().addListener('click', function(){ if (Ext.isDefined(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "    Ext.getCmp('menuPrincipalInterface').destroy();\r",
                    "}}); }); "
                ],
                "designer|userClassName": "onLaunch"
            },
            "customConfigs": [],
            "iconCls": "icon-basic-function",
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen59410",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "componrtementWindow",
                "implHandler": [
                    "var boutonCompagnon = Ext.widget('splitbutton', {text: abstractcomponent.title, iconCls: abstractcomponent.iconCls, arrowCls:\"split\", enableToggle: true,allowDepress: false});\r",
                    "abstractcomponent.on('close', function(){boutonCompagnon.destroy();});\r",
                    "abstractcomponent.on('minimize', function(){abstractcomponent.hide(); boutonCompagnon.toggle(false);});\r",
                    "abstractcomponent.getEl().on('focus', function(){boutonCompagnon.toggle(true);});\r",
                    "abstractcomponent.on('resize', function(){this.focus();});\r",
                    "abstractcomponent.getEl().on('blur', function(){boutonCompagnon.toggle(false);});\r",
                    "boutonCompagnon.on('click', function(){ \r",
                    "    if (abstractcomponent.isVisible()) {\r",
                    "        if (Ext.WindowManager.getActive().id==abstractcomponent.id) {abstractcomponent.hide(); this.toggle(false);}\r",
                    "        else {abstractcomponent.toFront(); this.toggle(true);}\r",
                    "    }\r",
                    "    else {abstractcomponent.show();}\r",
                    "\r",
                    "});\r",
                    "boutonCompagnon.on('arrowclick', function(){abstractcomponent.close();});\r",
                    "boutonCompagnon.on('render', function(){abstractcomponent.animateTarget=this.getEl();});\r",
                    "Ext.getCmp('taskbarPrincipal').add(boutonCompagnon);\r",
                    "abstractcomponent.animateTarget=boutonCompagnon.getEl();\r",
                    "\r",
                    ""
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.window.Window",
                "designer|controlQuery": "window",
                "designer|userClassName": "componrtementWindow"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen70672",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "minimize",
                "implHandler": [
                    "tool.up().up().minimize();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.panel.Tool",
                "designer|controlQuery": "[itemId='windowMinimize']",
                "designer|userClassName": "minimize"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen72724",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showDesktop",
                "implHandler": [
                    "Ext.WindowManager.each(function(window){\r",
                    "    if (window.isVisible()) {window.hide();}\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonShowDesktop",
                "designer|userClassName": "showDesktop"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen89918",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "comportementIcones",
                "implHandler": [
                    "abstractcomponent.on('move', function(cible, x, y){\r",
                    "    if ((x % 80)>40) {x = x-(x % 80)+80;} else {x = x-(x % 80);}\r",
                    "    if ((y % 90)>45) {y = y-(y % 90)+90;} else {y = y-(y % 90);}\r",
                    "    while (this.placeLibre(x,y, abstractcomponent.id)===false) {\r",
                    "        if (y<(screen.height-90)) {    \r",
                    "            y=y+90;\r",
                    "        }\r",
                    "        else {\r",
                    "            y=0;\r",
                    "            x=x+80;\r",
                    "        }\r",
                    "    }\r",
                    "    abstractcomponent.suspendEvents(false);\r",
                    "    abstractcomponent.setPosition(x, y);\r",
                    "    abstractcomponent.resumeEvents();\r",
                    "\r",
                    "}, this);"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "iconeBureau",
                "designer|userClassName": "comportementIcones"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen103295",
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "placeLibre",
                "designer|params": [
                    "x",
                    "y",
                    "id"
                ],
                "implHandler": [
                    "var libre = true;\r",
                    "var iconesP = Ext.getCmp('boiteAIconesBureau').items.items;\r",
                    "Ext.Array.forEach(iconesP,function(icone){\r",
                    "    if ((icone.x==x)&&(icone.y==y)&&(icone.id!=id)) {libre = false;}\r",
                    "});\r",
                    "return libre;"
                ],
                "designer|userClassName": "placeLibre"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen22360",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ouvrirFenteresMenuDroite",
                "implHandler": [
                    "if (button.itemId=='deconnexionMenuPrincipal') {\r",
                    "    var iconesE = [ ];\r",
                    "    var iconesR = Ext.getCmp('boiteAIconesBureau').items.items;    \r",
                    "    Ext.Array.forEach(iconesR, function(icone) {\r",
                    "        iconesE.push(\r",
                    "        {\r",
                    "            text:icone.title,\r",
                    "            posX:icone.getPosition()[0],\r",
                    "            posY:icone.getPosition()[1],\r",
                    "            image:icone.getComponent(0).src\r",
                    "        }\r",
                    "        );\r",
                    "    });\r",
                    "\r",
                    "    console.log(iconesE);  \r",
                    "\r",
                    "}\r",
                    "else{\r",
                    "\r",
                    "    var fenetre = Ext.getCmp(button.itemId);\r",
                    "    if (Ext.isDefined(fenetre)){ fenetre.toFront(); }\r",
                    "    else {\r",
                    "        fenetre = Ext.widget(button.itemId);\r",
                    "        Ext.getCmp('desktopCont').add(fenetre);\r",
                    "        fenetre.show();\r",
                    "\r",
                    "    }\r",
                    "    Ext.getCmp('menuPrincipalInterface').destroy();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#menuPrincipalDroite button",
                "designer|userClassName": "ouvrirFenteresMenuDroite"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen60778",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "majIcones",
                "implHandler": [
                    "\r",
                    "Ext.getStore('IconesDataJson').load({ callback: function(){\r",
                    "var icones = Ext.getStore('IconesDataJson').getRange();\r",
                    "abstractcomponent.removeAll();\r",
                    "Ext.Array.forEach(icones, function(icone){\r",
                    "    var nIcone = Ext.widget('iconeBureau');\r",
                    "    nIcone.setTitle(icone.data.text);\r",
                    "    abstractcomponent.add(nIcone);\r",
                    "    nIcone.setPosition(icone.data.posX, icone.data.posY);\r",
                    "    nIcone.getComponent(0).setSrc(icone.data.image);\r",
                    "}); \r",
                    "}});"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.container.Container",
                "designer|controlQuery": "#boiteAIconesBureau",
                "designer|userClassName": "majIcones"
            },
            "customConfigs": [],
            "expanded": true
        }
    ]
}