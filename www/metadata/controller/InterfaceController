{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "InterfaceController",
        "designer|userAlias": "InterfaceController",
        "views": [
            "menuPrincipalInterface"
        ]
    },
    "id": "ExtBox1-ext-gen8159",
    "designerId": "130f60c3-0d78-444a-92e2-79b56d3ab643",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "afficherMenuPrincipal",
                "fn": "afficherMenuPrincipal",
                "implHandler": [
                    "if (Ext.isDefined(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "    if(Ext.getCmp('menuPrincipalInterface').isVisible()){\r",
                    "        Ext.getCmp('menuPrincipalInterface').hide();\r",
                    "    }\r",
                    "    else {Ext.getCmp('menuPrincipalInterface').show();}\r",
                    "}\r",
                    "else {\r",
                    "    var menuPrincipal = Ext.widget('menuPrincipalInterface', {title:MyPrefData.myName});\r",
                    "\r",
                    "\r",
                    "    menuPrincipal.showAt(0, Ext.getCmp('desktopCont').getHeight()-300);   \r",
                    "    menuPrincipal.getEl().addListener('mouseover', function(){  Ext.getBody().removeAllListeners(); });\r",
                    "    menuPrincipal.getEl().addListener('mouseout', function(){  Ext.getBody().addListener('click', function(){ if (!Ext.isEmpty(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "        Ext.getCmp('menuPrincipalInterface').hide();\r",
                    "    }}); });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonPincipalInterface"
            },
            "designerId": "5c5b9451-2e7e-4af5-8da6-f40b2b04a89c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "maximize",
                "fn": "maximize",
                "implHandler": [
                    "tool.up().up().toggleMaximize();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.panel.Tool",
                "designer|controlQuery": "[itemId='windowMaximize']"
            },
            "designerId": "eb38fbf4-e77e-4549-8114-44d2c5a0699e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "compenserResize",
                "fn": "compenserResize",
                "implHandler": [
                    "Ext.getCmp('boiteAIconesBureau').setHeight(abstractcomponent.getHeight());\r",
                    "Ext.getCmp('boiteAIconesBureau').setWidth(abstractcomponent.getWidth());\r",
                    "if (Ext.isDefined(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "    var hideAfter=!Ext.getCmp('menuPrincipalInterface').isVisible();\r",
                    "    Ext.getCmp('menuPrincipalInterface').showAt(0, abstractcomponent.getHeight()-300);\r",
                    "    if (hideAfter){\r",
                    "        Ext.getCmp('menuPrincipalInterface').hide();\r",
                    "    }\r",
                    "}"
                ],
                "name": "resize",
                "scope": "me",
                "designer|targetType": "Ext.container.Container",
                "designer|controlQuery": "#desktopCont"
            },
            "designerId": "0cc85e6b-3c41-4554-a7a8-8d79eb8cc9f5"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onLaunch",
                "fn": "onLaunch",
                "implHandler": [
                    "var me=this;\r",
                    "try {\r",
                    "    Ext.util.CSS.removeStyleSheet(\"loading-bar-style\");\r",
                    "    Ext.getElementById(\"loading-bar\").parentNode.removeChild(Ext.getElementById(\"loading-bar\"));\r",
                    "} catch (err) {\r",
                    "    console.log(\"dom element removal anomaly\");\r",
                    "}\r",
                    "Ext.getBody().addListener('click', function(){ if (Ext.isDefined(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "    Ext.getCmp('menuPrincipalInterface').hide();\r",
                    "}});\r",
                    "Ext.getCmp('boutonPincipalInterface').addListener('mouseover', function(){  Ext.getBody().removeAllListeners(); });\r",
                    "Ext.getCmp('boutonPincipalInterface').addListener('mouseout', function(){  Ext.getBody().addListener('click', function(){ if (Ext.isDefined(Ext.getCmp('menuPrincipalInterface'))) {\r",
                    "    Ext.getCmp('menuPrincipalInterface').hide();\r",
                    "}}); }); \r",
                    "Ext.getStore('PersonalPrefsStore').on(\"load\",function(){\r",
                    "    var myPrefs=this.getRange()[0];\r",
                    "    /*if (Ext.isEmpty(myPrefs)) {\r",
                    "    myPrefs=Ext.create(\"Rubedo.model.personalPrefsDataModel\",{\r",
                    "    stylesheet:\"resources/css/red_theme.css\",\r",
                    "    wallpaper:\"resources/wallpapers/rubedo.jpg\",\r",
                    "    iconSet:\"red\",\r",
                    "    themeColor:\"#D7251D\",\r",
                    "    lastEdited: [ ],\r",
                    "    HCMode:false\r",
                    "    });\r",
                    "\r",
                    "    this.add(myPrefs);\r",
                    "\r",
                    "\r",
                    "    }*/\r",
                    "\r",
                    "\r",
                    "    Ext.getCmp('desktopBackGround').setSrc(myPrefs.get(\"wallpaper\"));\r",
                    "    Ext.util.CSS.swapStyleSheet('maintheme', myPrefs.get(\"stylesheet\"));\r",
                    "    MyPrefData.iconsDir=myPrefs.get(\"iconSet\");\r",
                    "    MyPrefData.themeColor=myPrefs.get(\"themeColor\");\r",
                    "    MyPrefData.HCMode=myPrefs.get(\"HCMode\");\r",
                    "    MyPrefData.lastEdited=myPrefs.get(\"lastEdited\")||[ ];\r",
                    "    if (myPrefs.get(\"HCMode\")){\r",
                    "        Ext.util.CSS.swapStyleSheet('ext_theme', '/components/sencha/extjs/resources/css/ext-all-access.css');\r",
                    "    }\r",
                    "    me.refreshIcons(); \r",
                    "});\r",
                    "Ext.getStore('PersonalPrefsStore').load();\r",
                    "Ext.getStore(\"CurrentUserDataStore\").on(\"load\", function(){\r",
                    "    var currentUser = this.getRange()[0];\r",
                    "    MyPrefData.myName=currentUser.get(\"name\");\r",
                    "    ACL.defaultWorkspace=currentUser.get(\"defaultWorkspace\");\r",
                    "\r",
                    "}); \r",
                    "Ext.getStore(\"CurrentUserDataStore\").load();"
                ]
            },
            "designerId": "1060d695-b0e6-4a96-b3a9-eba366981ee3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "componrtementWindow",
                "fn": "componrtementWindow",
                "implHandler": [
                    "if ((!abstractcomponent.isXType(\"messagebox\"))&&(!abstractcomponent.isXType(\"uxNotification\"))){\r",
                    "    var boutonCompagnon = Ext.widget('splitbutton', {text: abstractcomponent.title, iconCls: abstractcomponent.iconCls, arrowCls:\"split\", enableToggle: true,allowDepress: false});\r",
                    "    abstractcomponent.on('close', function(){boutonCompagnon.destroy();});\r",
                    "    abstractcomponent.onEsc=Ext.emptyFn;\r",
                    "    abstractcomponent.getHeader().on(\"dblclick\", function(thing){\r",
                    "        thing.up().toggleMaximize();\r",
                    "\r",
                    "    });\r",
                    "    abstractcomponent.on('minimize', function(){abstractcomponent.hide(); boutonCompagnon.toggle(false);});\r",
                    "    abstractcomponent.getEl().on('focus', function(){boutonCompagnon.toggle(true);});\r",
                    "    abstractcomponent.on('resize', function(){this.focus();});\r",
                    "    abstractcomponent.getEl().on('blur', function(){boutonCompagnon.toggle(false);});\r",
                    "    boutonCompagnon.on('click', function(){ \r",
                    "        if (abstractcomponent.isVisible()) {\r",
                    "            if (Ext.WindowManager.getActive().id==abstractcomponent.id) {abstractcomponent.hide(); this.toggle(false);}\r",
                    "            else {abstractcomponent.toFront(); this.toggle(true);}\r",
                    "        }\r",
                    "        else {abstractcomponent.show();}\r",
                    "\r",
                    "    });\r",
                    "    boutonCompagnon.on('arrowclick', function(){abstractcomponent.close();});\r",
                    "    boutonCompagnon.on('render', function(){abstractcomponent.animateTarget=this.getEl();});\r",
                    "    Ext.getCmp('taskbarPrincipal').add(boutonCompagnon);\r",
                    "    abstractcomponent.animateTarget=boutonCompagnon.getEl();\r",
                    "\r",
                    "}"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.window.Window",
                "designer|controlQuery": "window"
            },
            "designerId": "1fc66bc9-dd85-4f94-8109-c4d66106d244"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "minimize",
                "fn": "minimize",
                "implHandler": [
                    "tool.up().up().minimize();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.panel.Tool",
                "designer|controlQuery": "[itemId='windowMinimize']"
            },
            "designerId": "d2d6b13a-8dbe-45e8-bccc-ea158a727004"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "comportementIcones",
                "fn": "comportementIcones",
                "implHandler": [
                    "var me=this;\r",
                    "abstractcomponent.on('move', function(cible, x, y){\r",
                    "    if ((x % 100)>50) {x = x-(x % 100)+100;} else {x = x-(x % 100);}\r",
                    "    if ((y % 100)>50) {y = y-(y % 100)+100;} else {y = y-(y % 100);}\r",
                    "    if (y>(window.innerHeight-150)) {x=x+100; y=0;}\r",
                    "    while (this.placeLibre(x,y, abstractcomponent.id)===false) {\r",
                    "        if (y<(window.innerHeight-150)) {    \r",
                    "            y=y+100;\r",
                    "        }\r",
                    "        else {\r",
                    "            y=0;\r",
                    "            x=x+100;\r",
                    "        }\r",
                    "    }\r",
                    "    abstractcomponent.suspendEvents(false);\r",
                    "    abstractcomponent.setPosition(x, y);\r",
                    "    abstractcomponent.resumeEvents();\r",
                    "    var myRec =Ext.getStore(\"IconesDataJson\").findRecord(\"id\", abstractcomponent.recId);\r",
                    "    if (!Ext.isEmpty(myRec)){\r",
                    "        if ((myRec.get(\"posX\")!=x)||(myRec.get(\"posY\")!=y)) {\r",
                    "            myRec.beginEdit();\r",
                    "            myRec.set(\"posX\", x);\r",
                    "            myRec.set(\"posY\", y);\r",
                    "            myRec.endEdit();\r",
                    "        }\r",
                    "\r",
                    "    }}, this);\r",
                    "\r",
                    "    abstractcomponent.getEl().on(\"contextmenu\", function(e){\r",
                    "        var menu= Ext.getCmp('iconsContextMenu');\r",
                    "        if (Ext.isEmpty(menu)){\r",
                    "            menu = Ext.widget('iconsContextMenu');\r",
                    "            menu.on('blur', function(){this.destroy();});}\r",
                    "            menu.getComponent(\"iconDeleteMenuItem\").on(\"click\", function(){\r",
                    "                Ext.getStore(\"IconesDataJson\").remove(Ext.getStore(\"IconesDataJson\").findRecord(\"id\", abstractcomponent.recId));\r",
                    "                abstractcomponent.up().remove(abstractcomponent);\r",
                    "                menu.destroy();\r",
                    "            });\r",
                    "            menu.getComponent(\"iconNameField\").setValue(abstractcomponent.iText);\r",
                    "            menu.getComponent(\"iconRenameMenuItem\").on(\"click\", function(){\r",
                    "                if (menu.getComponent(\"iconNameField\").isValid()) {\r",
                    "                    Ext.getStore(\"IconesDataJson\").findRecord(\"id\", abstractcomponent.recId).set(\"text\",menu.getComponent(\"iconNameField\").getValue());\r",
                    "                    me.refreshIcons();\r",
                    "                }\r",
                    "            });\r",
                    "            menu.showAt(Ext.EventObject.getXY());\r",
                    "            e.stopEvent();\r",
                    "\r",
                    "        });"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "iconeBureau"
            },
            "designerId": "88f8999a-4a2a-41a4-a846-7beed8ca293a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "placeLibre",
                "fn": "placeLibre",
                "designer|params": [
                    "x",
                    "y",
                    "id"
                ],
                "implHandler": [
                    "var libre = true;\r",
                    "var iconesP = Ext.getCmp('boiteAIconesBureau').items.items;\r",
                    "Ext.Array.forEach(iconesP,function(icone){\r",
                    "    if ((icone.x==x)&&(icone.y==y)&&(icone.id!=id)) {libre = false;}\r",
                    "});\r",
                    "return libre;"
                ]
            },
            "designerId": "2dc1828d-08ec-46f2-9405-6c306be9b083"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onMenuitemClick",
                "fn": "onMenuitemClick",
                "implHandler": [
                    "var button=item; \r",
                    "var fenetre = Ext.getCmp(button.itemId);\r",
                    "if (Ext.isDefined(fenetre)){ fenetre.show(); fenetre.toFront(); }\r",
                    "else {\r",
                    "    fenetre = Ext.widget(button.itemId);\r",
                    "    Ext.getCmp('desktopCont').add(fenetre);\r",
                    "    if (Ext.isDefined(window.innerHeight)) {\r",
                    "        if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}\r",
                    "        if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}\r",
                    "    }\r",
                    "    fenetre.show();\r",
                    "\r",
                    "}\r",
                    "Ext.getCmp('menuPrincipalInterface').hide();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "#salamanderContext menuitem"
            },
            "designerId": "79c93167-a905-4b81-9cd7-8ca95f7d7321"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "ouvrirFenteresMenuDroite",
                "fn": "ouvrirFenteresMenuDroite",
                "implHandler": [
                    "if (button.itemId=='deconnexionMenuPrincipal') {\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'logout',\r",
                    "        params:{\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            window.location.href=\"login\";\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "} else if(button.usesMenu){\r",
                    "    //nothing special for menu butoons yet\r",
                    "}\r",
                    "else{\r",
                    "\r",
                    "    var fenetre = Ext.getCmp(button.itemId);\r",
                    "    if (Ext.isDefined(fenetre)){ fenetre.show(); fenetre.toFront(); }\r",
                    "    else {\r",
                    "        fenetre = Ext.widget(button.itemId);\r",
                    "        Ext.getCmp('desktopCont').add(fenetre);\r",
                    "        if (Ext.isDefined(window.innerHeight)) {\r",
                    "            if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}\r",
                    "            if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}\r",
                    "        }\r",
                    "        fenetre.show();\r",
                    "\r",
                    "    }\r",
                    "    Ext.getCmp('menuPrincipalInterface').hide();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#menuPrincipalDroite button"
            },
            "designerId": "eb23ce14-d3fd-4cfe-9907-95b111a42752"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "majIcones",
                "fn": "majIcones",
                "implHandler": [
                    "abstractcomponent.getEl().on('contextmenu', function(e){\r",
                    "    var menu= Ext.getCmp('settingsContextMenu');\r",
                    "    if (Ext.isEmpty(menu)){\r",
                    "        menu = Ext.widget('settingsContextMenu');\r",
                    "        menu.on('blur', function(){this.destroy();});}\r",
                    "        menu.showAt(Ext.EventObject.getXY());\r",
                    "        e.stopEvent();\r",
                    "\r",
                    "\r",
                    "    }); "
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.container.Container",
                "designer|controlQuery": "#boiteAIconesBureau"
            },
            "designerId": "b1767f0a-3ac7-44c5-90b5-0bfe2e3cd45b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "hideAllIcons",
                "fn": "hideAllIcons",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp('boiteAIconesBureau').items.items, function(ico){ico.hide();});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "#itemHideAllIcons"
            },
            "designerId": "2e116f9b-b80b-4880-b148-156c7f2d564e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showAllIcons",
                "fn": "showAllIcons",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp('boiteAIconesBureau').items.items, function(ico){ico.show();});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "#itemShowAllIcons"
            },
            "designerId": "3157d68b-57d3-4ab6-a7bf-30487ceeb27d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "reagarangeAllIcons",
                "fn": "reagarangeAllIcons",
                "implHandler": [
                    "Ext.getStore(\"IconesDataJson\").suspendAutoSync();\r",
                    "Ext.Array.forEach(Ext.getCmp('boiteAIconesBureau').items.items, function(ico){ico.setPosition(0,0);});\r",
                    "Ext.getStore(\"IconesDataJson\").resumeAutoSync();\r",
                    "Ext.getStore(\"IconesDataJson\").sync();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "#itemRearangeAllIcons"
            },
            "designerId": "8d6e33bd-f189-487b-b19f-c336643aa836"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "displayDesktopCustomizeWindow",
                "fn": "displayDesktopCustomizeWindow",
                "implHandler": [
                    "var fenetre=Ext.getCmp('DesktopCustomizeWindow'); \r",
                    "if (Ext.isEmpty(fenetre)){\r",
                    "    fenetre=Ext.widget('DesktopCustomizeWindow');\r",
                    "    Ext.getCmp('desktopCont').add(fenetre);\r",
                    "}fenetre.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "#itemCustomizeDesktop"
            },
            "designerId": "828de331-3494-4fee-8964-14993238848e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "updateWallpaperPreview",
                "fn": "updateWallpaperPreview",
                "implHandler": [
                    "Ext.getCmp('wallpaperPicker').getComponent(0).setSrc(record.data.file);"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#wallpaperGrid"
            },
            "designerId": "f64052c0-db2d-4409-afdb-17f059629b12"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "wallpaperChange",
                "fn": "wallpaperChange",
                "implHandler": [
                    "Ext.getCmp('desktopBackGround').setSrc(Ext.getCmp('wallpaperPicker').getComponent(0).src);\r",
                    "Ext.getStore('PersonalPrefsStore').getRange()[0].set(\"wallpaper\",Ext.getCmp('wallpaperPicker').getComponent(0).src);\r",
                    "console.log(\"changed\");"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#wallpaperPickerButton"
            },
            "designerId": "71c12dac-ac32-4123-be0a-15c7e184593d"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "init",
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "Ext.define('MyPrefData', { \r",
                    "    singleton: true, \r",
                    "\r",
                    "    iconsDir: 'red',\r",
                    "    HCMode:false,\r",
                    "    myName:'Alexandru Dobre',\r",
                    "    themeColor: '#D7251D',\r",
                    "    lastEdited:[ ]\r",
                    "}); "
                ]
            },
            "designerId": "ba2fb59b-169b-4580-9a53-19166be42cf7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onGridpanelExpand",
                "fn": "onGridpanelExpand",
                "implHandler": [
                    "Ext.getCmp('DesktopCustomizeMainArea').removeAll();\r",
                    "Ext.getCmp('DesktopCustomizeMainArea').add(Ext.widget('themePicker'));"
                ],
                "name": "expand",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#themeGrid"
            },
            "designerId": "cc545788-e513-4b76-a2c2-c6aec618de2a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onGridpanelExpand1",
                "fn": "onGridpanelExpand1",
                "implHandler": [
                    "Ext.getCmp('DesktopCustomizeMainArea').removeAll();\r",
                    "Ext.getCmp('DesktopCustomizeMainArea').add(Ext.widget('wallpaperPicker'));"
                ],
                "name": "expand",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#wallpaperGrid"
            },
            "designerId": "123d6f2a-906f-409a-988e-a536d26f09eb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onGridpanelItemClick",
                "fn": "onGridpanelItemClick",
                "implHandler": [
                    "Ext.getCmp('themePicker').getComponent(0).setSrc(record.data.preview);"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#themeGrid"
            },
            "designerId": "e4b03aa4-070e-4907-aab2-cc2e642f3f89"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "applyTheme",
                "fn": "applyTheme",
                "implHandler": [
                    "var theme = Ext.getCmp('themeGrid').getSelectionModel().getLastSelected().data;\r",
                    "Ext.getCmp('desktopBackGround').setSrc(theme.wallpaper);\r",
                    "Ext.util.CSS.swapStyleSheet('maintheme', theme.stylesheet);\r",
                    "MyPrefData.iconsDir=theme.iconSet;\r",
                    "MyPrefData.themeColor=theme.themeColor;\r",
                    "var myPrefs=Ext.getStore('PersonalPrefsStore').getRange()[0];\r",
                    "myPrefs.beginEdit();\r",
                    "myPrefs.set(\"stylesheet\",theme.stylesheet);\r",
                    "myPrefs.set(\"iconSet\",theme.iconSet);\r",
                    "myPrefs.set(\"themeColor\",theme.themeColor);\r",
                    "myPrefs.set(\"wallpaper\",theme.wallpaper);\r",
                    "myPrefs.endEdit();\r",
                    "this.refreshIcons();\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#themePickerButton"
            },
            "designerId": "17005950-13f0-4c5d-9029-bc0eac6be6d1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onPanelExpand",
                "fn": "onPanelExpand",
                "implHandler": [
                    "Ext.getCmp('DesktopCustomizeMainArea').removeAll();\r",
                    "Ext.getCmp('DesktopCustomizeMainArea').add(Ext.widget('accessibilityPicker'));"
                ],
                "name": "expand",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#accessibilityOptionsPanel"
            },
            "designerId": "f3a11150-070c-4296-b731-250dbacad406"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "HCmode",
                "fn": "HCmode",
                "implHandler": [
                    "var myPrefs=Ext.getStore('PersonalPrefsStore').getRange()[0];\r",
                    "if (MyPrefData.HCMode===false) {\r",
                    "    Ext.util.CSS.swapStyleSheet('ext_theme', '/components/sencha/extjs/resources/css/ext-all-access.css');\r",
                    "    MyPrefData.HCMode=true;\r",
                    "    myPrefs.set(\"HCMode\",true);\r",
                    "    button.setText('Désactiver');\r",
                    "} else {Ext.util.CSS.swapStyleSheet('ext_theme', '/components/sencha/extjs/resources/css/ext-all-gray.css');\r",
                    "    MyPrefData.HCMode=false;\r",
                    "    myPrefs.set(\"HCMode\",false);\r",
                    "    button.setText('Activer');\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#highContrastButton"
            },
            "designerId": "beaebb73-b0f8-4def-b178-90ae0286a930"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "setHCButtonStatus",
                "fn": "setHCButtonStatus",
                "implHandler": [
                    "if (MyPrefData.HCMode===true) {\r",
                    "    abstractcomponent.setText('Désactiver');\r",
                    "} "
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#highContrastButton"
            },
            "designerId": "04048948-77bd-4f55-8916-587fb608e6e1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "createIconBtn",
                "fn": "createIconBtn",
                "implHandler": [
                    "var myWindow = button.findParentByType(\"window\");\r",
                    "var myText = myWindow.title;\r",
                    "var actions = [ ];\r",
                    "if ((myWindow.id==\"contributionContenus\")&&(Ext.getCmp(\"ContenusGrid\").getSelectionModel().getSelection().length==1)) {\r",
                    "    var myRecord = myWindow.getComponent(0).getSelectionModel().getLastSelected();\r",
                    "    actions.push({\r",
                    "        type:\"editContent\",\r",
                    "        target:Ext.getCmp(\"ContenusGrid\").getSelectionModel().getSelection()[0].get(\"id\")\t\t\t\r",
                    "    });\r",
                    "    var preDefined=\"page_full.png\";\r",
                    "    myText=Ext.getCmp(\"ContenusGrid\").getSelectionModel().getSelection()[0].get(\"text\");\r",
                    "\r",
                    "} else if (myWindow.id==\"searchResultsWindow\"){\r",
                    "    actions.push({\r",
                    "        type:\"openWindow\",\r",
                    "        target:myWindow.id\t\t\t\r",
                    "    });\r",
                    "    actions.push({\r",
                    "        type:\"fireESWindow\",\r",
                    "        activeFacettes:Ext.getStore(\"ESFacetteStore\").activeFacettes\t\t\t\r",
                    "    });\r",
                    "    var preDefined=\"search.png\";\r",
                    "\r",
                    "} else {\r",
                    "    var myRecord = myWindow.getComponent(0).getSelectionModel().getLastSelected();\r",
                    "    actions.push({\r",
                    "        type:\"openWindow\",\r",
                    "        target:myWindow.id\t\t\t\r",
                    "    });\r",
                    "    if (!Ext.isEmpty(myRecord)){\r",
                    "        myText=myRecord.get(myRecord.fields.items[0].name);\r",
                    "        actions.push({\r",
                    "            type:\"selectRecord\",\r",
                    "            target:myWindow.getComponent(0).id,\r",
                    "            recordId:myRecord.get(\"id\")\r",
                    "        });\r",
                    "    }\r",
                    "}\r",
                    "var x=0;\r",
                    "var y=0;\r",
                    "while (this.placeLibre(x,y, \"newOne\")===false) {\r",
                    "        if (y<(window.innerHeight-150)) {    \r",
                    "            y=y+100;\r",
                    "        }\r",
                    "        else {\r",
                    "            y=0;\r",
                    "            x=x+100;\r",
                    "        }\r",
                    "    }\r",
                    "var newIcon = Ext.create(\"Rubedo.model.iconDataModel\",{\r",
                    "    text:myText,\r",
                    "    posX:x,\r",
                    "    posY:y,\r",
                    "    image: preDefined||myWindow.favoriteIcon||\"favorite.png\",\r",
                    "    actions:actions\r",
                    "\r",
                    "});\r",
                    "var me=this;\r",
                    "Ext.getStore(\"IconesDataJson\").add(newIcon);\r",
                    "Ext.getStore(\"IconesDataJson\").on(\"datachanged\", function(){\r",
                    "    me.refreshIcons();\r",
                    "    Ext.getStore(\"IconesDataJson\").clearListeners();\r",
                    "});\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "[itemId='boutonCreerRaccourci']"
            },
            "designerId": "22d07334-7ef6-478c-97ab-1673c0dc6bd0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "refreshIcons",
                "fn": "refreshIcons",
                "implHandler": [
                    "var icones = Ext.getStore('IconesDataJson').getRange();\r",
                    "Ext.getCmp(\"boiteAIconesBureau\").removeAll();\r",
                    "Ext.Array.forEach(icones, function(icone){\r",
                    "    var nIcone = Ext.widget('iconeBureau',{\r",
                    "        bodyStyle:\"background-image: url(resources/icones/\"+MyPrefData.iconsDir+\"/64x64/\"+icone.get(\"image\")+\")  !important; background: transparent; background-repeat: no-repeat; background-position:top center;\",\r",
                    "        html:\"<p style=\\\"margin-top:66px; text-align: center; color: #fff; font-size: 10px;\\\">\"+icone.get(\"text\")+\"</p>\"\r",
                    "    });\r",
                    "    nIcone.iText=icone.get(\"text\");\r",
                    "    nIcone.recId=icone.get(\"id\");\r",
                    "    nIcone.actions=icone.get(\"actions\");\r",
                    "    nIcone.on(\"render\", function(){\r",
                    "        nIcone.getEl().on(\"dblclick\", function(){\r",
                    "            if (!Ext.isEmpty(nIcone.actions)){\r",
                    "                Ext.Array.forEach(nIcone.actions, function(action){\r",
                    "                    if (action.type==\"openWindow\") { \r",
                    "                        var fenetre = Ext.getCmp(action.target);\r",
                    "                        if (Ext.isDefined(fenetre)){fenetre.show();  fenetre.toFront(); }\r",
                    "                        else {\r",
                    "                            fenetre = Ext.widget(action.target);\r",
                    "                            Ext.getCmp('desktopCont').add(fenetre);\r",
                    "                            if (Ext.isDefined(window.innerHeight)) {\r",
                    "                                if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}\r",
                    "                                if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}\r",
                    "                            }\r",
                    "                            fenetre.show();\r",
                    "                        }\r",
                    "                    }else if (action.type==\"selectRecord\") { \r",
                    "                        var target=Ext.getCmp(action.target);\r",
                    "                        if (!Ext.isEmpty(target)) {\r",
                    "\r",
                    "                            if (target.getStore().isLoading()) {\r",
                    "                                target.getStore().addListener(\"load\", function(){target.getSelectionModel().select(target.getStore().findRecord(\"id\",action.recordId));},this,{single:true});\r",
                    "                            } else {\r",
                    "                                target.getSelectionModel().select(target.getStore().findRecord(\"id\",action.recordId));\r",
                    "                            }\r",
                    "                        }\r",
                    "                    } else if (action.type==\"editContent\") { \r",
                    "                        Rubedo.controller.ContributionContenusController.prototype.unitaryContentEdit(action.target);\r",
                    "                    }  else if (action.type==\"fireESWindow\") { \r",
                    "                        Ext.getStore(\"ESFacetteStore\").activeFacettes=action.activeFacettes;\r",
                    "                        Ext.getStore(\"ESFacetteStore\").load();\r",
                    "                    }\r",
                    "\r",
                    "                });\r",
                    "\r",
                    "            }});});\r",
                    "            nIcone.setPosition(icone.data.posX, icone.data.posY);\r",
                    "            Ext.getCmp(\"boiteAIconesBureau\").add(nIcone);\r",
                    "        }); "
                ]
            },
            "designerId": "87ba059c-e5bc-4365-ae29-67c7e1758449"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "launchESWindow",
                "fn": "launchESWindow",
                "implHandler": [
                    "if (!(Ext.isDefined(Ext.getCmp('ESWindow')))) {\r",
                    "    var fenetre = Ext.widget('ESWindow');\r",
                    "    Ext.getCmp('desktopCont').add(fenetre);\r",
                    "    if (Ext.isDefined(window.innerHeight)) {\r",
                    "        if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}\r",
                    "        if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}\r",
                    "    }\r",
                    "    fenetre.show();\r",
                    "}else {Ext.getCmp('ESWindow').toFront();}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#esWindowButton"
            },
            "designerId": "dfb50cfb-9242-4189-acc8-25879407d359"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDesktopHomeBtnClick",
                "fn": "onDesktopHomeBtnClick",
                "implHandler": [
                    "Ext.WindowManager.each(function(thing){\r",
                    "    if (thing.isWindow){\r",
                    "        thing.minimize();\r",
                    "    }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#desktopHomeBtn"
            },
            "designerId": "ba840fa0-4912-4427-a732-0b7ed6ac0d71"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "mainToolsContextShow",
                "fn": "mainToolsContextShow",
                "implHandler": [
                    "var me=this;\r",
                    "if (abstractcomponent.itemId!='deconnexionMenuPrincipal') {\r",
                    "    abstractcomponent.getEl().on(\"contextmenu\",function(e){\r",
                    "        if (!abstractcomponent.usesMenu){\r",
                    "            var menu= Ext.getCmp('MainToolsContextMenu');\r",
                    "            if (!Ext.isEmpty(menu)){menu.destroy();}\r",
                    "            menu = Ext.widget('MainToolsContextMenu');\r",
                    "            menu.on('blur', function(){this.destroy();});\r",
                    "            menu.getComponent(0).on(\"click\", function(){\r",
                    "                var actions = [ ];\r",
                    "                actions.push({\r",
                    "                    type:\"openWindow\",\r",
                    "                    target:abstractcomponent.itemId\t\t\t\r",
                    "                });\r",
                    "                var myText = abstractcomponent.text;\r",
                    "                var newIcon = Ext.create(\"Rubedo.model.iconDataModel\",{\r",
                    "                    text:myText,\r",
                    "                    posX:0,\r",
                    "                    posY:0,\r",
                    "                    image: abstractcomponent.favoriteIcon||\"favorite.png\",\r",
                    "                    actions:actions\r",
                    "\r",
                    "                });\r",
                    "                Ext.getStore(\"IconesDataJson\").add(newIcon);\r",
                    "                Ext.getStore(\"IconesDataJson\").on(\"datachanged\", function(){\r",
                    "                    me.refreshIcons();\r",
                    "                    Ext.getStore(\"IconesDataJson\").clearListeners();\r",
                    "                });\r",
                    "\r",
                    "            });\r",
                    "\r",
                    "        menu.showAt(Ext.EventObject.getXY());}\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "}\r",
                    "abstractcomponent.on(\"focus\", function(){\r",
                    "    var menu= Ext.getCmp('MainToolsContextMenu');\r",
                    "    if (!Ext.isEmpty(menu)){menu.destroy();}\r",
                    "});"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#menuPrincipalDroite button, #salamanderContext menuitem"
            },
            "designerId": "f38c0e6a-bfb2-430d-a501-82dd290d4f5c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onComponentBeforeRender",
                "fn": "onComponentBeforeRender",
                "implHandler": [
                    "if ((abstractcomponent.isXType(\"field\"))||(abstractcomponent.isXType(\"checkboxgroup\"))){\r",
                    "    abstractcomponent.labelSeparator=\" \";\r",
                    "    if (abstractcomponent.isXType(\"datefield\")){\r",
                    "        abstractcomponent.submitFormat='U';\r",
                    "        abstractcomponent.altFormats='U|m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j';\r",
                    "    }    \r",
                    "}"
                ],
                "name": "beforerender",
                "scope": "me",
                "designer|targetType": "Ext.Component",
                "designer|controlQuery": "component"
            },
            "designerId": "20545d3d-55c2-4f5f-b471-7cfc1046dd2b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onButtonMouseOver",
                "fn": "onButtonMouseOver",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp(\"salamanderContext\").query(\"menu\"), function(thing){ thing.hide();});\r",
                    "if(button.usesMenu){\r",
                    "    Ext.getCmp(button.usedMenu).show();\r",
                    "    Ext.getCmp(\"salamanderLogo\").hide();\r",
                    "} else {\r",
                    "    Ext.getCmp(\"salamanderLogo\").show();\r",
                    "}\r",
                    "var menu= Ext.getCmp('MainToolsContextMenu');\r",
                    "if (!Ext.isEmpty(menu)){menu.destroy();}"
                ],
                "name": "mouseover",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#menuPrincipalDroite button"
            },
            "designerId": "67ad1f68-f76d-4f00-a60e-ca7553957efa"
        }
    ]
}