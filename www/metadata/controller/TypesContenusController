{
    "id": "ExtBox1-ext-gen24282",
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "typesContenusDataModel"
        ],
        "stores": [
            "TypesContenusDataJson"
        ],
        "views": [
            "nouveauTypeContenu",
            "ajoutChampTCFenetre",
            "ChampTC",
            "optionsLCGrid",
            "ongletTCDep"
        ],
        "designer|userClassName": "TypesContenusController",
        "designer|userAlias": "TypesContenusController"
    },
    "customConfigs": [],
    "designerId": "6b4056c1-8b00-41ce-a4cb-363fbf0cb6f0",
    "$viewOrder": 7,
    "expanded": true,
    "cn": [
        {
            "id": "ExtBox1-ext-gen41308",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ajouterContenu",
                "implHandler": [
                    "if (Ext.isDefined(Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0])) {\r",
                    "    var fenetre = Ext.widget('ajouterContenu');\r",
                    "    fenetre.showAt(screen.width/2-300, 100);\r",
                    "    var formulaireTC = Ext.getCmp('boiteAChampsContenus');\r",
                    "    var champsD =Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].data.champs;\r",
                    "    for (g=0; g<champsD.length; g++) {\r",
                    "        var donnees=champsD[g];\r",
                    "        var configurateur = Ext.clone(donnees.config);\r",
                    "        if (donnees.cType =='treepicker'){ \r",
                    "            var monStore= Ext.getStore(donnees.store);\r",
                    "            configurateur.store = monStore;\r",
                    "            monStore.load();\r",
                    "        }\r",
                    "        else if (donnees.cType == 'combobox') {\r",
                    "            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "            configurateur.store = monStore;\r",
                    "        }\r",
                    "        var nouvChamp = Ext.widget(donnees.cType, configurateur);\r",
                    "        nouvChamp.config=Ext.clone(donnees.config);\r",
                    "        if (donnees.cType =='triggerfield'){ \r",
                    "            var Ouvrir = Ext.clone(donnees.ouvrir);\r",
                    "            nouvChamp.onTriggerClick= function() {\r",
                    "                var fenetre = Ext.widget(Ouvrir);\r",
                    "                fenetre.showAt(screen.width/2-200, 100);\r",
                    "            } ; \r",
                    "            nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);\r",
                    "        }  \r",
                    "        nouvChamp.anchor = '90%';\r",
                    "        nouvChamp.style = '{float:left;}';\r",
                    "        var enrobage =Ext.widget('ChampTC');\r",
                    "        enrobage.add(nouvChamp);\r",
                    "        enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "        enrobage.getComponent(2).destroy();\r",
                    "        enrobage.getComponent(1).destroy();\r",
                    "        enrobage.getComponent(0).destroy();\r",
                    "        if (nouvChamp.multivaluÃ©) {\r",
                    "            enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: 'Valeurs multiples', itemId: 'boutonReplicateurChamps'}));\r",
                    "        \r",
                    "        };\r",
                    "        formulaireTC.add(enrobage);\r",
                    "\r",
                    "    }\r",
                    "    var formTaxoTC =  Ext.getCmp('boiteATaxoContenus');\r",
                    "    var lesTaxo = Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].data.vocabulaires;\r",
                    "    var i=0;\r",
                    "    for (i=0; i<lesTaxo.length; i++) {\r",
                    "        var leVocab = Ext.getStore('TaxonomieDataJson').findRecord('titre', lesTaxo[i].titre);\r",
                    "        var vocabAPlat= [ ];\r",
                    "        this.miseAPlatTaxo(leVocab.data.termes.children, vocabAPlat);\r",
                    "\r",
                    "        var storeT = Ext.create('Ext.data.Store', {\r",
                    "            fields: ['terme'],\r",
                    "            data : vocabAPlat\r",
                    "        });\r",
                    "\r",
                    "\r",
                    "        var selecteur = Ext.widget('comboboxselect', {\r",
                    "            width:690,\r",
                    "            fieldLabel: leVocab.data.titre,\r",
                    "            autoScroll: false,\r",
                    "            store: storeT,\r",
                    "            queryMode: 'local',\r",
                    "            displayField: 'terme',\r",
                    "            valueField: 'terme',\r",
                    "            filterPickList: true,\r",
                    "            typeAhead: true,\r",
                    "            forceSelection: !leVocab.data.etiquettes,\r",
                    "            createNewOnEnter: leVocab.data.etiquettes,\r",
                    "            multiSelect: leVocab.data.choixMultiple,\r",
                    "            allowBlank: !leVocab.data.obligatoire\r",
                    "        });\r",
                    "        var enrobage =Ext.widget('ChampTC');\r",
                    "        enrobage.add(selecteur);\r",
                    "        enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);\r",
                    "        enrobage.getComponent(2).destroy();\r",
                    "        enrobage.getComponent(1).destroy();\r",
                    "        enrobage.getComponent(0).destroy();\r",
                    "        formTaxoTC.add(enrobage);\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonAjouterContenu",
                "designer|userClassName": "ajouterContenu"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen31574",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ouvrirFenetreTC",
                "implHandler": [
                    "var fenetreTC = Ext.widget('ajoutChampTCFenetre');\r",
                    "fenetreTC.showAt(screen.width/2-250, 100);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonOuvrirFenetreTC",
                "designer|userClassName": "ouvrirFenetreTC"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen33432",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "creerChampTC",
                "implHandler": [
                    "var donnees = Ext.getCmp('ChampTCSelectGrid').getSelectionModel().getLastSelected().data;\r",
                    "var configurateur = Ext.clone(donnees.config);\r",
                    "if (donnees.cType =='Ext.ux.TreePicker'){ \r",
                    "    var monStore= Ext.getStore(donnees.store);\r",
                    "    configurateur.store = monStore;\r",
                    "    monStore.load();\r",
                    "}\r",
                    "else if (donnees.cType == 'Ext.form.field.ComboBox') {\r",
                    "    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "    configurateur.store = monStore;\r",
                    "}\r",
                    "var nouvChamp = Ext.create(donnees.cType, configurateur);\r",
                    "nouvChamp.config=Ext.clone(donnees.config);\r",
                    "nouvChamp.champsConfig=Ext.clone(donnees.champsConfig);\r",
                    "if (donnees.cType =='Ext.form.field.Trigger'){\r",
                    "    var Ouvrir = Ext.clone(donnees.ouvrir);\r",
                    "    nouvChamp.onTriggerClick= function() {\r",
                    "        var fenetre = Ext.widget(Ouvrir);\r",
                    "        fenetre.showAt(screen.width/2-200, 100);\r",
                    "    } ;  \r",
                    "    nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);\r",
                    "}\r",
                    "nouvChamp.anchor = '72%';\r",
                    "nouvChamp.style = '{float:left;}';\r",
                    "var enrobage =Ext.widget('ChampTC');\r",
                    "enrobage.add(nouvChamp);\r",
                    "enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "Ext.getCmp('champsEditionTC').add(enrobage);\r",
                    "button.up().up().close();\r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonAjouterChampTC",
                "designer|userClassName": "creerChampTC"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen40524",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectChampTC",
                "implHandler": [
                    "abstractcomponent.getComponent(4).getEl().on('click', function() {\r",
                    "    if (Ext.getCmp('champTCIdField').getValue() != abstractcomponent.getComponent(4).id) {\r",
                    "        if (Ext.isDefined(Ext.getCmp(Ext.getCmp('champTCIdField').getValue()))){    \r",
                    "            Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).getEl().applyStyles('color:#000000');\r",
                    "        }\r",
                    "        Ext.getCmp('champTCIdField').setValue(abstractcomponent.getComponent(4).id);    \r",
                    "        this.frame('#D7251D');\r",
                    "        this.applyStyles('color:#D7251D');\r",
                    "        var mesChamps = abstractcomponent.getComponent(4).champsConfig;\r",
                    "        var boiteParam = Ext.getCmp('boiteConfigChampsTC');\r",
                    "        boiteParam.removeAll();\r",
                    "        for(t=0; t<mesChamps.length; t++) {\r",
                    "            if (mesChamps[t].type =='Ext.form.field.ComboBox') {\r",
                    "                var monStore=  Ext.create('Ext.data.Store', mesChamps[t].store);\r",
                    "                mesChamps[t].config.store= monStore;\r",
                    "            }\r",
                    "            var nouvChamp= Ext.create(mesChamps[t].type, mesChamps[t].config);\r",
                    "            nouvChamp.labelSeparator= ' ';\r",
                    "            nouvChamp.anchor='100%';\r",
                    "            nouvChamp.setValue(abstractcomponent.getComponent(4).config[nouvChamp.name]);\r",
                    "            nouvChamp.on('change', function () {\r",
                    "                abstractcomponent.getComponent(4).config[this.name]= this.getValue();\r",
                    "                if (this.name=='fieldLabel') {\r",
                    "                    abstractcomponent.getComponent(4).setFieldLabel(this.getValue());\r",
                    "                }\r",
                    "                else if (this.name=='value') {\r",
                    "                    abstractcomponent.getComponent(4).setValue(this.getValue());\r",
                    "                }\r",
                    "                else if (this.name=='editable') {\r",
                    "                    abstractcomponent.getComponent(4).setEditable(this.getValue());\r",
                    "                    abstractcomponent.getComponent(4).reset();\r",
                    "                }\r",
                    "                else if (this.name=='multiSelect') {\r",
                    "                    abstractcomponent.getComponent(4).multiSelect = this.getValue();\r",
                    "                    abstractcomponent.getComponent(4).reset();\r",
                    "                }\r",
                    "                else if (this.name=='tooltip') {\r",
                    "                    abstractcomponent.getComponent('helpBouton').setTooltip(this.getValue());\r",
                    "                }\r",
                    "                else if (this.name=='regex') {\r",
                    "                    abstractcomponent.getComponent(4).regex = new RegExp(this.getValue());\r",
                    "                }\r",
                    "                else {\r",
                    "                    abstractcomponent.getComponent(4)[this.name]= this.getValue();\r",
                    "                }\r",
                    "                abstractcomponent.getComponent(4).validate();\r",
                    "            });\r",
                    "            boiteParam.add(nouvChamp); \r",
                    "\r",
                    "        }\r",
                    "        if ((abstractcomponent.getComponent(4).isXType('combobox'))&&(!(abstractcomponent.getComponent(4).isXType('timefield')))) {\r",
                    "            var optionsLC = Ext.widget('optionsLCGrid', {store : abstractcomponent.getComponent(4).getStore()});\r",
                    "            boiteParam.add(optionsLC); \r",
                    "\r",
                    "        }\r",
                    "    }\r",
                    "});"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "ChampTC",
                "designer|controlQuery": "#champsEditionTC ChampTC",
                "designer|userClassName": "selectChampTC"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen25133",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "enleveChampTC",
                "implHandler": [
                    "if (Ext.getCmp('champTCIdField').getValue() == abstractcomponent.getComponent(4).id) {\r",
                    "    Ext.getCmp('boiteConfigChampsTC').removeAll();\r",
                    "}"
                ],
                "name": "beforedestroy",
                "scope": "me",
                "designer|targetType": "ChampTC",
                "designer|controlQuery": "#champsEditionTC ChampTC",
                "designer|userClassName": "enleveChampTC"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen32926",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateOptionsListeTC",
                "implHandler": [
                    "Ext.getCmp('PaneauTCDetail').update(record.data);"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#ChampTCSelectGrid",
                "designer|userClassName": "updateOptionsListeTC"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen27988",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "majAdminfTypesCentenus",
                "implHandler": [
                    "\r",
                    "var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');\r",
                    "var monIco = 'content-icon';\r",
                    "var monImg = 'resources/icones/48x48/page_full.png';\r",
                    "if (record.data.imbrique===true){monIco='documentDep'; monImg = 'resources/icones/48x48/attach_document.png';}\r",
                    "var typeFil = filArianne.getComponent('type');\r",
                    "if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.type).setIconCls(monIco); }\r",
                    "else { typeFil= Ext.widget('button',{iconCls: monIco, text:record.data.type, itemId:'type'});\r",
                    "filArianne.add(typeFil);\r",
                    "}\r",
                    "\r",
                    "if (record.data.imbrique===false) {\r",
                    "if (!(Ext.isDefined(Ext.getCmp('ongletTCDep')))) {\r",
                    "    Ext.getCmp('tabPanTC').add(Ext.widget('ongletTCDep'));    \r",
                    "}\r",
                    "}\r",
                    "else {\r",
                    "if (Ext.isDefined(Ext.getCmp('ongletTCDep'))) {\r",
                    "    Ext.getCmp('ongletTCDep').destroy();  \r",
                    "}\r",
                    "}\r",
                    "Ext.getCmp('tabPanTC').setActiveTab(2);\r",
                    "Ext.getCmp('tabPanTC').setActiveTab(5);\r",
                    "Ext.getCmp('tabPanTC').setActiveTab(0);\r",
                    "Ext.getCmp('boiteConfigChampsTC').removeAll();\r",
                    "var formulaireTC = Ext.getCmp('champsEditionTC');\r",
                    "formulaireTC.removeAll();\r",
                    "var champsD =record.data.champs;\r",
                    "for (g=0; g<champsD.length; g++) {\r",
                    "var donnees=champsD[g];\r",
                    "var configurateur = Ext.clone(donnees.config);\r",
                    "if (donnees.cType =='treepicker'){ \r",
                    "    var monStore= Ext.getStore(donnees.store);\r",
                    "    configurateur.store = monStore;\r",
                    "    monStore.load();\r",
                    "}\r",
                    "else if (donnees.cType == 'combobox') {\r",
                    "    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "    configurateur.store = monStore;\r",
                    "}\r",
                    "var nouvChamp = Ext.widget(donnees.cType, configurateur);\r",
                    "nouvChamp.config=Ext.clone(donnees.config);\r",
                    "nouvChamp.champsConfig=Ext.clone(donnees.champsConfig);\r",
                    "if (donnees.cType =='triggerfield'){ \r",
                    "    var Ouvrir = Ext.clone(donnees.ouvrir);\r",
                    "    nouvChamp.onTriggerClick= function() {\r",
                    "        var fenetre = Ext.widget(Ouvrir);\r",
                    "        fenetre.showAt(screen.width/2-200, 100);\r",
                    "    } ; \r",
                    "    nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);\r",
                    "}    \r",
                    "nouvChamp.anchor = '72%';\r",
                    "\r",
                    "nouvChamp.style = '{float:left;}';\r",
                    "var enrobage =Ext.widget('ChampTC');\r",
                    "enrobage.add(nouvChamp);\r",
                    "enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "formulaireTC.add(enrobage);\r",
                    "\r",
                    "}\r",
                    "var tableauTaxoTC = Ext.getCmp('vocabulairesTypesContenusGrid');\r",
                    "tableauTaxoTC.getSelectionModel().deselectAll();\r",
                    "var maTaxo= record.data.vocabulaires;\r",
                    "var selectionR = [ ];\r",
                    "var i =0;\r",
                    "for (i=0; i<maTaxo.length; i++) {\r",
                    "var leVocab = tableauTaxoTC.getStore().findRecord('titre', maTaxo[i].titre);\r",
                    "selectionR.push(leVocab);\r",
                    "tableauTaxoTC.getSelectionModel().select(selectionR);\r",
                    "}\r",
                    "if (record.data.imbrique===false) {\r",
                    "var tableauTCI = Ext.getCmp('TCImbriquesGrid');\r",
                    "tableauTCI.getSelectionModel().deselectAll();\r",
                    "var mesTCI = record.data.typesImbriques;\r",
                    "var selectionTCI = [ ];\r",
                    "var j =0;\r",
                    "for (j=0; j<mesTCI.length; j++) {\r",
                    "    var leTCI = tableauTCI.getStore().findRecord('type', mesTCI[j].type);\r",
                    "    selectionTCI.push(leTCI);\r",
                    "    tableauTCI.getSelectionModel().select(selectionTCI);\r",
                    "}\r",
                    "}\r",
                    ""
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.View",
                "designer|controlQuery": "#AdminfTypesGridView",
                "designer|userClassName": "majAdminfTypesCentenus"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen29640",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "supprimeTypeContenu",
                "implHandler": [
                    "var cible = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    var fenetre = Ext.widget('delConfirmZ');\r",
                    "    fenetre.showAt(screen.width/2-100, 100);\r",
                    "    Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "        Ext.getCmp('AdminfTypesGridView').getStore().remove(cible);\r",
                    "        Ext.getCmp('delConfirmZ').close();\r",
                    "    });  \r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonSupprimerTypeContenu",
                "designer|userClassName": "supprimeTypeContenu"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen13601",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "enregistrerTypeContenus",
                "implHandler": [
                    "if (Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected() !== null){\r",
                    "    var fieldsR = Ext.getCmp('champsEditionTC').items.items;\r",
                    "    var champsR = [ ];\r",
                    "    for (u=0; u<fieldsR.length; u++) { \r",
                    "        var leChampR= fieldsR[u].getComponent(4);\r",
                    "        var nch ={\r",
                    "            cType: leChampR.xtype,\r",
                    "            config: leChampR.config,\r",
                    "            champsConfig: leChampR.champsConfig,\r",
                    "            ouvrir:leChampR.ouvrir\r",
                    "        };\r",
                    "        if (leChampR.xtype== 'treepicker') {\r",
                    "            nch.store=leChampR.getStore().storeId;\r",
                    "        }\r",
                    "        else if (leChampR.xtype== 'combobox') {\r",
                    "            var dones = leChampR.getStore().data.items;\r",
                    "            var donesR = [ ];\r",
                    "            for (i=0; i<dones.length; i++) {\r",
                    "                donesR.push({valeur: dones[i].data.valeur, nom: dones[i].data.nom });\r",
                    "            }\r",
                    "            nch.store = {\r",
                    "                fields: ['valeur', 'nom'],\r",
                    "                data: donesR\r",
                    "            };\r",
                    "        }\r",
                    "        champsR.push(nch);\r",
                    "    }\r",
                    "    Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().data.champs = champsR;\r",
                    "    var nouvTaxoTC = Ext.getCmp('vocabulairesTypesContenusGrid').getSelectionModel().getSelection();\r",
                    "    var i=0;\r",
                    "    var nouvTaxoR = [ ];\r",
                    "    for (i=0; i<nouvTaxoTC.length; i++) {\r",
                    "        nouvTaxoR.push({titre: nouvTaxoTC[i].data.titre});\r",
                    "    }\r",
                    "    Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().data.vocabulaires = nouvTaxoR;\r",
                    "    if (Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().data.imbrique ===false) {\r",
                    "        var nouvTCI = Ext.getCmp('TCImbriquesGrid').getSelectionModel().getSelection();\r",
                    "        var j=0;\r",
                    "        var nouvTCIR = [ ];\r",
                    "        for (j=0; j<nouvTCI.length; j++) {\r",
                    "            nouvTCIR.push({type: nouvTCI[j].data.type});\r",
                    "        }\r",
                    "        Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().data.typesImbriques = nouvTCIR;\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonEnregistrerTypeContenu",
                "designer|userClassName": "enregistrerTypeContenus"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen28887",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "fenetreNTC",
                "implHandler": [
                    "var fenetre = Ext.widget('nouveauTypeContenu');\r",
                    "fenetre.showAt(screen.width/2-150, 100);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonNouveauTypeContenu",
                "designer|userClassName": "fenetreNTC"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen33370",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "creerNTC",
                "implHandler": [
                    "if (Ext.getCmp('champCreerTC').isValid()) {\r",
                    "\r",
                    "    var nType = Ext.getCmp('champCreerTC').getValue();\r",
                    "    var nouvType = Ext.create('model.typesContenusDataModel', {\r",
                    "        type: nType,\r",
                    "        imbrique: Ext.getCmp('champTCIsDep').getValue(),\r",
                    "        champs: [ ],\r",
                    "        contenus: [ ]\r",
                    "\r",
                    "\r",
                    "    });\r",
                    "    this.getTypesContenusDataJsonStore().add(nouvType);\r",
                    "\r",
                    "    Ext.getCmp('nouveauTypeContenuFenetre').close();\r",
                    "    Ext.getCmp('AdminfTypesGridView').getSelectionModel().select(nouvType);\r",
                    "    this.majAdminfTypesCentenus(Ext.getCmp('AdminfTypesGridView'), nouvType);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonCreerTC",
                "designer|userClassName": "creerNTC"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen91222",
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "miseAPlatTaxo",
                "designer|params": [
                    "cible",
                    "resultat"
                ],
                "implHandler": [
                    "var e=0;\r",
                    "for (e=0; e<cible.length; e++) {\r",
                    "    resultat.push({terme: cible[e].text});\r",
                    "    this.miseAPlatTaxo(cible[e].children, resultat);\r",
                    "}"
                ],
                "designer|userClassName": "miseAPlatTaxo"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen10980",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "repliqueChamp",
                "implHandler": [
                    "var nouvChamp=button.up().getComponent(1).cloneConfig();\r",
                    "nouvChamp.anchor = '90%';\r",
                    "nouvChamp.style = '{float:left;}';\r",
                    "var enrobage =Ext.widget('ChampTC');\r",
                    "enrobage.add(nouvChamp);\r",
                    "enrobage.getComponent('helpBouton').setTooltip(nouvChamp.tooltip);\r",
                    "enrobage.getComponent(2).destroy();\r",
                    "enrobage.getComponent(1).destroy();\r",
                    "enrobage.getComponent(0).destroy();\r",
                    "var supprimeur = Ext.widget('button', {iconCls: 'close', margin: '0 0 0 5', tooltip: 'Enlever', itemId: 'boutonEffaceurChamps'});\r",
                    "supprimeur.on('click', function(){\r",
                    "button.valeursM--;\r",
                    "this.up().destroy();\r",
                    "});\r",
                    "enrobage.add(supprimeur);\r",
                    "button.up().up().insert(button.up().up().items.indexOf(button.up())+button.valeursM, enrobage);\r",
                    "button.valeursM++;"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "[itemId= 'boutonReplicateurChamps']",
                "designer|userClassName": "repliqueChamp"
            },
            "customConfigs": [],
            "expanded": true
        }
    ]
}