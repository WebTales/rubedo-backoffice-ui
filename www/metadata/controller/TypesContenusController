{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "TypesContenusController",
        "designer|userClassName": "TypesContenusController",
        "models": [
            "typesContenusDataModel"
        ],
        "stores": [
            "TypesContenusDataJson"
        ],
        "views": [
            "nouveauTypeContenu",
            "ajoutChampTCFenetre",
            "ChampTC",
            "optionsLCGrid",
            "ongletTCDep"
        ]
    },
    "designerId": "6b4056c1-8b00-41ce-a4cb-363fbf0cb6f0",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonAjouterContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "ajouterContenu",
                "implHandler": [
                    "if (Ext.isDefined(Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0])) {\r",
                    "    var fenetre = Ext.widget('ajouterContenu');\r",
                    "    Ext.getCmp('ViewportPrimaire').add(fenetre);\r",
                    "    if (Ext.isDefined(window.innerHeight)) {\r",
                    "        if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}\r",
                    "        if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}\r",
                    "    }\r",
                    "    fenetre.show();\r",
                    "    fenetre.setTitle(Rubedo.RubedoAutomatedElementsLoc.newContentText+\" \"+Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get(\"type\"));\r",
                    "    var formulaireTC = Ext.getCmp('boiteAChampsContenus');\r",
                    "    Ext.getCmp(\"contentsVersionPanel\").up().remove( Ext.getCmp(\"contentsVersionPanel\"));\r",
                    "    var isProduct=false;\r",
                    "    if ((!Ext.isEmpty(Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get(\"productType\")))&&(Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get(\"productType\")!=\"none\")){\r",
                    "        isProduct=true;\r",
                    "        fenetre.getComponent(0).add(Ext.widget(\"productSettingsForm\"));\r",
                    "        var variatorFields=[\r",
                    "            {name:\"price\"},\r",
                    "            {name:\"stock\"},\r",
                    "            {name:\"sku\"},\r",
                    "            {name:\"id\"},\r",
                    "            {name:'specialOffers',defaultValue:[ ]}\r",
                    "        ];\r",
                    "        var variatorColumns=[ ];\r",
                    "        Ext.getCmp(\"productSettingsForm\").getComponent(0).getForm().setValues(Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].getData());\r",
                    "        if (!Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get(\"manageStock\")){\r",
                    "            Ext.getCmp(\"stockManagentForProductFieldset\").hide();\r",
                    "        }\r",
                    "    }\r",
                    "    var champsD =Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].data.champs;\r",
                    "    for (g=0; g<champsD.length; g++) {\r",
                    "        var donnees=champsD[g];\r",
                    "        var configurateur = Ext.clone(donnees.config);\r",
                    "        if (!Ext.isEmpty(configurateur.i18n)){\r",
                    "            var BOLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "            if (!Ext.isEmpty(configurateur.i18n[BOLanguage])){\r",
                    "                if (!Ext.isEmpty(configurateur.i18n[BOLanguage].fieldLabel)){\r",
                    "                    configurateur.fieldLabel=configurateur.i18n[BOLanguage].fieldLabel;\r",
                    "                }\r",
                    "                if (!Ext.isEmpty(configurateur.i18n[BOLanguage].tooltip)){\r",
                    "                    configurateur.tooltip=configurateur.i18n[BOLanguage].tooltip;\r",
                    "                }\r",
                    "            }\r",
                    "        }\r",
                    "        if (donnees.cType =='treepicker'){\r",
                    "            configurateur.store = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                isOptimised: true,\r",
                    "                usedCollection: 'Pages',\r",
                    "                autoLoad: false,\r",
                    "                autoSync: false,\r",
                    "                remoteFilter: true,\r",
                    "                model: 'Rubedo.model.taxonomyTermModel',\r",
                    "                proxy: {\r",
                    "                    type: 'ajax',\r",
                    "                    api: {\r",
                    "                        read: 'taxonomy-terms/navigation-tree'\r",
                    "                    },\r",
                    "                    reader: {\r",
                    "                        type: 'json',\r",
                    "                        getResponseData: function(response) {\r",
                    "                            var data, error;\r",
                    "\r",
                    "                            try {\r",
                    "                                data = Ext.decode(response.responseText);\r",
                    "                                if (Ext.isDefined(data.data)){data.children=data.data;}// error fix\r",
                    "                                return this.readRecords(data);\r",
                    "                            } catch (ex) {\r",
                    "                                error = new Ext.data.ResultSet({\r",
                    "                                    total  : 0,\r",
                    "                                    count  : 0,\r",
                    "                                    records: [],\r",
                    "                                    success: false,\r",
                    "                                    message: ex.message\r",
                    "                                });\r",
                    "\r",
                    "                                this.fireEvent('exception', this, response, error);\r",
                    "                                console.log(ex);\r",
                    "\r",
                    "                                Ext.Logger.warn('Unable to parse the JSON returned by the server');\r",
                    "\r",
                    "                                return error;\r",
                    "                            }\r",
                    "                        },\r",
                    "                        messageProperty: 'message'\r",
                    "                    }\r",
                    "                },\r",
                    "                sorters: {\r",
                    "                    property: 'orderValue'\r",
                    "                }\r",
                    "            });\r",
                    "            configurateur.store.load();\r",
                    "            configurateur.valueField=\"id\";\r",
                    "            configurateur.displayField=\"text\";\r",
                    "            configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];\r",
                    "        }\r",
                    "        else if (donnees.cType == 'combobox') {\r",
                    "            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "            configurateur.store = monStore;\r",
                    "        }\r",
                    "        //begin temporary fix\r",
                    "        configurateur.labelSeparator=\" \";\r",
                    "        //end temporary fix\r",
                    "        if (configurateur.useAsVariation&&isProduct){\r",
                    "            variatorFields.push({name:configurateur.name});\r",
                    "            var colEditor=Ext.clone(configurateur);\r",
                    "            colEditor.xtype=donnees.cType;\r",
                    "            colEditor.multiSelect=false;\r",
                    "            delete colEditor.fieldLabel;\r",
                    "            variatorColumns.push({\r",
                    "                xtype: 'gridcolumn',\r",
                    "                dataIndex: configurateur.name,\r",
                    "                text: configurateur.fieldLabel,\r",
                    "                flex:1,\r",
                    "                editor:colEditor\r",
                    "            });\r",
                    "        } else {\r",
                    "            try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){\r",
                    "            var nouvChamp = Ext.create(donnees.cType, configurateur);\r",
                    "        }\r",
                    "        nouvChamp.config=Ext.clone(donnees.config);\r",
                    "        if (nouvChamp.config.useTodayDef){\r",
                    "            nouvChamp.setValue(new Date());\r",
                    "        }\r",
                    "        //begin temporary fix\r",
                    "        if(configurateur.tooltip==\"help text\"){configurateur.tooltip=\"\";}\r",
                    "        //end temporary fix\r",
                    "        if (donnees.cType =='triggerfield'){\r",
                    "            var Ouvrir = Ext.clone(donnees.openWindow);\r",
                    "            nouvChamp.onTriggerClick= function() {\r",
                    "                var fenetre = Ext.widget(Ouvrir);\r",
                    "                fenetre.showAt(screen.width/2-200, 100);\r",
                    "            } ;\r",
                    "            nouvChamp.openWindow =Ext.clone(donnees.openWindow);\r",
                    "        }\r",
                    "        nouvChamp.anchor = '90%';\r",
                    "        nouvChamp.style = '{float:left;}';\r",
                    "        var enrobage =Ext.widget('ChampTC');\r",
                    "        enrobage.add(nouvChamp);\r",
                    "        enrobage.getComponent('helpBouton').setTooltip(configurateur.tooltip);\r",
                    "        if (Ext.isEmpty(configurateur.tooltip)){\r",
                    "            enrobage.getComponent('helpBouton').hidden=true;\r",
                    "        }\r",
                    "        if (nouvChamp.multivalued) {\r",
                    "            enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.duplicateText, itemId: 'boutonReplicateurChamps'}));\r",
                    "\r",
                    "        };\r",
                    "        formulaireTC.add(enrobage);\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "if (isProduct){\r",
                    "    var variatorStore=Ext.create('Ext.data.Store', {\r",
                    "        fields:variatorFields,\r",
                    "        data:[]\r",
                    "    });\r",
                    "    variatorColumns.push({\r",
                    "        xtype: 'gridcolumn',\r",
                    "        dataIndex: 'price',\r",
                    "        text: 'Price',\r",
                    "        flex:1,\r",
                    "        editor:{\r",
                    "            xtype:\"numberfield\",\r",
                    "        }\r",
                    "    });\r",
                    "    variatorColumns.push({\r",
                    "        xtype: 'gridcolumn',\r",
                    "        dataIndex: 'sku',\r",
                    "        flex:1,\r",
                    "        text: 'SKU',\r",
                    "        editor:{\r",
                    "            xtype:\"textfield\"\r",
                    "\r",
                    "        }\r",
                    "    });\r",
                    "    if (Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get(\"manageStock\")){\r",
                    "        variatorColumns.push({\r",
                    "            xtype: 'gridcolumn',\r",
                    "            dataIndex: 'stock',\r",
                    "            flex:1,\r",
                    "            text: 'Stock',\r",
                    "            editor:{\r",
                    "                xtype:\"numberfield\",\r",
                    "                allowDecimals:false,\r",
                    "                minValue:0\r",
                    "            }\r",
                    "        });\r",
                    "    }\r",
                    "    Ext.getCmp(\"productVariationsGrid\").reconfigure(variatorStore,variatorColumns);\r",
                    "}\r",
                    "var formTaxoTC =  Ext.getCmp('boiteATaxoContenus');\r",
                    "var lesTaxo = Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get(\"vocabularies\");\r",
                    "var i=0;\r",
                    "for (i=0; i<lesTaxo.length; i++) {\r",
                    "    var leVocab = Ext.getStore('TaxonomyForC').findRecord('id', lesTaxo[i]);\r",
                    "    if (!Ext.isEmpty(leVocab)){\r",
                    "        if (leVocab.get(\"inputAsTree\")){\r",
                    "            var storeT = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                remoteFilter:\"true\",\r",
                    "                proxy: {\r",
                    "                    type: 'ajax',\r",
                    "                    api: {\r",
                    "                        read: 'taxonomy-terms/tree'\r",
                    "                    },\r",
                    "                    reader: {\r",
                    "                        type: 'json',\r",
                    "                        messageProperty: 'message'\r",
                    "                    },\r",
                    "                    encodeFilters: function(filters) {\r",
                    "                        var min = [],\r",
                    "                            length = filters.length,\r",
                    "                            i = 0;\r",
                    "\r",
                    "                        for (; i < length; i++) {\r",
                    "                            min[i] = {\r",
                    "                                property: filters[i].property,\r",
                    "                                value   : filters[i].value\r",
                    "                            };\r",
                    "                            if (filters[i].type) {\r",
                    "                                min[i].type = filters[i].type;\r",
                    "                            }\r",
                    "                            if (filters[i].operator) {\r",
                    "                                min[i].operator = filters[i].operator;\r",
                    "                            }\r",
                    "                        }\r",
                    "                        return this.applyEncoding(min);\r",
                    "                    }\r",
                    "                },\r",
                    "                filters: {\r",
                    "                    property: 'vocabularyId',\r",
                    "                    value: leVocab.get(\"id\")\r",
                    "                }\r",
                    "\r",
                    "            });\r",
                    "            var toUse=\"Ext.ux.TreePicker\";\r",
                    "            if(leVocab.get(\"multiSelect\")){toUse=\"Ext.ux.TreeMultiPicker\";}\r",
                    "            if(leVocab.get(\"id\")=='navigation'){storeT.getProxy().api={read:\"taxonomy-terms/navigation-tree\"};}\r",
                    "            storeT.load();\r",
                    "            var selecteur = Ext.create(toUse, {\r",
                    "                name:leVocab.get(\"id\"),\r",
                    "                fieldLabel: leVocab.get(\"name\"),\r",
                    "                store: storeT,\r",
                    "                anchor:\"90%\",\r",
                    "                ignoreIsNotPage:true,\r",
                    "                displayField:\"text\",\r",
                    "                allowBlank: !leVocab.data.mandatory,\r",
                    "                plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")]\r",
                    "            });\r",
                    "\r",
                    "\r",
                    "        } else {\r",
                    "            var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "                model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                remoteFilter:\"true\",\r",
                    "                proxy: {\r",
                    "                    type: 'ajax',\r",
                    "                    api: {\r",
                    "                        read: 'taxonomy-terms'\r",
                    "                    },\r",
                    "                    reader: {\r",
                    "                        type: 'json',\r",
                    "                        messageProperty: 'message',\r",
                    "                        root: 'data'\r",
                    "                    },\r",
                    "                    encodeFilters: function(filters) {\r",
                    "                        var min = [],\r",
                    "                            length = filters.length,\r",
                    "                            i = 0;\r",
                    "\r",
                    "                        for (; i < length; i++) {\r",
                    "                            min[i] = {\r",
                    "                                property: filters[i].property,\r",
                    "                                value   : filters[i].value\r",
                    "                            };\r",
                    "                            if (filters[i].type) {\r",
                    "                                min[i].type = filters[i].type;\r",
                    "                            }\r",
                    "                            if (filters[i].operator) {\r",
                    "                                min[i].operator = filters[i].operator;\r",
                    "                            }\r",
                    "                        }\r",
                    "                        return this.applyEncoding(min);\r",
                    "                    }\r",
                    "                },\r",
                    "                filters: {\r",
                    "                    property: 'vocabularyId',\r",
                    "                    value: leVocab.get(\"id\")\r",
                    "                }\r",
                    "\r",
                    "            });\r",
                    "            storeT.on(\"beforeload\", function(s,o){\r",
                    "                o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "                if (!Ext.isEmpty(o.params.comboQuery)){\r",
                    "\r",
                    "                    var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                        property:\"text\",\r",
                    "                        value:o.params.comboQuery,\r",
                    "                        operator:'like'\r",
                    "                    });\r",
                    "\r",
                    "                    o.filters.push(newFilter);\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "\r",
                    "            });\r",
                    "            var selecteur = Ext.widget('comboboxselect', {\r",
                    "                name:leVocab.get(\"id\"),\r",
                    "                anchor:\"90%\",\r",
                    "                fieldLabel: leVocab.get(\"name\"),\r",
                    "                autoScroll: false,\r",
                    "                store: storeT,\r",
                    "                queryMode: 'remote',\r",
                    "                queryParam: 'comboQuery',\r",
                    "                minChars:3,\r",
                    "                displayField: 'text',\r",
                    "                valueField: 'id',\r",
                    "                filterPickList: true,\r",
                    "                typeAhead: true,\r",
                    "                forceSelection: !leVocab.data.expandable,\r",
                    "                createNewOnEnter: leVocab.data.expandable,\r",
                    "                multiSelect: leVocab.data.multiSelect,\r",
                    "                allowBlank: !leVocab.data.mandatory\r",
                    "            });\r",
                    "\r",
                    "        }\r",
                    "        var enrobage =Ext.widget('ChampTC');\r",
                    "        enrobage.add(selecteur);\r",
                    "        enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);\r",
                    "        if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}\r",
                    "        formTaxoTC.add(enrobage);\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "var nct = Ext.getCmp(\"nestedContentsTab\");\r",
                    "if (!Ext.isEmpty(nct)){\r",
                    "    Ext.getCmp('nestedContensTabConfig').destroy();\r",
                    "    nct.destroy();\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "ajouterContenu",
            "designerId": "e81d0f4c-83eb-4437-a188-896315f1c5c8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonOuvrirFenetreTC",
                "designer|targetType": "Ext.button.Button",
                "fn": "ouvrirFenetreTC",
                "implHandler": [
                    "var fenetreTC = Ext.widget('ajoutChampTCFenetre');\r",
                    "fenetreTC.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "ouvrirFenetreTC",
            "designerId": "063f8236-3289-49dc-a637-63d5b83ff07c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonAjouterChampTC",
                "designer|targetType": "Ext.button.Button",
                "fn": "creerChampTC",
                "implHandler": [
                    "var me=this;\r",
                    "if (Ext.isEmpty(Ext.getStore(\"AddMultiFieldStore\").getRange())){\r",
                    "    var donnees = Ext.getCmp('ChampTCSelectGrid').getSelectionModel().getLastSelected().data;\r",
                    "    if ((donnees.cType==\"Rubedo.view.localiserField\")&&(!Ext.isEmpty(Ext.getCmp(\"champsEditionTC\").query(\"localiserField\")))){\r",
                    "        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.maxOneLocFieldError);\r",
                    "    }else {\r",
                    "        var configurateur = Ext.clone(donnees.config);\r",
                    "        if (donnees.cType =='Ext.ux.TreePicker'){ \r",
                    "            configurateur.store = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                isOptimised: true,\r",
                    "                usedCollection: 'Pages',\r",
                    "                autoLoad: false,\r",
                    "                autoSync: false,\r",
                    "                remoteFilter: true,\r",
                    "                model: 'Rubedo.model.taxonomyTermModel',\r",
                    "                proxy: {\r",
                    "                    type: 'ajax',\r",
                    "                    api: {\r",
                    "                        read: 'taxonomy-terms/navigation-tree'\r",
                    "                    },\r",
                    "                    reader: {\r",
                    "                        type: 'json',\r",
                    "                        getResponseData: function(response) {\r",
                    "                            var data, error;\r",
                    "\r",
                    "                            try {\r",
                    "                                data = Ext.decode(response.responseText);\r",
                    "                                if (Ext.isDefined(data.data)){data.children=data.data;}// error fix\r",
                    "                                return this.readRecords(data);\r",
                    "                            } catch (ex) {\r",
                    "                                error = new Ext.data.ResultSet({\r",
                    "                                    total  : 0,\r",
                    "                                    count  : 0,\r",
                    "                                    records: [],\r",
                    "                                    success: false,\r",
                    "                                    message: ex.message\r",
                    "                                });\r",
                    "\r",
                    "                                this.fireEvent('exception', this, response, error);\r",
                    "                                console.log(ex);\r",
                    "\r",
                    "                                Ext.Logger.warn('Unable to parse the JSON returned by the server');\r",
                    "\r",
                    "                                return error;\r",
                    "                            }\r",
                    "                        },\r",
                    "                        messageProperty: 'message'\r",
                    "                    }\r",
                    "                },\r",
                    "                sorters: {\r",
                    "                    property: 'orderValue'\r",
                    "                }\r",
                    "            });\r",
                    "            configurateur.store.load();\r",
                    "            configurateur.valueField=\"id\";\r",
                    "            configurateur.displayField=\"text\";\r",
                    "            configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];\r",
                    "        }\r",
                    "        else if (donnees.cType == 'Ext.form.field.ComboBox') {\r",
                    "            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "            configurateur.store = monStore;\r",
                    "        }\r",
                    "        var nouvChamp = Ext.create(donnees.cType, configurateur);\r",
                    "        nouvChamp.protoId=donnees.id;\r",
                    "        nouvChamp.config=Ext.clone(donnees.config);\r",
                    "        nouvChamp.configFields=Ext.clone(donnees.configFields);\r",
                    "        if (donnees.cType =='Ext.form.field.Trigger'){\r",
                    "            var Ouvrir = Ext.clone(donnees.openWindow);\r",
                    "            nouvChamp.onTriggerClick= function() {\r",
                    "                var fenetre = Ext.widget(Ouvrir);\r",
                    "                fenetre.showAt(screen.width/2-200, 100);\r",
                    "            } ;  \r",
                    "            nouvChamp.openWindow =Ext.clone(donnees.openWindow);\r",
                    "        }\r",
                    "        nouvChamp.anchor = '90%';\r",
                    "        nouvChamp.style = '{float:left;}';\r",
                    "        var enrobage =Ext.widget('ChampTC');\r",
                    "        enrobage.add(nouvChamp);\r",
                    "        enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "        if (Ext.isEmpty(nouvChamp.config.tooltip)){\r",
                    "            enrobage.getComponent('helpBouton').hidden=true;\r",
                    "        } \r",
                    "        if (!me.nameAvailable(nouvChamp.name)) {\r",
                    "            var duplic = 1;\r",
                    "            while (!me.nameAvailable(nouvChamp.name+duplic)){\r",
                    "                duplic++;\r",
                    "            }\r",
                    "            nouvChamp.name=nouvChamp.name+duplic;\r",
                    "            nouvChamp.config.name=nouvChamp.config.name+duplic;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        Ext.getCmp('champsEditionTC').add(enrobage);\r",
                    "        nouvChamp.getEl().dom.click();\r",
                    "        button.up().up().close();\r",
                    "    }} else {\r",
                    "        Ext.Array.forEach(Ext.getStore(\"AddMultiFieldStore\").getRange(), function (futureField){\r",
                    "            var interv=Ext.clone(futureField.data);\r",
                    "            interv.id=interv.protoId;\r",
                    "            var donnees = interv;\r",
                    "            if ((donnees.cType==\"Rubedo.view.localiserField\")&&(!Ext.isEmpty(Ext.getCmp(\"champsEditionTC\").query(\"localiserField\")))){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.maxOneLocFieldError);\r",
                    "            }else {\r",
                    "                var configurateur = Ext.clone(donnees.config);\r",
                    "                if (donnees.cType =='Ext.ux.TreePicker'){ \r",
                    "                    configurateur.store = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                        isOptimised: true,\r",
                    "                        usedCollection: 'Pages',\r",
                    "                        autoLoad: false,\r",
                    "                        autoSync: false,\r",
                    "                        remoteFilter: true,\r",
                    "                        model: 'Rubedo.model.taxonomyTermModel',\r",
                    "                        proxy: {\r",
                    "                            type: 'ajax',\r",
                    "                            api: {\r",
                    "                                read: 'taxonomy-terms/navigation-tree'\r",
                    "                            },\r",
                    "                            reader: {\r",
                    "                                type: 'json',\r",
                    "                                getResponseData: function(response) {\r",
                    "                                    var data, error;\r",
                    "\r",
                    "                                    try {\r",
                    "                                        data = Ext.decode(response.responseText);\r",
                    "                                        if (Ext.isDefined(data.data)){data.children=data.data;}// error fix\r",
                    "                                        return this.readRecords(data);\r",
                    "                                    } catch (ex) {\r",
                    "                                        error = new Ext.data.ResultSet({\r",
                    "                                            total  : 0,\r",
                    "                                            count  : 0,\r",
                    "                                            records: [],\r",
                    "                                            success: false,\r",
                    "                                            message: ex.message\r",
                    "                                        });\r",
                    "\r",
                    "                                        this.fireEvent('exception', this, response, error);\r",
                    "                                        console.log(ex);\r",
                    "\r",
                    "                                        Ext.Logger.warn('Unable to parse the JSON returned by the server');\r",
                    "\r",
                    "                                        return error;\r",
                    "                                    }\r",
                    "                                },\r",
                    "                                messageProperty: 'message'\r",
                    "                            }\r",
                    "                        },\r",
                    "                        sorters: {\r",
                    "                            property: 'orderValue'\r",
                    "                        }\r",
                    "                    });\r",
                    "                    configurateur.store.load();\r",
                    "                    configurateur.valueField=\"id\";\r",
                    "                    configurateur.displayField=\"text\";\r",
                    "                    configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];\r",
                    "                }\r",
                    "                else if (donnees.cType == 'Ext.form.field.ComboBox') {\r",
                    "                    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "                    configurateur.store = monStore;\r",
                    "                }\r",
                    "                var nouvChamp = Ext.create(donnees.cType, configurateur);\r",
                    "                nouvChamp.protoId=donnees.id;\r",
                    "                nouvChamp.config=Ext.clone(donnees.config);\r",
                    "                nouvChamp.configFields=Ext.clone(donnees.configFields);\r",
                    "                if (donnees.cType =='Ext.form.field.Trigger'){\r",
                    "                    var Ouvrir = Ext.clone(donnees.openWindow);\r",
                    "                    nouvChamp.onTriggerClick= function() {\r",
                    "                        var fenetre = Ext.widget(Ouvrir);\r",
                    "                        fenetre.showAt(screen.width/2-200, 100);\r",
                    "                    } ;  \r",
                    "                    nouvChamp.openWindow =Ext.clone(donnees.openWindow);\r",
                    "                }\r",
                    "                nouvChamp.anchor = '90%';\r",
                    "                nouvChamp.style = '{float:left;}';\r",
                    "                var enrobage =Ext.widget('ChampTC');\r",
                    "                enrobage.add(nouvChamp);\r",
                    "                enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "                if (Ext.isEmpty(nouvChamp.config.tooltip)){\r",
                    "                    enrobage.getComponent('helpBouton').hidden=true;\r",
                    "                } \r",
                    "                if (!me.nameAvailable(nouvChamp.name)) {\r",
                    "                    var duplic = 1;\r",
                    "                    while (!me.nameAvailable(nouvChamp.name+duplic)){\r",
                    "                        duplic++;\r",
                    "                    }\r",
                    "                    nouvChamp.name=nouvChamp.name+duplic;\r",
                    "                    nouvChamp.config.name=nouvChamp.config.name+duplic;\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "                Ext.getCmp('champsEditionTC').add(enrobage);\r",
                    "\r",
                    "            }\r",
                    "        });\r",
                    "        button.up().up().close();\r",
                    "    }"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "creerChampTC",
            "designerId": "cca991ed-25e3-4a89-9490-55e02f4dcef7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#champsEditionTC ChampTC",
                "designer|targetType": "ChampTC",
                "fn": "selectChampTC",
                "implHandler": [
                    "var me=this;",
                    "var TCfield=component.getComponent(1);",
                    "TCfield.getEl().on('click', function() {",
                    "    Ext.getCmp(\"TCfieldUp\").enable();",
                    "    Ext.getCmp(\"TCfieldDown\").enable();",
                    "    Ext.getCmp(\"TCfieldDeleter\").enable();",
                    "    if (Ext.getCmp('champTCIdField').getValue() != TCfield.id) {",
                    "        if (Ext.isDefined(Ext.getCmp(Ext.getCmp('champTCIdField').getValue()))){",
                    "            Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).labelEl.applyStyles('color:#000000');",
                    "            var companion =Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).up().getComponent(2);",
                    "            if (Ext.isDefined(companion)) {",
                    "                companion.getEl().applyStyles('color:#000000');",
                    "            }",
                    "        }",
                    "        Ext.getCmp('champTCIdField').setValue(TCfield.id);",
                    "        if ((TCfield.isXType(\"ImagePickerField\"))||(TCfield.isXType(\"embeddedImageField\"))||(TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))) {",
                    "            TCfield.up().getComponent(2).getEl().frame(MyPrefData.themeColor);",
                    "            TCfield.up().getComponent(2).getEl().applyStyles('color:'+MyPrefData.themeColor);",
                    "        } else {",
                    "            this.frame(MyPrefData.themeColor);",
                    "            TCfield.labelEl.applyStyles('color:'+MyPrefData.themeColor);",
                    "        }",
                    "        var mesChamps = Ext.clone(TCfield.configFields);",
                    "        var record=Ext.getCmp(\"AdminfTypesGrid\").getSelectionModel().getLastSelected();",
                    "        if (((!Ext.isEmpty(record.get(\"productType\")))&&(record.get(\"productType\")!=\"none\"))&&(Ext.Array.contains([\"textfield\",\"numberfield\",\"combobox\"],TCfield.xtype))){",
                    "            mesChamps.push({",
                    "                type:\"Ext.form.field.Checkbox\",",
                    "                config:{",
                    "                    fieldLabel:\"Use as variation\",",
                    "                    name:\"useAsVariation\"",
                    "                }",
                    "            });",
                    "        }",
                    "",
                    "        var boiteParam = Ext.getCmp('boiteConfigChampsTC').getComponent(0).getComponent(0);",
                    "        var boiteParam1 = Ext.getCmp('boiteConfigChampsTC').getComponent(0).getComponent(1);",
                    "        boiteParam.removeAll();",
                    "        boiteParam1.removeAll();",
                    "        for(t=0; t<mesChamps.length; t++) {",
                    "            if (mesChamps[t].type =='Ext.form.field.ComboBox') {",
                    "                var monStore=  Ext.create('Ext.data.Store', mesChamps[t].store);",
                    "                mesChamps[t].config.store= monStore;",
                    "            }",
                    "            var nouvChamp= Ext.create(mesChamps[t].type, mesChamps[t].config);",
                    "            nouvChamp.labelSeparator= ' ';",
                    "            nouvChamp.anchor='100%';",
                    "            if (nouvChamp.name==\"name\"){",
                    "                nouvChamp.validator=me.nameValidator;",
                    "            }",
                    "",
                    "            nouvChamp.setValue(TCfield.config[nouvChamp.name]);",
                    "",
                    "            if ((mesChamps[t].type =='Rubedo.view.CTMTField')||(mesChamps[t].type =='Rubedo.view.CTCField')){",
                    "",
                    "                var properMT =Ext.clone(TCfield.config[nouvChamp.name]);",
                    "                nouvChamp.getStore().targetField=nouvChamp.id;",
                    "                nouvChamp.getStore().addListener(\"load\", function(){",
                    "                    Ext.getCmp(this.targetField).setValue(properMT);",
                    "                },nouvChamp.getStore(),{single:true});",
                    "                }",
                    "                if ((nouvChamp.name==\"fieldLabel\")||(nouvChamp.name==\"tooltip\")){",
                    "                    nouvChamp.hide();",
                    "                    var replacerField=Ext.widget('genericLocTextField',{",
                    "                        fieldLabel:nouvChamp.fieldLabel,",
                    "                        anchor:\"100%\",",
                    "                        targetEntity:TCfield.getId(),",
                    "                        targetEntityProp:nouvChamp.name,",
                    "                        CTMode:true,",
                    "                        companionFieldId:nouvChamp.getId(),",
                    "                        initialLanguage:Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\")",
                    "                    });",
                    "                    boiteParam.add(replacerField);",
                    "                }",
                    "                if ((nouvChamp.name==\"localizable\")&&(Ext.getStore(\"AllLanguagesStore3\").getRange().length==1)){",
                    "                    nouvChamp.hide();",
                    "                }",
                    "                nouvChamp.setReadOnly((!ACL.interfaceRights[\"write.ui.contentTypes\"])||(Ext.getCmp(\"AdminfTypesGrid\").getSelectionModel().getLastSelected().get(\"readOnly\")));",
                    "                nouvChamp.on('change', function (thing) {",
                    "                    if (thing.isValid()){",
                    "                        if(this.isXType(\"timefield\")){",
                    "                            TCfield.config[this.name]=Ext.Date.format(this.getValue(),\"H:i\");",
                    "                        } else if(this.isXType(\"datefield\")){",
                    "                            TCfield.config[this.name]=Ext.Date.format(this.getValue(),\"U\");",
                    "                        } else {",
                    "                            TCfield.config[this.name]= this.getValue();",
                    "                        }",
                    "                        if ((this.name=='name')&&((TCfield.isXType(\"radiogroup\"))||(TCfield.isXType(\"checkboxgroup\")))){",
                    "                            var ntcrVal=this.getValue();",
                    "                            Ext.Array.forEach(TCfield.config.items, function(ntch){ntch.name=ntcrVal;});",
                    "                        }",
                    "                        if (this.name=='fieldLabel') {",
                    "",
                    "                            if (TCfield.isXType(\"ImagePickerField\")) {",
                    "                                TCfield.up().getComponent(2).getComponent(0).setText(this.getValue());",
                    "                                TCfield.fieldLabel=this.getValue();",
                    "                            } else if ((TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"embeddedImageField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))){",
                    "                                TCfield.up().getComponent(2).setFieldLabel(this.getValue());",
                    "                                TCfield.fieldLabel=this.getValue();",
                    "                            } else {",
                    "                                TCfield.setFieldLabel(this.getValue());",
                    "                            }",
                    "                        }",
                    "                        else if (this.name=='value') {",
                    "",
                    "                            TCfield.setValue(this.getValue());",
                    "",
                    "                        }",
                    "                        else if (this.name=='allowBlank') {",
                    "                            var currentOne=TCfield.config.fieldLabel;",
                    "                            if (this.getValue()) {",
                    "                                currentOne=currentOne.replace(\" *\",\"\");",
                    "                            } else {",
                    "                                currentOne=currentOne+\" *\";",
                    "                            }",
                    "                            TCfield.config.fieldLabel=currentOne;",
                    "                            if (TCfield.isXType(\"ImagePickerField\")) {",
                    "                                TCfield.up().getComponent(2).getComponent(0).setText(currentOne+\" \");",
                    "                            } else if ((TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"embeddedImageField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))){",
                    "                                TCfield.up().getComponent(2).setFieldLabel(currentOne);",
                    "                            } else {",
                    "                                TCfield.setFieldLabel(currentOne);",
                    "                            }",
                    "                        }",
                    "                        else if (this.name=='editable') {",
                    "                            TCfield.setEditable(this.getValue());",
                    "                            TCfield.reset();",
                    "                        }",
                    "                        else if (this.name=='multiSelect') {",
                    "                            TCfield.multiSelect = this.getValue();",
                    "                            TCfield.reset();",
                    "                        }",
                    "                        else if (this.name=='tooltip') {",
                    "                            component.getComponent('helpBouton').setTooltip(this.getValue());",
                    "                            if (Ext.isEmpty(this.getValue())){",
                    "                                component.getComponent('helpBouton').hide();",
                    "                            } else {",
                    "                                component.getComponent('helpBouton').show();",
                    "                            }",
                    "                        }",
                    "                        else if (this.name=='regex') {",
                    "                            TCfield.regex = new RegExp(this.getValue());",
                    "                        }",
                    "                        else {",
                    "                            TCfield[this.name]= this.getValue();",
                    "                        }",
                    "                        TCfield.validate();",
                    "                    }});",
                    "                    if (mesChamps[t].isASearchField){",
                    "                        boiteParam1.add(nouvChamp);",
                    "                    } else {",
                    "                        boiteParam.add(nouvChamp);",
                    "                    }",
                    "",
                    "                }",
                    "                if ((TCfield.isXType('combobox'))&&(!(TCfield.isXType('timefield')))&&(!(TCfield.isXType('FormPickerField')))) {",
                    "                    var optionsLC = Ext.widget('optionsLCGrid', {store : TCfield.getStore()});",
                    "                    boiteParam.add(optionsLC);",
                    "",
                    "                }",
                    "                if ((TCfield.isXType(\"radiogroup\"))||(TCfield.isXType(\"checkboxgroup\"))) {",
                    "                    var itemsConfigurator=Ext.widget(\"specialTCFieldItemsConfigurator\");",
                    "                    itemsConfigurator.targetedId=TCfield.id;",
                    "                    boiteParam.add(itemsConfigurator);",
                    "                }",
                    "            }",
                    "        });"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "selectChampTC",
            "designerId": "e2ebc421-111e-445c-aa56-a4c4fc55fdfe"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#champsEditionTC ChampTC",
                "designer|targetType": "ChampTC",
                "fn": "enleveChampTC",
                "implHandler": [
                    "if (Ext.getCmp('champTCIdField').getValue() == component.getComponent(1).id) {\r",
                    "    Ext.getCmp('boiteConfigChampsTC').getComponent(0).getComponent(0).removeAll();\r",
                    "    Ext.getCmp('boiteConfigChampsTC').getComponent(0).getComponent(1).removeAll();\r",
                    "    Ext.getCmp(\"TCfieldUp\").disable();\r",
                    "    Ext.getCmp(\"TCfieldDown\").disable();\r",
                    "    Ext.getCmp(\"TCfieldDeleter\").disable();\r",
                    "}"
                ],
                "name": "beforedestroy",
                "scope": "me"
            },
            "name": "enleveChampTC",
            "designerId": "0541dcd4-ee38-4b95-9dbf-b9f8d5a998e7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#ChampTCSelectGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "updateOptionsListeTC",
                "implHandler": [
                    "Ext.getCmp('PaneauTCDetail').update(record.data);"
                ],
                "name": "itemclick",
                "scope": "me"
            },
            "name": "updateOptionsListeTC",
            "designerId": "74b79ea2-838b-4407-8e7a-69683f98bf32"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#AdminfTypesGrid",
                "designer|targetType": "Ext.grid.View",
                "fn": "selectTC",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp(\"adminFTDC\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.enable();});",
                    "if (record.get(\"productType\")==\"configurable\"){",
                    "    if (Ext.isEmpty(Ext.getCmp(\"CTECommerceFieldset\"))){",
                    "        Ext.getCmp(\"TDCEditForm\").add(Ext.widget(\"CTECommerceFieldset\"));",
                    "    }",
                    "} else {",
                    "    if (!Ext.isEmpty(Ext.getCmp(\"CTECommerceFieldset\"))){",
                    "        Ext.getCmp(\"TDCEditForm\").remove(Ext.getCmp(\"CTECommerceFieldset\"));",
                    "    }",
                    "}",
                    "Ext.getCmp(\"boutonSupprimerTypeContenu\").enable();",
                    "Ext.getCmp(\"TCfieldUp\").disable();",
                    "Ext.getCmp(\"TCfieldDown\").disable();",
                    "Ext.getCmp(\"TCfieldDeleter\").disable();",
                    "Ext.getCmp(\"TDCEditForm\").getForm().setValues(record.getData());",
                    "var filArianne = Ext.getCmp(\"adminFTDC\").getDockedComponent('filArianne');",
                    "var monIco = 'content-icon';",
                    "var monImg = 'resources/icones/48x48/page_full.png';",
                    "if (record.data.dependant===true){monIco='documentDep'; monImg = 'resources/icones/48x48/attach_document.png';}",
                    "var typeFil = filArianne.getComponent('type');",
                    "if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.type).setIconCls(monIco); }",
                    "else { typeFil= Ext.widget('button',{iconCls: monIco, text:record.data.type, itemId:'type'});",
                    "filArianne.add(typeFil);",
                    "}",
                    "",
                    "if ((record.data.dependant===false)&&(ACL.interfaceRights[\"read.ui.dependantTypes\"])) {",
                    "if (!(Ext.isDefined(Ext.getCmp('ongletTCDep')))) {",
                    "    Ext.getCmp('tabPanTC').add(Ext.widget('ongletTCDep'));",
                    "}",
                    "}",
                    "else {",
                    "if (Ext.isDefined(Ext.getCmp('ongletTCDep'))) {",
                    "    Ext.getCmp('ongletTCDep').destroy();",
                    "}",
                    "}",
                    "Ext.getCmp('tabPanTC').enable();",
                    "Ext.getCmp('boiteConfigChampsTC').getComponent(0).getComponent(0).removeAll();",
                    "Ext.getCmp('boiteConfigChampsTC').getComponent(0).getComponent(1).removeAll();",
                    "var formulaireTC = Ext.getCmp('champsEditionTC');",
                    "formulaireTC.removeAll();",
                    "var champsD =record.data.champs;",
                    "for (g=0; g<champsD.length; g++) {",
                    "var donnees=champsD[g];",
                    "var configurateur = Ext.clone(donnees.config);",
                    "if (!Ext.isEmpty(configurateur.i18n)){",
                    "    var BOLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");",
                    "    if (!Ext.isEmpty(configurateur.i18n[BOLanguage])){",
                    "        if (!Ext.isEmpty(configurateur.i18n[BOLanguage].fieldLabel)){",
                    "            configurateur.fieldLabel=configurateur.i18n[BOLanguage].fieldLabel;",
                    "        }",
                    "        if (!Ext.isEmpty(configurateur.i18n[BOLanguage].tooltip)){",
                    "            configurateur.tooltip=configurateur.i18n[BOLanguage].tooltip;",
                    "        }",
                    "    }",
                    "}",
                    "if (donnees.cType =='treepicker'){",
                    "    configurateur.store = Ext.create(\"Ext.data.TreeStore\", {",
                    "        isOptimised: true,",
                    "        usedCollection: 'Pages',",
                    "        autoLoad: false,",
                    "        autoSync: false,",
                    "        remoteFilter: true,",
                    "        model: 'Rubedo.model.taxonomyTermModel',",
                    "        proxy: {",
                    "            type: 'ajax',",
                    "            api: {",
                    "                read: 'taxonomy-terms/navigation-tree'",
                    "            },",
                    "            reader: {",
                    "                type: 'json',",
                    "                getResponseData: function(response) {",
                    "                    var data, error;",
                    "",
                    "                    try {",
                    "                        data = Ext.decode(response.responseText);",
                    "                        if (Ext.isDefined(data.data)){data.children=data.data;}// error fix",
                    "                        return this.readRecords(data);",
                    "                    } catch (ex) {",
                    "                        error = new Ext.data.ResultSet({",
                    "                            total  : 0,",
                    "                            count  : 0,",
                    "                            records: [],",
                    "                            success: false,",
                    "                            message: ex.message",
                    "                        });",
                    "",
                    "                        this.fireEvent('exception', this, response, error);",
                    "                        console.log(ex);",
                    "",
                    "                        Ext.Logger.warn('Unable to parse the JSON returned by the server');",
                    "",
                    "                        return error;",
                    "                    }",
                    "                },",
                    "                messageProperty: 'message'",
                    "            }",
                    "        },",
                    "        sorters: {",
                    "            property: 'orderValue'",
                    "        }",
                    "    });",
                    "    configurateur.store.load();",
                    "    configurateur.valueField=\"id\";",
                    "    configurateur.displayField=\"text\";",
                    "    configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];",
                    "}",
                    "else if (donnees.cType == 'combobox') {",
                    "    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));",
                    "    configurateur.store = monStore;",
                    "}",
                    "if (!configurateur.allowBlank&&configurateur.fieldLabel&&configurateur.fieldLabel.indexOf(\"*\")<0){",
                    "    configurateur.fieldLabel=configurateur.fieldLabel+\" *\";",
                    "}",
                    "//begin temporary fix",
                    "configurateur.labelSeparator=\" \";",
                    "//end temporary fix",
                    "",
                    "try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){",
                    "var nouvChamp = Ext.create(donnees.cType, configurateur);",
                    "}",
                    "nouvChamp.config=Ext.clone(donnees.config);",
                    "",
                    "//begin temporary fix",
                    "if(configurateur.tooltip==\"help text\"){configurateur.tooltip=\"\";}",
                    "//end temporary fix",
                    "",
                    "nouvChamp.configFields=Ext.getStore(\"TypesChampsDataStore\").findRecord(\"id\",donnees.protoId).get(\"configFields\");",
                    "if (donnees.cType =='triggerfield'){",
                    "var Ouvrir = Ext.clone(donnees.openWindow);",
                    "nouvChamp.onTriggerClick= function() {",
                    "    var fenetre = Ext.widget(Ouvrir);",
                    "    fenetre.showAt(screen.width/2-200, 100);",
                    "} ;",
                    "nouvChamp.openWindow =Ext.clone(donnees.openWindow);",
                    "}",
                    "nouvChamp.anchor = '90%';",
                    "nouvChamp.protoId=donnees.protoId;",
                    "",
                    "",
                    "nouvChamp.style = '{float:left;}';",
                    "var enrobage =Ext.widget('ChampTC');",
                    "enrobage.add(nouvChamp);",
                    "enrobage.getComponent('helpBouton').setTooltip(configurateur.tooltip);",
                    "if (Ext.isEmpty(configurateur.tooltip)){",
                    "enrobage.getComponent('helpBouton').hidden=true;",
                    "}",
                    "formulaireTC.add(enrobage);",
                    "",
                    "}",
                    "var tableauTaxoTC = Ext.getCmp('vocabulairesTypesContenusGrid');",
                    "tableauTaxoTC.getSelectionModel().deselectAll();",
                    "var maTaxo= record.get(\"vocabularies\");",
                    "var selectionR = [ ];",
                    "Ext.Array.forEach(maTaxo, function(someTaxoId){",
                    "if(!Ext.isEmpty(tableauTaxoTC.getStore().findRecord(\"id\", someTaxoId))){",
                    "selectionR.push(tableauTaxoTC.getStore().findRecord(\"id\", someTaxoId));",
                    "}",
                    "});",
                    "tableauTaxoTC.getSelectionModel().select(selectionR);",
                    "",
                    "",
                    "if ((record.get(\"dependant\")===false)&&(ACL.interfaceRights[\"read.ui.dependantTypes\"])) {",
                    "var tableauTCI = Ext.getCmp('TCImbriquesGrid');",
                    "tableauTCI.getSelectionModel().deselectAll();",
                    "var depTypes = record.get(\"dependantTypes\");",
                    "var selector=[];",
                    "Ext.Array.forEach(depTypes, function(someTypeId){",
                    "if(!Ext.isEmpty(tableauTCI.getStore().findRecord(\"id\", someTypeId))){",
                    "    selector.push(tableauTCI.getStore().findRecord(\"id\", someTypeId));",
                    "}",
                    "});",
                    "tableauTCI.getSelectionModel().select(selector);",
                    "}",
                    "Ext.getCmp('champsEditionTC').doLayout();",
                    "",
                    "var metaBox = Ext.getCmp(\"adminFTDC\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');",
                    "var values= record.getData();",
                    "values.creation= Ext.Date.format(values.createTime, Ext.Date.defaultFormat);",
                    "values.derniereModification= Ext.Date.format(values.lastUpdateTime, Ext.Date.defaultFormat);",
                    "metaBox.update(values);",
                    "metaBox.show();",
                    "if ((!ACL.interfaceRights[\"write.ui.contentTypes\"])||(record.get(\"readOnly\"))) {",
                    "Ext.Array.forEach(Ext.getCmp(\"TDCEditForm\").query(\"field\"), function(thing){thing.setReadOnly(true);});",
                    "Ext.getCmp(\"boutonSupprimerTypeContenu\").disable();",
                    "Ext.getCmp(\"boutonEnregistrerTypeContenu\").disable();",
                    "Ext.getCmp(\"AdminfTCImporter\").disable();",
                    "Ext.getCmp(\"TCfieldUp\").up().disable();",
                    "} else {",
                    "Ext.Array.forEach(Ext.getCmp(\"TDCEditForm\").query(\"field\"), function(thing){thing.setReadOnly(false);});",
                    "Ext.getCmp(\"boutonSupprimerTypeContenu\").enable();",
                    "Ext.getCmp(\"boutonEnregistrerTypeContenu\").enable();",
                    "Ext.getCmp(\"AdminfTCImporter\").enable();",
                    "Ext.getCmp(\"TCfieldUp\").up().enable();",
                    "}",
                    "Ext.getStore(\"CTLayouts\").removeAll();",
                    "Ext.getStore(\"CTLayouts\").loadData(record.get(\"layouts\"));",
                    "this.resetLayoutsInterfaceNoSelect();",
                    "Ext.getCmp(\"CTLDLSToolbar\").recievei18n(record.get(\"i18n\"),record.get(\"locale\"),record.get(\"nativeLanguage\"));",
                    ""
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "selectTC",
            "designerId": "d5b57a48-78e7-4ae9-81e5-45b88a8b725e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonSupprimerTypeContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "supprimeTypeContenu",
                "implHandler": [
                    "var cible = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getSelection()[0];\r",
                    "var me=this;\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'content-types/is-used',\r",
                    "        method:'GET',\r",
                    "        params: {\r",
                    "            id: cible.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var maskIsUsed=Ext.JSON.decode(response.responseText).used;\r",
                    "            if (maskIsUsed){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeIsUsedError);\r",
                    "            } else {\r",
                    "                var fenetre = Ext.widget('delConfirmZ');\r",
                    "                fenetre.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisContentTypeText;\r",
                    "                fenetre.show();\r",
                    "                Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "                    Ext.getCmp('AdminfTypesGridView').getStore().remove(cible);\r",
                    "                    Ext.getCmp('delConfirmZ').close();\r",
                    "                    Ext.Array.forEach(Ext.getCmp(\"adminFTDC\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.disable();});\r",
                    "                    Ext.getCmp(\"boutonSupprimerTypeContenu\").disable();\r",
                    "                    Ext.getCmp('champsEditionTC').removeAll();\r",
                    "                    Ext.getCmp('boiteConfigChampsTC').getComponent(0).getComponent(0).removeAll();\r",
                    "                    Ext.getCmp('boiteConfigChampsTC').getComponent(0).getComponent(1).removeAll();\r",
                    "                    Ext.getCmp('tabPanTC').disable();\r",
                    "                    Ext.getCmp(\"TDCEditForm\").getForm().reset();\r",
                    "                    Ext.getCmp(\"adminFTDC\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();\r",
                    "                    me.resetLayoutsInterfaceNoSelect();\r",
                    "\r",
                    "                }); \r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "supprimeTypeContenu",
            "designerId": "926fdbd9-4653-4556-88a3-f6ea0c9a755f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonEnregistrerTypeContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "enregistrerTypeContenus",
                "implHandler": [
                    "var me=this;\r",
                    "var rec=Ext.getCmp(\"CTLayoutsGrid\").getSelectionModel().getLastSelected();\r",
                    "if (!Ext.isEmpty(rec)){\r",
                    "    rec.set(\"rows\",me.saveLayout(Ext.getCmp(\"layoutEditionPanel\")));\r",
                    "}\r",
                    "if (Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected() !== null){\r",
                    "    var fieldsR = Ext.getCmp('champsEditionTC').items.items;\r",
                    "    var champsR = [ ];\r",
                    "    for (u=0; u<fieldsR.length; u++) {\r",
                    "        var leChampR= fieldsR[u].getComponent(1);\r",
                    "        var nch ={\r",
                    "            cType: leChampR.xtype,\r",
                    "            config: leChampR.config,\r",
                    "            protoId:leChampR.protoId,\r",
                    "            openWindow:leChampR.openWindow\r",
                    "        };\r",
                    "        if (leChampR.xtype== 'treepicker') {\r",
                    "            nch.store=leChampR.getStore().storeId;\r",
                    "        }\r",
                    "        else if (leChampR.xtype== 'combobox') {\r",
                    "            var dones = leChampR.getStore().data.items;\r",
                    "            var donesR = [ ];\r",
                    "            for (i=0; i<dones.length; i++) {\r",
                    "                donesR.push({valeur: dones[i].data.valeur, nom: dones[i].data.nom });\r",
                    "            }\r",
                    "            nch.store = {\r",
                    "                fields: ['valeur', 'nom'],\r",
                    "                data: donesR\r",
                    "            };\r",
                    "        }\r",
                    "        champsR.push(nch);\r",
                    "    }\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'content-types/is-changeable',\r",
                    "        params: {\r",
                    "            fields:Ext.JSON.encode(champsR),\r",
                    "            id: Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var canModify = Ext.JSON.decode(response.responseText).modify;\r",
                    "            if (canModify==\"ok\"){\r",
                    "                var target = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected();\r",
                    "                target.beginEdit();\r",
                    "                target.set(Ext.getCmp(\"TDCEditForm\").getForm().getValues());\r",
                    "                target.set(\"champs\", champsR);\r",
                    "                target.set(\"layouts\",Ext.Array.pluck(Ext.getStore(\"CTLayouts\").getRange(),\"data\"));\r",
                    "                try {Ext.getCmp(\"CTLDLSToolbar\").persisti18n(target);} catch(err){console.log(\"failed i18n persist\");}\r",
                    "                var newVocabularies = Ext.getCmp('vocabulairesTypesContenusGrid').getSelectionModel().getSelection();\r",
                    "                target.set(\"vocabularies\", Ext.Array.pluck(Ext.Array.pluck(newVocabularies, \"data\"), \"id\"));\r",
                    "                if ((target.get(\"dependant\")===false)&&(ACL.interfaceRights[\"read.ui.dependantTypes\"])) {\r",
                    "                    var newDepTypes = Ext.getCmp('TCImbriquesGrid').getSelectionModel().getSelection();\r",
                    "                    target.set(\"dependantTypes\", Ext.Array.pluck(Ext.Array.pluck(newDepTypes, \"data\"), \"id\"));\r",
                    "\r",
                    "                }\r",
                    "                target.endEdit();\r",
                    "            } else if (canModify==\"no\"){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeIncompatModifError);\r",
                    "            } else if (canModify==\"possible\"){\r",
                    "                Ext.Msg.confirm(Rubedo.RubedoAutomatedElementsLoc.warningTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeModifWarning ,function(anser){\r",
                    "                    if (anser==\"yes\"){\r",
                    "                        var target = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected();\r",
                    "                        target.beginEdit();\r",
                    "                        target.set(Ext.getCmp(\"TDCEditForm\").getForm().getValues());\r",
                    "                        target.set(\"champs\", champsR);\r",
                    "                        target.set(\"layouts\",Ext.Array.pluck(Ext.getStore(\"CTLayouts\").getRange(),\"data\"));\r",
                    "                        try {Ext.getCmp(\"CTLDLSToolbar\").persisti18n(target);} catch(err){console.log(\"failed i18n persist\");}\r",
                    "                        var newVocabularies = Ext.getCmp('vocabulairesTypesContenusGrid').getSelectionModel().getSelection();\r",
                    "                        target.set(\"vocabularies\", Ext.Array.pluck(Ext.Array.pluck(newVocabularies, \"data\"), \"id\"));\r",
                    "                        if ((target.get(\"dependant\")===false)&&(ACL.interfaceRights[\"read.ui.dependantTypes\"])) {\r",
                    "                            var newDepTypes = Ext.getCmp('TCImbriquesGrid').getSelectionModel().getSelection();\r",
                    "                            target.set(\"dependantTypes\", Ext.Array.pluck(Ext.Array.pluck(newDepTypes, \"data\"), \"id\"));\r",
                    "\r",
                    "                        }\r",
                    "                        target.endEdit();\r",
                    "                    }\r",
                    "                }\r",
                    "\r",
                    "            );}}});\r",
                    "\r",
                    "        }"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "enregistrerTypeContenus",
            "designerId": "a61a2f23-93e0-4ad3-9987-1602c0afced2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonNouveauTypeContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "fenetreNTC",
                "implHandler": [
                    "var fenetre = Ext.widget('nouveauTypeContenu');\r",
                    "Ext.getCmp(\"ViewportPrimaire\").add(fenetre);\r",
                    "fenetre.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "fenetreNTC",
            "designerId": "13f39238-b017-41fb-9868-d8f120518348"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonCreerTC",
                "designer|targetType": "Ext.button.Button",
                "fn": "creerNTC",
                "implHandler": [
                    "var me=this;",
                    "if (button.up().getForm().isValid()) {",
                    "    var values=button.up().getForm().getValues();",
                    "    var nType = values.type;",
                    "    var nativeLanguage=Ext.getCmp(\"workingLanguageField\").getValue();",
                    "    var i18n= { };",
                    "    i18n[nativeLanguage]={type:nType};",
                    "    var nouvType = Ext.create('model.typesContenusDataModel', {",
                    "        type: nType,",
                    "        //code:nType.replace(/\\W/g, ''),",
                    "        productType:values.productType,",
                    "        dependant: false,",
                    "        champs: [ ],",
                    "        vocabularies:[\"navigation\"],",
                    "        dependantTypes:[ ],",
                    "        i18n:i18n,",
                    "        nativeLanguage:nativeLanguage",
                    "    });",
                    "    this.getTypesContenusDataJsonStore().add(nouvType);",
                    "    this.getTypesContenusDataJsonStore().addListener(\"datachanged\",function(){",
                    "        Ext.getCmp('AdminfTypesGridView').getSelectionModel().select(nouvType);",
                    "        me.selectTC(Ext.getCmp('AdminfTypesGridView'), nouvType);",
                    "    },this,{single:true});",
                    "        Ext.getCmp('nouveauTypeContenuFenetre').close();",
                    "",
                    "    }"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "creerNTC",
            "designerId": "80a1e005-fdd4-4af3-82fb-a9229417cce3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#layoutEditionPanel panel",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "selectionEvents",
                "implHandler": [
                    "var me=this;",
                    "if (!component.isXType(\"unBloc\")){",
                    "    component.addBodyCls('contrastBorder');",
                    "    if (component.mType==\"col\"){",
                    "        component.addBodyCls('contrastRow');",
                    "    }",
                    "    component.getEl().on(\"mouseover\", function(e){",
                    "        component.setBorder(4);",
                    "        e.stopEvent();",
                    "    });",
                    "    component.getEl().on(\"mouseout\", function(e){",
                    "        component.setBorder(2);",
                    "        e.stopEvent();",
                    "    });",
                    "    component.getEl().on(\"click\", function(e){",
                    "        e.stopEvent();",
                    "        Ext.getCmp(\"layoutElementIdField\").setValue(component.getId());",
                    "        ",
                    "    });",
                    "} else {",
                    "    component.getEl().on(\"mouseover\", function(e){",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());",
                    "        if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {",
                    "            component.setIconCls('selectBloc');",
                    "        }",
                    "        e.stopEvent();",
                    "    });",
                    "    component.getEl().on(\"mouseout\", function(e){",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());",
                    "        if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {",
                    "        component.setIconCls();}",
                    "        e.stopEvent();",
                    "    });",
                    "    component.getEl().on(\"click\", function(e){",
                    "        e.stopEvent();",
                    "        Ext.getCmp(\"layoutElementIdField\").setValue(component.getId());",
                    "        ",
                    "    });",
                    "    component.header.add(Ext.widget(\"tool\",{",
                    "        type:\"close\",",
                    "        handler:function(){",
                    "            component.up().remove(component);",
                    "            me.getFieldsListForLayout();",
                    "        }",
                    "    }));",
                    "",
                    "}"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "selectionEvents",
            "designerId": "1a3d6c16-2026-4fb3-97b6-4495f52a7805"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#searchFormCheck checkboxfield",
                "designer|targetType": "Ext.form.field.Checkbox",
                "fn": "onCheckboxfieldChange",
                "implHandler": [
                    "if ((field.name==\"searchable\")&&(newValue===false)){\r",
                    "    Ext.Array.forEach(field.up().query(\"checkboxfield\"),function(chk){\r",
                    "        if (chk.name!=\"searchable\"){\r",
                    "        \tchk.setValue(false);\r",
                    "        }\r",
                    "    });\r",
                    "} else if ((field.name!=\"searchable\")&&(newValue===true)&&(!field.up().getComponent(0).getValue())){\r",
                    "    field.up().getComponent(0).setValue(true);\r",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "name": "onCheckboxfieldChange",
            "designerId": "1d97759c-5055-4fb4-893f-0cc6aa215026"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "cible",
                    "resultat"
                ],
                "fn": "miseAPlatTaxo",
                "implHandler": [
                    "var e=0;\r",
                    "for (e=0; e<cible.length; e++) {\r",
                    "    resultat.push({terme: cible[e].text});\r",
                    "    this.miseAPlatTaxo(cible[e].children, resultat);\r",
                    "}"
                ]
            },
            "name": "miseAPlatTaxo",
            "designerId": "b01c65a8-deab-4097-8985-5e8fc1acca30"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "[itemId= 'boutonReplicateurChamps']",
                "designer|targetType": "Ext.button.Button",
                "fn": "repliqueChamp",
                "implHandler": [
                    "var nouvChamp=button.up().getComponent(1).cloneConfig();\r",
                    "nouvChamp.anchor = '90%';\r",
                    "nouvChamp.style = '{float:left;}';\r",
                    "var enrobage =Ext.widget('ChampTC');\r",
                    "enrobage.add(nouvChamp);\r",
                    "enrobage.getComponent('helpBouton').setTooltip(Rubedo.RubedoAutomatedElementsLoc.duplicateFieldText+\" \"+button.up().getComponent(1).fieldLabel);\r",
                    "var supprimeur = Ext.widget('button', {iconCls: 'close', margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.removeText, itemId: 'boutonEffaceurChamps'});\r",
                    "supprimeur.on('click', function(){\r",
                    "    button.valeursM--;\r",
                    "    button.up().up().remove(supprimeur.up());\r",
                    "});\r",
                    "enrobage.add(supprimeur);\r",
                    "button.up().up().insert(button.up().up().items.indexOf(button.up())+button.valeursM, enrobage);\r",
                    "button.valeursM++;"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "repliqueChamp",
            "designerId": "6c7dc62c-8c47-4fdb-a92c-52250f3464b5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#TCfieldDeleter",
                "designer|targetType": "Ext.button.Button",
                "fn": "TCfieldDelete",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    field.up().destroy();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "TCfieldDelete",
            "designerId": "f53cb645-4e7d-4623-87f9-123e8288a1fa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#TCfieldUp",
                "designer|targetType": "Ext.button.Button",
                "fn": "TCfieldMoveUp",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    if (pos > 0) {\r",
                    "        field.up().up().move(pos,pos-1);\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "TCfieldMoveUp",
            "designerId": "6b32c09e-8580-4589-8ae1-6487396f7d72"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#TCfieldDown",
                "designer|targetType": "Ext.button.Button",
                "fn": "TCfieldMoveDown",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    field.up().up().move(pos,pos+1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "TCfieldMoveDown",
            "designerId": "84d48f71-a70a-422b-92a2-5af45464a790"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#ChampTCSelectGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "createThroughDblClick",
                "implHandler": [
                    "Ext.getStore(\"AddMultiFieldStore\").removeAll();\r",
                    "this.creerChampTC(Ext.getCmp(\"boutonAjouterChampTC\"));"
                ],
                "name": "itemdblclick",
                "scope": "me"
            },
            "name": "createThroughDblClick",
            "designerId": "165b0cf1-e3f8-4a55-9506-56f5f6d8c60d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonCopierTC",
                "designer|targetType": "Ext.button.Button",
                "fn": "copyTC",
                "implHandler": [
                    "var rec = Ext.clone(Ext.getCmp(\"AdminfTypesGrid\").getSelectionModel().getLastSelected().data);\r",
                    "delete(rec.id);\r",
                    "rec.type=rec.type+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i');\r",
                    "Ext.Object.each(rec.i18n, function(key, value, myself) {\r",
                    "    value.type=value.type+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i');\r",
                    "});\r",
                    "rec.code=rec.type.replace(/\\W/g, '');\r",
                    "delete(rec.version);\r",
                    "delete(rec.createTime);\r",
                    "delete(rec.lastUpdateTime);\r",
                    "Ext.getCmp(\"AdminfTypesGrid\").getStore().add(rec);"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "copyTC",
            "designerId": "217b6cb9-f771-406e-87cc-5c8d71d1ffaf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#AdminfTypesGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onGridpanelEdit",
                "implHandler": [
                    "Ext.getStore(\"TypesContenusNDepDataJson\").load();"
                ],
                "name": "edit",
                "scope": "me"
            },
            "name": "onGridpanelEdit",
            "designerId": "cee18c78-aca5-49d7-89a4-764138838ca9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#AdminfTypesGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onAdminfTypesGridRender",
                "implHandler": [
                    "Ext.getStore(\"TypesContenusDepDataJson\").load();\r",
                    "Ext.getStore(\"TaxonomyForCT\").load();\r",
                    "Ext.getStore(\"ShippersForCT\").load();"
                ],
                "name": "render",
                "scope": "me"
            },
            "name": "onAdminfTypesGridRender",
            "designerId": "e9ec09d3-2d5c-48ea-ba05-b5a7cdc8c067"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#AdminfTypesGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onAdminfTypesGridDestroy",
                "implHandler": [
                    "Ext.getStore(\"TypesContenusDepDataJson\").removeAll();\r",
                    "Ext.getStore(\"TaxonomyForCT\").removeAll();\r",
                    "Ext.getStore(\"ShippersForCT\").removeAll();"
                ],
                "name": "destroy",
                "scope": "me"
            },
            "name": "onAdminfTypesGridDestroy",
            "designerId": "94a0398d-b1eb-4d7b-905e-37ab1698b6fd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "name"
                ],
                "fn": "nameValidator",
                "implHandler": [
                    "var usedNames=[\"text\",\"summary\"];\r",
                    "Ext.Array.forEach(Ext.getCmp('champsEditionTC').query(\"field\"), function(field){\r",
                    "    if ((field.getId()!=Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).getId())&&(field.up().isXType(\"ChampTC\"))){\r",
                    "        Ext.Array.include(usedNames,field.name);\r",
                    "    }\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(Rubedo.RubedoAutomatedElementsLoc.fieldNameAlreadyUsedError);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "name": "nameValidator",
            "designerId": "3888bb3c-c2d1-483e-9b09-d722f936ceb1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "name"
                ],
                "fn": "nameAvailable",
                "implHandler": [
                    "var usedNames=[\"text\",\"summary\"];\r",
                    "Ext.Array.forEach(Ext.getCmp('champsEditionTC').query(\"field\"), function(field){\r",
                    "    Ext.Array.include(usedNames,field.name);\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(false);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "name": "nameAvailable",
            "designerId": "d157a9ee-580e-4b98-beef-42abf6f6da50"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#purgeCTContentsBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onPurgeCTContentsBtnClick",
                "implHandler": [
                    "var fenetre = Ext.widget('delConfirmZ');",
                    "fenetre.show();",
                    "Ext.getCmp('delConfirmZOui').on('click', function() {",
                    "    var target = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected();",
                    "    button.setLoading(true);",
                    "    Ext.Ajax.request({",
                    "        url: 'contents/delete-by-content-type-id',",
                    "        method:\"POST\",",
                    "        params: {",
                    "            \"type-id\": target.get(\"id\")",
                    "        },",
                    "        success: function(response){",
                    "            button.setLoading(false);",
                    "            Ext.create('Ext.ux.window.Notification', {",
                    "                title: Rubedo.RubedoAutomatedElementsLoc.successTitle,",
                    "                position: 'tr',",
                    "                manager: 'instructions',",
                    "                cls: 'ux-notification-light',",
                    "                iconCls: 'ux-notification-icon-information',",
                    "                html: \"<p>\"+Rubedo.RubedoAutomatedElementsLoc.contentTypeHasBeenEmptiedText+\"</p>\",",
                    "                autoCloseDelay: 4000,",
                    "                styleHtmlContent:true,",
                    "                slideBackDuration: 500,",
                    "                slideInAnimation: 'bounceOut',",
                    "                slideBackAnimation: 'easeIn'",
                    "            }).show();",
                    "            //Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeHasBeenEmptiedText);",
                    "        },",
                    "        failure: function(response) {",
                    "            button.setLoading(false);",
                    "            var message = Rubedo.RubedoAutomatedElementsLoc.contentsDeleteError;",
                    "            try {",
                    "                var answer = Ext.JSON.decode(response.responseText);",
                    "                if (answer.message){",
                    "                    message=answer.message;",
                    "                }",
                    "            } catch(err){}",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, message);",
                    "        }",
                    "    });",
                    "    Ext.getCmp('delConfirmZ').close();",
                    "",
                    "});",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onPurgeCTContentsBtnClick",
            "designerId": "7d05bac5-df93-4d07-9429-3c9665f7a5c3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#addCTLayoutBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onAddCTLayoutBtnClick",
                "implHandler": [
                    "Ext.widget(\"NewCTLayoutWindow\").show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAddCTLayoutBtnClick",
            "designerId": "12dcefec-ae6d-440a-97d9-d70fde20525e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#RemoveCTLayoutBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onRemoveCTLayoutBtnClick",
                "implHandler": [
                    "Ext.getCmp(\"CTLayoutsGrid\").getStore().remove(Ext.getCmp(\"CTLayoutsGrid\").getSelectionModel().getLastSelected());"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onRemoveCTLayoutBtnClick",
            "designerId": "e4ca4d9e-5d88-4258-8446-abb083a3592e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#NewCTLayoutWindowSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewCTLayoutWindowSubmitBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    var obs=form.getValues();\r",
                    "    obs.rows=[ ];\r",
                    "    Ext.getStore(\"CTLayouts\").add(obs);\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onNewCTLayoutWindowSubmitBtnClick",
            "designerId": "bc40401c-e8ea-4c49-a186-3ae21b8fa9c5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#CTLayoutsGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onCTLayoutsGridSelectionChange",
                "implHandler": [
                    "if (Ext.isEmpty(selected)){\r",
                    "    this.resetLayoutsInterfaceNoSelect();\r",
                    "} else {\r",
                    "    this.resetLayoutsInterfaceSelect(selected[0]);\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "onCTLayoutsGridSelectionChange",
            "designerId": "853b4c10-4955-4132-93ae-a564ad7f07f9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "resetLayoutsInterfaceSelect",
                "implHandler": [
                    "Ext.getCmp(\"RemoveCTLayoutBtn\").enable();\r",
                    "Ext.getCmp(\"copyCTLayoutBtn\").enable();\r",
                    "Ext.getCmp(\"layoutEditionPanel\").removeAll();\r",
                    "Ext.getCmp(\"layoutsEditToolbar\").enable();\r",
                    "this.restoreLayout(record.get(\"rows\"),0,Ext.getCmp(\"layoutEditionPanel\"));\r",
                    "Ext.getCmp(\"layoutElementIdField\").setValue(null);\r",
                    "Ext.getCmp(\"layoutActivatorBtn\").enable();\r",
                    "if (record.get(\"active\")){\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").setText(Rubedo.RubedoAutomatedElementsLoc.deactivateText);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").setIconCls(\"nonS\");\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").deactivateMode=true;\r",
                    "} else {\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").setIconCls(\"ouiS\");\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").deactivateMode=false;\r",
                    "}\r",
                    "this.getFieldsListForLayout();"
                ]
            },
            "name": "resetLayoutsInterfaceSelect",
            "designerId": "21e062f4-7c55-4716-99ff-2d34f03eb17d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetLayoutsInterfaceNoSelect",
                "implHandler": [
                    "Ext.getCmp(\"layoutEditionPanel\").removeAll();\r",
                    "Ext.getCmp(\"RemoveCTLayoutBtn\").disable();\r",
                    "Ext.getCmp(\"copyCTLayoutBtn\").disable();\r",
                    "Ext.getCmp(\"layoutsEditToolbar\").disable();\r",
                    "Ext.getCmp(\"layoutActivatorBtn\").disable();\r",
                    "Ext.getStore(\"CTFieldsForLayouts\").removeAll();\r",
                    "Ext.getCmp(\"layoutElementIdField\").setValue(null);\r",
                    "Ext.getCmp(\"layoutActivatorBtn\").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);\r",
                    "Ext.getCmp(\"layoutActivatorBtn\").setIconCls(\"ouiS\");\r",
                    "Ext.getCmp(\"layoutActivatorBtn\").deactivateMode=false;"
                ]
            },
            "name": "resetLayoutsInterfaceNoSelect",
            "designerId": "5f7fd77a-3e31-43fd-b713-7bd238c954d2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getFieldsListForLayout",
                "implHandler": [
                    "var discoveredFields=[ ];\r",
                    "var usedFields=Ext.Array.pluck(Ext.getCmp(\"layoutEditionPanel\").query(\"unBloc\"),\"name\");\r",
                    "if (!Ext.Array.contains(usedFields,\"text\")){\r",
                    "    discoveredFields.push({name:\"text\",label:Rubedo.RubedoAutomatedElementsLoc.titleText});\r",
                    "}\r",
                    "if (!Ext.Array.contains(usedFields,\"summary\")){\r",
                    "    discoveredFields.push({name:\"summary\",label:Rubedo.RubedoAutomatedElementsLoc.summaryText});\r",
                    "}\r",
                    "var record=Ext.getCmp(\"AdminfTypesGrid\").getSelectionModel().getLastSelected();\r",
                    "if (((!Ext.isEmpty(record.get(\"productType\")))&&(record.get(\"productType\")!=\"none\"))&&(!Ext.Array.contains(usedFields,\"productBox\"))){\r",
                    "    discoveredFields.push({name:\"productBox\",label:\"Product box\"});\r",
                    "}\r",
                    "\r",
                    "Ext.Array.forEach(Ext.getCmp('champsEditionTC').query(\"ChampTC\"), function(field){\r",
                    "    if ((!Ext.Array.contains(usedFields,field.getComponent(1).name))&&(!field.getComponent(1).config.useAsVariation)){\r",
                    "        discoveredFields.push({name:field.getComponent(1).name, label:field.getComponent(1).fieldLabel});\r",
                    "    }\r",
                    "});\r",
                    "Ext.getStore(\"CTFieldsForLayouts\").removeAll();\r",
                    "Ext.getStore(\"CTFieldsForLayouts\").add(discoveredFields);"
                ]
            },
            "name": "getFieldsListForLayout",
            "designerId": "cf29b169-0fdb-4508-87a4-dd6dd7093835"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "startComp"
                ],
                "fn": "saveLayout",
                "implHandler": [
                    "var me=this;",
                    "var nRows=[ ];",
                    "Ext.Array.forEach(startComp.items.items, function(row){",
                    "    var newCols = [ ];",
                    "    var offset=0;",
                    "    Ext.Array.forEach(row.items.items, function(col){",
                    "        if (col.isXType(\"panel\")) {",
                    "            var fields=[ ];",
                    "            Ext.Array.forEach(col.items.items, function(field){",
                    "                fields.push({",
                    "                    title:field.title,",
                    "                    responsive:field.responsive,",
                    "                    name:field.name,",
                    "                    showLabel:field.showLabel,",
                    "                    flex:field.flex",
                    "                });",
                    "            });",
                    "            newCols.push({",
                    "                responsive:col.responsive,",
                    "                span:col.flex,",
                    "                eTitle:col.eTitle,",
                    "                stackThreshold:col.stackThreshold,",
                    "                mType:\"col\",",
                    "                fields:fields,",
                    "                offset:offset",
                    "",
                    "            });",
                    "            offset=0;",
                    "        } else {offset=offset+col.flex;}",
                    "",
                    "    });",
                    "    nRows.push({",
                    "        mType:\"row\",",
                    "        responsive:row.responsive,",
                    "        displayAsTabs:row.displayAsTabs,",
                    "        columns: newCols",
                    "",
                    "    });",
                    "});",
                    "return nRows;"
                ]
            },
            "name": "saveLayout",
            "designerId": "2c309a51-1c09-469c-8993-754c9914b1c9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "renderRowTools",
                "implHandler": [
                    "var me=this;",
                    "var configSpec = Ext.widget('ConfigSpecBloc');",
                    "configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,",
                    "    anchor:\"100%\",",
                    "    labelWidth:60,",
                    "    margin:\"0 0 10 0\",",
                    "    vertical:true,",
                    "    columns:1,",
                    "    items: [",
                    "        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },",
                    "        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},",
                    "        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}",
                    "        },{ boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}",
                    "    ]",
                    "",
                    "}));",
                    "configSpec.getComponent(0).add(Ext.widget('checkbox',{",
                    "    itemId:\"eDisplayAsTabsField\",",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayAsTabsText,",
                    "    onChange:function(){",
                    "",
                    "        component.displayAsTabs=this.getValue();",
                    "",
                    "    },",
                    "    labelWidth:60,",
                    "    inputValue:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 10 0\",",
                    "    checked:component.displayAsTabs",
                    "}));",
                    "Ext.getCmp(\"layoutPropsPanel\").add(configSpec);"
                ]
            },
            "name": "renderRowTools",
            "designerId": "e346917a-6e49-4375-b293-126164c36c50"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "renderFieldTools",
                "implHandler": [
                    "var me=this;",
                    "var configSpec = Ext.widget('ConfigSpecBloc');",
                    "configSpec.getComponent(0).add(Ext.widget('checkbox',{",
                    "    itemId:\"eTitleShowField\",",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayLabelText,",
                    "    onChange:function(){",
                    "",
                    "        component.showLabel=this.getValue();",
                    "",
                    "    },",
                    "    labelWidth:60,",
                    "    inputValue:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 10 0\",",
                    "    checked:component.showLabel",
                    "}));",
                    "",
                    "configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,",
                    "    anchor:\"100%\",",
                    "    labelWidth:60,",
                    "    margin:\"0 0 10 0\",",
                    "    vertical:true,",
                    "    columns:1,",
                    "    items: [",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}",
                    "    },{ boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}",
                    "    ]",
                    "",
                    "}));",
                    "",
                    "Ext.getCmp(\"layoutPropsPanel\").add(configSpec);"
                ]
            },
            "name": "renderFieldTools",
            "designerId": "74b77068-86c4-4c10-b599-52db74dc5c8a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "renderMainBoxTools",
                "implHandler": [
                    "var configSpec = Ext.widget('ConfigSpecBloc');",
                    "var rec=Ext.getCmp(\"CTLayoutsGrid\").getSelectionModel().getLastSelected();",
                    "configSpec.getComponent(1).add(Ext.create('Rubedo.view.ACEField',{",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.customTemplateText,",
                    "    onChange:function(){",
                    "",
                    "        rec.set(\"customTemplate\",this.getValue());",
                    "",
                    "    },",
                    "    labelWidth:60,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 10 0\",",
                    "    twigMode:false,",
                    "    defaultTemplateUrl:\"blocks/contentDetail/customLayout.html\",",
                    "    value:Ext.clone(rec.get(\"customTemplate\"))",
                    "}));",
                    "Ext.getCmp(\"layoutPropsPanel\").add(configSpec);"
                ]
            },
            "name": "renderMainBoxTools",
            "designerId": "661fa529-4e0a-480b-a22a-8f97d449bc66"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "renderColumnTools",
                "implHandler": [
                    "var me=this;",
                    "var configSpec = Ext.widget('ConfigSpecBloc');",
                    "configSpec.getComponent(0).add(Ext.widget('displayfield',{",
                    "    value:\"\",",
                    "    labelWidth:180,",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.dbclickToAssignText",
                    "",
                    "",
                    "}));",
                    "configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,",
                    "    anchor:\"100%\",",
                    "    labelWidth:60,",
                    "    margin:\"0 0 10 0\",",
                    "    vertical:true,",
                    "    columns:1,",
                    "    items: [",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}",
                    "    },{ boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}",
                    "    ]",
                    "",
                    "}));",
                    "var offsetEdit=Ext.widget('numberfield',{",
                    "    itemId:\"offsetEditor\",",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.offsetText,",
                    "    editable:false,",
                    "    labelWidth:60,",
                    "    allowDecimals:false,",
                    "    anchor:\"100%\",",
                    "    value:0,",
                    "    minValue:0",
                    "});",
                    "",
                    "var spanEdit=Ext.widget('numberfield',{",
                    "    itemId:\"spanEditor\",",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.spanText,",
                    "    labelWidth:60,",
                    "    editable:false,",
                    "    allowDecimals:false,",
                    "    anchor:\"100%\",",
                    "    value:component.flex,",
                    "    minValue:1",
                    "});",
                    "",
                    "var stackThreshold=Ext.widget('combobox',{",
                    "                itemId:\"stackThreshold\",",
                    "                fieldLabel:Rubedo.RubedoAutomatedElementsLoc.stackingThresholdText,",
                    "                labelWidth:60,",
                    "                editable:false,",
                    "                forceSelect:true,",
                    "                anchor:\"100%\",",
                    "                value:component.stackThreshold ? component.stackThreshold : \"sm\",",
                    "                onChange:function(){",
                    "",
                    "                    component.stackThreshold=this.getValue();",
                    "",
                    "                },",
                    "                queryMode:\"local\",",
                    "                store:[",
                    "                    [\"xs\",Rubedo.RubedoAutomatedElementsLoc.neverText],",
                    "                    [\"sm\",Rubedo.RubedoAutomatedElementsLoc.telephoneText],",
                    "                    [\"md\",Rubedo.RubedoAutomatedElementsLoc.tabletText],",
                    "                    [\"lg\",Rubedo.RubedoAutomatedElementsLoc.computerText]",
                    "                ]",
                    "            });",
                    "",
                    "configSpec.getComponent(0).add(offsetEdit);",
                    "configSpec.getComponent(0).add(spanEdit);",
                    "configSpec.getComponent(0).add(stackThreshold);",
                    "me.applyConstrain(component,offsetEdit,spanEdit,false);",
                    "offsetEdit.on(\"change\",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});",
                    "spanEdit.on(\"change\",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});",
                    "configSpec.getComponent(0).add(Ext.widget('textfield',{",
                    "    itemId:\"eTitleField\",",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.titleText,",
                    "    onChange:function(){",
                    "        if (this.isValid()){",
                    "            component.eTitle=this.getValue();",
                    "        }",
                    "    },",
                    "    labelWidth:60,",
                    "    allowBlank:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 0 0\",",
                    "    value:component.eTitle",
                    "}));",
                    "",
                    "Ext.getCmp(\"layoutPropsPanel\").add(configSpec);"
                ]
            },
            "name": "renderColumnTools",
            "designerId": "4e7f8f6e-915b-45b8-bbac-c6420215f875"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target",
                    "offsetF",
                    "spanF",
                    "applyFirst"
                ],
                "fn": "applyConstrain",
                "implHandler": [
                    "var myEol=target.up().getComponent(\"eol\");\r",
                    "var myOffset=null;\r",
                    "if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType(\"container\"))&&(!(target.prev().isXType(\"panel\")))) {\r",
                    "    myOffset=target.prev();\r",
                    "}\r",
                    "if (applyFirst) {\r",
                    "    myEol.flex=myEol.flex+target.flex-spanF.getValue();\r",
                    "    target.flex=spanF.getValue();\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "    offsetF.setMaxValue(offsetF.getValue()+myEol.flex);\r",
                    "    target.up().doLayout();\r",
                    "    if (offsetF.getValue()>0){ \r",
                    "        if (Ext.isEmpty(myOffset)) {\r",
                    "            myOffset=Ext.widget(\"container\",{flex:0,reorderable: false,style:\"{background-image:url(resources/images/stripes.png);}\"});\r",
                    "            target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);\r",
                    "\r",
                    "\r",
                    "        } \r",
                    "        myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "        myOffset.flex=offsetF.getValue();\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "        spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "        target.up().doLayout();\r",
                    "\r",
                    "    } else if((offsetF.getValue()===0)) {\r",
                    "        if (!Ext.isEmpty(myOffset)) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "            myOffset.flex=offsetF.getValue();\r",
                    "            offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "            spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "            myOffset.destroy();\r",
                    "            target.up().doLayout();      \r",
                    "        } \r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "else {\r",
                    "    if (Ext.isEmpty(myOffset)){\r",
                    "        offsetF.setValue(0);\r",
                    "        offsetF.setMaxValue(myEol.flex);\r",
                    "    }\r",
                    "    else {\r",
                    "        offsetF.setValue(myOffset.flex);\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex); \r",
                    "    }\r",
                    "\r",
                    "    spanF.setValue(target.flex);\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "}"
                ]
            },
            "name": "applyConstrain",
            "designerId": "7f64b9c5-7e17-4ddc-a0fa-97e49cebe57a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "responsiveObj"
                ],
                "fn": "deudceResposiveClass",
                "implHandler": [
                    "var responsiveArray=[ ];\r",
                    "Ext.Object.each(responsiveObj, function(key, value, myself) {\r",
                    "    if (value===true){\r",
                    "        responsiveArray.push(key);\r",
                    "    }\r",
                    "});\r",
                    "if (responsiveArray.length==3){\r",
                    "    return(\"\");\r",
                    "} else if (responsiveArray.length==2){\r",
                    "    var hiddenArray=[\"tablet\",\"desktop\",\"phone\"];\r",
                    "    var hiddenMedia=Ext.Array.difference(hiddenArray,responsiveArray);\r",
                    "    return(\"hidden-\"+hiddenMedia[0]);\r",
                    "} else if (responsiveArray.length==1){\r",
                    "    return(\"visible-\"+responsiveArray[0]);\r",
                    "} else {\r",
                    "    return(\"hidden\");\r",
                    "}"
                ]
            },
            "name": "deudceResposiveClass",
            "designerId": "a8392c87-d632-40e3-b75f-5429cfffbde1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "mRows,its,cible"
                ],
                "fn": "restoreLayout",
                "implHandler": [
                    "var me=this;",
                    "Ext.Array.forEach(mRows, function(row){",
                    "    var newRow = Ext.widget('panel', {",
                    "        header:false,",
                    "        mType:\"row\",",
                    "        plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],",
                    "        responsive:row.responsive,",
                    "        displayAsTabs:row.displayAsTabs,",
                    "        id:\"CTLayout-\"+Ext.id(),",
                    "        margin:4,",
                    "        layout: {",
                    "            type: 'hbox',",
                    "            align: 'stretch'",
                    "        }",
                    "    });",
                    "    var rFlex=1;",
                    "    var eolWidth=12;",
                    "    Ext.Array.forEach(row.columns, function(column){",
                    "        if (column.offset>0) {",
                    "            newRow.add(Ext.widget('container', {",
                    "                flex:column.offset,",
                    "                reorderable:false,",
                    "                style:\"{background-image:url(resources/images/stripes.png);}\"",
                    "            }));",
                    "            eolWidth=eolWidth-column.offset;",
                    "        }",
                    "        var isFinalCol=false;",
                    "        if (its<=0){isFinalCol=true;}",
                    "        var newCol=Ext.widget('panel', {",
                    "            header:false,",
                    "            flex:column.span,",
                    "            plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],",
                    "            final:isFinalCol,",
                    "            mType:'col',",
                    "            id:\"CTLayout-\"+Ext.id(),",
                    "            responsive:column.responsive,",
                    "            stackThreshold:column.stackThreshold,",
                    "            eTitle:column.eTitle,",
                    "            margin:4,",
                    "            layout: {",
                    "                type: 'vbox',",
                    "                align: 'stretch'",
                    "            }",
                    "        });",
                    "        if ((its>0)&&(column.isTerminal===false)) {",
                    "            rFlex=Ext.Array.max([rFlex,column.rows.length]);",
                    "            me.masqueRestit(column.rows,its-1,newCol);",
                    "        }",
                    "",
                    "        eolWidth=eolWidth-column.span;",
                    "        Ext.Array.forEach(column.fields,function(field){",
                    "            var cloned=Ext.clone(field);",
                    "            cloned.id=\"CTLayout-\"+Ext.id();",
                    "            newCol.add(Ext.widget(\"unBloc\",cloned));",
                    "        });",
                    "        newRow.add(newCol);",
                    "",
                    "    });",
                    "    newRow.add(Ext.widget(\"container\",{",
                    "        flex:eolWidth,",
                    "        reorderable:false,",
                    "        itemId:\"eol\"",
                    "    }));",
                    "    if (Ext.isEmpty(row.height)) {",
                    "        newRow.flex=rFlex;",
                    "    } else {",
                    "        newRow.height=row.height;",
                    "    }",
                    "    cible.add(newRow);",
                    "});"
                ]
            },
            "name": "restoreLayout",
            "designerId": "6cb721ad-22c6-4105-b41a-9b7c733393d2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#saveCTLayoutBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onSaveCTLayoutBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var rec=Ext.getCmp(\"CTLayoutsGrid\").getSelectionModel().getLastSelected();\r",
                    "rec.set(\"rows\",me.saveLayout(Ext.getCmp(\"layoutEditionPanel\")));"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onSaveCTLayoutBtnClick",
            "designerId": "ed36df37-4dc3-43c6-976f-1d3906828976"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#layoutEditionPanel",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onLayoutEditionPanelAfterRender",
                "implHandler": [
                    "component.setBorder(2);",
                    "component.addBodyCls('contrastCBorder');",
                    "component.getEl().on(\"mouseover\", function(e){",
                    "    component.setBorder(4);",
                    "    e.stopEvent();",
                    "});",
                    "component.getEl().on(\"mouseout\", function(e){",
                    "    component.setBorder(2);",
                    "    e.stopEvent();",
                    "});",
                    "component.getEl().on(\"click\", function(e){",
                    "    e.stopEvent();",
                    "    Ext.getCmp(\"layoutElementIdField\").setValue(component.getId());",
                    "    ",
                    "});"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "onLayoutEditionPanelAfterRender",
            "designerId": "f4deaeab-3a1e-4c50-b295-8e111a9d3bd8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#layoutElementIdField",
                "designer|targetType": "Ext.form.field.Hidden",
                "fn": "onLayoutElementIdFieldChange",
                "implHandler": [
                    "var me=this;\r",
                    "var newSelected=Ext.getCmp(newValue);\r",
                    "Ext.Array.forEach(Ext.getCmp(\"layoutsEditToolbar\").items.items,function(item){\r",
                    "    item.disable();\r",
                    "});\r",
                    "Ext.getCmp(\"layoutPropsPanel\").removeAll();\r",
                    "Ext.getCmp(\"layoutPropsPanel\").setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);\r",
                    "Ext.getCmp(\"layoutPropsPanel\").setIconCls();\r",
                    "Ext.getCmp(\"saveCTLayoutBtn\").enable();\r",
                    "if (!Ext.isEmpty(newSelected)){\r",
                    "    newSelected.getEl().frame(MyPrefData.themeColor);\r",
                    "    newSelected.addBodyCls('selectedelement');\r",
                    "\r",
                    "\r",
                    "    if (newSelected.getId()==\"layoutEditionPanel\"){\r",
                    "        Ext.getCmp(\"addRowToLayoutBtn\").enable();\r",
                    "        Ext.getCmp(\"layoutPropsPanel\").setTitle(Rubedo.RubedoAutomatedElementsLoc.rootText);\r",
                    "        Ext.getCmp(\"layoutPropsPanel\").setIconCls('editZone');\r",
                    "        me.renderMainBoxTools(newSelected);\r",
                    "    } else if (newSelected.mType==\"row\"){\r",
                    "        Ext.getCmp(\"removeLayoutElementBtn\").enable();\r",
                    "        Ext.getCmp(\"layoutPropsPanel\").setTitle(Rubedo.RubedoAutomatedElementsLoc.lignText);\r",
                    "        Ext.getCmp(\"layoutPropsPanel\").setIconCls('editZone');\r",
                    "        Ext.getCmp(\"moveLayoutItemUpBtn\").enable();\r",
                    "        Ext.getCmp(\"moveLayoutItemDownBtn\").enable();\r",
                    "        if (newSelected.getComponent(\"eol\").flex>0){\r",
                    "            Ext.getCmp(\"addColToLayoutBtn\").enable();\r",
                    "        }\r",
                    "        me.renderRowTools(newSelected);\r",
                    "    } else if (newSelected.mType==\"col\"){\r",
                    "        Ext.getCmp(\"removeLayoutElementBtn\").enable();\r",
                    "        if (!Ext.isEmpty(Ext.getStore(\"CTFieldsForLayouts\").getRange())){\r",
                    "            Ext.getCmp(\"assignFieldToColBtn\").enable();\r",
                    "        }\r",
                    "        Ext.getCmp(\"layoutPropsPanel\").setTitle(Rubedo.RubedoAutomatedElementsLoc.columnText);\r",
                    "        Ext.getCmp(\"layoutPropsPanel\").setIconCls('editZone');\r",
                    "        me.renderColumnTools(newSelected);\r",
                    "    } else if (newSelected.isXType(\"unBloc\")){\r",
                    "        Ext.getCmp(\"removeLayoutElementBtn\").enable();\r",
                    "        newSelected.setIconCls('editBloc');\r",
                    "        newSelected.removeBodyCls('selectedelement');\r",
                    "        Ext.getCmp(\"moveLayoutItemUpBtn\").enable();\r",
                    "        Ext.getCmp(\"moveLayoutItemDownBtn\").enable();\r",
                    "        Ext.getCmp(\"layoutPropsPanel\").setIconCls('editBloc');\r",
                    "        Ext.getCmp(\"layoutPropsPanel\").setTitle(Rubedo.RubedoAutomatedElementsLoc.fieldText+\" : \"+newSelected.title);\r",
                    "        me.renderFieldTools(newSelected);\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "var oldSelected=Ext.getCmp(oldValue);\r",
                    "if (!Ext.isEmpty(oldSelected)){\r",
                    "    oldSelected.removeBodyCls('selectedelement');\r",
                    "    oldSelected.setIconCls();\r",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "name": "onLayoutElementIdFieldChange",
            "designerId": "68b599b3-2fd0-421c-91f5-72b1c27bd797"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#addRowToLayoutBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onAddRowToLayoutBtnClick",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());",
                    "var row = Ext.widget('panel', {",
                    "    header:false,",
                    "    mType:\"row\",",
                    "    flex:1,",
                    "    id:\"CTLayout-\"+Ext.id(),",
                    "    plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],",
                    "    responsive:{",
                    "        phone:true,",
                    "        tablet:true,",
                    "        desktop:true,",
                    "        largeDesktop:true",
                    "    },",
                    "    margin:4,",
                    "    layout: {",
                    "        type: 'hbox',",
                    "        align: 'stretch'",
                    "    }",
                    "});",
                    "row.add(Ext.widget('container', {flex:12,reorderable:false,itemId:\"eol\"}));",
                    "cible.insert(cible.items.items.length,row);",
                    "Ext.getCmp('layoutElementIdField').setValue(row.getId());"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAddRowToLayoutBtnClick",
            "designerId": "c43b3ef8-ec42-4c0c-8674-bbda93a6d478"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#addColToLayoutBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onAddColToLayoutBtnClick",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());",
                    "var myEol=cible.getComponent('eol');",
                    "",
                    "if (myEol.flex>0) {",
                    "    var isFinalCol=true;",
                    "    var newCol=Ext.widget('panel', {",
                    "        header:false,",
                    "        flex:1,",
                    "        final:isFinalCol,",
                    "        id:\"CTLayout-\"+Ext.id(),",
                    "        plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],",
                    "        responsive:{",
                    "            phone:true,",
                    "            tablet:true,",
                    "            desktop:true,",
                    "            largeDesktop:true",
                    "        },",
                    "        stackThreshold:\"sm\",",
                    "        mType:'col',",
                    "        margin:4,",
                    "        layout: {",
                    "            type: 'vbox',",
                    "            align: 'stretch'",
                    "        }",
                    "    });",
                    "    myEol.flex=myEol.flex-1;",
                    "    cible.insert(cible.items.items.length-1,newCol);",
                    "    if (myEol.flex===0){",
                    "        button.disable();",
                    "    }",
                    "    Ext.getCmp('layoutElementIdField').setValue(newCol.getId());",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAddColToLayoutBtnClick",
            "designerId": "de904f3d-8d4d-4b93-aafd-160e4ae78c0b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#removeLayoutElementBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onRemoveLayoutElementBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());\r",
                    "var recalc=false;\r",
                    "if (cible.isXType(\"unBloc\")){\r",
                    "    recalc=true;\r",
                    "}\r",
                    "if (cible.mType==\"col\"){\r",
                    "    var myEol=cible.up().getComponent(\"eol\");\r",
                    "    var myOffset=cible.previousSibling();\r",
                    "    if (!Ext.isEmpty(myOffset)) {\r",
                    "        if ((myOffset.isXType(\"container\"))&&(!(myOffset.isXType(\"panel\")))) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex;\r",
                    "            myOffset.up().remove(myOffset);\r",
                    "        }\r",
                    "    }\r",
                    "    myEol.flex=myEol.flex+cible.flex;\r",
                    "\r",
                    "}\r",
                    "cible.up().remove(cible);\r",
                    "Ext.getCmp('layoutElementIdField').setValue(null);\r",
                    "if (recalc){\r",
                    "    me.getFieldsListForLayout();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onRemoveLayoutElementBtnClick",
            "designerId": "93172e5a-230a-4341-b5f7-6ce91deff08e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#layoutActivatorBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onLayoutActivatorBtnClick",
                "implHandler": [
                    "if (button.deactivateMode){\r",
                    "    Ext.getCmp(\"CTLayoutsGrid\").getSelectionModel().getLastSelected().set(\"active\",false);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").setIconCls(\"ouiS\");\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").deactivateMode=false;\r",
                    "\r",
                    "} else {\r",
                    "    var mySite=Ext.getCmp(\"CTLayoutsGrid\").getSelectionModel().getLastSelected().get(\"site\");\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"CTLayoutsGrid\").getStore().query(\"site\",mySite).items,function(record){\r",
                    "        record.set(\"active\",false);\r",
                    "    });\r",
                    "    Ext.getCmp(\"CTLayoutsGrid\").getSelectionModel().getLastSelected().set(\"active\",true);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").setText(Rubedo.RubedoAutomatedElementsLoc.deactivateText);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").setIconCls(\"nonS\");\r",
                    "    Ext.getCmp(\"layoutActivatorBtn\").deactivateMode=true;\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onLayoutActivatorBtnClick",
            "designerId": "9d4ca793-f6fe-4ebf-86c5-9eafdb51653b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#assignFieldToColBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onAssignFieldToColBtnClick",
                "implHandler": [
                    "Ext.widget(\"AssignFieldToColWindow\").show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAssignFieldToColBtnClick",
            "designerId": "bd4a070d-e98c-478a-b635-676b6e93d292"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#assignFieldToLayoutSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onAssignFieldToLayoutSubmitBtnClick",
                "implHandler": [
                    "var me=this;",
                    "var form=button.up().getForm();",
                    "if (form.isValid()){",
                    "    var name=form.getValues().field;",
                    "    var label=Ext.getStore(\"CTFieldsForLayouts\").findRecord(\"name\",name).get(\"label\");",
                    "    var newField = Ext.widget('unBloc', {title:label,id:\"CTLayout-\"+Ext.id()});",
                    "    newField.responsive={",
                    "        \"phone\":true,",
                    "        \"tablet\":true,",
                    "        \"desktop\":true,",
                    "        \"largeDesktop\":true",
                    "    };",
                    "    newField.flex=1;",
                    "    newField.name=name;",
                    "    Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue()).add(newField);",
                    "    button.up().up().close();",
                    "    var task = new Ext.util.DelayedTask(function(){",
                    "        me.getFieldsListForLayout();",
                    "    });",
                    "    task.delay(400);",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAssignFieldToLayoutSubmitBtnClick",
            "designerId": "7abe26fd-6f0f-428e-a881-96016269726b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#CTLayoutFieldInjectorGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onCTLayoutFieldInjectorGridItemDblClick",
                "implHandler": [
                    "var me=this;",
                    "var target=Ext.getCmp(Ext.getCmp('layoutElementIdField').getValue());",
                    "if ((!Ext.isEmpty(target))&&(target.mType==\"col\")){",
                    "    var name=record.get(\"name\");",
                    "    var label=record.get(\"label\");",
                    "    var newField = Ext.widget('unBloc', {title:label,id:\"CTLayout-\"+Ext.id()});",
                    "    newField.responsive={",
                    "        \"phone\":true,",
                    "        \"tablet\":true,",
                    "        \"desktop\":true,",
                    "        \"largeDesktop\":true",
                    "    };",
                    "    newField.flex=1;",
                    "    newField.name=name;",
                    "    target.add(newField);",
                    "    me.getFieldsListForLayout();",
                    "}",
                    ""
                ],
                "name": "itemdblclick",
                "scope": "me"
            },
            "name": "onCTLayoutFieldInjectorGridItemDblClick",
            "designerId": "1b7e7dae-cf9c-4ac3-a96a-fdcea4e3ae90"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#moveLayoutItemUpBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMoveLayoutItemUpBtnClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp(\"layoutElementIdField\").getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().items.indexOf(field);\r",
                    "    if (pos > 0) {\r",
                    "        field.up().move(pos,pos-1);\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMoveLayoutItemUpBtnClick",
            "designerId": "a0e7869a-fbbf-46c6-8a6f-0403b70dd399"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#moveLayoutItemDownBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMoveLayoutItemDownBtnClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp(\"layoutElementIdField\").getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().items.indexOf(field);\r",
                    "    field.up().move(pos,pos+1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMoveLayoutItemDownBtnClick",
            "designerId": "cbbcfdd9-671b-4f5e-bd41-0c6e70e48d56"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#CTLayoutsGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onCTLayoutsGridBeforeSelect",
                "implHandler": [
                    "var me=this;\r",
                    "var rec=Ext.getCmp(\"CTLayoutsGrid\").getSelectionModel().getLastSelected();\r",
                    "if (!Ext.isEmpty(rec)){\r",
                    "    rec.set(\"rows\",me.saveLayout(Ext.getCmp(\"layoutEditionPanel\")));\r",
                    "}"
                ],
                "name": "beforeselect",
                "scope": "me"
            },
            "name": "onCTLayoutsGridBeforeSelect",
            "designerId": "fb6d6b7a-04d3-414d-8b04-da82e0d39660"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#copyCTLayoutBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onCopyCTLayoutBtnClick",
                "implHandler": [
                    "var target = Ext.getCmp('CTLayoutsGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(target)) {\r",
                    "    var fenetre = Ext.widget('CTLCopyWindow');\r",
                    "    fenetre.show();\r",
                    "    fenetre.getComponent(0).getComponent(0).setValue(target.get(\"name\")+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i'));\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onCopyCTLayoutBtnClick",
            "designerId": "43afccc8-b496-404f-b3a1-684aa2baa75d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#CTLCopyLSubitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onCTLCopyLSubitBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    var data = Ext.getCmp('CTLayoutsGrid').getSelectionModel().getSelection()[0].getData();\r",
                    "    data.active=false;\r",
                    "    Ext.apply(data, form.getValues());\r",
                    "    Ext.getCmp('CTLayoutsGrid').getStore().add(data);\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onCTLCopyLSubitBtnClick",
            "designerId": "891beb16-30d9-429c-a095-4a4d1e2f7c03"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#CTLayoutMainTab",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onPanelActivate",
                "implHandler": [
                    "Ext.getCmp(\"CTLayoutsBtnGr\").show();\r",
                    "Ext.getCmp(\"layoutsEditToolbar\").show();\r",
                    "Ext.getCmp(\"AdminfTypesGrid\").collapse();\r",
                    "if (!Ext.isEmpty(Ext.getCmp(\"CTLayoutsGrid\").getSelectionModel().getLastSelected())){\r",
                    "    Rubedo.controller.TypesContenusController.prototype.getFieldsListForLayout();\r",
                    "}"
                ],
                "name": "activate",
                "scope": "me"
            },
            "name": "onPanelActivate",
            "designerId": "53165355-ab90-4bd8-933f-01eb499a3373"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#CTLayoutMainTab",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onPanelDeactivate",
                "implHandler": [
                    "Ext.getCmp(\"CTLayoutsBtnGr\").hide();\r",
                    "Ext.getCmp(\"layoutsEditToolbar\").hide();\r",
                    "Ext.getCmp(\"AdminfTypesGrid\").expand();"
                ],
                "name": "deactivate",
                "scope": "me"
            },
            "name": "onPanelDeactivate",
            "designerId": "78a302ac-fe2c-48cb-847b-95bced7cc812"
        }
    ]
}