{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "typesContenusDataModel"
        ],
        "stores": [
            "TypesContenusDataJson"
        ],
        "views": [
            "nouveauTypeContenu",
            "ajoutChampTCFenetre",
            "ChampTC",
            "optionsLCGrid",
            "ongletTCDep"
        ],
        "designer|userClassName": "TypesContenusController",
        "designer|userAlias": "TypesContenusController"
    },
    "designerId": "6b4056c1-8b00-41ce-a4cb-363fbf0cb6f0",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ajouterContenu",
                "implHandler": [
                    "if (Ext.isDefined(Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0])) {\r",
                    "    var fenetre = Ext.widget('ajouterContenu');\r",
                    "    Ext.getCmp('ViewportPrimaire').add(fenetre);\r",
                    "    if (Ext.isDefined(window.innerHeight)) {\r",
                    "        if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}\r",
                    "        if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}\r",
                    "    }\r",
                    "    fenetre.show();\r",
                    "    fenetre.setTitle(Rubedo.RubedoAutomatedElementsLoc.newContentText+\" \"+Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get(\"type\"));\r",
                    "    var formulaireTC = Ext.getCmp('boiteAChampsContenus');\r",
                    "    Ext.getCmp(\"contentsVersionPanel\").up().remove( Ext.getCmp(\"contentsVersionPanel\"));\r",
                    "    var champsD =Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].data.champs;\r",
                    "    for (g=0; g<champsD.length; g++) {\r",
                    "        var donnees=champsD[g];\r",
                    "        var configurateur = Ext.clone(donnees.config);\r",
                    "        if (donnees.cType =='treepicker'){ \r",
                    "            configurateur.store = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                isOptimised: true,\r",
                    "                usedCollection: 'Pages',\r",
                    "                autoLoad: false,\r",
                    "                autoSync: false,\r",
                    "                remoteFilter: true,\r",
                    "                model: 'Rubedo.model.taxonomyTermModel',\r",
                    "                proxy: {\r",
                    "                    type: 'ajax',\r",
                    "                    api: {\r",
                    "                        read: 'taxonomy-terms/navigation-tree'\r",
                    "                    },\r",
                    "                    reader: {\r",
                    "                        type: 'json',\r",
                    "                        getResponseData: function(response) {\r",
                    "                            var data, error;\r",
                    "\r",
                    "                            try {\r",
                    "                                data = Ext.decode(response.responseText);\r",
                    "                                if (Ext.isDefined(data.data)){data.children=data.data;}// error fix\r",
                    "                                return this.readRecords(data);\r",
                    "                            } catch (ex) {\r",
                    "                                error = new Ext.data.ResultSet({\r",
                    "                                    total  : 0,\r",
                    "                                    count  : 0,\r",
                    "                                    records: [],\r",
                    "                                    success: false,\r",
                    "                                    message: ex.message\r",
                    "                                });\r",
                    "\r",
                    "                                this.fireEvent('exception', this, response, error);\r",
                    "                                console.log(ex);\r",
                    "\r",
                    "                                Ext.Logger.warn('Unable to parse the JSON returned by the server');\r",
                    "\r",
                    "                                return error;\r",
                    "                            }\r",
                    "                        },\r",
                    "                        messageProperty: 'message'\r",
                    "                    }\r",
                    "                },\r",
                    "                sorters: {\r",
                    "                    property: 'orderValue'\r",
                    "                }\r",
                    "            });\r",
                    "            configurateur.store.load();\r",
                    "            configurateur.valueField=\"id\";\r",
                    "            configurateur.displayField=\"text\";\r",
                    "            configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];\r",
                    "        }\r",
                    "        else if (donnees.cType == 'combobox') {\r",
                    "            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "            configurateur.store = monStore;\r",
                    "        }\r",
                    "        //begin temporary fix\r",
                    "        configurateur.labelSeparator=\" \";\r",
                    "        //end temporary fix\r",
                    "        try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){\r",
                    "        var nouvChamp = Ext.create(donnees.cType, configurateur);\r",
                    "    }\r",
                    "    nouvChamp.config=Ext.clone(donnees.config);\r",
                    "    //begin temporary fix\r",
                    "    if(nouvChamp.config.tooltip==\"help text\"){nouvChamp.config.tooltip=\"\";}\r",
                    "    //end temporary fix\r",
                    "    if (donnees.cType =='triggerfield'){ \r",
                    "        var Ouvrir = Ext.clone(donnees.openWindow);\r",
                    "        nouvChamp.onTriggerClick= function() {\r",
                    "            var fenetre = Ext.widget(Ouvrir);\r",
                    "            fenetre.showAt(screen.width/2-200, 100);\r",
                    "        } ; \r",
                    "        nouvChamp.openWindow =Ext.clone(donnees.openWindow);\r",
                    "    }  \r",
                    "    nouvChamp.anchor = '90%';\r",
                    "    nouvChamp.style = '{float:left;}';\r",
                    "    var enrobage =Ext.widget('ChampTC');\r",
                    "    enrobage.add(nouvChamp);\r",
                    "    enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "    if (Ext.isEmpty(nouvChamp.config.tooltip)){\r",
                    "        enrobage.getComponent('helpBouton').hidden=true;\r",
                    "    } \r",
                    "    if (nouvChamp.multivalued) {\r",
                    "        enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.duplicateText, itemId: 'boutonReplicateurChamps'}));\r",
                    "\r",
                    "    };\r",
                    "    formulaireTC.add(enrobage);\r",
                    "\r",
                    "}\r",
                    "var formTaxoTC =  Ext.getCmp('boiteATaxoContenus');\r",
                    "var lesTaxo = Ext.getCmp('TypesContenusGrid').getSelectionModel().getSelection()[0].get(\"vocabularies\");\r",
                    "var i=0;\r",
                    "for (i=0; i<lesTaxo.length; i++) {\r",
                    "    var leVocab = Ext.getStore('TaxonomyForC').findRecord('id', lesTaxo[i]);\r",
                    "    if (leVocab.get(\"inputAsTree\")){\r",
                    "        var storeT = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "            model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "            remoteFilter:\"true\",\r",
                    "            proxy: {\r",
                    "                type: 'ajax',\r",
                    "                api: {\r",
                    "                    read: 'taxonomy-terms/tree'\r",
                    "                },\r",
                    "                reader: {\r",
                    "                    type: 'json',\r",
                    "                    messageProperty: 'message'\r",
                    "                },\r",
                    "                encodeFilters: function(filters) {\r",
                    "                    var min = [],\r",
                    "                        length = filters.length,\r",
                    "                        i = 0;\r",
                    "\r",
                    "                    for (; i < length; i++) {\r",
                    "                        min[i] = {\r",
                    "                            property: filters[i].property,\r",
                    "                            value   : filters[i].value\r",
                    "                        };\r",
                    "                        if (filters[i].type) {\r",
                    "                            min[i].type = filters[i].type;\r",
                    "                        }\r",
                    "                        if (filters[i].operator) {\r",
                    "                            min[i].operator = filters[i].operator;\r",
                    "                        }\r",
                    "                    }\r",
                    "                    return this.applyEncoding(min);\r",
                    "                }\r",
                    "            },\r",
                    "            filters: {\r",
                    "                property: 'vocabularyId',\r",
                    "                value: leVocab.get(\"id\")\r",
                    "            }\r",
                    "\r",
                    "        });\r",
                    "        var toUse=\"Ext.ux.TreePicker\";\r",
                    "        if(leVocab.get(\"multiSelect\")){toUse=\"Ext.ux.TreeMultiPicker\";}\r",
                    "        if(leVocab.get(\"id\")=='navigation'){storeT.getProxy().api={read:\"taxonomy-terms/navigation-tree\"};}\r",
                    "        storeT.load();\r",
                    "        var selecteur = Ext.create(toUse, {\r",
                    "            name:leVocab.get(\"id\"),\r",
                    "            fieldLabel: leVocab.get(\"name\"),\r",
                    "            store: storeT,\r",
                    "            anchor:\"90%\",\r",
                    "            ignoreIsNotPage:true,\r",
                    "            displayField:\"text\",\r",
                    "            allowBlank: !leVocab.data.mandatory,\r",
                    "            plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")]\r",
                    "        });\r",
                    "\r",
                    "\r",
                    "    } else {\r",
                    "        var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "            model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "            remoteFilter:\"true\",\r",
                    "            proxy: {\r",
                    "                type: 'ajax',\r",
                    "                api: {\r",
                    "                    read: 'taxonomy-terms'\r",
                    "                },\r",
                    "                reader: {\r",
                    "                    type: 'json',\r",
                    "                    messageProperty: 'message',\r",
                    "                    root: 'data'\r",
                    "                },\r",
                    "                encodeFilters: function(filters) {\r",
                    "                    var min = [],\r",
                    "                        length = filters.length,\r",
                    "                        i = 0;\r",
                    "\r",
                    "                    for (; i < length; i++) {\r",
                    "                        min[i] = {\r",
                    "                            property: filters[i].property,\r",
                    "                            value   : filters[i].value\r",
                    "                        };\r",
                    "                        if (filters[i].type) {\r",
                    "                            min[i].type = filters[i].type;\r",
                    "                        }\r",
                    "                        if (filters[i].operator) {\r",
                    "                            min[i].operator = filters[i].operator;\r",
                    "                        }\r",
                    "                    }\r",
                    "                    return this.applyEncoding(min);\r",
                    "                }\r",
                    "            },\r",
                    "            filters: {\r",
                    "                property: 'vocabularyId',\r",
                    "                value: leVocab.get(\"id\")\r",
                    "            }\r",
                    "\r",
                    "        });\r",
                    "        storeT.on(\"beforeload\", function(s,o){\r",
                    "            o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "            if (!Ext.isEmpty(o.params.comboQuery)){\r",
                    "\r",
                    "                var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                    property:\"text\",\r",
                    "                    value:o.params.comboQuery,\r",
                    "                    operator:'like'\r",
                    "                });\r",
                    "\r",
                    "                o.filters.push(newFilter);\r",
                    "\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "        });\r",
                    "        var selecteur = Ext.widget('comboboxselect', {\r",
                    "            name:leVocab.get(\"id\"),\r",
                    "            anchor:\"90%\",\r",
                    "            fieldLabel: leVocab.get(\"name\"),\r",
                    "            autoScroll: false,\r",
                    "            store: storeT,\r",
                    "            queryMode: 'remote',\r",
                    "            queryParam: 'comboQuery',\r",
                    "            minChars:3,\r",
                    "            displayField: 'text',\r",
                    "            valueField: 'id',\r",
                    "            filterPickList: true,\r",
                    "            typeAhead: true,\r",
                    "            forceSelection: !leVocab.data.expandable,\r",
                    "            createNewOnEnter: leVocab.data.expandable,\r",
                    "            multiSelect: leVocab.data.multiSelect,\r",
                    "            allowBlank: !leVocab.data.mandatory\r",
                    "        });\r",
                    "\r",
                    "    }\r",
                    "    var enrobage =Ext.widget('ChampTC');\r",
                    "    enrobage.add(selecteur);\r",
                    "    enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);\r",
                    "    if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}\r",
                    "    formTaxoTC.add(enrobage);\r",
                    "\r",
                    "}\r",
                    "\r",
                    "var nct = Ext.getCmp(\"nestedContentsTab\");\r",
                    "if (!Ext.isEmpty(nct)){\r",
                    "    Ext.getCmp('nestedContensTabConfig').destroy();\r",
                    "    nct.destroy();\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonAjouterContenu"
            },
            "designerId": "e81d0f4c-83eb-4437-a188-896315f1c5c8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ouvrirFenetreTC",
                "implHandler": [
                    "var fenetreTC = Ext.widget('ajoutChampTCFenetre');\r",
                    "fenetreTC.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonOuvrirFenetreTC"
            },
            "designerId": "063f8236-3289-49dc-a637-63d5b83ff07c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "creerChampTC",
                "implHandler": [
                    "var me=this;\r",
                    "if (Ext.isEmpty(Ext.getStore(\"AddMultiFieldStore\").getRange())){\r",
                    "    var donnees = Ext.getCmp('ChampTCSelectGrid').getSelectionModel().getLastSelected().data;\r",
                    "    if ((donnees.cType==\"Rubedo.view.localiserField\")&&(!Ext.isEmpty(Ext.getCmp(\"champsEditionTC\").query(\"localiserField\")))){\r",
                    "        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.maxOneLocFieldError);\r",
                    "    }else {\r",
                    "        var configurateur = Ext.clone(donnees.config);\r",
                    "        if (donnees.cType =='Ext.ux.TreePicker'){ \r",
                    "            configurateur.store = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                isOptimised: true,\r",
                    "                usedCollection: 'Pages',\r",
                    "                autoLoad: false,\r",
                    "                autoSync: false,\r",
                    "                remoteFilter: true,\r",
                    "                model: 'Rubedo.model.taxonomyTermModel',\r",
                    "                proxy: {\r",
                    "                    type: 'ajax',\r",
                    "                    api: {\r",
                    "                        read: 'taxonomy-terms/navigation-tree'\r",
                    "                    },\r",
                    "                    reader: {\r",
                    "                        type: 'json',\r",
                    "                        getResponseData: function(response) {\r",
                    "                            var data, error;\r",
                    "\r",
                    "                            try {\r",
                    "                                data = Ext.decode(response.responseText);\r",
                    "                                if (Ext.isDefined(data.data)){data.children=data.data;}// error fix\r",
                    "                                return this.readRecords(data);\r",
                    "                            } catch (ex) {\r",
                    "                                error = new Ext.data.ResultSet({\r",
                    "                                    total  : 0,\r",
                    "                                    count  : 0,\r",
                    "                                    records: [],\r",
                    "                                    success: false,\r",
                    "                                    message: ex.message\r",
                    "                                });\r",
                    "\r",
                    "                                this.fireEvent('exception', this, response, error);\r",
                    "                                console.log(ex);\r",
                    "\r",
                    "                                Ext.Logger.warn('Unable to parse the JSON returned by the server');\r",
                    "\r",
                    "                                return error;\r",
                    "                            }\r",
                    "                        },\r",
                    "                        messageProperty: 'message'\r",
                    "                    }\r",
                    "                },\r",
                    "                sorters: {\r",
                    "                    property: 'orderValue'\r",
                    "                }\r",
                    "            });\r",
                    "            configurateur.store.load();\r",
                    "            configurateur.valueField=\"id\";\r",
                    "            configurateur.displayField=\"text\";\r",
                    "            configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];\r",
                    "        }\r",
                    "        else if (donnees.cType == 'Ext.form.field.ComboBox') {\r",
                    "            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "            configurateur.store = monStore;\r",
                    "        }\r",
                    "        var nouvChamp = Ext.create(donnees.cType, configurateur);\r",
                    "        nouvChamp.protoId=donnees.id;\r",
                    "        nouvChamp.config=Ext.clone(donnees.config);\r",
                    "        nouvChamp.configFields=Ext.clone(donnees.configFields);\r",
                    "        if (donnees.cType =='Ext.form.field.Trigger'){\r",
                    "            var Ouvrir = Ext.clone(donnees.openWindow);\r",
                    "            nouvChamp.onTriggerClick= function() {\r",
                    "                var fenetre = Ext.widget(Ouvrir);\r",
                    "                fenetre.showAt(screen.width/2-200, 100);\r",
                    "            } ;  \r",
                    "            nouvChamp.openWindow =Ext.clone(donnees.openWindow);\r",
                    "        }\r",
                    "        nouvChamp.anchor = '90%';\r",
                    "        nouvChamp.style = '{float:left;}';\r",
                    "        var enrobage =Ext.widget('ChampTC');\r",
                    "        enrobage.add(nouvChamp);\r",
                    "        enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "        if (Ext.isEmpty(nouvChamp.config.tooltip)){\r",
                    "            enrobage.getComponent('helpBouton').hidden=true;\r",
                    "        } \r",
                    "        if (!me.nameAvailable(nouvChamp.name)) {\r",
                    "            var duplic = 1;\r",
                    "            while (!me.nameAvailable(nouvChamp.name+duplic)){\r",
                    "                duplic++;\r",
                    "            }\r",
                    "            nouvChamp.name=nouvChamp.name+duplic;\r",
                    "            nouvChamp.config.name=nouvChamp.config.name+duplic;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        Ext.getCmp('champsEditionTC').add(enrobage);\r",
                    "        nouvChamp.getEl().dom.click();\r",
                    "        button.up().up().close();\r",
                    "    }} else {\r",
                    "        Ext.Array.forEach(Ext.getStore(\"AddMultiFieldStore\").getRange(), function (futureField){\r",
                    "            var interv=Ext.clone(futureField.data);\r",
                    "            interv.id=interv.protoId;\r",
                    "            var donnees = interv;\r",
                    "            if ((donnees.cType==\"Rubedo.view.localiserField\")&&(!Ext.isEmpty(Ext.getCmp(\"champsEditionTC\").query(\"localiserField\")))){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.maxOneLocFieldError);\r",
                    "            }else {\r",
                    "                var configurateur = Ext.clone(donnees.config);\r",
                    "                if (donnees.cType =='Ext.ux.TreePicker'){ \r",
                    "                    configurateur.store = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                        isOptimised: true,\r",
                    "                        usedCollection: 'Pages',\r",
                    "                        autoLoad: false,\r",
                    "                        autoSync: false,\r",
                    "                        remoteFilter: true,\r",
                    "                        model: 'Rubedo.model.taxonomyTermModel',\r",
                    "                        proxy: {\r",
                    "                            type: 'ajax',\r",
                    "                            api: {\r",
                    "                                read: 'taxonomy-terms/navigation-tree'\r",
                    "                            },\r",
                    "                            reader: {\r",
                    "                                type: 'json',\r",
                    "                                getResponseData: function(response) {\r",
                    "                                    var data, error;\r",
                    "\r",
                    "                                    try {\r",
                    "                                        data = Ext.decode(response.responseText);\r",
                    "                                        if (Ext.isDefined(data.data)){data.children=data.data;}// error fix\r",
                    "                                        return this.readRecords(data);\r",
                    "                                    } catch (ex) {\r",
                    "                                        error = new Ext.data.ResultSet({\r",
                    "                                            total  : 0,\r",
                    "                                            count  : 0,\r",
                    "                                            records: [],\r",
                    "                                            success: false,\r",
                    "                                            message: ex.message\r",
                    "                                        });\r",
                    "\r",
                    "                                        this.fireEvent('exception', this, response, error);\r",
                    "                                        console.log(ex);\r",
                    "\r",
                    "                                        Ext.Logger.warn('Unable to parse the JSON returned by the server');\r",
                    "\r",
                    "                                        return error;\r",
                    "                                    }\r",
                    "                                },\r",
                    "                                messageProperty: 'message'\r",
                    "                            }\r",
                    "                        },\r",
                    "                        sorters: {\r",
                    "                            property: 'orderValue'\r",
                    "                        }\r",
                    "                    });\r",
                    "                    configurateur.store.load();\r",
                    "                    configurateur.valueField=\"id\";\r",
                    "                    configurateur.displayField=\"text\";\r",
                    "                    configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];\r",
                    "                }\r",
                    "                else if (donnees.cType == 'Ext.form.field.ComboBox') {\r",
                    "                    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "                    configurateur.store = monStore;\r",
                    "                }\r",
                    "                var nouvChamp = Ext.create(donnees.cType, configurateur);\r",
                    "                nouvChamp.protoId=donnees.id;\r",
                    "                nouvChamp.config=Ext.clone(donnees.config);\r",
                    "                nouvChamp.configFields=Ext.clone(donnees.configFields);\r",
                    "                if (donnees.cType =='Ext.form.field.Trigger'){\r",
                    "                    var Ouvrir = Ext.clone(donnees.openWindow);\r",
                    "                    nouvChamp.onTriggerClick= function() {\r",
                    "                        var fenetre = Ext.widget(Ouvrir);\r",
                    "                        fenetre.showAt(screen.width/2-200, 100);\r",
                    "                    } ;  \r",
                    "                    nouvChamp.openWindow =Ext.clone(donnees.openWindow);\r",
                    "                }\r",
                    "                nouvChamp.anchor = '90%';\r",
                    "                nouvChamp.style = '{float:left;}';\r",
                    "                var enrobage =Ext.widget('ChampTC');\r",
                    "                enrobage.add(nouvChamp);\r",
                    "                enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "                if (Ext.isEmpty(nouvChamp.config.tooltip)){\r",
                    "                    enrobage.getComponent('helpBouton').hidden=true;\r",
                    "                } \r",
                    "                if (!me.nameAvailable(nouvChamp.name)) {\r",
                    "                    var duplic = 1;\r",
                    "                    while (!me.nameAvailable(nouvChamp.name+duplic)){\r",
                    "                        duplic++;\r",
                    "                    }\r",
                    "                    nouvChamp.name=nouvChamp.name+duplic;\r",
                    "                    nouvChamp.config.name=nouvChamp.config.name+duplic;\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "                Ext.getCmp('champsEditionTC').add(enrobage);\r",
                    "\r",
                    "            }\r",
                    "        });\r",
                    "        button.up().up().close();\r",
                    "    }"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonAjouterChampTC"
            },
            "designerId": "cca991ed-25e3-4a89-9490-55e02f4dcef7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectChampTC",
                "implHandler": [
                    "var me=this;\r",
                    "var TCfield=component.getComponent(1);\r",
                    "TCfield.getEl().on('click', function() {\r",
                    "    Ext.getCmp(\"TCfieldUp\").enable();\r",
                    "    Ext.getCmp(\"TCfieldDown\").enable();\r",
                    "    Ext.getCmp(\"TCfieldDeleter\").enable();\r",
                    "    if (Ext.getCmp('champTCIdField').getValue() != TCfield.id) {\r",
                    "        if (Ext.isDefined(Ext.getCmp(Ext.getCmp('champTCIdField').getValue()))){    \r",
                    "            Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).getEl().applyStyles('color:#000000');\r",
                    "            var companion =Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).up().getComponent(2);\r",
                    "            if (Ext.isDefined(companion)) {\r",
                    "                companion.getEl().applyStyles('color:#000000');\r",
                    "            }\r",
                    "        }\r",
                    "        Ext.getCmp('champTCIdField').setValue(TCfield.id);\r",
                    "        if ((TCfield.isXType(\"ImagePickerField\"))||(TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))) {\r",
                    "            TCfield.up().getComponent(2).getEl().frame(MyPrefData.themeColor);\r",
                    "            TCfield.up().getComponent(2).getEl().applyStyles('color:'+MyPrefData.themeColor);\r",
                    "        } else {\r",
                    "            this.frame(MyPrefData.themeColor);\r",
                    "            this.applyStyles('color:'+MyPrefData.themeColor);\r",
                    "        }\r",
                    "        var mesChamps = TCfield.configFields;\r",
                    "        var boiteParam = Ext.getCmp('boiteConfigChampsTC');\r",
                    "        boiteParam.removeAll();\r",
                    "        for(t=0; t<mesChamps.length; t++) {\r",
                    "            if (mesChamps[t].type =='Ext.form.field.ComboBox') {\r",
                    "                var monStore=  Ext.create('Ext.data.Store', mesChamps[t].store);\r",
                    "                mesChamps[t].config.store= monStore;\r",
                    "            }\r",
                    "            var nouvChamp= Ext.create(mesChamps[t].type, mesChamps[t].config);\r",
                    "            nouvChamp.labelSeparator= ' ';\r",
                    "            nouvChamp.anchor='100%';\r",
                    "            if (nouvChamp.name==\"name\"){\r",
                    "                nouvChamp.validator=me.nameValidator;\r",
                    "            }\r",
                    "\r",
                    "            nouvChamp.setValue(TCfield.config[nouvChamp.name]);\r",
                    "\r",
                    "            if ((mesChamps[t].type =='Rubedo.view.CTMTField')||(mesChamps[t].type =='Rubedo.view.CTCField')){\r",
                    "\r",
                    "                var properMT =Ext.clone(TCfield.config[nouvChamp.name]);\r",
                    "                nouvChamp.getStore().targetField=nouvChamp.id;\r",
                    "                nouvChamp.getStore().addListener(\"load\", function(){  \r",
                    "                    Ext.getCmp(this.targetField).setValue(properMT);\r",
                    "                },nouvChamp.getStore(),{single:true});\r",
                    "                }\r",
                    "                nouvChamp.setReadOnly((!ACL.interfaceRights[\"write.ui.contentTypes\"])||(Ext.getCmp(\"AdminfTypesGrid\").getSelectionModel().getLastSelected().get(\"readOnly\")));\r",
                    "                nouvChamp.on('change', function (thing) {\r",
                    "                    if (thing.isValid()){\r",
                    "                        if(this.isXType(\"timefield\")){\r",
                    "                            TCfield.config[this.name]=Ext.Date.format(this.getValue(),\"H:i\");\r",
                    "                        } else if(this.isXType(\"datefield\")){\r",
                    "                            TCfield.config[this.name]=Ext.Date.format(this.getValue(),\"U\");\r",
                    "                        } else { \r",
                    "                            TCfield.config[this.name]= this.getValue();\r",
                    "                        }\r",
                    "                        if ((this.name=='name')&&((TCfield.isXType(\"radiogroup\"))||(TCfield.isXType(\"checkboxgroup\")))){\r",
                    "                            var ntcrVal=this.getValue();\r",
                    "                            Ext.Array.forEach(TCfield.config.items, function(ntch){ntch.name=ntcrVal;});\r",
                    "                        }\r",
                    "                        if (this.name=='fieldLabel') {\r",
                    "\r",
                    "                            if (TCfield.isXType(\"ImagePickerField\")) {\r",
                    "                                TCfield.up().getComponent(2).getComponent(0).setText(this.getValue());\r",
                    "                            } else if ((TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))){\r",
                    "                                TCfield.up().getComponent(2).setFieldLabel(this.getValue());\r",
                    "                            } else {\r",
                    "                                TCfield.setFieldLabel(this.getValue());\r",
                    "                            }\r",
                    "                        }\r",
                    "                        else if (this.name=='value') {\r",
                    "\r",
                    "                            TCfield.setValue(this.getValue());\r",
                    "\r",
                    "                        }\r",
                    "                        else if (this.name=='allowBlank') {\r",
                    "                            var currentOne=TCfield.config.fieldLabel;\r",
                    "                            if (this.getValue()) {\r",
                    "                                currentOne=currentOne.replace(\" *\",\"\");\r",
                    "                            } else {\r",
                    "                                currentOne=currentOne+\" *\";\r",
                    "                            } \r",
                    "                            TCfield.config.fieldLabel=currentOne;\r",
                    "                            if (TCfield.isXType(\"ImagePickerField\")) {\r",
                    "                                TCfield.up().getComponent(2).getComponent(0).setText(currentOne+\" \");\r",
                    "                            } else if ((TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))){\r",
                    "                                TCfield.up().getComponent(2).setFieldLabel(currentOne);\r",
                    "                            } else {\r",
                    "                                TCfield.setFieldLabel(currentOne);\r",
                    "                            }\r",
                    "                        }\r",
                    "                        else if (this.name=='editable') {\r",
                    "                            TCfield.setEditable(this.getValue());\r",
                    "                            TCfield.reset();\r",
                    "                        }\r",
                    "                        else if (this.name=='multiSelect') {\r",
                    "                            TCfield.multiSelect = this.getValue();\r",
                    "                            TCfield.reset();\r",
                    "                        }\r",
                    "                        else if (this.name=='tooltip') {\r",
                    "                            component.getComponent('helpBouton').setTooltip(this.getValue());\r",
                    "                            if (Ext.isEmpty(this.getValue())){\r",
                    "                                component.getComponent('helpBouton').hide();\r",
                    "                            } else {\r",
                    "                                component.getComponent('helpBouton').show();\r",
                    "                            }\r",
                    "                        }\r",
                    "                        else if (this.name=='regex') {\r",
                    "                            TCfield.regex = new RegExp(this.getValue());\r",
                    "                        }\r",
                    "                        else {\r",
                    "                            TCfield[this.name]= this.getValue();\r",
                    "                        }\r",
                    "                        TCfield.validate();\r",
                    "                    }});\r",
                    "                    boiteParam.add(nouvChamp); \r",
                    "\r",
                    "                }\r",
                    "                if ((TCfield.isXType('combobox'))&&(!(TCfield.isXType('timefield')))) {\r",
                    "                    var optionsLC = Ext.widget('optionsLCGrid', {store : TCfield.getStore()});\r",
                    "                    boiteParam.add(optionsLC); \r",
                    "\r",
                    "                }\r",
                    "                if ((TCfield.isXType(\"radiogroup\"))||(TCfield.isXType(\"checkboxgroup\"))) {\r",
                    "                    var itemsConfigurator=Ext.widget(\"specialTCFieldItemsConfigurator\");\r",
                    "                    itemsConfigurator.targetedId=TCfield.id;\r",
                    "                    boiteParam.add(itemsConfigurator); \r",
                    "                }\r",
                    "            }\r",
                    "        });"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "ChampTC",
                "designer|controlQuery": "#champsEditionTC ChampTC"
            },
            "designerId": "e2ebc421-111e-445c-aa56-a4c4fc55fdfe"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "enleveChampTC",
                "implHandler": [
                    "if (Ext.getCmp('champTCIdField').getValue() == component.getComponent(1).id) {\r",
                    "    Ext.getCmp('boiteConfigChampsTC').removeAll();\r",
                    "    Ext.getCmp(\"TCfieldUp\").disable();\r",
                    "    Ext.getCmp(\"TCfieldDown\").disable();\r",
                    "    Ext.getCmp(\"TCfieldDeleter\").disable();\r",
                    "}"
                ],
                "name": "beforedestroy",
                "scope": "me",
                "designer|targetType": "ChampTC",
                "designer|controlQuery": "#champsEditionTC ChampTC"
            },
            "designerId": "0541dcd4-ee38-4b95-9dbf-b9f8d5a998e7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateOptionsListeTC",
                "implHandler": [
                    "Ext.getCmp('PaneauTCDetail').update(record.data);"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#ChampTCSelectGrid"
            },
            "designerId": "74b79ea2-838b-4407-8e7a-69683f98bf32"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectTC",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp(\"adminFTDC\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.enable();});\r",
                    "Ext.getCmp(\"boutonSupprimerTypeContenu\").enable();\r",
                    "Ext.getCmp(\"TCfieldUp\").disable();\r",
                    "Ext.getCmp(\"TCfieldDown\").disable();\r",
                    "Ext.getCmp(\"TCfieldDeleter\").disable();\r",
                    "Ext.getCmp(\"TDCEditForm\").getForm().setValues(record.getData());\r",
                    "var filArianne = Ext.getCmp(\"adminFTDC\").getDockedComponent('filArianne');\r",
                    "var monIco = 'content-icon';\r",
                    "var monImg = 'resources/icones/48x48/page_full.png';\r",
                    "if (record.data.dependant===true){monIco='documentDep'; monImg = 'resources/icones/48x48/attach_document.png';}\r",
                    "var typeFil = filArianne.getComponent('type');\r",
                    "if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.type).setIconCls(monIco); }\r",
                    "else { typeFil= Ext.widget('button',{iconCls: monIco, text:record.data.type, itemId:'type'});\r",
                    "filArianne.add(typeFil);\r",
                    "}\r",
                    "\r",
                    "if ((record.data.dependant===false)&&(ACL.interfaceRights[\"read.ui.dependantTypes\"])) {\r",
                    "if (!(Ext.isDefined(Ext.getCmp('ongletTCDep')))) {\r",
                    "    Ext.getCmp('tabPanTC').add(Ext.widget('ongletTCDep'));    \r",
                    "}\r",
                    "}\r",
                    "else {\r",
                    "if (Ext.isDefined(Ext.getCmp('ongletTCDep'))) {\r",
                    "    Ext.getCmp('ongletTCDep').destroy();  \r",
                    "}\r",
                    "}\r",
                    "Ext.getCmp('tabPanTC').enable();\r",
                    "Ext.getCmp('tabPanTC').setActiveTab(2);\r",
                    "Ext.getCmp('tabPanTC').setActiveTab(5);\r",
                    "Ext.getCmp('tabPanTC').setActiveTab(0);\r",
                    "Ext.getCmp('boiteConfigChampsTC').removeAll();\r",
                    "var formulaireTC = Ext.getCmp('champsEditionTC');\r",
                    "formulaireTC.removeAll();\r",
                    "var champsD =record.data.champs;\r",
                    "for (g=0; g<champsD.length; g++) {\r",
                    "var donnees=champsD[g];\r",
                    "var configurateur = Ext.clone(donnees.config);\r",
                    "if (donnees.cType =='treepicker'){ \r",
                    "    configurateur.store = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "        isOptimised: true,\r",
                    "        usedCollection: 'Pages',\r",
                    "        autoLoad: false,\r",
                    "        autoSync: false,\r",
                    "        remoteFilter: true,\r",
                    "        model: 'Rubedo.model.taxonomyTermModel',\r",
                    "        proxy: {\r",
                    "            type: 'ajax',\r",
                    "            api: {\r",
                    "                read: 'taxonomy-terms/navigation-tree'\r",
                    "            },\r",
                    "            reader: {\r",
                    "                type: 'json',\r",
                    "                getResponseData: function(response) {\r",
                    "                    var data, error;\r",
                    "\r",
                    "                    try {\r",
                    "                        data = Ext.decode(response.responseText);\r",
                    "                        if (Ext.isDefined(data.data)){data.children=data.data;}// error fix\r",
                    "                        return this.readRecords(data);\r",
                    "                    } catch (ex) {\r",
                    "                        error = new Ext.data.ResultSet({\r",
                    "                            total  : 0,\r",
                    "                            count  : 0,\r",
                    "                            records: [],\r",
                    "                            success: false,\r",
                    "                            message: ex.message\r",
                    "                        });\r",
                    "\r",
                    "                        this.fireEvent('exception', this, response, error);\r",
                    "                        console.log(ex);\r",
                    "\r",
                    "                        Ext.Logger.warn('Unable to parse the JSON returned by the server');\r",
                    "\r",
                    "                        return error;\r",
                    "                    }\r",
                    "                },\r",
                    "                messageProperty: 'message'\r",
                    "            }\r",
                    "        },\r",
                    "        sorters: {\r",
                    "            property: 'orderValue'\r",
                    "        }\r",
                    "    });\r",
                    "    configurateur.store.load();\r",
                    "    configurateur.valueField=\"id\";\r",
                    "    configurateur.displayField=\"text\";\r",
                    "    configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];\r",
                    "}\r",
                    "else if (donnees.cType == 'combobox') {\r",
                    "    var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "    configurateur.store = monStore;\r",
                    "}\r",
                    "//begin temporary fix\r",
                    "configurateur.labelSeparator=\" \";\r",
                    "//end temporary fix\r",
                    "\r",
                    "try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){\r",
                    "var nouvChamp = Ext.create(donnees.cType, configurateur);\r",
                    "}\r",
                    "nouvChamp.config=Ext.clone(donnees.config);\r",
                    "\r",
                    "//begin temporary fix\r",
                    "if(nouvChamp.config.tooltip==\"help text\"){nouvChamp.config.tooltip=\"\";}\r",
                    "//end temporary fix\r",
                    "\r",
                    "nouvChamp.configFields=Ext.getStore(\"TypesChampsDataStore\").findRecord(\"id\",donnees.protoId).get(\"configFields\");\r",
                    "if (donnees.cType =='triggerfield'){ \r",
                    "var Ouvrir = Ext.clone(donnees.openWindow);\r",
                    "nouvChamp.onTriggerClick= function() {\r",
                    "    var fenetre = Ext.widget(Ouvrir);\r",
                    "    fenetre.showAt(screen.width/2-200, 100);\r",
                    "} ; \r",
                    "nouvChamp.openWindow =Ext.clone(donnees.openWindow);\r",
                    "}    \r",
                    "nouvChamp.anchor = '90%';\r",
                    "nouvChamp.protoId=donnees.protoId;\r",
                    "\r",
                    "\r",
                    "nouvChamp.style = '{float:left;}';\r",
                    "var enrobage =Ext.widget('ChampTC');\r",
                    "enrobage.add(nouvChamp);\r",
                    "enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "if (Ext.isEmpty(nouvChamp.config.tooltip)){\r",
                    "enrobage.getComponent('helpBouton').hidden=true;\r",
                    "}    \r",
                    "formulaireTC.add(enrobage);\r",
                    "\r",
                    "}\r",
                    "var tableauTaxoTC = Ext.getCmp('vocabulairesTypesContenusGrid');\r",
                    "tableauTaxoTC.getSelectionModel().deselectAll();\r",
                    "var maTaxo= record.get(\"vocabularies\");\r",
                    "var selectionR = [ ];\r",
                    "Ext.Array.forEach(maTaxo, function(someTaxoId){\r",
                    "selectionR.push(tableauTaxoTC.getStore().findRecord(\"id\", someTaxoId));\r",
                    "});\r",
                    "tableauTaxoTC.getSelectionModel().select(selectionR);\r",
                    "\r",
                    "\r",
                    "if ((record.get(\"dependant\")===false)&&(ACL.interfaceRights[\"read.ui.dependantTypes\"])) {\r",
                    "var tableauTCI = Ext.getCmp('TCImbriquesGrid');\r",
                    "tableauTCI.getSelectionModel().deselectAll();\r",
                    "var depTypes = record.get(\"dependantTypes\");\r",
                    "var selector=[];\r",
                    "Ext.Array.forEach(depTypes, function(someTypeId){\r",
                    "selector.push(tableauTCI.getStore().findRecord(\"id\", someTypeId));\r",
                    "});\r",
                    "tableauTCI.getSelectionModel().select(selector);\r",
                    "}\r",
                    "Ext.getCmp('champsEditionTC').doLayout();\r",
                    "\r",
                    "var metaBox = Ext.getCmp(\"adminFTDC\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "var values= record.getData();\r",
                    "values.creation= Ext.Date.format(values.createTime, Ext.Date.defaultFormat);\r",
                    "values.derniereModification= Ext.Date.format(values.lastUpdateTime, Ext.Date.defaultFormat);\r",
                    "metaBox.update(values);\r",
                    "metaBox.show();\r",
                    "if ((!ACL.interfaceRights[\"write.ui.contentTypes\"])||(record.get(\"readOnly\"))) {\r",
                    "Ext.Array.forEach(Ext.getCmp(\"TDCEditForm\").query(\"field\"), function(thing){thing.setReadOnly(true);});\r",
                    "Ext.getCmp(\"boutonSupprimerTypeContenu\").disable();\r",
                    "Ext.getCmp(\"boutonEnregistrerTypeContenu\").disable();\r",
                    "Ext.getCmp(\"AdminfTCImporter\").disable();\r",
                    "Ext.getCmp(\"TCfieldUp\").up().disable();\r",
                    "} else {\r",
                    "Ext.Array.forEach(Ext.getCmp(\"TDCEditForm\").query(\"field\"), function(thing){thing.setReadOnly(false);});\r",
                    "Ext.getCmp(\"boutonSupprimerTypeContenu\").enable();\r",
                    "Ext.getCmp(\"boutonEnregistrerTypeContenu\").enable();\r",
                    "Ext.getCmp(\"AdminfTCImporter\").enable();\r",
                    "Ext.getCmp(\"TCfieldUp\").up().enable();\r",
                    "}\r",
                    ""
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.grid.View",
                "designer|controlQuery": "#AdminfTypesGrid"
            },
            "designerId": "d5b57a48-78e7-4ae9-81e5-45b88a8b725e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "supprimeTypeContenu",
                "implHandler": [
                    "var cible = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'content-types/is-used',\r",
                    "        params: {\r",
                    "            id: cible.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var maskIsUsed=Ext.JSON.decode(response.responseText).used;\r",
                    "            if (maskIsUsed){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeIsUsedError);\r",
                    "            } else {\r",
                    "                var fenetre = Ext.widget('delConfirmZ');\r",
                    "                fenetre.show();\r",
                    "                Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "                    Ext.getCmp('AdminfTypesGridView').getStore().remove(cible);\r",
                    "                    Ext.getCmp('delConfirmZ').close();\r",
                    "                    Ext.Array.forEach(Ext.getCmp(\"adminFTDC\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.disable();});\r",
                    "                    Ext.getCmp(\"boutonSupprimerTypeContenu\").disable();\r",
                    "                    Ext.getCmp('champsEditionTC').removeAll();\r",
                    "                    Ext.getCmp('boiteConfigChampsTC').removeAll();\r",
                    "                    Ext.getCmp('tabPanTC').disable();\r",
                    "                    Ext.getCmp(\"TDCEditForm\").getForm().reset();\r",
                    "                    Ext.getCmp(\"adminFTDC\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();\r",
                    "\r",
                    "                }); \r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonSupprimerTypeContenu"
            },
            "designerId": "926fdbd9-4653-4556-88a3-f6ea0c9a755f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "enregistrerTypeContenus",
                "implHandler": [
                    "if (Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected() !== null){\r",
                    "    var fieldsR = Ext.getCmp('champsEditionTC').items.items;\r",
                    "    var champsR = [ ];\r",
                    "    for (u=0; u<fieldsR.length; u++) { \r",
                    "        var leChampR= fieldsR[u].getComponent(1);\r",
                    "        var nch ={\r",
                    "            cType: leChampR.xtype,\r",
                    "            config: leChampR.config,\r",
                    "            protoId:leChampR.protoId,\r",
                    "            openWindow:leChampR.openWindow\r",
                    "        };\r",
                    "        if (leChampR.xtype== 'treepicker') {\r",
                    "            nch.store=leChampR.getStore().storeId;\r",
                    "        }\r",
                    "        else if (leChampR.xtype== 'combobox') {\r",
                    "            var dones = leChampR.getStore().data.items;\r",
                    "            var donesR = [ ];\r",
                    "            for (i=0; i<dones.length; i++) {\r",
                    "                donesR.push({valeur: dones[i].data.valeur, nom: dones[i].data.nom });\r",
                    "            }\r",
                    "            nch.store = {\r",
                    "                fields: ['valeur', 'nom'],\r",
                    "                data: donesR\r",
                    "            };\r",
                    "        }\r",
                    "        champsR.push(nch);\r",
                    "    }\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'content-types/is-changeable',\r",
                    "        params: {\r",
                    "            fields:Ext.JSON.encode(champsR),\r",
                    "            id: Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected().get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var canModify = Ext.JSON.decode(response.responseText).modify;\r",
                    "            if (canModify==\"ok\"){\r",
                    "                var target = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected();\r",
                    "                target.beginEdit();\r",
                    "                target.set(Ext.getCmp(\"TDCEditForm\").getForm().getValues());\r",
                    "                target.set(\"champs\", champsR);\r",
                    "                var newVocabularies = Ext.getCmp('vocabulairesTypesContenusGrid').getSelectionModel().getSelection();\r",
                    "                target.set(\"vocabularies\", Ext.Array.pluck(Ext.Array.pluck(newVocabularies, \"data\"), \"id\"));\r",
                    "                if ((target.get(\"dependant\")===false)&&(ACL.interfaceRights[\"read.ui.dependantTypes\"])) {\r",
                    "                    var newDepTypes = Ext.getCmp('TCImbriquesGrid').getSelectionModel().getSelection();        \r",
                    "                    target.set(\"dependantTypes\", Ext.Array.pluck(Ext.Array.pluck(newDepTypes, \"data\"), \"id\"));\r",
                    "\r",
                    "                }\r",
                    "                target.endEdit();\r",
                    "            } else if (canModify==\"no\"){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeIncompatModifError);\r",
                    "            } else if (canModify==\"possible\"){\r",
                    "                Ext.Msg.confirm(Rubedo.RubedoAutomatedElementsLoc.warningTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeModifWarning ,function(anser){\r",
                    "                    if (anser==\"yes\"){\r",
                    "                        var target = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected();\r",
                    "                        target.beginEdit();\r",
                    "                        target.set(Ext.getCmp(\"TDCEditForm\").getForm().getValues());\r",
                    "                        target.set(\"champs\", champsR);\r",
                    "                        var newVocabularies = Ext.getCmp('vocabulairesTypesContenusGrid').getSelectionModel().getSelection();\r",
                    "                        target.set(\"vocabularies\", Ext.Array.pluck(Ext.Array.pluck(newVocabularies, \"data\"), \"id\"));\r",
                    "                        if ((target.get(\"dependant\")===false)&&(ACL.interfaceRights[\"read.ui.dependantTypes\"])) {\r",
                    "                            var newDepTypes = Ext.getCmp('TCImbriquesGrid').getSelectionModel().getSelection();        \r",
                    "                            target.set(\"dependantTypes\", Ext.Array.pluck(Ext.Array.pluck(newDepTypes, \"data\"), \"id\"));\r",
                    "\r",
                    "                        }\r",
                    "                        target.endEdit();\r",
                    "                    }\r",
                    "                }\r",
                    "\r",
                    "            );}}});\r",
                    "\r",
                    "        }"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonEnregistrerTypeContenu"
            },
            "designerId": "a61a2f23-93e0-4ad3-9987-1602c0afced2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "fenetreNTC",
                "implHandler": [
                    "var fenetre = Ext.widget('nouveauTypeContenu');\r",
                    "Ext.getCmp(\"ViewportPrimaire\").add(fenetre);\r",
                    "fenetre.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonNouveauTypeContenu"
            },
            "designerId": "13f39238-b017-41fb-9868-d8f120518348"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "creerNTC",
                "implHandler": [
                    "if (Ext.getCmp('champCreerTC').isValid()) {\r",
                    "\r",
                    "    var nType = Ext.getCmp('champCreerTC').getValue();\r",
                    "    var nouvType = Ext.create('model.typesContenusDataModel', {\r",
                    "        type: nType,\r",
                    "        dependant: Ext.getCmp('champTCIsDep').getValue(),\r",
                    "        champs: [ ],\r",
                    "        vocabularies:[\"navigation\"],\r",
                    "        dependantTypes:[ ]\r",
                    "\r",
                    "\r",
                    "    });\r",
                    "    this.getTypesContenusDataJsonStore().add(nouvType);\r",
                    "\r",
                    "    Ext.getCmp('nouveauTypeContenuFenetre').close();\r",
                    "    Ext.getCmp('AdminfTypesGridView').getSelectionModel().select(nouvType);\r",
                    "    this.selectTC(Ext.getCmp('AdminfTypesGridView'), nouvType);\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonCreerTC"
            },
            "designerId": "80a1e005-fdd4-4af3-82fb-a9229417cce3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "miseAPlatTaxo",
                "designer|params": [
                    "cible",
                    "resultat"
                ],
                "implHandler": [
                    "var e=0;\r",
                    "for (e=0; e<cible.length; e++) {\r",
                    "    resultat.push({terme: cible[e].text});\r",
                    "    this.miseAPlatTaxo(cible[e].children, resultat);\r",
                    "}"
                ]
            },
            "designerId": "b01c65a8-deab-4097-8985-5e8fc1acca30"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "repliqueChamp",
                "implHandler": [
                    "var nouvChamp=button.up().getComponent(1).cloneConfig();\r",
                    "nouvChamp.anchor = '90%';\r",
                    "nouvChamp.style = '{float:left;}';\r",
                    "var enrobage =Ext.widget('ChampTC');\r",
                    "enrobage.add(nouvChamp);\r",
                    "enrobage.getComponent('helpBouton').setTooltip(Rubedo.RubedoAutomatedElementsLoc.duplicateFieldText+\" \"+button.up().getComponent(1).fieldLabel);\r",
                    "var supprimeur = Ext.widget('button', {iconCls: 'close', margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.removeText, itemId: 'boutonEffaceurChamps'});\r",
                    "supprimeur.on('click', function(){\r",
                    "    button.valeursM--;\r",
                    "    button.up().up().remove(supprimeur.up());\r",
                    "});\r",
                    "enrobage.add(supprimeur);\r",
                    "button.up().up().insert(button.up().up().items.indexOf(button.up())+button.valeursM, enrobage);\r",
                    "button.valeursM++;"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "[itemId= 'boutonReplicateurChamps']"
            },
            "designerId": "6c7dc62c-8c47-4fdb-a92c-52250f3464b5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "TCfieldDelete",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    field.up().destroy();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#TCfieldDeleter"
            },
            "designerId": "f53cb645-4e7d-4623-87f9-123e8288a1fa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "TCfieldMoveUp",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    if (pos > 0) {\r",
                    "        field.up().up().move(pos,pos-1);\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#TCfieldUp"
            },
            "designerId": "6b32c09e-8580-4589-8ae1-6487396f7d72"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "TCfieldMoveDown",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('champTCIdField').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    field.up().up().move(pos,pos+1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#TCfieldDown"
            },
            "designerId": "84d48f71-a70a-422b-92a2-5af45464a790"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createThroughDblClick",
                "implHandler": [
                    "Ext.getStore(\"AddMultiFieldStore\").removeAll();\r",
                    "this.creerChampTC(Ext.getCmp(\"boutonAjouterChampTC\"));"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#ChampTCSelectGrid"
            },
            "designerId": "165b0cf1-e3f8-4a55-9506-56f5f6d8c60d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "copyTC",
                "implHandler": [
                    "var rec = Ext.clone(Ext.getCmp(\"AdminfTypesGrid\").getSelectionModel().getLastSelected().data);\r",
                    "delete(rec.id);\r",
                    "rec.type=rec.type+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i');\r",
                    "Ext.getCmp(\"AdminfTypesGrid\").getStore().add(rec);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonCopierTC"
            },
            "designerId": "217b6cb9-f771-406e-87cc-5c8d71d1ffaf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridpanelEdit",
                "implHandler": [
                    "Ext.getStore(\"TypesContenusNDepDataJson\").load();"
                ],
                "name": "edit",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#AdminfTypesGrid"
            },
            "designerId": "cee18c78-aca5-49d7-89a4-764138838ca9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAdminfTypesGridRender",
                "implHandler": [
                    "Ext.getStore(\"TypesContenusDepDataJson\").load();\r",
                    "Ext.getStore(\"TaxonomyForCT\").load();"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#AdminfTypesGrid"
            },
            "designerId": "e9ec09d3-2d5c-48ea-ba05-b5a7cdc8c067"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAdminfTypesGridDestroy",
                "implHandler": [
                    "Ext.getStore(\"TypesContenusDepDataJson\").removeAll();\r",
                    "Ext.getStore(\"TaxonomyForCT\").removeAll();"
                ],
                "name": "destroy",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#AdminfTypesGrid"
            },
            "designerId": "94a0398d-b1eb-4d7b-905e-37ab1698b6fd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "nameValidator",
                "designer|params": [
                    "name"
                ],
                "implHandler": [
                    "var usedNames=[\"text\",\"summary\"];\r",
                    "Ext.Array.forEach(Ext.getCmp('champsEditionTC').query(\"field\"), function(field){\r",
                    "    if ((field.getId()!=Ext.getCmp(Ext.getCmp('champTCIdField').getValue()).getId())&&(field.up().isXType(\"ChampTC\"))){\r",
                    "        Ext.Array.include(usedNames,field.name);\r",
                    "    }\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(Rubedo.RubedoAutomatedElementsLoc.fieldNameAlreadyUsedError);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "designerId": "3888bb3c-c2d1-483e-9b09-d722f936ceb1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "nameAvailable",
                "designer|params": [
                    "name"
                ],
                "implHandler": [
                    "var usedNames=[\"text\",\"summary\"];\r",
                    "Ext.Array.forEach(Ext.getCmp('champsEditionTC').query(\"field\"), function(field){\r",
                    "    Ext.Array.include(usedNames,field.name);\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(false);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "designerId": "d157a9ee-580e-4b98-beef-42abf6f6da50"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onPurgeCTContentsBtnClick",
                "implHandler": [
                    "var fenetre = Ext.widget('delConfirmZ');\r",
                    "fenetre.show();\r",
                    "Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "    var target = Ext.getCmp('AdminfTypesGridView').getSelectionModel().getLastSelected();\r",
                    "    button.setLoading(true);\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'contents/delete-by-content-type-id',\r",
                    "        method:\"POST\",\r",
                    "        params: {\r",
                    "            \"type-id\": target.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            button.setLoading(false);\r",
                    "\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, Rubedo.RubedoAutomatedElementsLoc.contentTypeHasBeenEmptiedText);\r",
                    "        },\r",
                    "        failure: function(response) {\r",
                    "            button.setLoading(false);\r",
                    "            var message = Rubedo.RubedoAutomatedElementsLoc.contentsDeleteError;\r",
                    "            try {\r",
                    "                var answer = Ext.JSON.decode(response.responseText);\r",
                    "                if (answer.message){\r",
                    "                    message=answer.message;\r",
                    "                }\r",
                    "            } catch(err){}\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, message);\r",
                    "            }\r",
                    "        });\r",
                    "        Ext.getCmp('delConfirmZ').close();\r",
                    "\r",
                    "    }); \r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#purgeCTContentsBtn"
            },
            "designerId": "7d05bac5-df93-4d07-9429-3c9665f7a5c3"
        }
    ]
}