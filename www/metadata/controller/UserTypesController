{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "UserTypesController",
        "designer|userAlias": "UserTypesController"
    },
    "designerId": "00775bc6-fbb7-4f53-bb87-669f9cfacbf4",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewUTBtnClick",
                "implHandler": [
                    "Ext.widget(\"newUTWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newUTBtn"
            },
            "designerId": "a83c9606-ae6c-4ee2-b356-afa0d480c450"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCreateNewUTBtnClick",
                "implHandler": [
                    "if (button.up().getForm().isValid()) {\r",
                    "    var newMT=Ext.create(\"Rubedo.model.userType\",button.up().getForm().getValues());\r",
                    "    newMT.set(\"vocabularies\", [ ]);\r",
                    "    newMT.set(\"fields\", [ ]);\r",
                    "    newMT.set(\"signUpType\",\"none\");\r",
                    "    newMT.set(\"defaultGroup\",Ext.getStore(\"GroupsComboStore2\").findRecord(\"name\",\"public\").get(\"id\"));\r",
                    "    Ext.getStore(\"UserTypes\").add(newMT);\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#createNewUTBtn"
            },
            "designerId": "f9f2b868-aab5-4986-9b59-c5f8293d3e44"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMainUTGridSelectionChange",
                "implHandler": [
                    "this.resetInterfaceSelect(record);"
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#mainUTGrid"
            },
            "designerId": "d72b1933-cfa8-4eb4-84d8-cacdccdf8f95"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetInterfaceNoSelect",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp(\"UserTypesInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.disable();});\r",
                    "Ext.getCmp(\"removeUTBtn\").disable();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"User types \", iconCls:\"user\",localiserId:\"userTypesLaunchBtn\"}));\r",
                    "Ext.getCmp('UTeditFields').removeAll();\r",
                    "Ext.getCmp(\"UTfieldUp\").disable();\r",
                    "Ext.getCmp(\"UTfieldDown\").disable();\r",
                    "Ext.getCmp(\"UTfieldDeleter\").disable();\r",
                    "Ext.getCmp('UTFieldId').setValue();\r",
                    "Ext.getCmp(\"UTFieldConfigsBox\").removeAll();\r",
                    "Ext.getCmp(\"UTcenterZone\").disable();\r",
                    "Ext.getCmp(\"userTypesEditForm\").getForm().reset();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();"
                ]
            },
            "designerId": "44ca7d65-b178-41f2-94cd-b0a084501961"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetInterfaceSelect",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "var me =this;\r",
                    "\r",
                    "Ext.Array.forEach(Ext.getCmp(\"UserTypesInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.enable();});\r",
                    "Ext.getCmp(\"removeUTBtn\").enable();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"User types \", iconCls:\"user\",localiserId:\"userTypesLaunchBtn\"}));\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: record.get(\"type\"), iconCls:\"user\"}));\r",
                    "Ext.getCmp(\"UTcenterZone\").enable();\r",
                    "Ext.getCmp(\"UTfieldUp\").disable();\r",
                    "Ext.getCmp(\"UTfieldDown\").disable();\r",
                    "Ext.getCmp('UTFieldId').setValue();\r",
                    "Ext.getCmp(\"userTypesEditForm\").getForm().setValues(record.getData());\r",
                    "Ext.getCmp(\"UTfieldDeleter\").disable();\r",
                    "Ext.getCmp(\"UTFieldConfigsBox\").removeAll();\r",
                    "var metaBox = Ext.getCmp(\"UserTypesInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "var values= record.getData();\r",
                    "values.creation= Ext.Date.format(values.createTime, Ext.Date.defaultFormat);\r",
                    "values.derniereModification= Ext.Date.format(values.lastUpdateTime, Ext.Date.defaultFormat);\r",
                    "metaBox.update(values);\r",
                    "metaBox.show();\r",
                    "var selector= [];\r",
                    "Ext.Array.forEach(record.get(\"vocabularies\"),function(vocabId){\r",
                    "    if (!Ext.isEmpty(Ext.getCmp(\"vocabulariesUTGrid\").getStore().findRecord(\"id\", vocabId))){\r",
                    "        selector.push(Ext.getCmp(\"vocabulariesUTGrid\").getStore().findRecord(\"id\", vocabId));\r",
                    "    }\r",
                    "});\r",
                    "Ext.getCmp(\"vocabulariesUTGrid\").getSelectionModel().select(selector);\r",
                    "\r",
                    "\r",
                    "var targetZone=Ext.getCmp('UTeditFields');\r",
                    "Ext.suspendLayouts();\r",
                    "targetZone.removeAll();\r",
                    "Ext.Array.forEach(record.get(\"fields\"),function(field){\r",
                    "    me.renderUTField(field, targetZone);\r",
                    "});\r",
                    "Ext.resumeLayouts();\r",
                    "Ext.getCmp(\"UTeditFields\").doLayout();\r",
                    "var task = new Ext.util.DelayedTask(function(){\r",
                    "    Ext.getCmp(\"UTeditFields\").doLayout();\r",
                    "});\r",
                    "task.delay(200);\r",
                    "if ((!ACL.interfaceRights[\"write.ui.userTypes\"])||(record.get(\"readOnly\"))) {\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"userTypesEditForm\").query(\"field\"), function(thing){thing.setReadOnly(true);});\r",
                    "    Ext.getCmp(\"removeUTBtn\").disable();\r",
                    "    Ext.getCmp(\"saveUTBtn\").disable();\r",
                    "    Ext.getCmp(\"UTImportBtn\").disable();\r",
                    "    Ext.getCmp(\"UTfieldDeleter\").up().disable();\r",
                    "} else {\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"userTypesEditForm\").query(\"field\"), function(thing){thing.setReadOnly(false);});\r",
                    "    Ext.getCmp(\"removeUTBtn\").enable();\r",
                    "    Ext.getCmp(\"saveUTBtn\").enable();\r",
                    "    Ext.getCmp(\"UTImportBtn\").enable();\r",
                    "    Ext.getCmp(\"UTfieldDeleter\").up().enable();\r",
                    "}\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "193c7bb7-40ca-4517-9448-c17bcd74a028"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRemoveUTBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var cible = Ext.getCmp('mainUTGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'user-types/is-used',\r",
                    "        method:\"GET\",\r",
                    "        params: {\r",
                    "            id: cible.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var maskIsUsed=Ext.JSON.decode(response.responseText).used;\r",
                    "            if (maskIsUsed){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.userTypeIsUsedError);\r",
                    "            } else {\r",
                    "                var fenetre = Ext.widget('delConfirmZ');\r",
                    "                fenetre.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisUserTypeText;\r",
                    "                fenetre.show();\r",
                    "                Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "                    Ext.getCmp('mainUTGrid').getStore().remove(cible);\r",
                    "                    Ext.getCmp('delConfirmZ').close();\r",
                    "                    me.resetInterfaceNoSelect();\r",
                    "                }); \r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#removeUTBtn"
            },
            "designerId": "cd7eeb60-934b-4766-ab91-52ae764c6039"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSaveUTBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var record=Ext.getCmp(\"mainUTGrid\").getSelectionModel().getLastSelected();\r",
                    "var form = Ext.getCmp(\"userTypesEditForm\").getForm();\r",
                    "if (form.isValid()){\r",
                    "    record.beginEdit();\r",
                    "    record.set(form.getValues());\r",
                    "    var newVocabularies=Ext.Array.pluck(Ext.Array.pluck(Ext.getCmp(\"vocabulariesUTGrid\").getSelectionModel().getSelection(), \"data\"), \"id\");\r",
                    "    record.set(\"vocabularies\", newVocabularies);\r",
                    "    record.set(\"fields\", me.recordFields(Ext.getCmp('UTeditFields')));\r",
                    "    record.endEdit();\r",
                    "} else {\r",
                    "    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.invalidRightsPropertiesError);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#saveUTBtn"
            },
            "designerId": "28a303db-df72-4ad3-a116-ffd344ce9d06"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCopyUTBtnClick",
                "implHandler": [
                    "var rec = Ext.clone(Ext.getCmp(\"mainUTGrid\").getSelectionModel().getLastSelected().data);\r",
                    "delete(rec.id);\r",
                    "rec.type=rec.type+\" - Copy \"+Ext.Date.format(new Date(), 'j F, Y, G:i');\r",
                    "rec.readOnly=false;\r",
                    "delete(rec.version);\r",
                    "delete(rec.createTime);\r",
                    "delete(rec.lastUpdateTime);\r",
                    "Ext.getCmp(\"mainUTGrid\").getStore().add(rec);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#copyUTBtn"
            },
            "designerId": "0df87471-60c0-435e-b6c8-234ab4da0a8a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewUTFieldBtnClick",
                "implHandler": [
                    "Ext.widget(\"UTFieldAddWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newUTFieldBtn"
            },
            "designerId": "38e50a5e-8e4a-44d1-a100-092724cd1df1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTFieldInsertBtnClick",
                "implHandler": [
                    "var proto=Ext.clone(Ext.getCmp(\"UTFieldSelectGrid\").getSelectionModel().getLastSelected().getData());\r",
                    "proto.protoId=proto.id;\r",
                    "this.renderUTField(proto, Ext.getCmp('UTeditFields'));\r",
                    "button.up().up().close();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#UTFieldInsertBtn"
            },
            "designerId": "7f80a230-495a-41dd-8891-a9ea77aa7243"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderUTField",
                "designer|params": [
                    "protoData",
                    "renderTarget",
                    "isUserCU"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var configurator=protoData.config;\r",
                    "if (!Ext.isEmpty(configurator.i18n)){\r",
                    "    var BOLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "    if (!Ext.isEmpty(configurator.i18n[BOLanguage])){\r",
                    "        if (!Ext.isEmpty(configurator.i18n[BOLanguage].fieldLabel)){\r",
                    "            configurator.fieldLabel=configurator.i18n[BOLanguage].fieldLabel;\r",
                    "        }\r",
                    "        if (!Ext.isEmpty(configurator.i18n[BOLanguage].tooltip)){\r",
                    "            configurator.tooltip=configurator.i18n[BOLanguage].tooltip;\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "if (protoData.cType == 'combobox') {\r",
                    "    var myStore=  Ext.create('Ext.data.Store', Ext.clone(protoData.config.store));\r",
                    "    configurator.store = myStore;\r",
                    "}\r",
                    "var newField= Ext.create(protoData.cType, configurator);\r",
                    "newField.config=protoData.config;\r",
                    "newField.protoId=protoData.protoId;\r",
                    "newField.configFields=Ext.getStore(\"UTFieldTypes\").findRecord(\"id\", protoData.protoId).get(\"configFields\");\r",
                    "newField.cType=protoData.cType;\r",
                    "newField.anchor = '90%';\r",
                    "newField.style = '{float:left;}';\r",
                    "var casing =Ext.widget('ChampTC');\r",
                    "casing.add(newField);\r",
                    "casing.getComponent('helpBouton').setTooltip(configurator.tooltip);\r",
                    "if (Ext.isEmpty(configurator.tooltip)){\r",
                    "    casing.getComponent('helpBouton').hidden=true;\r",
                    "} \r",
                    "if (isUserCU){\r",
                    "} else {\r",
                    "    if (!me.nameAvailable(newField.name)) {\r",
                    "        var duplic = 1;\r",
                    "        while (!me.nameAvailable(newField.name+duplic)){\r",
                    "            duplic++;\r",
                    "        }\r",
                    "        newField.name=newField.name+duplic;\r",
                    "        newField.config.name=newField.config.name+duplic;\r",
                    "    \r",
                    "    }\r",
                    "}\r",
                    "renderTarget.add(casing);"
                ]
            },
            "designerId": "4247734a-a354-4de2-82d1-3d0c3bd2b4e9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "nameAvailable",
                "designer|params": [
                    "name"
                ],
                "implHandler": [
                    "var usedNames=[\"email\",\"login\",\"password\"]; //ADD OTHER ONES\r",
                    "Ext.Array.forEach(Ext.getCmp('UTeditFields').query(\"field\"), function(field){\r",
                    "    Ext.Array.include(usedNames,field.name);\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(false);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "designerId": "cd02e504-e4c5-4dec-9ecb-a16e9b96b5b3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "recordFields",
                "designer|params": [
                    "target"
                ],
                "implHandler": [
                    "var result = [ ];\r",
                    "Ext.Array.forEach(target.query(\"ChampTC\"), function(ctc){\r",
                    "    var field=ctc.getComponent(1);\r",
                    "    var newField = {\r",
                    "        cType:field.cType,\r",
                    "        config:field.config,\r",
                    "        protoId:field.protoId\r",
                    "    };\r",
                    "    if (field.isXType('combobox')) {\r",
                    "        var dones = field.getStore().data.items;\r",
                    "        var donesR = [ ];\r",
                    "        for (i=0; i<dones.length; i++) {\r",
                    "            donesR.push({valeur: dones[i].data.valeur, nom: dones[i].data.nom });\r",
                    "        }\r",
                    "        newField.config.store = {\r",
                    "            fields: ['valeur', 'nom'],\r",
                    "            data: donesR\r",
                    "        };\r",
                    "    }\r",
                    "    result.push(newField);\r",
                    "});\r",
                    "return(result);"
                ]
            },
            "designerId": "754c5add-88fa-4c75-82cf-2f7000f2ba2b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "nameValidator",
                "designer|params": [
                    "name"
                ],
                "implHandler": [
                    "var usedNames=[\"email\",\"login\",\"password\"]; //ADD OTHER ONES\r",
                    "Ext.Array.forEach(Ext.getCmp('UTeditFields').query(\"field\"), function(field){\r",
                    "    if (field.getId()!=Ext.getCmp(Ext.getCmp('UTFieldId').getValue()).getId()){\r",
                    "        Ext.Array.include(usedNames,field.name);\r",
                    "    }\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(Rubedo.RubedoAutomatedElementsLoc.fieldNameAlreadyUsedError);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "designerId": "cae5ef98-df00-4378-94f1-8d7c9ebc6dc1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectionEvents",
                "implHandler": [
                    "var usedNames=[\"email\",\"login\",\"password\"]; //ADD OTHER ONES\r",
                    "var me=this;\r",
                    "var TCfield=component.getComponent(1);\r",
                    "TCfield.getEl().on('click', function() {\r",
                    "    Ext.getCmp(\"UTfieldUp\").enable();\r",
                    "    Ext.getCmp(\"UTfieldDown\").enable();\r",
                    "    Ext.getCmp(\"UTfieldDeleter\").enable();   \r",
                    "    if (Ext.getCmp('UTFieldId').getValue() != TCfield.id) {\r",
                    "        if (Ext.isDefined(Ext.getCmp(Ext.getCmp('UTFieldId').getValue()))){    \r",
                    "            Ext.getCmp(Ext.getCmp('UTFieldId').getValue()).getEl().applyStyles('color:#000000');\r",
                    "            var companion =Ext.getCmp(Ext.getCmp('UTFieldId').getValue()).up().getComponent(2);\r",
                    "            if (Ext.isDefined(companion)) {\r",
                    "                companion.getEl().applyStyles('color:#000000');\r",
                    "            }\r",
                    "        }\r",
                    "        Ext.getCmp('UTFieldId').setValue(TCfield.id);\r",
                    "        if ((TCfield.isXType(\"ImagePickerField\"))||(TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))) {\r",
                    "            TCfield.up().getComponent(2).getEl().frame(MyPrefData.themeColor);\r",
                    "            TCfield.up().getComponent(2).getEl().applyStyles('color:'+MyPrefData.themeColor);\r",
                    "        } else {\r",
                    "            this.frame(MyPrefData.themeColor);\r",
                    "            this.applyStyles('color:'+MyPrefData.themeColor);\r",
                    "        }\r",
                    "        var mesChamps = TCfield.configFields;\r",
                    "        var boiteParam = Ext.getCmp('UTFieldConfigsBox');\r",
                    "        boiteParam.removeAll();\r",
                    "        for(t=0; t<mesChamps.length; t++) {\r",
                    "            if (mesChamps[t].type =='Ext.form.field.ComboBox') {\r",
                    "                var monStore=  Ext.create('Ext.data.Store', mesChamps[t].store);\r",
                    "                mesChamps[t].config.store= monStore;\r",
                    "            }\r",
                    "            var nouvChamp= Ext.create(mesChamps[t].type, mesChamps[t].config);\r",
                    "            nouvChamp.labelSeparator= ' ';\r",
                    "            nouvChamp.anchor='100%';\r",
                    "            if (nouvChamp.name==\"name\"){\r",
                    "                nouvChamp.validator=me.nameValidator;\r",
                    "            }\r",
                    "            nouvChamp.setValue(TCfield.config[nouvChamp.name]);\r",
                    "            if ((mesChamps[t].type =='Rubedo.view.CTMTField')||(mesChamps[t].type =='Rubedo.view.CTCField')){\r",
                    "\r",
                    "                var properMT =Ext.clone(TCfield.config[nouvChamp.name]);\r",
                    "                nouvChamp.getStore().targetField=nouvChamp.id;\r",
                    "                nouvChamp.getStore().addListener(\"load\", function(){  \r",
                    "                    Ext.getCmp(this.targetField).setValue(properMT);\r",
                    "                },nouvChamp.getStore(),{single:true});\r",
                    "                }\r",
                    "            if ((nouvChamp.name==\"fieldLabel\")||(nouvChamp.name==\"tooltip\")){\r",
                    "                nouvChamp.hide();\r",
                    "                var replacerField=Ext.widget('genericLocTextField',{\r",
                    "                    fieldLabel:nouvChamp.fieldLabel,\r",
                    "                    anchor:\"100%\",\r",
                    "                    targetEntity:TCfield.getId(),\r",
                    "                    targetEntityProp:nouvChamp.name,\r",
                    "                    CTMode:true,\r",
                    "                    companionFieldId:nouvChamp.getId(),\r",
                    "                    initialLanguage:Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\")\r",
                    "                });\r",
                    "                boiteParam.add(replacerField);\r",
                    "            }\r",
                    "            if ((nouvChamp.name==\"localizable\")){\r",
                    "                nouvChamp.hide();\r",
                    "            }\r",
                    "            nouvChamp.setReadOnly((!ACL.interfaceRights[\"write.ui.userTypes\"])||(Ext.getCmp(\"mainUTGrid\").getSelectionModel().getLastSelected().get(\"readOnly\")));\r",
                    "            nouvChamp.on('change', function (thing) {\r",
                    "                if (thing.isValid()){\r",
                    "                        if(this.isXType(\"timefield\")){\r",
                    "                            TCfield.config[this.name]=Ext.Date.format(this.getValue(),\"H:i\");\r",
                    "                        } else if(this.isXType(\"datefield\")){\r",
                    "                            TCfield.config[this.name]=Ext.Date.format(this.getValue(),\"U\");\r",
                    "                        } else { \r",
                    "                            TCfield.config[this.name]= this.getValue();\r",
                    "                        }\r",
                    "                        if ((this.name=='name')&&((TCfield.isXType(\"radiogroup\"))||(TCfield.isXType(\"checkboxgroup\")))){\r",
                    "                            var ntcrVal=this.getValue();\r",
                    "                            Ext.Array.forEach(TCfield.config.items, function(ntch){ntch.name=ntcrVal;});\r",
                    "                        }\r",
                    "                        if (this.name=='fieldLabel') {\r",
                    "\r",
                    "                            if (TCfield.isXType(\"ImagePickerField\")) {\r",
                    "                                TCfield.up().getComponent(2).getComponent(0).setText(this.getValue());\r",
                    "                            } else if ((TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))){\r",
                    "                                TCfield.up().getComponent(2).setFieldLabel(this.getValue());\r",
                    "                            } else {\r",
                    "                                TCfield.setFieldLabel(this.getValue());\r",
                    "                            }\r",
                    "                        }\r",
                    "                        else if (this.name=='value') {\r",
                    "\r",
                    "                            TCfield.setValue(this.getValue());\r",
                    "\r",
                    "                        }\r",
                    "                        else if (this.name=='allowBlank') {\r",
                    "                            var currentOne=TCfield.config.fieldLabel;\r",
                    "                            if (this.getValue()) {\r",
                    "                                currentOne=currentOne.replace(\" *\",\"\");\r",
                    "                            } else {\r",
                    "                                currentOne=currentOne+\" *\";\r",
                    "                            } \r",
                    "                            TCfield.config.fieldLabel=currentOne;\r",
                    "                            if (TCfield.isXType(\"ImagePickerField\")) {\r",
                    "                                TCfield.up().getComponent(2).getComponent(0).setText(currentOne+\" \");\r",
                    "                            } else if ((TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))){\r",
                    "                                TCfield.up().getComponent(2).setFieldLabel(currentOne);\r",
                    "                            } else {\r",
                    "                                TCfield.setFieldLabel(currentOne);\r",
                    "                            }\r",
                    "                        }\r",
                    "                        else if (this.name=='editable') {\r",
                    "                            TCfield.setEditable(this.getValue());\r",
                    "                            TCfield.reset();\r",
                    "                        }\r",
                    "                        else if (this.name=='multiSelect') {\r",
                    "                            TCfield.multiSelect = this.getValue();\r",
                    "                            TCfield.reset();\r",
                    "                        }\r",
                    "                        else if (this.name=='tooltip') {\r",
                    "                            component.getComponent('helpBouton').setTooltip(this.getValue());\r",
                    "                            if (Ext.isEmpty(this.getValue())){\r",
                    "                                component.getComponent('helpBouton').hide();\r",
                    "                            } else {\r",
                    "                                component.getComponent('helpBouton').show();\r",
                    "                            }\r",
                    "                        }\r",
                    "                        else if (this.name=='regex') {\r",
                    "                            TCfield.regex = new RegExp(this.getValue());\r",
                    "                        }\r",
                    "                        else {\r",
                    "                            TCfield[this.name]= this.getValue();\r",
                    "                        }\r",
                    "                        TCfield.validate();\r",
                    "                    }});\r",
                    "                boiteParam.add(nouvChamp); \r",
                    "\r",
                    "            }\r",
                    "            if ((TCfield.isXType('combobox'))&&(!(TCfield.isXType('timefield')))) {\r",
                    "                    var optionsLC = Ext.widget('optionsLCGrid', {store : TCfield.getStore()});\r",
                    "                    boiteParam.add(optionsLC); \r",
                    "\r",
                    "                }\r",
                    "                if ((TCfield.isXType(\"radiogroup\"))||(TCfield.isXType(\"checkboxgroup\"))) {\r",
                    "                    var itemsConfigurator=Ext.widget(\"specialTCFieldItemsConfigurator\");\r",
                    "                    itemsConfigurator.targetedId=TCfield.id;\r",
                    "                    boiteParam.add(itemsConfigurator); \r",
                    "                }\r",
                    "        }\r",
                    "    });"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "ChampTC",
                "designer|controlQuery": "#UTeditFields ChampTC"
            },
            "designerId": "ed064f55-1c77-48cd-b61f-1f5f6722bd8c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTfieldUpClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('UTFieldId').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    if (pos > 0) {\r",
                    "        field.up().up().move(pos,pos-1);\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#UTfieldUp"
            },
            "designerId": "f830070c-516d-4ace-bccf-444d2c267028"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTfieldDownClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('UTFieldId').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    field.up().up().move(pos,pos+1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#UTfieldDown"
            },
            "designerId": "acc3c7d0-2701-4746-bf5a-983cdc34c74a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTfieldDeleterClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('UTFieldId').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    field.up().destroy();\r",
                    "    Ext.getCmp(\"UTfieldUp\").disable();\r",
                    "    Ext.getCmp(\"UTfieldDown\").disable();\r",
                    "    Ext.getCmp('UTFieldId').setValue();\r",
                    "    Ext.getCmp(\"UTfieldDeleter\").disable();\r",
                    "    Ext.getCmp(\"UTFieldConfigsBox\").removeAll();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#UTfieldDeleter"
            },
            "designerId": "6e9e40c5-d0c6-4932-b8ff-7444982c3dc3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTFieldSelectGridItemDblClick",
                "implHandler": [
                    "this.onUTFieldInsertBtnClick(Ext.getCmp(\"UTFieldInsertBtn\"));"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#UTFieldSelectGrid"
            },
            "designerId": "66c6f694-ec9e-487c-b5ad-5e2e3c5b30c8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUsersInterfaceTypeGridSelectionChange",
                "implHandler": [
                    "if (Ext.isEmpty(selected)){\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"UsersInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.disable();});\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").clearFilter(true);\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").removeAll();\r",
                    "    Ext.getCmp(\"addUserBtn\").disable();\r",
                    "} else {\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"UsersInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.enable();});\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").clearFilter(true);\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").filter(\"type\",selected[0].get(\"id\"));\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").loadPage(1);\r",
                    "    Ext.getCmp(\"addUserBtn\").enable();\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#usersInterfaceTypeGrid"
            },
            "designerId": "93a955e7-c37d-4966-a9ad-5d76a6251241"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUsersInterfaceCenterGridSelectionChange",
                "implHandler": [
                    "Ext.getCmp(\"editUserBtn\").disable();\r",
                    "Ext.getCmp(\"removeUserBtn\").disable();\r",
                    "if (Ext.isEmpty(selected)){\r",
                    "} else if (selected.length==1) {\r",
                    "    Ext.getCmp(\"editUserBtn\").enable();\r",
                    "    Ext.getCmp(\"removeUserBtn\").enable();\r",
                    "} else {\r",
                    "    Ext.getCmp(\"removeUserBtn\").enable();\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#usersInterfaceCenterGrid"
            },
            "designerId": "6f9178e0-843e-41c2-8739-03e3681d313a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "fireUserCreate",
                "designer|params": [
                    "userType"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var myEditor=Ext.widget(\"UserCreateUpdateWindow\", {title:\"New user \"+userType.get(\"type\")});\r",
                    "myEditor.show();\r",
                    "var targetZone=Ext.getCmp(\"userCUFields\");\r",
                    "Ext.Array.forEach(userType.get(\"fields\"),function(field){\r",
                    "    me.renderUTField(field, targetZone, true);\r",
                    "});\r",
                    "me.renderTaxoFields(userType);\r",
                    "Ext.getCmp(\"userCUSaveBtn\").on(\"click\", function(){\r",
                    "\tme.createUser(userType);\r",
                    "});"
                ]
            },
            "designerId": "a107761e-9b77-479c-8df7-3c04ace6e7a0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddUserBtnClick",
                "implHandler": [
                    "var myType=Ext.getCmp(\"usersInterfaceTypeGrid\").getSelectionModel().getLastSelected();\r",
                    "this.fireUserCreate(myType);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addUserBtn"
            },
            "designerId": "f52b2629-185a-4bad-b4ea-c671ed0ba0ff"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderTaxoFields",
                "designer|params": [
                    "DAMType",
                    "useSep"
                ],
                "implHandler": [
                    "var formTaxoTC =  Ext.getCmp('userCUTaxonomy');\r",
                    "var lesTaxo = DAMType.get(\"vocabularies\");\r",
                    "if (Ext.isEmpty(lesTaxo)) {\r",
                    "    //formTaxoTC.hide();\r",
                    "} else {\r",
                    "    var i=0;\r",
                    "    for (i=0; i<lesTaxo.length; i++) {\r",
                    "        if (useSep){\r",
                    "            var leVocab = Ext.getStore('TaxonomyForDam2').findRecord('id', lesTaxo[i]);\r",
                    "        } else {\r",
                    "            var leVocab = Ext.getStore('TaxonomyForU').findRecord('id', lesTaxo[i]);\r",
                    "        }\r",
                    "        if (!Ext.isEmpty(leVocab)){\r",
                    "            if (leVocab.get(\"inputAsTree\")){\r",
                    "                var storeT = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                    model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                    remoteFilter:\"true\",\r",
                    "                    proxy: {\r",
                    "                        type: 'ajax',\r",
                    "                        api: {\r",
                    "                            read: 'taxonomy-terms/tree'\r",
                    "                        },\r",
                    "                        reader: {\r",
                    "                            type: 'json',\r",
                    "                            messageProperty: 'message'\r",
                    "                        },\r",
                    "                        encodeFilters: function(filters) {\r",
                    "                            var min = [],\r",
                    "                                length = filters.length,\r",
                    "                                i = 0;\r",
                    "\r",
                    "                            for (; i < length; i++) {\r",
                    "                                min[i] = {\r",
                    "                                    property: filters[i].property,\r",
                    "                                    value   : filters[i].value\r",
                    "                                };\r",
                    "                                if (filters[i].type) {\r",
                    "                                    min[i].type = filters[i].type;\r",
                    "                                }\r",
                    "                                if (filters[i].operator) {\r",
                    "                                    min[i].operator = filters[i].operator;\r",
                    "                                }\r",
                    "                            }\r",
                    "                            return this.applyEncoding(min);\r",
                    "                        }\r",
                    "                    },\r",
                    "                    filters: {\r",
                    "                        property: 'vocabularyId',\r",
                    "                        value: leVocab.get(\"id\")\r",
                    "                    }\r",
                    "\r",
                    "                });\r",
                    "                var toUse=\"Ext.ux.TreePicker\";\r",
                    "                if(leVocab.get(\"multiSelect\")){toUse=\"Ext.ux.TreeMultiPicker\";}\r",
                    "                if(leVocab.get(\"id\")=='navigation'){storeT.getProxy().api={read:\"taxonomy-terms/navigation-tree\"};}\r",
                    "                storeT.load();\r",
                    "                var selecteur = Ext.create(toUse, {\r",
                    "                    name:leVocab.get(\"id\"),\r",
                    "                    fieldLabel: leVocab.get(\"name\"),\r",
                    "                    store: storeT,\r",
                    "                    anchor:\"90%\",\r",
                    "                    ignoreIsNotPage:true,\r",
                    "                    displayField:\"text\",\r",
                    "                    allowBlank: !leVocab.data.mandatory,\r",
                    "                    plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")]\r",
                    "                });\r",
                    "\r",
                    "\r",
                    "            } else {\r",
                    "                var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "                    model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                    remoteFilter:\"true\",\r",
                    "                    proxy: {\r",
                    "                        type: 'ajax',\r",
                    "                        api: {\r",
                    "                            read: 'taxonomy-terms'\r",
                    "                        },\r",
                    "                        reader: {\r",
                    "                            type: 'json',\r",
                    "                            messageProperty: 'message',\r",
                    "                            root: 'data'\r",
                    "                        },\r",
                    "                        encodeFilters: function(filters) {\r",
                    "                            var min = [],\r",
                    "                                length = filters.length,\r",
                    "                                i = 0;\r",
                    "\r",
                    "                            for (; i < length; i++) {\r",
                    "                                min[i] = {\r",
                    "                                    property: filters[i].property,\r",
                    "                                    value   : filters[i].value\r",
                    "                                };\r",
                    "                                if (filters[i].type) {\r",
                    "                                    min[i].type = filters[i].type;\r",
                    "                                }\r",
                    "                                if (filters[i].operator) {\r",
                    "                                    min[i].operator = filters[i].operator;\r",
                    "                                }\r",
                    "                            }\r",
                    "                            return this.applyEncoding(min);\r",
                    "                        }\r",
                    "                    },\r",
                    "                    filters: {\r",
                    "                        property: 'vocabularyId',\r",
                    "                        value: leVocab.get(\"id\")\r",
                    "                    }\r",
                    "\r",
                    "                });\r",
                    "                storeT.on(\"beforeload\", function(s,o){\r",
                    "                    o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "                    if (!Ext.isEmpty(o.params.comboQuery)){\r",
                    "\r",
                    "                        var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                            property:\"text\",\r",
                    "                            value:o.params.comboQuery,\r",
                    "                            operator:'like'\r",
                    "                        });\r",
                    "\r",
                    "                        o.filters.push(newFilter);\r",
                    "\r",
                    "                    }\r",
                    "\r",
                    "\r",
                    "                });\r",
                    "                var selecteur = Ext.widget('comboboxselect', {\r",
                    "                    name:leVocab.get(\"id\"),\r",
                    "                    anchor:\"90%\",\r",
                    "                    fieldLabel: leVocab.get(\"name\"),\r",
                    "                    autoScroll: false,\r",
                    "                    store: storeT,\r",
                    "                    queryMode: 'remote',\r",
                    "                    queryParam: 'comboQuery',\r",
                    "                    minChars:3,\r",
                    "                    grow:false,\r",
                    "                    displayField: 'text',\r",
                    "                    valueField: 'id',\r",
                    "                    filterPickList: true,\r",
                    "                    typeAhead: true,\r",
                    "                    forceSelection: !leVocab.data.expandable,\r",
                    "                    createNewOnEnter: leVocab.data.expandable,\r",
                    "                    multiSelect: leVocab.data.multiSelect,\r",
                    "                    allowBlank: !leVocab.data.mandatory\r",
                    "                });\r",
                    "\r",
                    "            }\r",
                    "            var enrobage =Ext.widget('ChampTC');\r",
                    "            enrobage.add(selecteur);\r",
                    "            enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);\r",
                    "            if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}\r",
                    "            formTaxoTC.add(enrobage);\r",
                    "\r",
                    "        }}}"
                ]
            },
            "designerId": "0e9b420c-67d9-49af-8188-de5d28c079ed"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createUser",
                "designer|params": [
                    "userType"
                ],
                "implHandler": [
                    "var fieldsForm=Ext.getCmp(\"userCUFields\");\r",
                    "var taxoForm=Ext.getCmp(\"userCUTaxonomy\");\r",
                    "if ((fieldsForm.isValid())&&(taxoForm.isValid())){\r",
                    "    var newUser={ };\r",
                    "    var fieldValues=fieldsForm.getValues();\r",
                    "    newUser.name=fieldValues.name;\r",
                    "    newUser.email=fieldValues.email;\r",
                    "    delete fieldValues.name;\r",
                    "    delete fieldValues.email;\r",
                    "    newUser.fields=fieldValues;\r",
                    "    newUser.taxonomy=taxoForm.getValues();\r",
                    "    newUser.type=userType.get(\"id\");\r",
                    "    newUser.groups=[userType.get(\"defaultGroup\")];\r",
                    "    newUser.defaultGroup=userType.get(\"defaultGroup\");\r",
                    "    Ext.getCmp(\"usersInterfaceCenterGrid\").getStore().add(newUser);\r",
                    "    Et.getCmp(\"UserCreateUpdateWindow\").close();\r",
                    "}"
                ]
            },
            "designerId": "7db4d0af-1a42-4a99-8d3d-d216142a9f63"
        }
    ]
}