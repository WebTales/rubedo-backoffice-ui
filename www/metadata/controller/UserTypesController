{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "UserTypesController",
        "designer|userAlias": "UserTypesController"
    },
    "designerId": "00775bc6-fbb7-4f53-bb87-669f9cfacbf4",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewUTBtnClick",
                "implHandler": [
                    "Ext.widget(\"newUTWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newUTBtn"
            },
            "designerId": "a83c9606-ae6c-4ee2-b356-afa0d480c450"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCreateNewUTBtnClick",
                "implHandler": [
                    "if (button.up().getForm().isValid()) {\r",
                    "    var newMT=Ext.create(\"Rubedo.model.userType\",button.up().getForm().getValues());\r",
                    "    newMT.set(\"vocabularies\", [ ]);\r",
                    "    newMT.set(\"fields\", [ ]);\r",
                    "    newMT.set(\"layouts\", [ ]);\r",
                    "    newMT.set(\"signUpType\",\"none\");\r",
                    "    newMT.set(\"defaultGroup\",Ext.getStore(\"GroupsComboStore2\").findRecord(\"name\",\"public\").get(\"id\"));\r",
                    "    Ext.getStore(\"UserTypes\").add(newMT);\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#createNewUTBtn"
            },
            "designerId": "f9f2b868-aab5-4986-9b59-c5f8293d3e44"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMainUTGridSelectionChange",
                "implHandler": [
                    "this.resetInterfaceSelect(record);"
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#mainUTGrid"
            },
            "designerId": "d72b1933-cfa8-4eb4-84d8-cacdccdf8f95"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetInterfaceNoSelect",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp(\"UserTypesInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.disable();});\r",
                    "Ext.getCmp(\"removeUTBtn\").disable();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"User types \", iconCls:\"user\",localiserId:\"userTypesLaunchBtn\"}));\r",
                    "Ext.getCmp('UTeditFields').removeAll();\r",
                    "Ext.getCmp(\"UTfieldUp\").disable();\r",
                    "Ext.getCmp(\"UTfieldDown\").disable();\r",
                    "Ext.getCmp(\"UTfieldDeleter\").disable();\r",
                    "Ext.getCmp('UTFieldId').setValue();\r",
                    "Ext.getCmp(\"UTFieldConfigsBox\").getComponent(0).getComponent(0).removeAll();\r",
                    "Ext.getCmp(\"UTFieldConfigsBox\").getComponent(0).getComponent(1).removeAll();\r",
                    "Ext.getCmp(\"UTcenterZone\").disable();\r",
                    "Ext.getCmp(\"userTypesEditForm\").getForm().reset();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();\r",
                    "this.resetLayoutsInterfaceNoSelect();"
                ]
            },
            "designerId": "44ca7d65-b178-41f2-94cd-b0a084501961"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetInterfaceSelect",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "var me =this;\r",
                    "\r",
                    "Ext.Array.forEach(Ext.getCmp(\"UserTypesInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.enable();});\r",
                    "Ext.getCmp(\"removeUTBtn\").enable();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"User types \", iconCls:\"user\",localiserId:\"userTypesLaunchBtn\"}));\r",
                    "Ext.getCmp(\"UserTypesInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: record.get(\"type\"), iconCls:\"user\"}));\r",
                    "Ext.getCmp(\"UTcenterZone\").enable();\r",
                    "Ext.getCmp(\"UTfieldUp\").disable();\r",
                    "Ext.getCmp(\"UTfieldDown\").disable();\r",
                    "Ext.getCmp('UTFieldId').setValue();\r",
                    "Ext.getCmp(\"userTypesEditForm\").getForm().setValues(record.getData());\r",
                    "Ext.getCmp(\"UTfieldDeleter\").disable();\r",
                    "Ext.getCmp(\"UTFieldConfigsBox\").getComponent(0).getComponent(0).removeAll();\r",
                    "Ext.getCmp(\"UTFieldConfigsBox\").getComponent(0).getComponent(1).removeAll();\r",
                    "var metaBox = Ext.getCmp(\"UserTypesInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "var values= record.getData();\r",
                    "values.creation= Ext.Date.format(values.createTime, Ext.Date.defaultFormat);\r",
                    "values.derniereModification= Ext.Date.format(values.lastUpdateTime, Ext.Date.defaultFormat);\r",
                    "metaBox.update(values);\r",
                    "metaBox.show();\r",
                    "var selector= [];\r",
                    "Ext.Array.forEach(record.get(\"vocabularies\"),function(vocabId){\r",
                    "    if (!Ext.isEmpty(Ext.getCmp(\"vocabulariesUTGrid\").getStore().findRecord(\"id\", vocabId))){\r",
                    "        selector.push(Ext.getCmp(\"vocabulariesUTGrid\").getStore().findRecord(\"id\", vocabId));\r",
                    "    }\r",
                    "});\r",
                    "Ext.getCmp(\"vocabulariesUTGrid\").getSelectionModel().select(selector);\r",
                    "\r",
                    "\r",
                    "var targetZone=Ext.getCmp('UTeditFields');\r",
                    "Ext.suspendLayouts();\r",
                    "targetZone.removeAll();\r",
                    "Ext.Array.forEach(record.get(\"fields\"),function(field){\r",
                    "    me.renderUTField(field, targetZone);\r",
                    "});\r",
                    "Ext.resumeLayouts();\r",
                    "Ext.getCmp(\"UTeditFields\").doLayout();\r",
                    "var task = new Ext.util.DelayedTask(function(){\r",
                    "    Ext.getCmp(\"UTeditFields\").doLayout();\r",
                    "});\r",
                    "task.delay(200);\r",
                    "if ((!ACL.interfaceRights[\"write.ui.userTypes\"])||(record.get(\"readOnly\"))) {\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"userTypesEditForm\").query(\"field\"), function(thing){thing.setReadOnly(true);});\r",
                    "    Ext.getCmp(\"removeUTBtn\").disable();\r",
                    "    Ext.getCmp(\"saveUTBtn\").disable();\r",
                    "    Ext.getCmp(\"UTImportBtn\").disable();\r",
                    "    Ext.getCmp(\"UTfieldDeleter\").up().disable();\r",
                    "} else {\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"userTypesEditForm\").query(\"field\"), function(thing){thing.setReadOnly(false);});\r",
                    "    Ext.getCmp(\"removeUTBtn\").enable();\r",
                    "    Ext.getCmp(\"saveUTBtn\").enable();\r",
                    "    Ext.getCmp(\"UTImportBtn\").enable();\r",
                    "    Ext.getCmp(\"UTfieldDeleter\").up().enable();\r",
                    "}\r",
                    "Ext.getStore(\"UTLayouts\").removeAll();\r",
                    "Ext.getStore(\"UTLayouts\").loadData(record.get(\"layouts\"));\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "193c7bb7-40ca-4517-9448-c17bcd74a028"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRemoveUTBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var cible = Ext.getCmp('mainUTGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'user-types/is-used',\r",
                    "        method:\"GET\",\r",
                    "        params: {\r",
                    "            id: cible.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var maskIsUsed=Ext.JSON.decode(response.responseText).used;\r",
                    "            if (maskIsUsed){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.userTypeIsUsedError);\r",
                    "            } else {\r",
                    "                var fenetre = Ext.widget('delConfirmZ');\r",
                    "                fenetre.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisUserTypeText;\r",
                    "                fenetre.show();\r",
                    "                Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "                    Ext.getCmp('mainUTGrid').getStore().remove(cible);\r",
                    "                    Ext.getCmp('delConfirmZ').close();\r",
                    "                    me.resetInterfaceNoSelect();\r",
                    "                }); \r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#removeUTBtn"
            },
            "designerId": "cd7eeb60-934b-4766-ab91-52ae764c6039"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSaveUTBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var rec=Ext.getCmp(\"CTLayoutsGrid1\").getSelectionModel().getLastSelected();\r",
                    "if (!Ext.isEmpty(rec)){\r",
                    "    rec.set(\"rows\",me.saveLayout(Ext.getCmp(\"layoutEditionPanel1\")));\r",
                    "}\r",
                    "var record=Ext.getCmp(\"mainUTGrid\").getSelectionModel().getLastSelected();\r",
                    "var form = Ext.getCmp(\"userTypesEditForm\").getForm();\r",
                    "if (form.isValid()){\r",
                    "    record.beginEdit();\r",
                    "    record.set(form.getValues());\r",
                    "    var newVocabularies=Ext.Array.pluck(Ext.Array.pluck(Ext.getCmp(\"vocabulariesUTGrid\").getSelectionModel().getSelection(), \"data\"), \"id\");\r",
                    "    record.set(\"vocabularies\", newVocabularies);\r",
                    "    record.set(\"layouts\",Ext.Array.pluck(Ext.getStore(\"UTLayouts\").getRange(),\"data\"));\r",
                    "    record.set(\"fields\", me.recordFields(Ext.getCmp('UTeditFields')));\r",
                    "    record.endEdit();\r",
                    "} else {\r",
                    "    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.invalidRightsPropertiesError);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#saveUTBtn"
            },
            "designerId": "28a303db-df72-4ad3-a116-ffd344ce9d06"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCopyUTBtnClick",
                "implHandler": [
                    "var rec = Ext.clone(Ext.getCmp(\"mainUTGrid\").getSelectionModel().getLastSelected().data);\r",
                    "delete(rec.id);\r",
                    "rec.type=rec.type+\" - Copy \"+Ext.Date.format(new Date(), 'j F, Y, G:i');\r",
                    "rec.readOnly=false;\r",
                    "delete(rec.version);\r",
                    "delete(rec.createTime);\r",
                    "delete(rec.lastUpdateTime);\r",
                    "Ext.getCmp(\"mainUTGrid\").getStore().add(rec);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#copyUTBtn"
            },
            "designerId": "0df87471-60c0-435e-b6c8-234ab4da0a8a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewUTFieldBtnClick",
                "implHandler": [
                    "Ext.widget(\"UTFieldAddWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newUTFieldBtn"
            },
            "designerId": "38e50a5e-8e4a-44d1-a100-092724cd1df1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTFieldInsertBtnClick",
                "implHandler": [
                    "var proto=Ext.clone(Ext.getCmp(\"UTFieldSelectGrid\").getSelectionModel().getLastSelected().getData());\r",
                    "proto.protoId=proto.id;\r",
                    "this.renderUTField(proto, Ext.getCmp('UTeditFields'));\r",
                    "button.up().up().close();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#UTFieldInsertBtn"
            },
            "designerId": "7f80a230-495a-41dd-8891-a9ea77aa7243"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderUTField",
                "designer|params": [
                    "protoData",
                    "renderTarget",
                    "isUserCU"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var configurator=protoData.config;\r",
                    "if (!Ext.isEmpty(configurator.i18n)){\r",
                    "    var BOLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "    if (!Ext.isEmpty(configurator.i18n[BOLanguage])){\r",
                    "        if (!Ext.isEmpty(configurator.i18n[BOLanguage].fieldLabel)){\r",
                    "            configurator.fieldLabel=configurator.i18n[BOLanguage].fieldLabel;\r",
                    "        }\r",
                    "        if (!Ext.isEmpty(configurator.i18n[BOLanguage].tooltip)){\r",
                    "            configurator.tooltip=configurator.i18n[BOLanguage].tooltip;\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "if (protoData.cType == 'combobox') {\r",
                    "    var myStore=  Ext.create('Ext.data.Store', Ext.clone(protoData.config.store));\r",
                    "    configurator.store = myStore;\r",
                    "}\r",
                    "var newField= Ext.create(protoData.cType, configurator);\r",
                    "newField.config=protoData.config;\r",
                    "newField.protoId=protoData.protoId;\r",
                    "newField.configFields=Ext.getStore(\"UTFieldTypes\").findRecord(\"id\", protoData.protoId).get(\"configFields\");\r",
                    "newField.cType=protoData.cType;\r",
                    "newField.anchor = '90%';\r",
                    "newField.style = '{float:left;}';\r",
                    "var casing =Ext.widget('ChampTC');\r",
                    "casing.add(newField);\r",
                    "casing.getComponent('helpBouton').setTooltip(configurator.tooltip);\r",
                    "if (Ext.isEmpty(configurator.tooltip)){\r",
                    "    casing.getComponent('helpBouton').hidden=true;\r",
                    "} \r",
                    "if (isUserCU){\r",
                    "} else {\r",
                    "    if (!me.nameAvailable(newField.name)) {\r",
                    "        var duplic = 1;\r",
                    "        while (!me.nameAvailable(newField.name+duplic)){\r",
                    "            duplic++;\r",
                    "        }\r",
                    "        newField.name=newField.name+duplic;\r",
                    "        newField.config.name=newField.config.name+duplic;\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "renderTarget.add(casing);"
                ]
            },
            "designerId": "4247734a-a354-4de2-82d1-3d0c3bd2b4e9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "nameAvailable",
                "designer|params": [
                    "name"
                ],
                "implHandler": [
                    "var usedNames=[\"email\",\"login\",\"password\"]; //ADD OTHER ONES\r",
                    "Ext.Array.forEach(Ext.getCmp('UTeditFields').query(\"field\"), function(field){\r",
                    "    Ext.Array.include(usedNames,field.name);\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(false);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "designerId": "cd02e504-e4c5-4dec-9ecb-a16e9b96b5b3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "recordFields",
                "designer|params": [
                    "target"
                ],
                "implHandler": [
                    "var result = [ ];\r",
                    "Ext.Array.forEach(target.query(\"ChampTC\"), function(ctc){\r",
                    "    var field=ctc.getComponent(1);\r",
                    "    var newField = {\r",
                    "        cType:field.cType,\r",
                    "        config:field.config,\r",
                    "        protoId:field.protoId\r",
                    "    };\r",
                    "    if (field.isXType('combobox')) {\r",
                    "        var dones = field.getStore().data.items;\r",
                    "        var donesR = [ ];\r",
                    "        for (i=0; i<dones.length; i++) {\r",
                    "            donesR.push({valeur: dones[i].data.valeur, nom: dones[i].data.nom });\r",
                    "        }\r",
                    "        newField.config.store = {\r",
                    "            fields: ['valeur', 'nom'],\r",
                    "            data: donesR\r",
                    "        };\r",
                    "    }\r",
                    "    result.push(newField);\r",
                    "});\r",
                    "return(result);\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "754c5add-88fa-4c75-82cf-2f7000f2ba2b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "nameValidator",
                "designer|params": [
                    "name"
                ],
                "implHandler": [
                    "var usedNames=[\"email\",\"login\",\"password\"]; //ADD OTHER ONES\r",
                    "Ext.Array.forEach(Ext.getCmp('UTeditFields').query(\"field\"), function(field){\r",
                    "    if (field.getId()!=Ext.getCmp(Ext.getCmp('UTFieldId').getValue()).getId()){\r",
                    "        Ext.Array.include(usedNames,field.name);\r",
                    "    }\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(Rubedo.RubedoAutomatedElementsLoc.fieldNameAlreadyUsedError);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "designerId": "cae5ef98-df00-4378-94f1-8d7c9ebc6dc1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectionEvents",
                "implHandler": [
                    "var usedNames=[\"email\",\"login\",\"password\"]; //ADD OTHER ONES\r",
                    "var me=this;\r",
                    "var TCfield=component.getComponent(1);\r",
                    "TCfield.getEl().on('click', function() {\r",
                    "    Ext.getCmp(\"UTfieldUp\").enable();\r",
                    "    Ext.getCmp(\"UTfieldDown\").enable();\r",
                    "    Ext.getCmp(\"UTfieldDeleter\").enable();   \r",
                    "    if (Ext.getCmp('UTFieldId').getValue() != TCfield.id) {\r",
                    "        if (Ext.isDefined(Ext.getCmp(Ext.getCmp('UTFieldId').getValue()))){    \r",
                    "            Ext.getCmp(Ext.getCmp('UTFieldId').getValue()).getEl().applyStyles('color:#000000');\r",
                    "            var companion =Ext.getCmp(Ext.getCmp('UTFieldId').getValue()).up().getComponent(2);\r",
                    "            if (Ext.isDefined(companion)) {\r",
                    "                companion.getEl().applyStyles('color:#000000');\r",
                    "            }\r",
                    "        }\r",
                    "        Ext.getCmp('UTFieldId').setValue(TCfield.id);\r",
                    "        if ((TCfield.isXType(\"ImagePickerField\"))||(TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))) {\r",
                    "            TCfield.up().getComponent(2).getEl().frame(MyPrefData.themeColor);\r",
                    "            TCfield.up().getComponent(2).getEl().applyStyles('color:'+MyPrefData.themeColor);\r",
                    "        } else {\r",
                    "            this.frame(MyPrefData.themeColor);\r",
                    "            this.applyStyles('color:'+MyPrefData.themeColor);\r",
                    "        }\r",
                    "        var mesChamps = TCfield.configFields;\r",
                    "        var boiteParam = Ext.getCmp('UTFieldConfigsBox').getComponent(0).getComponent(0);\r",
                    "        var boiteParam1 = Ext.getCmp('UTFieldConfigsBox').getComponent(0).getComponent(1);\r",
                    "        boiteParam.removeAll();\r",
                    "        boiteParam1.removeAll();\r",
                    "        for(t=0; t<mesChamps.length; t++) {\r",
                    "            if (mesChamps[t].type =='Ext.form.field.ComboBox') {\r",
                    "                var monStore=  Ext.create('Ext.data.Store', mesChamps[t].store);\r",
                    "                mesChamps[t].config.store= monStore;\r",
                    "            }\r",
                    "            var nouvChamp= Ext.create(mesChamps[t].type, mesChamps[t].config);\r",
                    "            nouvChamp.labelSeparator= ' ';\r",
                    "            nouvChamp.anchor='100%';\r",
                    "            if (nouvChamp.name==\"name\"){\r",
                    "                nouvChamp.validator=me.nameValidator;\r",
                    "            }\r",
                    "            nouvChamp.setValue(TCfield.config[nouvChamp.name]);\r",
                    "            if ((mesChamps[t].type =='Rubedo.view.CTMTField')||(mesChamps[t].type =='Rubedo.view.CTCField')){\r",
                    "\r",
                    "                var properMT =Ext.clone(TCfield.config[nouvChamp.name]);\r",
                    "                nouvChamp.getStore().targetField=nouvChamp.id;\r",
                    "                nouvChamp.getStore().addListener(\"load\", function(){  \r",
                    "                    Ext.getCmp(this.targetField).setValue(properMT);\r",
                    "                },nouvChamp.getStore(),{single:true});\r",
                    "                }\r",
                    "                if ((nouvChamp.name==\"fieldLabel\")||(nouvChamp.name==\"tooltip\")){\r",
                    "                    nouvChamp.hide();\r",
                    "                    var replacerField=Ext.widget('genericLocTextField',{\r",
                    "                        fieldLabel:nouvChamp.fieldLabel,\r",
                    "                        anchor:\"100%\",\r",
                    "                        targetEntity:TCfield.getId(),\r",
                    "                        targetEntityProp:nouvChamp.name,\r",
                    "                        CTMode:true,\r",
                    "                        companionFieldId:nouvChamp.getId(),\r",
                    "                        initialLanguage:Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\")\r",
                    "                    });\r",
                    "                    boiteParam.add(replacerField);\r",
                    "                }\r",
                    "                if ((nouvChamp.name==\"localizable\")){\r",
                    "                    nouvChamp.hide();\r",
                    "                }\r",
                    "                nouvChamp.setReadOnly((!ACL.interfaceRights[\"write.ui.userTypes\"])||(Ext.getCmp(\"mainUTGrid\").getSelectionModel().getLastSelected().get(\"readOnly\")));\r",
                    "                nouvChamp.on('change', function (thing) {\r",
                    "                    if (thing.isValid()){\r",
                    "                        if(this.isXType(\"timefield\")){\r",
                    "                            TCfield.config[this.name]=Ext.Date.format(this.getValue(),\"H:i\");\r",
                    "                        } else if(this.isXType(\"datefield\")){\r",
                    "                            TCfield.config[this.name]=Ext.Date.format(this.getValue(),\"U\");\r",
                    "                        } else { \r",
                    "                            TCfield.config[this.name]= this.getValue();\r",
                    "                        }\r",
                    "                        if ((this.name=='name')&&((TCfield.isXType(\"radiogroup\"))||(TCfield.isXType(\"checkboxgroup\")))){\r",
                    "                            var ntcrVal=this.getValue();\r",
                    "                            Ext.Array.forEach(TCfield.config.items, function(ntch){ntch.name=ntcrVal;});\r",
                    "                        }\r",
                    "                        if (this.name=='fieldLabel') {\r",
                    "\r",
                    "                            if (TCfield.isXType(\"ImagePickerField\")) {\r",
                    "                                TCfield.up().getComponent(2).getComponent(0).setText(this.getValue());\r",
                    "                            } else if ((TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))){\r",
                    "                                TCfield.up().getComponent(2).setFieldLabel(this.getValue());\r",
                    "                            } else {\r",
                    "                                TCfield.setFieldLabel(this.getValue());\r",
                    "                            }\r",
                    "                        }\r",
                    "                        else if (this.name=='value') {\r",
                    "\r",
                    "                            TCfield.setValue(this.getValue());\r",
                    "\r",
                    "                        }\r",
                    "                        else if (this.name=='allowBlank') {\r",
                    "                            var currentOne=TCfield.config.fieldLabel;\r",
                    "                            if (this.getValue()) {\r",
                    "                                currentOne=currentOne.replace(\" *\",\"\");\r",
                    "                            } else {\r",
                    "                                currentOne=currentOne+\" *\";\r",
                    "                            } \r",
                    "                            TCfield.config.fieldLabel=currentOne;\r",
                    "                            if (TCfield.isXType(\"ImagePickerField\")) {\r",
                    "                                TCfield.up().getComponent(2).getComponent(0).setText(currentOne+\" \");\r",
                    "                            } else if ((TCfield.isXType(\"localiserField\"))||(TCfield.isXType(\"externalMediaField\"))||(TCfield.isXType(\"DCEField\"))){\r",
                    "                                TCfield.up().getComponent(2).setFieldLabel(currentOne);\r",
                    "                            } else {\r",
                    "                                TCfield.setFieldLabel(currentOne);\r",
                    "                            }\r",
                    "                        }\r",
                    "                        else if (this.name=='editable') {\r",
                    "                            TCfield.setEditable(this.getValue());\r",
                    "                            TCfield.reset();\r",
                    "                        }\r",
                    "                        else if (this.name=='multiSelect') {\r",
                    "                            TCfield.multiSelect = this.getValue();\r",
                    "                            TCfield.reset();\r",
                    "                        }\r",
                    "                        else if (this.name=='tooltip') {\r",
                    "                            component.getComponent('helpBouton').setTooltip(this.getValue());\r",
                    "                            if (Ext.isEmpty(this.getValue())){\r",
                    "                                component.getComponent('helpBouton').hide();\r",
                    "                            } else {\r",
                    "                                component.getComponent('helpBouton').show();\r",
                    "                            }\r",
                    "                        }\r",
                    "                        else if (this.name=='regex') {\r",
                    "                            TCfield.regex = new RegExp(this.getValue());\r",
                    "                        }\r",
                    "                        else {\r",
                    "                            TCfield[this.name]= this.getValue();\r",
                    "                        }\r",
                    "                        TCfield.validate();\r",
                    "                    }});\r",
                    "                    if (mesChamps[t].isASearchField){\r",
                    "                        boiteParam1.add(nouvChamp);\r",
                    "                    } else {\r",
                    "                        boiteParam.add(nouvChamp); \r",
                    "                    } \r",
                    "\r",
                    "                }\r",
                    "                if ((TCfield.isXType('combobox'))&&(!(TCfield.isXType('timefield')))) {\r",
                    "                    var optionsLC = Ext.widget('optionsLCGrid', {store : TCfield.getStore()});\r",
                    "                    boiteParam.add(optionsLC); \r",
                    "\r",
                    "                }\r",
                    "                if ((TCfield.isXType(\"radiogroup\"))||(TCfield.isXType(\"checkboxgroup\"))) {\r",
                    "                    var itemsConfigurator=Ext.widget(\"specialTCFieldItemsConfigurator\");\r",
                    "                    itemsConfigurator.targetedId=TCfield.id;\r",
                    "                    boiteParam.add(itemsConfigurator); \r",
                    "                }\r",
                    "            }\r",
                    "        });"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "ChampTC",
                "designer|controlQuery": "#UTeditFields ChampTC"
            },
            "designerId": "ed064f55-1c77-48cd-b61f-1f5f6722bd8c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTfieldUpClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('UTFieldId').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    if (pos > 0) {\r",
                    "        field.up().up().move(pos,pos-1);\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#UTfieldUp"
            },
            "designerId": "f830070c-516d-4ace-bccf-444d2c267028"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTfieldDownClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('UTFieldId').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    field.up().up().move(pos,pos+1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#UTfieldDown"
            },
            "designerId": "acc3c7d0-2701-4746-bf5a-983cdc34c74a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTfieldDeleterClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('UTFieldId').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    field.up().destroy();\r",
                    "    Ext.getCmp(\"UTfieldUp\").disable();\r",
                    "    Ext.getCmp(\"UTfieldDown\").disable();\r",
                    "    Ext.getCmp('UTFieldId').setValue();\r",
                    "    Ext.getCmp(\"UTfieldDeleter\").disable();\r",
                    "    Ext.getCmp(\"UTFieldConfigsBox\").getComponent(0).getComponent(0).removeAll();\r",
                    "\tExt.getCmp(\"UTFieldConfigsBox\").getComponent(0).getComponent(1).removeAll();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#UTfieldDeleter"
            },
            "designerId": "6e9e40c5-d0c6-4932-b8ff-7444982c3dc3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUTFieldSelectGridItemDblClick",
                "implHandler": [
                    "this.onUTFieldInsertBtnClick(Ext.getCmp(\"UTFieldInsertBtn\"));"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#UTFieldSelectGrid"
            },
            "designerId": "66c6f694-ec9e-487c-b5ad-5e2e3c5b30c8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUsersInterfaceTypeGridSelectionChange",
                "implHandler": [
                    "Ext.getCmp(\"usersInterfaceStatusCol\").hide();\r",
                    "Ext.getCmp(\"usersSignUpModeration\").hide();\r",
                    "var imageMeta = Ext.getCmp('UsersInterface').getDockedComponent('barreMeta').getComponent('imageBarreMeta');\r",
                    "var boiteMeta = Ext.getCmp(\"UsersInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "if (Ext.isEmpty(selected)){\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"UsersInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.disable();});\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").clearFilter(true);\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").removeAll();\r",
                    "    Ext.getCmp(\"addUserBtn\").disable();\r",
                    "    imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/user.png');\r",
                    "    boiteMeta.hide();\r",
                    "} else {\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"UsersInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.enable();});\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").clearFilter(true);\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").filter(\"typeId\",selected[0].get(\"id\"));\r",
                    "    Ext.getStore(\"UsersAdminDataStore\").loadPage(1);\r",
                    "    Ext.getCmp(\"addUserBtn\").enable();\r",
                    "    if (selected[0].get(\"signUpType\")==\"moderated\"){\r",
                    "        Ext.getCmp(\"usersInterfaceStatusCol\").show();\r",
                    "        Ext.getCmp(\"usersSignUpModeration\").show();\r",
                    "        Ext.getCmp(\"usersSignUpModeration\").disable();\r",
                    "    } else if (selected[0].get(\"signUpType\")==\"emailConfirmation\") {\r",
                    "        Ext.getCmp(\"usersInterfaceStatusCol\").show();\r",
                    "    }\r",
                    "    imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png'); \r",
                    "    var  customMeta = selected[0].get(\"type\");\r",
                    "    boiteMeta.show();\r",
                    "    boiteMeta.update(customMeta);\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#usersInterfaceTypeGrid"
            },
            "designerId": "93a955e7-c37d-4966-a9ad-5d76a6251241"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUsersInterfaceCenterGridSelectionChange",
                "implHandler": [
                    "Ext.getCmp(\"editUserBtn\").disable();\r",
                    "Ext.getCmp(\"removeUserBtn\").disable();\r",
                    "Ext.getCmp(\"usersSignUpModeration\").disable();\r",
                    "var imageMeta = Ext.getCmp('UsersInterface').getDockedComponent('barreMeta').getComponent('imageBarreMeta');\r",
                    "var boiteMeta = Ext.getCmp(\"UsersInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "if (Ext.isEmpty(selected)){\r",
                    "    var lastOne=Ext.getCmp(\"usersInterfaceTypeGrid\").getSelectionModel().getLastSelected();\r",
                    "    if (!Ext.isEmpty(lastOne)){\r",
                    "        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png'); \r",
                    "        var  customMeta = lastOne.get(\"type\");\r",
                    "        boiteMeta.update(customMeta);\r",
                    "    }\r",
                    "\r",
                    "} else if (selected.length==1) {\r",
                    "    Ext.getCmp(\"editUserBtn\").enable();\r",
                    "    Ext.getCmp(\"removeUserBtn\").enable();\r",
                    "    if (selected[0].get(\"status\")==\"pending\"){\r",
                    "        Ext.getCmp(\"usersSignUpModeration\").enable();\r",
                    "    }\r",
                    "    imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/user.png'); \r",
                    "    var customMeta=selected[0].get(\"name\")+\"</br> \"+selected[0].get(\"email\")+\"</br> \"+Rubedo.RubedoAutomatedElementsLoc.creationText+\" : \"+Ext.Date.format(selected[0].get(\"createTime\"), Ext.Date.defaultFormat)+\r",
                    "    \" \"+Rubedo.RubedoAutomatedElementsLoc.lastUpdateText+\" : \"+Ext.Date.format(selected[0].get(\"lastUpdateTime\"), Ext.Date.defaultFormat);\r",
                    "    boiteMeta.update(customMeta);\r",
                    "} else {\r",
                    "    Ext.getCmp(\"removeUserBtn\").enable();\r",
                    "    imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/users.png'); \r",
                    "    var  customMeta = selected.length+\" Users\";\r",
                    "    boiteMeta.update(customMeta);\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#usersInterfaceCenterGrid"
            },
            "designerId": "6f9178e0-843e-41c2-8739-03e3681d313a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "fireUserCreate",
                "designer|params": [
                    "userType"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var myEditor=Ext.widget(\"UserCreateUpdateWindow\", {title:\"New user \"+userType.get(\"type\")});\r",
                    "myEditor.show();\r",
                    "var targetZone=Ext.getCmp(\"userCUFields\");\r",
                    "Ext.Array.forEach(userType.get(\"fields\"),function(field){\r",
                    "    me.renderUTField(field, targetZone, true);\r",
                    "});\r",
                    "me.renderTaxoFields(userType);\r",
                    "Ext.getCmp(\"userCUSaveBtn\").on(\"click\", function(){\r",
                    "    me.createUser(userType);\r",
                    "});"
                ]
            },
            "designerId": "a107761e-9b77-479c-8df7-3c04ace6e7a0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddUserBtnClick",
                "implHandler": [
                    "var myType=Ext.getCmp(\"usersInterfaceTypeGrid\").getSelectionModel().getLastSelected();\r",
                    "this.fireUserCreate(myType);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addUserBtn"
            },
            "designerId": "f52b2629-185a-4bad-b4ea-c671ed0ba0ff"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderTaxoFields",
                "designer|params": [
                    "DAMType",
                    "useSep"
                ],
                "implHandler": [
                    "var formTaxoTC =  Ext.getCmp('userCUTaxonomy');\r",
                    "var lesTaxo = DAMType.get(\"vocabularies\");\r",
                    "if (Ext.isEmpty(lesTaxo)) {\r",
                    "    //formTaxoTC.hide();\r",
                    "} else {\r",
                    "    var i=0;\r",
                    "    for (i=0; i<lesTaxo.length; i++) {\r",
                    "        if (useSep){\r",
                    "            var leVocab = Ext.getStore('TaxonomyForUT2').findRecord('id', lesTaxo[i]);\r",
                    "        } else {\r",
                    "            var leVocab = Ext.getStore('TaxonomyForU').findRecord('id', lesTaxo[i]);\r",
                    "        }\r",
                    "        if (!Ext.isEmpty(leVocab)){\r",
                    "            if (leVocab.get(\"inputAsTree\")){\r",
                    "                var storeT = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                    model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                    remoteFilter:\"true\",\r",
                    "                    proxy: {\r",
                    "                        type: 'ajax',\r",
                    "                        api: {\r",
                    "                            read: 'taxonomy-terms/tree'\r",
                    "                        },\r",
                    "                        reader: {\r",
                    "                            type: 'json',\r",
                    "                            messageProperty: 'message'\r",
                    "                        },\r",
                    "                        encodeFilters: function(filters) {\r",
                    "                            var min = [],\r",
                    "                                length = filters.length,\r",
                    "                                i = 0;\r",
                    "\r",
                    "                            for (; i < length; i++) {\r",
                    "                                min[i] = {\r",
                    "                                    property: filters[i].property,\r",
                    "                                    value   : filters[i].value\r",
                    "                                };\r",
                    "                                if (filters[i].type) {\r",
                    "                                    min[i].type = filters[i].type;\r",
                    "                                }\r",
                    "                                if (filters[i].operator) {\r",
                    "                                    min[i].operator = filters[i].operator;\r",
                    "                                }\r",
                    "                            }\r",
                    "                            return this.applyEncoding(min);\r",
                    "                        }\r",
                    "                    },\r",
                    "                    filters: {\r",
                    "                        property: 'vocabularyId',\r",
                    "                        value: leVocab.get(\"id\")\r",
                    "                    }\r",
                    "\r",
                    "                });\r",
                    "                var toUse=\"Ext.ux.TreePicker\";\r",
                    "                if(leVocab.get(\"multiSelect\")){toUse=\"Ext.ux.TreeMultiPicker\";}\r",
                    "                if(leVocab.get(\"id\")=='navigation'){storeT.getProxy().api={read:\"taxonomy-terms/navigation-tree\"};}\r",
                    "                storeT.load();\r",
                    "                var selecteur = Ext.create(toUse, {\r",
                    "                    name:leVocab.get(\"id\"),\r",
                    "                    fieldLabel: leVocab.get(\"name\"),\r",
                    "                    store: storeT,\r",
                    "                    anchor:\"90%\",\r",
                    "                    ignoreIsNotPage:true,\r",
                    "                    displayField:\"text\",\r",
                    "                    allowBlank: !leVocab.data.mandatory,\r",
                    "                    plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")]\r",
                    "                });\r",
                    "\r",
                    "\r",
                    "            } else {\r",
                    "                var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "                    model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                    remoteFilter:\"true\",\r",
                    "                    proxy: {\r",
                    "                        type: 'ajax',\r",
                    "                        api: {\r",
                    "                            read: 'taxonomy-terms'\r",
                    "                        },\r",
                    "                        reader: {\r",
                    "                            type: 'json',\r",
                    "                            messageProperty: 'message',\r",
                    "                            root: 'data'\r",
                    "                        },\r",
                    "                        encodeFilters: function(filters) {\r",
                    "                            var min = [],\r",
                    "                                length = filters.length,\r",
                    "                                i = 0;\r",
                    "\r",
                    "                            for (; i < length; i++) {\r",
                    "                                min[i] = {\r",
                    "                                    property: filters[i].property,\r",
                    "                                    value   : filters[i].value\r",
                    "                                };\r",
                    "                                if (filters[i].type) {\r",
                    "                                    min[i].type = filters[i].type;\r",
                    "                                }\r",
                    "                                if (filters[i].operator) {\r",
                    "                                    min[i].operator = filters[i].operator;\r",
                    "                                }\r",
                    "                            }\r",
                    "                            return this.applyEncoding(min);\r",
                    "                        }\r",
                    "                    },\r",
                    "                    filters: {\r",
                    "                        property: 'vocabularyId',\r",
                    "                        value: leVocab.get(\"id\")\r",
                    "                    }\r",
                    "\r",
                    "                });\r",
                    "                storeT.on(\"beforeload\", function(s,o){\r",
                    "                    o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "                    if (!Ext.isEmpty(o.params.comboQuery)){\r",
                    "\r",
                    "                        var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                            property:\"text\",\r",
                    "                            value:o.params.comboQuery,\r",
                    "                            operator:'like'\r",
                    "                        });\r",
                    "\r",
                    "                        o.filters.push(newFilter);\r",
                    "\r",
                    "                    }\r",
                    "\r",
                    "\r",
                    "                });\r",
                    "                var selecteur = Ext.widget('comboboxselect', {\r",
                    "                    name:leVocab.get(\"id\"),\r",
                    "                    anchor:\"90%\",\r",
                    "                    fieldLabel: leVocab.get(\"name\"),\r",
                    "                    autoScroll: false,\r",
                    "                    store: storeT,\r",
                    "                    queryMode: 'remote',\r",
                    "                    queryParam: 'comboQuery',\r",
                    "                    minChars:3,\r",
                    "                    grow:false,\r",
                    "                    displayField: 'text',\r",
                    "                    valueField: 'id',\r",
                    "                    filterPickList: true,\r",
                    "                    typeAhead: true,\r",
                    "                    forceSelection: !leVocab.data.expandable,\r",
                    "                    createNewOnEnter: leVocab.data.expandable,\r",
                    "                    multiSelect: leVocab.data.multiSelect,\r",
                    "                    allowBlank: !leVocab.data.mandatory\r",
                    "                });\r",
                    "\r",
                    "            }\r",
                    "            var enrobage =Ext.widget('ChampTC');\r",
                    "            enrobage.add(selecteur);\r",
                    "            enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);\r",
                    "            if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}\r",
                    "            formTaxoTC.add(enrobage);\r",
                    "\r",
                    "        }}}"
                ]
            },
            "designerId": "0e9b420c-67d9-49af-8188-de5d28c079ed"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "fireUserEdit",
                "designer|params": [
                    "record",
                    "untethered"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var myEditor=Ext.widget(\"UserCreateUpdateWindow\", {title:record.get(\"name\")});\r",
                    "if (untethered){\r",
                    "    var userType=Ext.getStore(\"UserTypesForUsers2\").findRecord(\"id\",record.get(\"typeId\")); \r",
                    "} else {\r",
                    "    var userType=Ext.getStore(\"UserTypesForUsers\").findRecord(\"id\",record.get(\"typeId\"));\r",
                    "}\r",
                    "myEditor.show();\r",
                    "var targetZone=Ext.getCmp(\"userCUFields\");\r",
                    "Ext.Array.forEach(userType.get(\"fields\"),function(field){\r",
                    "    me.renderUTField(field, targetZone, true);\r",
                    "});\r",
                    "me.renderTaxoFields(userType, untethered);\r",
                    "var fieldUpdater=record.get(\"fields\");\r",
                    "if (Ext.isEmpty(fieldUpdater)){\r",
                    "    fieldUpdater={ };\r",
                    "}\r",
                    "fieldUpdater.name=record.get(\"name\");\r",
                    "fieldUpdater.email=record.get(\"email\");\r",
                    "Ext.getCmp('userCUFields').getForm().setValues(fieldUpdater);\r",
                    "Ext.getCmp('userCUTaxonomy').getForm().setValues(record.get(\"taxonomy\"));\r",
                    "var credentialsForm=Ext.widget(\"userUpdateCreadentialsForm\");\r",
                    "myEditor.getComponent(0).add(credentialsForm);\r",
                    "credentialsForm.getForm().setValues(record.getData());\r",
                    "credentialsForm.targetRecord=record;\r",
                    "if (Ext.isEmpty(record.get(\"photo\"))) {\r",
                    "    Ext.getCmp(\"userCUAdminProfilePicture\").setSrc(\"resources/images/userBig.png\");\r",
                    "} else {\r",
                    "    Ext.getCmp(\"userCUAdminProfilePicture\").setSrc(\"image/get?file-id=\"+record.get(\"photo\"));\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp(\"userCUSaveBtn\").on(\"click\", function(){\r",
                    "    me.editUser(record);\r",
                    "});"
                ]
            },
            "designerId": "4d5b5628-bef3-487a-af37-34fade66fe3a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createUser",
                "designer|params": [
                    "userType"
                ],
                "implHandler": [
                    "var fieldsForm=Ext.getCmp(\"userCUFields\");\r",
                    "var taxoForm=Ext.getCmp(\"userCUTaxonomy\");\r",
                    "if ((fieldsForm.isValid())&&(taxoForm.isValid())){\r",
                    "    var newUser={ };\r",
                    "    var fieldValues=fieldsForm.getValues();\r",
                    "    newUser.name=fieldValues.name;\r",
                    "    newUser.email=fieldValues.email;\r",
                    "    newUser.login=newUser.email;\r",
                    "    delete fieldValues.name;\r",
                    "    delete fieldValues.email;\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"userCUFields\").query(\"checkboxgroup\"),function(cbGroup){\r",
                    "                fieldValues[cbGroup.name]=cbGroup.getValue();\r",
                    "            });\r",
                    "    newUser.fields=fieldValues;\r",
                    "    newUser.taxonomy=taxoForm.getValues();\r",
                    "    newUser.typeId=userType.get(\"id\");\r",
                    "    newUser.groups=[ ];\r",
                    "    newUser.groups.push(userType.get(\"defaultGroup\"));\r",
                    "    newUser.defaultGroup=userType.get(\"defaultGroup\");\r",
                    "    newUser.status=\"approved\";\r",
                    "    newUser.startValidity=null;\r",
                    "    newUser.endValidity=null;\r",
                    "    Ext.getCmp(\"usersInterfaceCenterGrid\").getStore().add(newUser);\r",
                    "    Ext.getCmp(\"UserCreateUpdateWindow\").close();\r",
                    "}"
                ]
            },
            "designerId": "7db4d0af-1a42-4a99-8d3d-d216142a9f63"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onEditUserBtnClick",
                "implHandler": [
                    "var record=Ext.getCmp(\"usersInterfaceCenterGrid\").getSelectionModel().getLastSelected();\r",
                    "this.fireUserEdit(record);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#editUserBtn"
            },
            "designerId": "05628b37-3088-465b-a70a-b38800d4c5b4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRemoveUserBtnClick",
                "implHandler": [
                    "Ext.getCmp(\"usersInterfaceCenterGrid\").getStore().remove(Ext.getCmp(\"usersInterfaceCenterGrid\").getSelectionModel().getSelection());"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#removeUserBtn"
            },
            "designerId": "bcd3357d-c2b4-463c-a421-2738dc818d10"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "editUser",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "var fieldsForm=Ext.getCmp(\"userCUFields\");\r",
                    "var taxoForm=Ext.getCmp(\"userCUTaxonomy\");\r",
                    "var credentialsForm=Ext.getCmp(\"userUpdateCreadentialsForm\");\r",
                    "if ((fieldsForm.isValid())&&(taxoForm.isValid())&&(credentialsForm.isValid())){\r",
                    "    var newUser={ };\r",
                    "    var fieldValues=fieldsForm.getValues();\r",
                    "    newUser.name=fieldValues.name;\r",
                    "    newUser.email=fieldValues.email;\r",
                    "    delete fieldValues.name;\r",
                    "    delete fieldValues.email;\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"userCUFields\").query(\"checkboxgroup\"),function(cbGroup){\r",
                    "                fieldValues[cbGroup.name]=cbGroup.getValue();\r",
                    "            });\r",
                    "    newUser.fields=fieldValues;\r",
                    "    newUser.taxonomy=taxoForm.getValues();\r",
                    "    Ext.apply(newUser,credentialsForm.getValues());\r",
                    "    record.set(newUser);\r",
                    "    Ext.getCmp(\"UserCreateUpdateWindow\").close();\r",
                    "}"
                ]
            },
            "designerId": "96c4de96-ca21-457e-af48-948cdfd36f8a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUsersInterfaceCenterGridItemDblClick",
                "implHandler": [
                    "Ext.getCmp(\"editUserBtn\").fireEvent(\"click\",Ext.getCmp(\"editUserBtn\"));"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#usersInterfaceCenterGrid"
            },
            "designerId": "26667fac-4d55-4f1a-bb6a-04f5bfaf269d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUserCUChangePictureBtnClick",
                "implHandler": [
                    "Ext.widget(\"PersoPicUploadWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#userCUChangePictureBtn"
            },
            "designerId": "f0f298f1-a903-4047-a1d0-e77020f45b20"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUserCUProfilePictureDeleteClick",
                "implHandler": [
                    "Ext.getCmp(\"userCUAdminProfilePicture\").setSrc(\"resources/images/userBig.png\");\r",
                    "Ext.getCmp(\"userUpdateCreadentialsForm\").targetRecord.set(\"photo\", null);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#userCUProfilePictureDelete"
            },
            "designerId": "19ad9f68-67b4-4218-8528-475e2ab0cffc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onUserCUChangePwdClick",
                "implHandler": [
                    "var window=Ext.widget(\"AdminPasswordChange\");\r",
                    "window.show();\r",
                    "window.getComponent(0).getForm().loadRecord(Ext.getCmp(\"userUpdateCreadentialsForm\").targetRecord);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#UserCUChangePwd"
            },
            "designerId": "0e4ce198-9235-4f97-8738-f62d1b25c869"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "prepareContext",
                "designer|params": [
                    "id, typeId"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "Ext.getStore(\"TaxonomyForUT2\").load();\r",
                    "if (Ext.isEmpty(Ext.getStore(\"GroupsComboStore\").getRange())){\r",
                    "    Ext.getStore(\"GroupsComboStore\").load();\r",
                    "}\r",
                    "Ext.getStore(\"UserTypesForUsers2\").clearFilter(true);\r",
                    "Ext.getStore(\"UserTypesForUsers2\").filter(\"id\",typeId);\r",
                    "Ext.getStore(\"UserTypesForUsers2\").load();\r",
                    "Ext.getStore(\"UnitaryUsersDataStore\").clearFilter(true);\r",
                    "Ext.getStore(\"UnitaryUsersDataStore\").filter(\"id\",id);\r",
                    "Ext.getStore(\"UnitaryUsersDataStore\").load();\r",
                    "var task = new Ext.util.DelayedTask(function(){\r",
                    "    me.fireUserEdit(Ext.getStore(\"UnitaryUsersDataStore\").getRange()[0],true);\r",
                    "});\r",
                    "task.delay(600);"
                ]
            },
            "designerId": "d8253939-a8e5-4273-a1f4-f57d05909c45"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onApproveSignUpBtnClick",
                "implHandler": [
                    "Ext.getCmp(\"usersInterfaceCenterGrid\").getSelectionModel().getLastSelected().set(\"status\", \"approved\");\r",
                    "button.up().disable();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#approveSignUpBtn"
            },
            "designerId": "2efee698-cd53-42d8-8c41-b04dbe9c9352"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDenySignUpBtnClick",
                "implHandler": [
                    "Ext.getCmp(\"usersInterfaceCenterGrid\").getSelectionModel().getLastSelected().set(\"status\", \"denied\");\r",
                    "button.up().disable();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#denySignUpBtn"
            },
            "designerId": "2456779b-3b7f-470f-89e5-42ee308836f0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddCTLayoutBtn1Click",
                "implHandler": [
                    "Ext.widget(\"NewUTLayoutWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addCTLayoutBtn1"
            },
            "designerId": "e1bb7278-da70-4ac6-a312-8996aa55dd17"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCopyCTLayoutBtn1Click",
                "implHandler": [
                    "var target = Ext.getCmp('CTLayoutsGrid1').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(target)) {\r",
                    "    var fenetre = Ext.widget('UTLCopyWindow');\r",
                    "    fenetre.show();\r",
                    "    fenetre.getComponent(0).getComponent(0).setValue(target.get(\"name\")+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i'));\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#copyCTLayoutBtn1"
            },
            "designerId": "84670b83-56cf-4114-b09c-a16118c18e9b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRemoveCTLayoutBtn1Click",
                "implHandler": [
                    "Ext.getCmp(\"CTLayoutsGrid1\").getStore().remove(Ext.getCmp(\"CTLayoutsGrid1\").getSelectionModel().getLastSelected());"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#RemoveCTLayoutBtn1"
            },
            "designerId": "5a7d0a5d-90ab-4578-9211-6b9a42b8dce3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onLayoutActivatorBtn1Click",
                "implHandler": [
                    "if (button.deactivateMode){\r",
                    "    Ext.getCmp(\"CTLayoutsGrid1\").getSelectionModel().getLastSelected().set(\"active\",false);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").setIconCls(\"ouiS\");\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").deactivateMode=false;\r",
                    "\r",
                    "} else {\r",
                    "    var mySite=Ext.getCmp(\"CTLayoutsGrid1\").getSelectionModel().getLastSelected().get(\"site\");\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"CTLayoutsGrid1\").getStore().query(\"site\",mySite).items,function(record){\r",
                    "        record.set(\"active\",false);\r",
                    "    });\r",
                    "    Ext.getCmp(\"CTLayoutsGrid1\").getSelectionModel().getLastSelected().set(\"active\",true);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").setText(Rubedo.RubedoAutomatedElementsLoc.deactivateText);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").setIconCls(\"nonS\");\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").deactivateMode=true;\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#layoutActivatorBtn1"
            },
            "designerId": "5d7d5759-978e-4e50-a9e1-bd05ee9c1d86"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCTLayoutsGrid1SelectionChange",
                "implHandler": [
                    "if (Ext.isEmpty(selected)){\r",
                    "    this.resetLayoutsInterfaceNoSelect();\r",
                    "} else {\r",
                    "    this.resetLayoutsInterfaceSelect(selected[0]);\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#CTLayoutsGrid1"
            },
            "designerId": "374f0f3a-bf63-4ce0-b390-7140244a3bff"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetLayoutsInterfaceSelect",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "Ext.getCmp(\"RemoveCTLayoutBtn1\").enable();\r",
                    "Ext.getCmp(\"copyCTLayoutBtn1\").enable();\r",
                    "Ext.getCmp(\"layoutEditionPanel1\").removeAll();\r",
                    "Ext.getCmp(\"layoutsEditToolbar1\").enable();\r",
                    "this.restoreLayout(record.get(\"rows\"),0,Ext.getCmp(\"layoutEditionPanel1\"));\r",
                    "Ext.getCmp(\"layoutElementIdField1\").setValue(null);\r",
                    "Ext.getCmp(\"layoutActivatorBtn1\").enable();\r",
                    "if (record.get(\"active\")){\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").setText(Rubedo.RubedoAutomatedElementsLoc.deactivateText);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").setIconCls(\"nonS\");\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").deactivateMode=true;\r",
                    "} else {\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").setIconCls(\"ouiS\");\r",
                    "    Ext.getCmp(\"layoutActivatorBtn1\").deactivateMode=false;\r",
                    "}\r",
                    "this.getFieldsListForLayout();"
                ]
            },
            "designerId": "4e3eb124-3f0e-467e-b32d-f09cd87f1e22"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetLayoutsInterfaceNoSelect",
                "implHandler": [
                    "Ext.getCmp(\"layoutEditionPanel1\").removeAll();\r",
                    "Ext.getCmp(\"RemoveCTLayoutBtn1\").disable();\r",
                    "Ext.getCmp(\"copyCTLayoutBtn1\").disable();\r",
                    "Ext.getCmp(\"layoutsEditToolbar1\").disable();\r",
                    "Ext.getCmp(\"layoutActivatorBtn1\").disable();\r",
                    "Ext.getStore(\"UTFieldsForLayouts\").removeAll();\r",
                    "Ext.getCmp(\"layoutElementIdField1\").setValue(null);\r",
                    "Ext.getCmp(\"layoutActivatorBtn1\").setText(Rubedo.RubedoAutomatedElementsLoc.activateText);\r",
                    "Ext.getCmp(\"layoutActivatorBtn1\").setIconCls(\"ouiS\");\r",
                    "Ext.getCmp(\"layoutActivatorBtn1\").deactivateMode=false;"
                ]
            },
            "designerId": "87153875-f90c-4455-be93-26042737c44b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getFieldsListForLayout",
                "implHandler": [
                    "var discoveredFields=[ ];\r",
                    "var usedFields=Ext.Array.pluck(Ext.getCmp(\"layoutEditionPanel1\").query(\"unBloc\"),\"name\");\r",
                    "if (!Ext.Array.contains(usedFields,\"email\")){\r",
                    "    discoveredFields.push({name:\"email\",label:\"E-mail\"});\r",
                    "}\r",
                    "if (!Ext.Array.contains(usedFields,\"name\")){\r",
                    "    discoveredFields.push({name:\"name\",label:\"Name\"});\r",
                    "}\r",
                    "if (!Ext.Array.contains(usedFields,\"photo\")){\r",
                    "    discoveredFields.push({name:\"photo\",label:\"Photo\"});\r",
                    "}\r",
                    "Ext.Array.forEach(Ext.getCmp('UTeditFields').query(\"ChampTC\"), function(field){\r",
                    "    if (!Ext.Array.contains(usedFields,field.getComponent(1).name)){\r",
                    "        discoveredFields.push({name:field.getComponent(1).name, label:field.getComponent(1).fieldLabel});\r",
                    "    }\r",
                    "});\r",
                    "Ext.getStore(\"UTFieldsForLayouts\").removeAll();\r",
                    "Ext.getStore(\"UTFieldsForLayouts\").add(discoveredFields);"
                ]
            },
            "designerId": "04c2f80a-d8d6-4560-9841-b205110e33d1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveLayout",
                "designer|params": [
                    "startComp"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var nRows=[ ];\r",
                    "Ext.Array.forEach(startComp.items.items, function(row){\r",
                    "    var newCols = [ ];\r",
                    "    var offset=0;\r",
                    "    Ext.Array.forEach(row.items.items, function(col){\r",
                    "        if (col.isXType(\"panel\")) {\r",
                    "            var fields=[ ];\r",
                    "            Ext.Array.forEach(col.items.items, function(field){\r",
                    "                fields.push({\r",
                    "                    title:field.title,\r",
                    "                    responsive:field.responsive,\r",
                    "                    responsiveClass:me.deudceResposiveClass(field.responsive),\r",
                    "                    name:field.name,\r",
                    "                    showLabel:field.showLabel,\r",
                    "                    elementStyle:field.elementStyle,\r",
                    "                    classHTML:field.classHTML,\r",
                    "                    flex:field.flex\r",
                    "                });\r",
                    "            });\r",
                    "            newCols.push({\r",
                    "                responsive:col.responsive,\r",
                    "                responsiveClass:me.deudceResposiveClass(col.responsive),\r",
                    "                classHTML:col.classHTML,\r",
                    "                elementStyle:col.elementStyle,\r",
                    "                span:col.flex,\r",
                    "                mType:\"col\",\r",
                    "                fields:fields,\r",
                    "                offset:offset\r",
                    "\r",
                    "            });\r",
                    "            offset=0;\r",
                    "        } else {offset=offset+col.flex;}\r",
                    "\r",
                    "        });\r",
                    "        nRows.push({\r",
                    "            elementStyle:row.elementStyle,\r",
                    "            mType:\"row\",\r",
                    "            responsive:row.responsive,\r",
                    "            responsiveClass:me.deudceResposiveClass(row.responsive),\r",
                    "            classHTML:row.classHTML,\r",
                    "            columns: newCols\r",
                    "\r",
                    "        });\r",
                    "    });\r",
                    "    return nRows;"
                ]
            },
            "designerId": "630ee55f-f7d0-414f-a9f9-1c22cbad551c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderRowTools",
                "designer|params": [
                    "component"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var configSpec = Ext.widget('ConfigSpecBloc');\r",
                    "configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,\r",
                    "    anchor:\"100%\",\r",
                    "    labelWidth:60,\r",
                    "    margin:\"0 0 10 0\",\r",
                    "    vertical:true,\r",
                    "    columns:1,\r",
                    "    items: [\r",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },\r",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},\r",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}}\r",
                    "    ]\r",
                    "\r",
                    "}));\r",
                    "configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "    itemId:\"eClassHTMLField\",\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.HTMLClassText,\r",
                    "    onChange:function(){\r",
                    "        if (this.isValid()){\r",
                    "            component.classHTML=this.getValue();\r",
                    "        }\r",
                    "    },\r",
                    "    labelWidth:60,\r",
                    "    allowBlank:true,\r",
                    "    anchor:\"100%\",\r",
                    "    margin:\"10 0 0 0\",\r",
                    "    value:component.classHTML\r",
                    "}));\r",
                    "configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "    itemId:\"eStyleField\",\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.styleText,\r",
                    "    onChange:function(){\r",
                    "        if (this.isValid()){\r",
                    "            component.elementStyle=this.getValue();\r",
                    "        }\r",
                    "    },\r",
                    "    labelWidth:60,\r",
                    "    allowBlank:true,\r",
                    "    anchor:\"100%\",\r",
                    "    margin:\"10 0 0 0\",\r",
                    "    value:component.elementStyle\r",
                    "}));\r",
                    "Ext.getCmp(\"layoutPropsPanel1\").add(configSpec);"
                ]
            },
            "designerId": "f9bed183-8e94-4abe-acc5-0faf89cd5dde"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderFieldTools",
                "designer|params": [
                    "component"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var configSpec = Ext.widget('ConfigSpecBloc');\r",
                    "configSpec.getComponent(0).add(Ext.widget('checkbox',{\r",
                    "    itemId:\"eTitleShowField\",\r",
                    "    fieldLabel:\"Display label\",\r",
                    "    onChange:function(){\r",
                    "\r",
                    "        component.showLabel=this.getValue();\r",
                    "\r",
                    "    },\r",
                    "    labelWidth:60,\r",
                    "    inputValue:true,\r",
                    "    anchor:\"100%\",\r",
                    "    margin:\"10 0 10 0\",\r",
                    "    checked:component.showLabel\r",
                    "}));\r",
                    "\r",
                    "configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,\r",
                    "    anchor:\"100%\",\r",
                    "    labelWidth:60,\r",
                    "    margin:\"0 0 10 0\",\r",
                    "    vertical:true,\r",
                    "    columns:1,\r",
                    "    items: [\r",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },\r",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},\r",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}}\r",
                    "    ]\r",
                    "\r",
                    "}));\r",
                    "configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "    itemId:\"eClassHTMLField\",\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.HTMLClassText,\r",
                    "    onChange:function(){\r",
                    "        if (this.isValid()){\r",
                    "            component.classHTML=this.getValue();\r",
                    "        }\r",
                    "    },\r",
                    "    labelWidth:60,\r",
                    "    allowBlank:true,\r",
                    "    anchor:\"100%\",\r",
                    "    margin:\"10 0 0 0\",\r",
                    "    value:component.classHTML\r",
                    "}));\r",
                    "configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "    itemId:\"eStyleField\",\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.styleText,\r",
                    "    onChange:function(){\r",
                    "        if (this.isValid()){\r",
                    "            component.elementStyle=this.getValue();\r",
                    "        }\r",
                    "    },\r",
                    "    labelWidth:60,\r",
                    "    allowBlank:true,\r",
                    "    anchor:\"100%\",\r",
                    "    margin:\"10 0 0 0\",\r",
                    "    value:component.elementStyle\r",
                    "}));\r",
                    "Ext.getCmp(\"layoutPropsPanel1\").add(configSpec);"
                ]
            },
            "designerId": "bcf59f92-0793-4002-9d28-03ff0b2a00be"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderMainBoxTools",
                "designer|params": [
                    "component"
                ],
                "implHandler": [
                    ""
                ]
            },
            "designerId": "1e19ad9c-6ad8-4369-9a9f-8a971287d829"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderColumnTools",
                "designer|params": [
                    "component"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var configSpec = Ext.widget('ConfigSpecBloc');\r",
                    "configSpec.getComponent(0).add(Ext.widget('displayfield',{\r",
                    "    value:\"\",\r",
                    "    labelWidth:180,\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.dbclickToAssignText\r",
                    "\r",
                    "\r",
                    "}));\r",
                    "configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,\r",
                    "    anchor:\"100%\",\r",
                    "    labelWidth:60,\r",
                    "    margin:\"0 0 10 0\",\r",
                    "    vertical:true,\r",
                    "    columns:1,\r",
                    "    items: [\r",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },\r",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},\r",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}}\r",
                    "    ]\r",
                    "\r",
                    "}));\r",
                    "var offsetEdit=Ext.widget('numberfield',{\r",
                    "    itemId:\"offsetEditor\",\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.offsetText,\r",
                    "    editable:false,\r",
                    "    labelWidth:60,\r",
                    "    allowDecimals:false,\r",
                    "    anchor:\"100%\",\r",
                    "    value:0,\r",
                    "    minValue:0\r",
                    "});\r",
                    "\r",
                    "var spanEdit=Ext.widget('numberfield',{\r",
                    "    itemId:\"spanEditor\",\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.spanText,\r",
                    "    labelWidth:60,\r",
                    "    editable:false,\r",
                    "    allowDecimals:false,\r",
                    "    anchor:\"100%\",\r",
                    "    value:component.flex,\r",
                    "    minValue:1\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "configSpec.getComponent(0).add(offsetEdit);\r",
                    "configSpec.getComponent(0).add(spanEdit);\r",
                    "me.applyConstrain(component,offsetEdit,spanEdit,false);\r",
                    "offsetEdit.on(\"change\",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});\r",
                    "spanEdit.on(\"change\",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});\r",
                    "\r",
                    "configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "    itemId:\"eClassHTMLField\",\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.HTMLClassText,\r",
                    "    onChange:function(){\r",
                    "        if (this.isValid()){\r",
                    "            component.classHTML=this.getValue();\r",
                    "        }\r",
                    "    },\r",
                    "    labelWidth:60,\r",
                    "    allowBlank:true,\r",
                    "    anchor:\"100%\",\r",
                    "    margin:\"10 0 0 0\",\r",
                    "    value:component.classHTML\r",
                    "}));\r",
                    "configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "    itemId:\"eStyleField\",\r",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.styleText,\r",
                    "    onChange:function(){\r",
                    "        if (this.isValid()){\r",
                    "            component.elementStyle=this.getValue();\r",
                    "        }\r",
                    "    },\r",
                    "    labelWidth:60,\r",
                    "    allowBlank:true,\r",
                    "    anchor:\"100%\",\r",
                    "    margin:\"10 0 0 0\",\r",
                    "    value:component.elementStyle\r",
                    "}));\r",
                    "Ext.getCmp(\"layoutPropsPanel1\").add(configSpec);"
                ]
            },
            "designerId": "c3f6c75b-f7e6-4162-9b40-861f013b03f5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "applyConstrain",
                "designer|params": [
                    "target",
                    "offsetF",
                    "spanF",
                    "applyFirst"
                ],
                "implHandler": [
                    "var myEol=target.up().getComponent(\"eol\");\r",
                    "var myOffset=null;\r",
                    "if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType(\"container\"))&&(!(target.prev().isXType(\"panel\")))) {\r",
                    "    myOffset=target.prev();\r",
                    "}\r",
                    "if (applyFirst) {\r",
                    "    myEol.flex=myEol.flex+target.flex-spanF.getValue();\r",
                    "    target.flex=spanF.getValue();\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "    offsetF.setMaxValue(offsetF.getValue()+myEol.flex);\r",
                    "    target.up().doLayout();\r",
                    "    if (offsetF.getValue()>0){ \r",
                    "        if (Ext.isEmpty(myOffset)) {\r",
                    "            myOffset=Ext.widget(\"container\",{flex:0,reorderable: false,style:\"{background-image:url(resources/images/stripes.png);}\"});\r",
                    "            target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);\r",
                    "\r",
                    "\r",
                    "        } \r",
                    "        myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "        myOffset.flex=offsetF.getValue();\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "        spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "        target.up().doLayout();\r",
                    "\r",
                    "    } else if((offsetF.getValue()===0)) {\r",
                    "        if (!Ext.isEmpty(myOffset)) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "            myOffset.flex=offsetF.getValue();\r",
                    "            offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "            spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "            myOffset.destroy();\r",
                    "            target.up().doLayout();      \r",
                    "        } \r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "else {\r",
                    "    if (Ext.isEmpty(myOffset)){\r",
                    "        offsetF.setValue(0);\r",
                    "        offsetF.setMaxValue(myEol.flex);\r",
                    "    }\r",
                    "    else {\r",
                    "        offsetF.setValue(myOffset.flex);\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex); \r",
                    "    }\r",
                    "\r",
                    "    spanF.setValue(target.flex);\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "}"
                ]
            },
            "designerId": "d0fd2c0f-d041-463b-b77f-e9e63c9dd3ea"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "deudceResposiveClass",
                "designer|params": [
                    "responsiveObj"
                ],
                "implHandler": [
                    "var responsiveArray=[ ];\r",
                    "Ext.Object.each(responsiveObj, function(key, value, myself) {\r",
                    "    if (value===true){\r",
                    "        responsiveArray.push(key);\r",
                    "    }\r",
                    "});\r",
                    "if (responsiveArray.length==3){\r",
                    "    return(\"\");\r",
                    "} else if (responsiveArray.length==2){\r",
                    "    var hiddenArray=[\"tablet\",\"desktop\",\"phone\"];\r",
                    "    var hiddenMedia=Ext.Array.difference(hiddenArray,responsiveArray);\r",
                    "    return(\"hidden-\"+hiddenMedia[0]);\r",
                    "} else if (responsiveArray.length==1){\r",
                    "    return(\"visible-\"+responsiveArray[0]);\r",
                    "} else {\r",
                    "    return(\"hidden\");\r",
                    "}"
                ]
            },
            "designerId": "ea4837c5-819b-48e6-9bdb-a833d6e73c69"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "restoreLayout",
                "designer|params": [
                    "mRows, its, cible"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "Ext.Array.forEach(mRows, function(row){\r",
                    "    var newRow = Ext.widget('panel', {\r",
                    "        header:false,\r",
                    "        mType:\"row\",\r",
                    "        plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],\r",
                    "        elementStyle:row.elementStyle,\r",
                    "        responsive:row.responsive,\r",
                    "        classHTML:row.classHTML,\r",
                    "        id:\"UTLayout-\"+Ext.id(),\r",
                    "        margin:4,\r",
                    "        layout: {\r",
                    "            type: 'hbox',\r",
                    "            align: 'stretch'\r",
                    "        }\r",
                    "    });\r",
                    "    var rFlex=1;\r",
                    "    var eolWidth=12;\r",
                    "    Ext.Array.forEach(row.columns, function(column){\r",
                    "        if (column.offset>0) {\r",
                    "            newRow.add(Ext.widget('container', {\r",
                    "                flex:column.offset,\r",
                    "                reorderable:false,\r",
                    "                style:\"{background-image:url(resources/images/stripes.png);}\"\r",
                    "            }));\r",
                    "            eolWidth=eolWidth-column.offset;\r",
                    "        }\r",
                    "        var isFinalCol=false;\r",
                    "        if (its<=0){isFinalCol=true;}\r",
                    "        var newCol=Ext.widget('panel', {\r",
                    "            header:false,\r",
                    "            flex:column.span,\r",
                    "            plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],\r",
                    "            final:isFinalCol,\r",
                    "            mType:'col',\r",
                    "            id:\"UTLayout-\"+Ext.id(),\r",
                    "            elementStyle:column.elementStyle,\r",
                    "            responsive:column.responsive,\r",
                    "            classHTML:column.classHTML,\r",
                    "            margin:4,\r",
                    "            layout: {\r",
                    "                type: 'vbox',\r",
                    "                align: 'stretch'\r",
                    "            }\r",
                    "        });\r",
                    "        if ((its>0)&&(column.isTerminal===false)) {\r",
                    "            rFlex=Ext.Array.max([rFlex,column.rows.length]);\r",
                    "            me.masqueRestit(column.rows,its-1,newCol);    \r",
                    "        }\r",
                    "\r",
                    "        eolWidth=eolWidth-column.span;\r",
                    "        Ext.Array.forEach(column.fields,function(field){\r",
                    "            var cloned=Ext.clone(field);\r",
                    "            cloned.id=\"UTLayout-\"+Ext.id();\r",
                    "            newCol.add(Ext.widget(\"unBloc\",cloned));\r",
                    "        });\r",
                    "        newRow.add(newCol);\r",
                    "\r",
                    "    });\r",
                    "    newRow.add(Ext.widget(\"container\",{\r",
                    "        flex:eolWidth,\r",
                    "        reorderable:false,\r",
                    "        itemId:\"eol\"\r",
                    "    }));\r",
                    "    if (Ext.isEmpty(row.height)) {\r",
                    "        newRow.flex=rFlex;\r",
                    "    } else {\r",
                    "        newRow.height=row.height;\r",
                    "    }\r",
                    "    cible.add(newRow);  \r",
                    "});"
                ]
            },
            "designerId": "acefa262-dd95-40ce-b7f9-516d7135b6ac"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewCTLayoutWindowSubmitBtn1Click",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    var obs=form.getValues();\r",
                    "    obs.rows=[ ];\r",
                    "    Ext.getStore(\"UTLayouts\").add(obs);\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#NewCTLayoutWindowSubmitBtn1"
            },
            "designerId": "c8315aff-13a3-4415-a38d-8294093f352f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCTLCopyLSubitBtn1Click",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    var data = Ext.getCmp('CTLayoutsGrid1').getSelectionModel().getSelection()[0].getData();\r",
                    "    data.active=false;\r",
                    "    Ext.apply(data, form.getValues());\r",
                    "    Ext.getCmp('CTLayoutsGrid1').getStore().add(data);\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#CTLCopyLSubitBtn1"
            },
            "designerId": "76e723aa-2a83-45a1-b1c5-23841f941449"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCTLayoutsGrid1BeforeSelect",
                "implHandler": [
                    "var me=this;\r",
                    "var rec=Ext.getCmp(\"CTLayoutsGrid1\").getSelectionModel().getLastSelected();\r",
                    "if (!Ext.isEmpty(rec)){\r",
                    "    rec.set(\"rows\",me.saveLayout(Ext.getCmp(\"layoutEditionPanel1\")));\r",
                    "}"
                ],
                "name": "beforeselect",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#CTLayoutsGrid1"
            },
            "designerId": "06ade831-cea6-43c2-b989-1c5f4659e101"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onPanelAfterRender",
                "implHandler": [
                    "var me=this;\r",
                    "if (!component.isXType(\"unBloc\")){\r",
                    "    component.addBodyCls('contrastBorder');\r",
                    "    if (component.mType==\"col\"){\r",
                    "        component.addBodyCls('contrastRow');\r",
                    "    }\r",
                    "    component.getEl().on(\"mouseover\", function(e){\r",
                    "        component.setBorder(4);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    component.getEl().on(\"mouseout\", function(e){\r",
                    "        component.setBorder(2);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    component.getEl().on(\"click\", function(e){\r",
                    "        Ext.getCmp(\"layoutElementIdField1\").setValue(component.getId());\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "} else {\r",
                    "    component.getEl().on(\"mouseover\", function(e){\r",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());\r",
                    "        if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {\r",
                    "            component.setIconCls('selectBloc');\r",
                    "        }\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    component.getEl().on(\"mouseout\", function(e){\r",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());\r",
                    "        if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {\r",
                    "        component.setIconCls();}\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    component.getEl().on(\"click\", function(e){\r",
                    "        Ext.getCmp(\"layoutElementIdField1\").setValue(component.getId());\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    component.header.add(Ext.widget(\"tool\",{\r",
                    "        type:\"close\",\r",
                    "        handler:function(){\r",
                    "            component.up().remove(component);\r",
                    "            me.getFieldsListForLayout();\r",
                    "        }\r",
                    "    }));\r",
                    "\r",
                    "}"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#layoutEditionPanel1 panel"
            },
            "designerId": "06e39ee7-0984-41e8-a10b-fd62918ff4e2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onLayoutEditionPanel1AfterRender",
                "implHandler": [
                    "component.setBorder(2);\r",
                    "component.addBodyCls('contrastCBorder');\r",
                    "component.getEl().on(\"mouseover\", function(e){\r",
                    "    component.setBorder(4);\r",
                    "    e.stopEvent();\r",
                    "});\r",
                    "component.getEl().on(\"mouseout\", function(e){\r",
                    "    component.setBorder(2);\r",
                    "    e.stopEvent();\r",
                    "});\r",
                    "component.getEl().on(\"click\", function(e){\r",
                    "    Ext.getCmp(\"layoutElementIdField1\").setValue(component.getId());\r",
                    "    e.stopEvent();\r",
                    "});"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#layoutEditionPanel1"
            },
            "designerId": "fec28a11-a4e3-4eec-a062-37f6b890a538"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onLayoutElementIdField1Change",
                "implHandler": [
                    "var me=this;\r",
                    "var newSelected=Ext.getCmp(newValue);\r",
                    "Ext.Array.forEach(Ext.getCmp(\"layoutsEditToolbar1\").items.items,function(item){\r",
                    "    item.disable();\r",
                    "});\r",
                    "Ext.getCmp(\"layoutPropsPanel1\").removeAll();\r",
                    "Ext.getCmp(\"layoutPropsPanel1\").setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);\r",
                    "Ext.getCmp(\"layoutPropsPanel1\").setIconCls();\r",
                    "Ext.getCmp(\"saveCTLayoutBtn1\").enable();\r",
                    "if (!Ext.isEmpty(newSelected)){\r",
                    "    newSelected.getEl().frame(MyPrefData.themeColor);\r",
                    "    newSelected.addBodyCls('selectedelement');\r",
                    "\r",
                    "\r",
                    "    if (newSelected.getId()==\"layoutEditionPanel1\"){\r",
                    "        Ext.getCmp(\"addRowToLayoutBtn1\").enable();\r",
                    "        Ext.getCmp(\"layoutPropsPanel1\").setTitle(Rubedo.RubedoAutomatedElementsLoc.rootText);\r",
                    "        Ext.getCmp(\"layoutPropsPanel1\").setIconCls('editZone');\r",
                    "        me.renderMainBoxTools(newSelected);\r",
                    "    } else if (newSelected.mType==\"row\"){\r",
                    "        Ext.getCmp(\"removeLayoutElementBtn1\").enable();\r",
                    "        Ext.getCmp(\"layoutPropsPanel1\").setTitle(Rubedo.RubedoAutomatedElementsLoc.lignText);\r",
                    "        Ext.getCmp(\"layoutPropsPanel1\").setIconCls('editZone');\r",
                    "        Ext.getCmp(\"moveLayoutItemUpBtn1\").enable();\r",
                    "        Ext.getCmp(\"moveLayoutItemDownBtn1\").enable();\r",
                    "        if (newSelected.getComponent(\"eol\").flex>0){\r",
                    "            Ext.getCmp(\"addColToLayoutBtn1\").enable();\r",
                    "        }\r",
                    "        me.renderRowTools(newSelected);\r",
                    "    } else if (newSelected.mType==\"col\"){\r",
                    "        Ext.getCmp(\"removeLayoutElementBtn1\").enable();\r",
                    "        if (!Ext.isEmpty(Ext.getStore(\"UTFieldsForLayouts\").getRange())){\r",
                    "            Ext.getCmp(\"assignFieldToColBtn1\").enable();\r",
                    "        }\r",
                    "        Ext.getCmp(\"layoutPropsPanel1\").setTitle(Rubedo.RubedoAutomatedElementsLoc.columnText);\r",
                    "        Ext.getCmp(\"layoutPropsPanel1\").setIconCls('editZone');\r",
                    "        me.renderColumnTools(newSelected);\r",
                    "    } else if (newSelected.isXType(\"unBloc\")){\r",
                    "        Ext.getCmp(\"removeLayoutElementBtn1\").enable();\r",
                    "        newSelected.setIconCls('editBloc');\r",
                    "        newSelected.removeBodyCls('selectedelement');\r",
                    "        Ext.getCmp(\"moveLayoutItemUpBtn1\").enable();\r",
                    "        Ext.getCmp(\"moveLayoutItemDownBtn1\").enable();\r",
                    "        Ext.getCmp(\"layoutPropsPanel1\").setIconCls('editBloc');\r",
                    "        Ext.getCmp(\"layoutPropsPanel1\").setTitle(Rubedo.RubedoAutomatedElementsLoc.fieldText+\" : \"+newSelected.title);\r",
                    "        me.renderFieldTools(newSelected);\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "var oldSelected=Ext.getCmp(oldValue);\r",
                    "if (!Ext.isEmpty(oldSelected)){\r",
                    "    oldSelected.removeBodyCls('selectedelement');\r",
                    "    oldSelected.setIconCls();\r",
                    "}"
                ],
                "name": "change",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Hidden",
                "designer|controlQuery": "#layoutElementIdField1"
            },
            "designerId": "fd9f1ee9-d210-44f5-aca2-b684ae227a6d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddRowToLayoutBtn1Click",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());\r",
                    "var row = Ext.widget('panel', {\r",
                    "    header:false,\r",
                    "    mType:\"row\",\r",
                    "    flex:1,\r",
                    "    id:\"UTLayout-\"+Ext.id(),\r",
                    "    plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],\r",
                    "    elementStyle:\"\",\r",
                    "    responsive:{\r",
                    "        phone:true,\r",
                    "        tablet:true,\r",
                    "        desktop:true\r",
                    "    },\r",
                    "    margin:4,\r",
                    "    layout: {\r",
                    "        type: 'hbox',\r",
                    "        align: 'stretch'\r",
                    "    }\r",
                    "});\r",
                    "row.add(Ext.widget('container', {flex:12,reorderable:false,itemId:\"eol\"}));\r",
                    "cible.insert(cible.items.items.length,row);\r",
                    "Ext.getCmp('layoutElementIdField1').setValue(row.getId());"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addRowToLayoutBtn1"
            },
            "designerId": "b9924a86-65f7-45e4-a0fb-3288b2d5493b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddColToLayoutBtn1Click",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());\r",
                    "var myEol=cible.getComponent('eol');\r",
                    "\r",
                    "if (myEol.flex>0) {\r",
                    "    var isFinalCol=true;\r",
                    "    var newCol=Ext.widget('panel', {\r",
                    "        header:false,\r",
                    "        flex:1,\r",
                    "        elementStyle:\"\",\r",
                    "        final:isFinalCol,\r",
                    "        id:\"UTLayout-\"+Ext.id(),\r",
                    "        plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],\r",
                    "        responsive:{\r",
                    "            phone:true,\r",
                    "            tablet:true,\r",
                    "            desktop:true\r",
                    "        },\r",
                    "        mType:'col',\r",
                    "        margin:4,\r",
                    "        layout: {\r",
                    "            type: 'vbox',\r",
                    "            align: 'stretch'\r",
                    "        }\r",
                    "    });\r",
                    "    myEol.flex=myEol.flex-1;\r",
                    "    cible.insert(cible.items.items.length-1,newCol);\r",
                    "    if (myEol.flex===0){\r",
                    "        button.disable();\r",
                    "    }\r",
                    "    Ext.getCmp('layoutElementIdField1').setValue(newCol.getId());\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addColToLayoutBtn1"
            },
            "designerId": "ba8fc7f2-702a-46ad-a0b9-200d9de97dfb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAssignFieldToColBtn1Click",
                "implHandler": [
                    "Ext.widget(\"AssignFieldToColWindow1\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#assignFieldToColBtn1"
            },
            "designerId": "20ef8774-4a8f-4a53-be32-2110b26c1d13"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRemoveLayoutElementBtn1Click",
                "implHandler": [
                    "var me=this;\r",
                    "var cible=Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());\r",
                    "var recalc=false;\r",
                    "if (cible.isXType(\"unBloc\")){\r",
                    "    recalc=true;\r",
                    "}\r",
                    "if (cible.mType==\"col\"){\r",
                    "    var myEol=cible.up().getComponent(\"eol\");\r",
                    "    var myOffset=cible.previousSibling();\r",
                    "    if (!Ext.isEmpty(myOffset)) {\r",
                    "        if ((myOffset.isXType(\"container\"))&&(!(myOffset.isXType(\"panel\")))) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex;\r",
                    "            myOffset.up().remove(myOffset);\r",
                    "        }\r",
                    "    }\r",
                    "    myEol.flex=myEol.flex+cible.flex;\r",
                    "\r",
                    "}\r",
                    "cible.up().remove(cible);\r",
                    "Ext.getCmp('layoutElementIdField1').setValue(null);\r",
                    "if (recalc){\r",
                    "    me.getFieldsListForLayout();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#removeLayoutElementBtn1"
            },
            "designerId": "28147472-4f4b-491a-9869-2ff3f121d8cc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMoveLayoutItemUpBtn1Click",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp(\"layoutElementIdField1\").getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().items.indexOf(field);\r",
                    "    if (pos > 0) {\r",
                    "        field.up().move(pos,pos-1);\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#moveLayoutItemUpBtn1"
            },
            "designerId": "2c487c35-63b6-489c-a7e3-eada9fe26685"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMoveLayoutItemDownBtn1Click",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp(\"layoutElementIdField1\").getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().items.indexOf(field);\r",
                    "    field.up().move(pos,pos+1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#moveLayoutItemDownBtn1"
            },
            "designerId": "46566bae-70a6-4e4c-ba14-b7f9bf2dcc2d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCTLayoutFieldInjectorGrid1ItemDblClick",
                "implHandler": [
                    "var me=this;\r",
                    "var target=Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue());\r",
                    "if ((!Ext.isEmpty(target))&&(target.mType==\"col\")){\r",
                    "    var name=record.get(\"name\");\r",
                    "    var label=record.get(\"label\");\r",
                    "    var newField = Ext.widget('unBloc', {title:label,id:\"UTLayout-\"+Ext.id()});\r",
                    "    newField.responsive={\r",
                    "        \"phone\":true,\r",
                    "        \"tablet\":true,\r",
                    "        \"desktop\":true\r",
                    "    };\r",
                    "    newField.elementStyle=\"\";\r",
                    "    newField.flex=1;\r",
                    "    newField.name=name;\r",
                    "    target.add(newField);\r",
                    "    me.getFieldsListForLayout();\r",
                    "}"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#CTLayoutFieldInjectorGrid1"
            },
            "designerId": "713a4707-a834-44d3-afab-a2da6fb3ef39"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAssignFieldToLayoutSubmitBtn2Click",
                "implHandler": [
                    "var me=this;\r",
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    var name=form.getValues().field;\r",
                    "    var label=Ext.getStore(\"UTFieldsForLayouts\").findRecord(\"name\",name).get(\"label\");\r",
                    "    var newField = Ext.widget('unBloc', {title:label,id:\"UTLayout-\"+Ext.id()});\r",
                    "    newField.responsive={\r",
                    "        \"phone\":true,\r",
                    "        \"tablet\":true,\r",
                    "        \"desktop\":true\r",
                    "    };\r",
                    "    newField.elementStyle=\"\";\r",
                    "    newField.flex=1;\r",
                    "    newField.name=name;\r",
                    "    Ext.getCmp(Ext.getCmp('layoutElementIdField1').getValue()).add(newField);\r",
                    "    button.up().up().close();\r",
                    "    me.getFieldsListForLayout();\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#assignFieldToLayoutSubmitBtn2"
            },
            "designerId": "2226125e-c362-4fc2-84d5-9c293180b049"
        }
    ]
}