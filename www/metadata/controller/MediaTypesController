{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "MediaTypesController",
        "designer|userAlias": "MediaTypesController"
    },
    "designerId": "2a85a03b-de9d-4abc-80a4-82114d4267cf",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewMTBtnClick",
                "implHandler": [
                    "Ext.widget(\"newMTWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newMTBtn"
            },
            "designerId": "8e5babb4-2faa-4faf-a51f-9b4c3d7849d8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCreateNewMTBtnClick",
                "implHandler": [
                    "if (button.up().getForm().isValid()) {\r",
                    "    var newMT=Ext.create(\"Rubedo.model.mediaTypeModel\",button.up().getForm().getValues());\r",
                    "    var nativeLanguage=Ext.getCmp(\"workingLanguageField\").getValue();\r",
                    "    var i18n= { };\r",
                    "    i18n[nativeLanguage]=button.up().getForm().getValues();\r",
                    "    newMT.set(\"vocabularies\", [ ]);\r",
                    "    newMT.set(\"fields\", [ ]);\r",
                    "    newMT.set(\"nativeLanguage\", nativeLanguage);\r",
                    "    newMT.set(\"i18n\", i18n);\r",
                    "    Ext.getStore(\"MediaTypes\").add(newMT);\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#createNewMTBtn"
            },
            "designerId": "c2ea7078-1d68-4214-84af-6a2dfcb589ca"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetInterfaceNoSelect",
                "implHandler": [
                    "Ext.Array.forEach(Ext.getCmp(\"mediaTypesInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.disable();});\r",
                    "Ext.getCmp(\"removeMTBtn\").disable();\r",
                    "Ext.getCmp(\"mediaTypesInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"mediaTypesInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"Types de médias\", iconCls:\"mediaTypes\",localiserId:\"damTypesLaunchBtn\"}));\r",
                    "Ext.getCmp('MTeditFields').removeAll();\r",
                    "Ext.getCmp(\"MTfieldUp\").disable();\r",
                    "Ext.getCmp(\"MTfieldDown\").disable();\r",
                    "Ext.getCmp(\"MTfieldDeleter\").disable();\r",
                    "Ext.getCmp('MTFieldId').setValue();\r",
                    "Ext.getCmp(\"MTFieldConfigsBox\").getComponent(0).getComponent(0).removeAll();\r",
                    "Ext.getCmp(\"MTFieldConfigsBox\").getComponent(0).getComponent(1).removeAll();\r",
                    "Ext.getCmp(\"MTcenterZone\").disable();\r",
                    "Ext.getCmp(\"mediaTypesEditForm\").getForm().reset();\r",
                    "Ext.getCmp(\"mediaTypesInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();"
                ]
            },
            "designerId": "22525587-131f-47d2-adad-c4b415572d62"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetInterfaceSelect",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "var me =this;\r",
                    "Ext.Array.forEach(Ext.getCmp(\"mediaTypesInterface\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btng){btng.enable();});\r",
                    "Ext.getCmp(\"removeMTBtn\").enable();\r",
                    "Ext.getCmp(\"mediaTypesInterface\").getComponent(\"breadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"mediaTypesInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: \"Types de médias\", iconCls:\"mediaTypes\",localiserId:\"damTypesLaunchBtn\"}));\r",
                    "Ext.getCmp(\"mediaTypesInterface\").getComponent(\"breadcrumb\").add(Ext.widget(\"button\", {text: record.get(\"type\"), iconCls:\"mediaTypes\"}));\r",
                    "Ext.getCmp(\"MTcenterZone\").enable();\r",
                    "Ext.getCmp(\"MTfieldUp\").disable();\r",
                    "Ext.getCmp(\"MTfieldDown\").disable();\r",
                    "Ext.getCmp('MTFieldId').setValue();\r",
                    "Ext.getCmp(\"mediaTypesEditForm\").getForm().setValues(record.getData());\r",
                    "Ext.getCmp(\"MTfieldDeleter\").disable();\r",
                    "Ext.getCmp(\"MTFieldConfigsBox\").getComponent(0).getComponent(0).removeAll();\r",
                    "Ext.getCmp(\"MTFieldConfigsBox\").getComponent(0).getComponent(1).removeAll();\r",
                    "var metaBox = Ext.getCmp(\"mediaTypesInterface\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "var values= record.getData();\r",
                    "values.creation= Ext.Date.format(values.createTime, Ext.Date.defaultFormat);\r",
                    "values.derniereModification= Ext.Date.format(values.lastUpdateTime, Ext.Date.defaultFormat);\r",
                    "metaBox.update(values);\r",
                    "metaBox.show();\r",
                    "var selector= [];\r",
                    "Ext.Array.forEach(record.get(\"vocabularies\"),function(vocabId){\r",
                    "    if (!Ext.isEmpty(Ext.getCmp(\"vocabulariesMTGrid\").getStore().findRecord(\"id\", vocabId))){\r",
                    "        selector.push(Ext.getCmp(\"vocabulariesMTGrid\").getStore().findRecord(\"id\", vocabId));\r",
                    "    }\r",
                    "});\r",
                    "Ext.getCmp(\"vocabulariesMTGrid\").getSelectionModel().select(selector);\r",
                    "var targetZone=Ext.getCmp('MTeditFields');\r",
                    "Ext.suspendLayouts();\r",
                    "targetZone.removeAll();\r",
                    "Ext.Array.forEach(record.get(\"fields\"),function(field){\r",
                    "    me.renderMTField(field, targetZone);\r",
                    "});\r",
                    "Ext.resumeLayouts();\r",
                    "Ext.getCmp(\"MTeditFields\").doLayout();\r",
                    "if ((!ACL.interfaceRights[\"write.ui.damTypes\"])||(record.get(\"readOnly\"))) {\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"mediaTypesEditForm\").query(\"field\"), function(thing){thing.setReadOnly(true);});\r",
                    "    Ext.getCmp(\"removeMTBtn\").disable();\r",
                    "    Ext.getCmp(\"saveMTBtn\").disable();\r",
                    "    Ext.getCmp(\"MTImportBtn\").disable();\r",
                    "    Ext.getCmp(\"MTfieldDeleter\").up().disable();\r",
                    "} else {\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"mediaTypesEditForm\").query(\"field\"), function(thing){thing.setReadOnly(false);});\r",
                    "    Ext.getCmp(\"removeMTBtn\").enable();\r",
                    "    Ext.getCmp(\"saveMTBtn\").enable();\r",
                    "    Ext.getCmp(\"MTImportBtn\").enable();\r",
                    "    Ext.getCmp(\"MTfieldDeleter\").up().enable();\r",
                    "}\r",
                    "Ext.getCmp(\"MTLDLSToolbar\").recievei18n(record.get(\"i18n\"),record.get(\"locale\"),record.get(\"nativeLanguage\"));"
                ]
            },
            "designerId": "ee596e99-3cba-4350-b50b-6a028307d35a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMainMTGridSelect",
                "implHandler": [
                    "this.resetInterfaceSelect(record);"
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#mainMTGrid"
            },
            "designerId": "d77217b6-a7a4-4f45-9993-a859e9d721a8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRemoveMTBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var cible = Ext.getCmp('mainMTGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'dam-types/is-used',\r",
                    "        method:\"GET\",\r",
                    "        params: {\r",
                    "            id: cible.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var maskIsUsed=Ext.JSON.decode(response.responseText).used;\r",
                    "            if (maskIsUsed){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.mediaTypeIsUsedError);\r",
                    "            } else {\r",
                    "                var fenetre = Ext.widget('delConfirmZ');\r",
                    "                fenetre.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisMediaTypeText;\r",
                    "                fenetre.show();\r",
                    "                Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "                    Ext.getCmp('mainMTGrid').getStore().remove(cible);\r",
                    "                    Ext.getCmp('delConfirmZ').close();\r",
                    "                    me.resetInterfaceNoSelect();\r",
                    "\r",
                    "                }); \r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#removeMTBtn"
            },
            "designerId": "b44db20e-1956-4783-9446-c9967f5f33a9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateMT",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var form = Ext.getCmp(\"mediaTypesEditForm\").getForm();\r",
                    "if (form.isValid()){\r",
                    "    record.beginEdit();\r",
                    "    record.set(form.getValues());\r",
                    "    var newVocabularies=Ext.Array.pluck(Ext.Array.pluck(Ext.getCmp(\"vocabulariesMTGrid\").getSelectionModel().getSelection(), \"data\"), \"id\");\r",
                    "    record.set(\"vocabularies\", newVocabularies);\r",
                    "    record.set(\"fields\", me.recordFields(Ext.getCmp('MTeditFields')));\r",
                    "    Ext.getCmp(\"MTLDLSToolbar\").persisti18n(record);\r",
                    "    record.endEdit();\r",
                    "} else {\r",
                    "    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.invalidRightsPropertiesError);\r",
                    "}"
                ]
            },
            "designerId": "1170ac62-74f1-47f2-858d-bb865b9c5a83"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSaveMTBtnClick",
                "implHandler": [
                    "this.updateMT(Ext.getCmp(\"mainMTGrid\").getSelectionModel().getLastSelected());"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#saveMTBtn"
            },
            "designerId": "465a0fde-261b-4daa-a451-461beaa7941e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewMTFieldBtnClick",
                "implHandler": [
                    "Ext.widget(\"MTFieldAddWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newMTFieldBtn"
            },
            "designerId": "cfb4f6da-26ac-48b7-8c2b-61b9675b398b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderMTField",
                "designer|params": [
                    "protoData",
                    "renderTarget"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var configurator=protoData.config;\r",
                    "if (!Ext.isEmpty(configurator.i18n)){\r",
                    "    var BOLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "    if (!Ext.isEmpty(configurator.i18n[BOLanguage])){\r",
                    "        if (!Ext.isEmpty(configurator.i18n[BOLanguage].fieldLabel)){\r",
                    "            configurator.fieldLabel=configurator.i18n[BOLanguage].fieldLabel;\r",
                    "        }\r",
                    "        if (!Ext.isEmpty(configurator.i18n[BOLanguage].tooltip)){\r",
                    "            configurator.tooltip=configurator.i18n[BOLanguage].tooltip;\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "if (protoData.cType == 'combobox') {\r",
                    "    var myStore=  Ext.create('Ext.data.Store', Ext.clone(protoData.config.store));\r",
                    "    configurator.store = myStore;\r",
                    "}\r",
                    "var newField= Ext.create(protoData.cType, configurator);\r",
                    "newField.config=protoData.config;\r",
                    "newField.protoId=protoData.protoId;\r",
                    "newField.configFields=Ext.getStore(\"MTFieldsStore\").findRecord(\"id\", protoData.protoId).get(\"configFields\");\r",
                    "newField.cType=protoData.cType;\r",
                    "newField.anchor = '90%';\r",
                    "newField.style = '{float:left;}';\r",
                    "var casing =Ext.widget('ChampTC');\r",
                    "casing.add(newField);\r",
                    "casing.getComponent('helpBouton').setTooltip(configurator.tooltip);\r",
                    "if (Ext.isEmpty(configurator.tooltip)){\r",
                    "    casing.getComponent('helpBouton').hidden=true;\r",
                    "} \r",
                    "if (!me.nameAvailable(newField.name)) {\r",
                    "    var duplic = 1;\r",
                    "    while (!me.nameAvailable(newField.name+duplic)){\r",
                    "        duplic++;\r",
                    "    }\r",
                    "    newField.name=newField.name+duplic;\r",
                    "    newField.config.name=newField.config.name+duplic;\r",
                    "\r",
                    "}\r",
                    "renderTarget.add(casing);"
                ]
            },
            "designerId": "547a1bc7-fd3d-412f-aa2a-b78c6b945034"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "nameAvailable",
                "designer|params": [
                    "name"
                ],
                "implHandler": [
                    "var usedNames=[\"originalFileId\", \"title\"];\r",
                    "Ext.Array.forEach(Ext.getCmp('MTeditFields').query(\"field\"), function(field){\r",
                    "    Ext.Array.include(usedNames,field.name);\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(false);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "designerId": "50521139-945b-40a3-864c-341e337addf3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMTFieldInsertBtnClick",
                "implHandler": [
                    "var proto=Ext.clone(Ext.getCmp(\"MTFieldSelectGrid\").getSelectionModel().getLastSelected().getData());\r",
                    "proto.protoId=proto.id;\r",
                    "this.renderMTField(proto, Ext.getCmp('MTeditFields'));\r",
                    "button.up().up().close();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#MTFieldInsertBtn"
            },
            "designerId": "f2107c8d-ed5c-47c6-8e79-059e32c1e129"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "recordFields",
                "designer|params": [
                    "target"
                ],
                "implHandler": [
                    "var result = [ ];\r",
                    "Ext.Array.forEach(target.query(\"field\"), function(field){\r",
                    "    var newField = {\r",
                    "        cType:field.cType,\r",
                    "        config:field.config,\r",
                    "        protoId:field.protoId\r",
                    "    };\r",
                    "    if (field.isXType('combobox')) {\r",
                    "        var dones = field.getStore().data.items;\r",
                    "        var donesR = [ ];\r",
                    "        for (i=0; i<dones.length; i++) {\r",
                    "            donesR.push({valeur: dones[i].data.valeur, nom: dones[i].data.nom });\r",
                    "        }\r",
                    "        newField.config.store = {\r",
                    "            fields: ['valeur', 'nom'],\r",
                    "            data: donesR\r",
                    "        };\r",
                    "    }\r",
                    "    result.push(newField);\r",
                    "});\r",
                    "return(result);"
                ]
            },
            "designerId": "db2e8d2e-fa18-467d-ba4b-53c64981ee24"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMTFieldSelectGridItemDblClick",
                "implHandler": [
                    "this.onMTFieldInsertBtnClick(Ext.getCmp(\"MTFieldInsertBtn\"));"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#MTFieldSelectGrid"
            },
            "designerId": "714350f7-49ac-43ca-baa5-9ac28facd8dd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectionEvents",
                "implHandler": [
                    "var usedNames=[\"original\", \"text\"];\r",
                    "//MTFieldId\r",
                    "//MTFieldConfigsBox\r",
                    "var me=this;\r",
                    "var TCfield=component.getComponent(1);\r",
                    "TCfield.getEl().on('click', function() {\r",
                    "    Ext.getCmp(\"MTfieldUp\").enable();\r",
                    "    Ext.getCmp(\"MTfieldDown\").enable();\r",
                    "    Ext.getCmp(\"MTfieldDeleter\").enable();   \r",
                    "    if (Ext.getCmp('MTFieldId').getValue() != TCfield.id) {\r",
                    "        if (Ext.isDefined(Ext.getCmp(Ext.getCmp('MTFieldId').getValue()))){    \r",
                    "            Ext.getCmp(Ext.getCmp('MTFieldId').getValue()).getEl().applyStyles('color:#000000');\r",
                    "            var companion =Ext.getCmp(Ext.getCmp('MTFieldId').getValue()).up().getComponent(\"imageFieldComponent\");\r",
                    "            if (Ext.isDefined(companion)) {\r",
                    "                companion.getEl().applyStyles('color:#000000');\r",
                    "            }\r",
                    "        }\r",
                    "        Ext.getCmp('MTFieldId').setValue(TCfield.id);\r",
                    "        if (TCfield.isXType(\"ImagePickerField\")) {\r",
                    "            TCfield.up().getComponent(\"imageFieldComponent\").getEl().frame(MyPrefData.themeColor);\r",
                    "            TCfield.up().getComponent(\"imageFieldComponent\").getEl().applyStyles('color:'+MyPrefData.themeColor);\r",
                    "        } else {\r",
                    "            this.frame(MyPrefData.themeColor);\r",
                    "            this.applyStyles('color:'+MyPrefData.themeColor);\r",
                    "        }\r",
                    "        var mesChamps = TCfield.configFields;\r",
                    "        var boiteParam = Ext.getCmp('MTFieldConfigsBox').getComponent(0).getComponent(0);\r",
                    "        var boiteParam1 = Ext.getCmp('MTFieldConfigsBox').getComponent(0).getComponent(1);\r",
                    "        boiteParam.removeAll();\r",
                    "        boiteParam1.removeAll();\r",
                    "        for(t=0; t<mesChamps.length; t++) {\r",
                    "            if (mesChamps[t].type =='Ext.form.field.ComboBox') {\r",
                    "                var monStore=  Ext.create('Ext.data.Store', mesChamps[t].store);\r",
                    "                mesChamps[t].config.store= monStore;\r",
                    "            }\r",
                    "            var nouvChamp= Ext.create(mesChamps[t].type, mesChamps[t].config);\r",
                    "            nouvChamp.labelSeparator= ' ';\r",
                    "            nouvChamp.anchor='100%';\r",
                    "            if (nouvChamp.name==\"name\"){\r",
                    "                nouvChamp.validator=me.nameValidator;\r",
                    "            }\r",
                    "            nouvChamp.setValue(TCfield.config[nouvChamp.name]);\r",
                    "            if ((nouvChamp.name==\"fieldLabel\")||(nouvChamp.name==\"tooltip\")){\r",
                    "                nouvChamp.hide();\r",
                    "                var replacerField=Ext.widget('genericLocTextField',{\r",
                    "                    fieldLabel:nouvChamp.fieldLabel,\r",
                    "                    anchor:\"100%\",\r",
                    "                    targetEntity:TCfield.getId(),\r",
                    "                    targetEntityProp:nouvChamp.name,\r",
                    "                    CTMode:true,\r",
                    "                    companionFieldId:nouvChamp.getId(),\r",
                    "                    initialLanguage:Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\")\r",
                    "                });\r",
                    "                boiteParam.add(replacerField);\r",
                    "            }\r",
                    "            if ((nouvChamp.name==\"localizable\")&&(Ext.getStore(\"AllLanguagesStore3\").getRange().length==1)){\r",
                    "                nouvChamp.hide();\r",
                    "            }\r",
                    "            nouvChamp.setReadOnly((!ACL.interfaceRights[\"write.ui.damTypes\"])||(Ext.getCmp(\"mainMTGrid\").getSelectionModel().getLastSelected().get(\"readOnly\")));\r",
                    "            nouvChamp.on('change', function (thing) {\r",
                    "                if (thing.isValid()){\r",
                    "                    TCfield.config[this.name]= this.getValue();\r",
                    "                    if (this.name=='fieldLabel') {\r",
                    "                        if (TCfield.isXType(\"ImagePickerField\")) {\r",
                    "                            TCfield.up().getComponent(\"imageFieldComponent\").getComponent(0).setText(this.getValue()+\" \");\r",
                    "                        } else {\r",
                    "                            TCfield.setFieldLabel(this.getValue());\r",
                    "                        }\r",
                    "                    }\r",
                    "                    else if (this.name=='value') {\r",
                    "                        TCfield.setValue(this.getValue());\r",
                    "                    }\r",
                    "                    else if (this.name=='allowBlank') {\r",
                    "                        var currentOne=TCfield.config.fieldLabel;\r",
                    "                        if (this.getValue()) {\r",
                    "                            currentOne=currentOne.replace(\" *\",\"\");\r",
                    "                        } else {\r",
                    "                            currentOne=currentOne+\" *\";\r",
                    "                        } \r",
                    "                        TCfield.config.fieldLabel=currentOne;\r",
                    "                        if (TCfield.isXType(\"ImagePickerField\")) {\r",
                    "                            TCfield.up().getComponent(\"imageFieldComponent\").getComponent(0).setText(currentOne+\" \");\r",
                    "                        } else {\r",
                    "                            TCfield.setFieldLabel(currentOne);\r",
                    "                        }\r",
                    "                    }\r",
                    "                    else if (this.name=='editable') {\r",
                    "                        TCfield.setEditable(this.getValue());\r",
                    "                        TCfield.reset();\r",
                    "                    }\r",
                    "                    else if (this.name=='multiSelect') {\r",
                    "                        TCfield.multiSelect = this.getValue();\r",
                    "                        TCfield.reset();\r",
                    "                    }\r",
                    "                    else if (this.name=='tooltip') {\r",
                    "                        component.getComponent('helpBouton').setTooltip(this.getValue());\r",
                    "                        if (Ext.isEmpty(this.getValue())){\r",
                    "                            component.getComponent('helpBouton').hide();\r",
                    "                        } else {\r",
                    "                            component.getComponent('helpBouton').show();\r",
                    "                        }\r",
                    "                    }\r",
                    "                    else if (this.name=='regex') {\r",
                    "                        TCfield.regex = new RegExp(this.getValue());\r",
                    "                    }\r",
                    "                    else {\r",
                    "                        TCfield[this.name]= this.getValue();\r",
                    "                    }\r",
                    "                    TCfield.validate();\r",
                    "                }});\r",
                    "                if (mesChamps[t].isASearchField){\r",
                    "                        boiteParam1.add(nouvChamp);\r",
                    "                    } else {\r",
                    "                        boiteParam.add(nouvChamp); \r",
                    "                    } \r",
                    "\r",
                    "            }\r",
                    "            if ((TCfield.isXType('combobox'))&&(!(TCfield.isXType('timefield')))) {\r",
                    "                var optionsLC = Ext.widget('optionsLCGrid', {store : TCfield.getStore()});\r",
                    "                boiteParam.add(optionsLC);\r",
                    "\r",
                    "            }\r",
                    "        }\r",
                    "    });"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "ChampTC",
                "designer|controlQuery": "#MTeditFields ChampTC"
            },
            "designerId": "e8abaae2-47b0-4410-bcbb-850bb2d40ac7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "nameValidator",
                "designer|params": [
                    "name"
                ],
                "implHandler": [
                    "var usedNames=[\"originalFileId\", \"title\"];\r",
                    "Ext.Array.forEach(Ext.getCmp('MTeditFields').query(\"field\"), function(field){\r",
                    "    if (field.getId()!=Ext.getCmp(Ext.getCmp('MTFieldId').getValue()).getId()){\r",
                    "        Ext.Array.include(usedNames,field.name);\r",
                    "    }\r",
                    "});\r",
                    "if (Ext.Array.contains(usedNames,name)){\r",
                    "    return(Rubedo.RubedoAutomatedElementsLoc.fieldNameAlreadyUsedError);\r",
                    "} else {\r",
                    "    return(true);\r",
                    "}"
                ]
            },
            "designerId": "83e2eceb-7be1-4cda-854b-08eb3544d587"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMTfieldUpClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('MTFieldId').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    if (pos > 0) {\r",
                    "        field.up().up().move(pos,pos-1);\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#MTfieldUp"
            },
            "designerId": "cc03035e-3bda-4d69-a0b0-3411d1ea9a50"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMTfieldDownClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('MTFieldId').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().up().items.indexOf(field.up());\r",
                    "    field.up().up().move(pos,pos+1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#MTfieldDown"
            },
            "designerId": "9027f1c5-ddf1-4a26-845e-143bd0428347"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMTfieldDeleterClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp('MTFieldId').getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    field.up().destroy();\r",
                    "    Ext.getCmp(\"MTfieldUp\").disable();\r",
                    "    Ext.getCmp(\"MTfieldDown\").disable();\r",
                    "    Ext.getCmp('MTFieldId').setValue();\r",
                    "    Ext.getCmp(\"MTfieldDeleter\").disable();\r",
                    "    Ext.getCmp(\"MTFieldConfigsBox\").getComponent(0).getComponent(0).removeAll();\r",
                    "\tExt.getCmp(\"MTFieldConfigsBox\").getComponent(0).getComponent(1).removeAll();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#MTfieldDeleter"
            },
            "designerId": "624b2097-493d-4bc5-b0b4-53ebef83458a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCopyMTBtnClick",
                "implHandler": [
                    "var rec = Ext.clone(Ext.getCmp(\"mainMTGrid\").getSelectionModel().getLastSelected().data);\r",
                    "delete(rec.id);\r",
                    "rec.type=rec.type+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i');\r",
                    "rec.readOnly=false;\r",
                    "Ext.Object.each(rec.i18n, function(key, value, myself) {\r",
                    "    value.type=value.type+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i');\r",
                    "});\r",
                    "rec.code=rec.type.replace(/\\W/g, '');\r",
                    "delete(rec.version);\r",
                    "delete(rec.createTime);\r",
                    "delete(rec.lastUpdateTime);\r",
                    "Ext.getCmp(\"mainMTGrid\").getStore().add(rec);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#copyMTBtn"
            },
            "designerId": "dcdf96e3-e7bd-4224-9722-7768435a64fc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onPurgeDTDamTypeBtnClick",
                "implHandler": [
                    "var fenetre = Ext.widget('delConfirmZ');\r",
                    "fenetre.show();\r",
                    "Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "    var target = Ext.getCmp('mainMTGrid').getSelectionModel().getLastSelected();\r",
                    "    button.setLoading(true);\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'dam/delete-by-dam-type-id',\r",
                    "        method:\"POST\",\r",
                    "        params: {\r",
                    "            \"type-id\": target.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            button.setLoading(false);\r",
                    "\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, Rubedo.RubedoAutomatedElementsLoc.damTypeHasBeenEmptiedText);\r",
                    "        },\r",
                    "        failure: function(response) {\r",
                    "            button.setLoading(false);\r",
                    "            var message = Rubedo.RubedoAutomatedElementsLoc.contentsDeleteError;\r",
                    "            try {\r",
                    "                var answer = Ext.JSON.decode(response.responseText);\r",
                    "                if (answer.message){\r",
                    "                    message=answer.message;\r",
                    "                }\r",
                    "            } catch(err){}\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, message);\r",
                    "            }\r",
                    "        });\r",
                    "        Ext.getCmp('delConfirmZ').close();\r",
                    "\r",
                    "    }); "
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#purgeDTDamTypeBtn"
            },
            "designerId": "aaef4d14-5409-4025-8c3c-801bea5e3291"
        }
    ]
}