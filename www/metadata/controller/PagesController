{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "PagesController",
        "designer|userAlias": "PagesController"
    },
    "designerId": "b29235f7-9588-4632-b7ab-b0f2633b21ec",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "pageSiteSelect",
                "fn": "pageSiteSelect",
                "implHandler": [
                    "Ext.getStore(\"PagesDataStore\").getProxy().extraParams.filter=\"[{\\\"property\\\":\\\"site\\\",\\\"value\\\":\\\"\"+records[0].get(\"id\")+\"\\\"}]\";\r",
                    "Ext.getStore(\"PagesDataStore\").load();\r",
                    "Ext.getStore(\"MasksComboStore\").getProxy().extraParams.filter=\"[{\\\"property\\\":\\\"site\\\",\\\"value\\\":\\\"\"+records[0].get(\"id\")+\"\\\"}]\";\r",
                    "Ext.getStore(\"MasksComboStore\").load();\r",
                    "var filArianne = combo.up().up().up().getDockedComponent('filArianne');\r",
                    "var typeFil = filArianne.getComponent('type');\r",
                    "if (Ext.isDefined(typeFil)) {typeFil.setText(records[0].get(\"text\"));}\r",
                    "else { typeFil= Ext.widget('button',{iconCls: \"masque-icon\", text:records[0].get(\"text\")+\"<b> ></b>\", itemId:'type'});\r",
                    "typeFil.on(\"click\", function(){Ext.getCmp(\"mainPageTree\").getSelectionModel().select(Ext.getCmp(\"mainPageTree\").getRootNode());});\r",
                    "filArianne.insert(1,typeFil);\r",
                    "}\r",
                    "Ext.getCmp(\"pageTreeBreadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"addPageBtn\").enable();\r",
                    "Ext.getCmp(\"removePageBtn\").disable();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"contributionPages\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.disable();});\r",
                    "Ext.getCmp(\"mainPageEdition\").removeAll();\r",
                    "this.resetInterface();"
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.form.field.ComboBox",
                "designer|controlQuery": "#pagesSitesCombo"
            },
            "designerId": "7f866395-6912-493e-b496-40113840a82e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "openPageAddWindow",
                "fn": "openPageAddWindow",
                "implHandler": [
                    "Ext.widget(\"newPageWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addPageBtn"
            },
            "designerId": "cb9367d6-8b6d-41dd-a7d1-4a4ad74d5b92"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "createNewPage",
                "fn": "createNewPage",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "var target=Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected();\r",
                    "if (Ext.isEmpty(target)) {\r",
                    "    target=Ext.getCmp(\"mainPageTree\").getRootNode();\r",
                    "}\r",
                    "if (form.isValid()){\r",
                    "    var newPage=form.getValues();\r",
                    "    newPage.blocks=[ ];\r",
                    "    newPage.expandable=false;\r",
                    "\r",
                    "    newPage.iconCls=\"masque-icon\";\r",
                    "    newPage.site=Ext.getCmp(\"pagesSitesCombo\").getValue();\r",
                    "    newPage.inheritWorkspace=true;\r",
                    "    var store=Ext.getCmp(\"mainPageTree\").getStore();\r",
                    "    store.suspendAutoSync();\r",
                    "    target.set(\"expandable\",true);\r",
                    "    target.expand(false, function(){\r",
                    "        if (!target.hasChildNodes()){\r",
                    "            newPage.orderValue=100;\r",
                    "        } else {\r",
                    "            newPage.orderValue=target.lastChild.get(\"orderValue\")+100;\r",
                    "        }\r",
                    "        target.appendChild(newPage);\r",
                    "        store.resumeAutoSync();\r",
                    "        store.sync();        \r",
                    "        button.up().up().close();\r",
                    "    });\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newPageSubmitBtn"
            },
            "designerId": "58437311-2357-4c3b-99f1-a0fa5762da47"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "deletePage",
                "fn": "deletePage",
                "implHandler": [
                    "var me=this;\r",
                    "var target=Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected();\r",
                    "if (Ext.isDefined(target)) {\r",
                    "    var delCon = Ext.widget('delConfirmZ');\r",
                    "    delCon.show();\r",
                    "    var store=Ext.getCmp(\"mainPageTree\").getStore();\r",
                    "    Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "        store.suspendAutoSync();\r",
                    "        var myParent=target.parentNode;\r",
                    "        if ((myParent.childNodes.length==1)&&(!myParent.isRoot())){\r",
                    "            myParent.set(\"expandable\",false);\r",
                    "        }\r",
                    "        target.remove();\r",
                    "        store.resumeAutoSync();\r",
                    "        store.sync();\r",
                    "        Ext.getCmp(\"addPageBtn\").enable();\r",
                    "        Ext.getCmp(\"removePageBtn\").disable();\r",
                    "        Ext.Array.forEach(Ext.getCmp(\"contributionPages\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.disable();});\r",
                    "        Ext.getCmp(\"mainPageEdition\").removeAll();\r",
                    "        Ext.getCmp('delConfirmZ').close();\r",
                    "        me.resetInterface();\r",
                    "    });  \r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#removePageBtn"
            },
            "designerId": "054b6624-59d6-425e-8c55-a8dc5ed95e57"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "pageSelect",
                "fn": "pageSelect",
                "implHandler": [
                    "Ext.getStore(\"PageDisplayedContentsStore\").removeAll();\r",
                    "var me=this;\r",
                    "if (!record.isRoot()){\r",
                    "    if (Ext.getCmp(\"pageContentDisplayer\").up().activeTab.id==\"pageContentDisplayer\"){\r",
                    "        Ext.getCmp(\"pageContentDisplayer\").fireEvent(\"activate\", Ext.getCmp(\"pageContentDisplayer\"));\r",
                    "    }\r",
                    "    Ext.getCmp(\"removePageBtn\").enable();\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"contributionPages\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.enable();});\r",
                    "    Ext.getCmp(\"mainPageEdition\").removeAll();\r",
                    "    var myMask =Ext.getStore(\"MasksComboStore\").findRecord(\"id\", record.get(\"maskId\")); \r",
                    "    me.renderPage(Ext.clone(myMask.get(\"rows\")),1,Ext.getCmp(\"mainPageEdition\"));\r",
                    "    me.renderBlocks(Ext.clone(myMask.get(\"blocks\")), false);\r",
                    "    me.renderBlocks(Ext.clone(record.get(\"blocks\")), true);\r",
                    "    me.resetInterface();\r",
                    "    Ext.getCmp(\"mainPageAttributeForm\").getForm().loadRecord(record);\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"mainPageAttributeForm\").query(\"field\"), function(field){\r",
                    "        field.setReadOnly(false);\r",
                    "    });\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'xhr-get-page-url',\r",
                    "        params: {\r",
                    "            \"page-id\": record.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var targetedUrl = Ext.JSON.decode(response.responseText).url;\r",
                    "            Ext.getCmp(\"pagesInternalPreview\").add(Ext.widget(\"container\",{\r",
                    "                autoEl: {\r",
                    "                    tag: 'iframe',\r",
                    "                    src: targetedUrl+\"?preview=1\"\r",
                    "                }\r",
                    "            }));\r",
                    "        },\r",
                    "        failure:function(){\r",
                    "            Ext.Msg.alert('Erreur', 'Erreur dans la récupération de l\\'url de la page');\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "    Ext.getCmp(\"pagePreviewTextItem\").setText('Ceci est un aperçu de cette page telle que disponible en ligne en '+Ext.Date.format(new Date(), 'F j, Y, G:i '));\r",
                    "    var metaBox = Ext.getCmp(\"contributionPages\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "    var values= record.getData();\r",
                    "    values.creation= Ext.Date.format(values.createTime, 'd-m-Y');\r",
                    "    values.derniereModification= Ext.Date.format(values.lastUpdateTime, 'd-m-Y');\r",
                    "    metaBox.update(values);\r",
                    "    metaBox.show();\r",
                    "    Ext.getCmp(\"addPageBtn\").enable();\r",
                    "    if((!ACL.interfaceRights[\"write.ui.pages\"])||(record.get(\"readOnly\"))){\r",
                    "        Ext.getCmp(\"removePageBtn\").disable();\r",
                    "        Ext.getCmp(\"addPageBtn\").disable();\r",
                    "        Ext.getCmp(\"contributionPages\").getComponent(\"contextBar\").query(\"buttongroup\")[0].disable();\r",
                    "        Ext.getCmp(\"contributionPages\").getComponent(\"contextBar\").query(\"buttongroup\")[2].disable();\r",
                    "        Ext.Array.forEach(Ext.getCmp(\"mainPageAttributeForm\").query(\"field\"), function(field){\r",
                    "            field.setReadOnly(true);\r",
                    "        });\r",
                    "    }\r",
                    "} else {\r",
                    "    Ext.getCmp(\"addPageBtn\").enable();\r",
                    "    Ext.getCmp(\"removePageBtn\").disable();\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"contributionPages\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.disable();});\r",
                    "    Ext.getCmp(\"mainPageEdition\").removeAll();\r",
                    "    me.resetInterface();\r",
                    "    Ext.getCmp(\"addPageBtn\").enable();\r",
                    "}\r",
                    "var arButtons = [ ];\r",
                    "me.breadcrumbBuilder(record,arButtons);\r",
                    "Ext.getCmp(\"pageTreeBreadcrumb\").removeAll();\r",
                    "Ext.getCmp(\"pageTreeBreadcrumb\").add(arButtons.reverse());"
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.tree.Panel",
                "designer|controlQuery": "#mainPageTree"
            },
            "designerId": "16f72b7e-ea83-4f98-97e0-5e5f729e2d85"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "moveElementUp",
                "fn": "moveElementUp",
                "implHandler": [
                    "var target=Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());\r",
                    "if (!Ext.isEmpty(target)) {\r",
                    "    var pos = target.up().items.indexOf(target);\r",
                    "    if (pos > 0) {\r",
                    "        target.up().move(pos,pos-1);\r",
                    "        if (Ext.isEmpty(target.previousSibling())){\r",
                    "            target.orderValue=target.nextSibling().orderValue-1;\r",
                    "        } else {\r",
                    "            target.orderValue=(target.nextSibling().orderValue+target.previousSibling().orderValue)/2;\r",
                    "        }\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#pageElementUp"
            },
            "designerId": "420ce9f1-454c-4f4c-8647-48c6790b0b34"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "moveElementDown",
                "fn": "moveElementDown",
                "implHandler": [
                    "var target=Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());\r",
                    "if (!Ext.isEmpty(target)) {\r",
                    "    if (!Ext.isEmpty(target.nextSibling())){\r",
                    "        var pos = target.up().items.indexOf(target);\r",
                    "        target.up().move(pos,pos+1);\r",
                    "        if (Ext.isEmpty(target.nextSibling())){\r",
                    "            target.orderValue=target.previousSibling().orderValue+1;\r",
                    "        } else {\r",
                    "            target.orderValue=(target.nextSibling().orderValue+target.previousSibling().orderValue)/2;\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#pageElementDown"
            },
            "designerId": "901daf12-1778-4e89-ac53-1b8020101121"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "deleteElement",
                "fn": "deleteElement",
                "implHandler": [
                    "var target=Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());\r",
                    "target.destroy();\r",
                    "Ext.getCmp(\"newPageBloc\").disable();\r",
                    "Ext.getCmp(\"deletePageElement\").disable();\r",
                    "Ext.getCmp(\"addPageBtn\").disable();\r",
                    "Ext.getCmp(\"pageElementUp\").disable();\r",
                    "Ext.getCmp(\"pageElementDown\").disable();\r",
                    "Ext.getCmp('pageElementPropsPanel').removeAll();\r",
                    "Ext.getCmp('pageElementPropsPanel').setTitle(\"Sélectionnez un élément\");\r",
                    "Ext.getCmp('pageElementPropsPanel').setIconCls();\r",
                    "Ext.getCmp('pageElementIdField').setValue();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#deletePageElement"
            },
            "designerId": "a13fbc2a-6370-487c-86d0-5d282a58dd1c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderPage",
                "fn": "renderPage",
                "designer|params": [
                    "mRows",
                    "its",
                    "cible"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "Ext.Array.forEach(mRows, function(row){\r",
                    "\r",
                    "    if (row.id.indexOf(\"page-\")==-1) {\r",
                    "        row.id=\"page-\"+row.id;\r",
                    "    }\r",
                    "    var newRow = Ext.widget('panel', {\r",
                    "        header:false,\r",
                    "        mType:\"row\",\r",
                    "        eTitle:row.eTitle,\r",
                    "        id:row.id,\r",
                    "        responsive:row.responsive,\r",
                    "        classHTML:row.classHTML,\r",
                    "        idHTML:row.idHTML,\r",
                    "        displayTitle:row.displayTitle,\r",
                    "        margin:4,\r",
                    "        layout: {\r",
                    "            type: 'hbox',\r",
                    "            align: 'stretch'\r",
                    "        }\r",
                    "    });\r",
                    "    var rFlex=1;\r",
                    "    var eolWidth=12;\r",
                    "    Ext.Array.forEach(row.columns, function(column){\r",
                    "        if (column.offset>0) {\r",
                    "            newRow.add(Ext.widget('container', {\r",
                    "                flex:column.offset,\r",
                    "                style:\"{background-image:url(resources/images/stripes.png);}\"\r",
                    "            }));\r",
                    "            eolWidth=eolWidth-column.offset;\r",
                    "        }\r",
                    "        var isFinalCol=false;\r",
                    "        if (its<=0){isFinalCol=true;}\r",
                    "\r",
                    "        if (column.id.indexOf(\"page-\")==-1) {\r",
                    "            column.id=\"page-\"+column.id;\r",
                    "        }\r",
                    "        var newCol=Ext.widget('panel', {\r",
                    "            header:false,\r",
                    "            flex:column.span,\r",
                    "            final:isFinalCol,\r",
                    "            mType:'col',\r",
                    "            id:column.id,\r",
                    "            eTitle:column.eTitle,\r",
                    "            responsive:column.responsive,\r",
                    "            classHTML:column.classHTML,\r",
                    "            displayTitle:column.displayTitle,\r",
                    "            idHTML:column.idHTML,\r",
                    "            margin:4,\r",
                    "            layout: {\r",
                    "                type: 'vbox',\r",
                    "                align: 'stretch'\r",
                    "            }\r",
                    "        });\r",
                    "        if ((its>0)&&(column.isTerminal===false)) {\r",
                    "            rFlex=Ext.Array.max([rFlex,column.rows.length]);\r",
                    "            me.renderPage(column.rows,its-1,newCol);    \r",
                    "        }\r",
                    "\r",
                    "        eolWidth=eolWidth-column.span;\r",
                    "        newRow.add(newCol);\r",
                    "\r",
                    "    });\r",
                    "    newRow.add(Ext.widget(\"container\",{\r",
                    "        flex:eolWidth,\r",
                    "        itemId:\"eol\"\r",
                    "    }));\r",
                    "    if (Ext.isEmpty(row.height)) {\r",
                    "        newRow.flex=rFlex;\r",
                    "    } else {\r",
                    "        newRow.height=row.height;\r",
                    "    }\r",
                    "    cible.add(newRow);  \r",
                    "\r",
                    "\r",
                    "});"
                ]
            },
            "designerId": "3cbb5b15-cb09-4ba6-8385-f01b8ab94a69"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "columnSelector",
                "fn": "columnSelector",
                "implHandler": [
                    "if ((component.mType==\"col\")&&((Ext.isEmpty(component.items.items))||(component.items.items[0].isXType(\"unBloc\")))){\r",
                    "    component.addBodyCls('contrastBorder');\r",
                    "    component.addBodyCls('contrastRow');\r",
                    "    component.getEl().on(\"mouseover\", function(e){\r",
                    "        component.setBorder(4);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    component.getEl().on(\"mouseout\", function(e){\r",
                    "        component.setBorder(2);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    component.getEl().on(\"click\", function(e){\r",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());\r",
                    "        if (!Ext.isEmpty(prevSelected)) {\r",
                    "            if (prevSelected.isXType(\"unBloc\")) {prevSelected.setIconCls();} else {\r",
                    "        prevSelected.removeBodyCls('selectedelement');}\r",
                    "    }\r",
                    "    component.addBodyCls('selectedelement');\r",
                    "    this.frame(MyPrefData.themeColor);\r",
                    "    Ext.getCmp('pageElementIdField').setValue(component.id);\r",
                    "    Ext.getCmp(\"newPageBloc\").enable();\r",
                    "    Ext.getCmp(\"deletePageElement\").disable();\r",
                    "    Ext.getCmp(\"pageElementUp\").disable();\r",
                    "    Ext.getCmp(\"pageElementDown\").disable();\r",
                    "    var propEdit=Ext.getCmp('pageElementPropsPanel');\r",
                    "    propEdit.removeAll();\r",
                    "    propEdit.setTitle(component.id.replace(\"panel\", component.mType));\r",
                    "    propEdit.setIconCls('editZone');\r",
                    "    e.stopEvent();\r",
                    "});\r",
                    "}"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#mainPageEdition panel"
            },
            "designerId": "590c326a-45be-408d-8b0a-e3b354401fa7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "resetInterface",
                "fn": "resetInterface",
                "implHandler": [
                    "Ext.getCmp(\"newPageBloc\").disable();\r",
                    "Ext.getCmp(\"deletePageElement\").disable();\r",
                    "Ext.getCmp(\"addPageBtn\").disable();\r",
                    "Ext.getCmp(\"pageElementUp\").disable();\r",
                    "Ext.getCmp(\"pageElementDown\").disable();\r",
                    "Ext.getCmp('pageElementPropsPanel').removeAll();\r",
                    "Ext.getCmp('pageElementPropsPanel').setTitle(\"Sélectionnez un élément\");\r",
                    "Ext.getCmp('pageElementPropsPanel').setIconCls();\r",
                    "Ext.getCmp('pageElementIdField').setValue();\r",
                    "Ext.getCmp(\"pagesInternalPreview\").removeAll();\r",
                    "Ext.getCmp(\"mainPageAttributeForm\").getForm().setValues();\r",
                    "Ext.getCmp(\"mainPageAttributeForm\").getForm().reset();\r",
                    "Ext.getCmp(\"pagePreviewTextItem\").setText();\r",
                    "Ext.getCmp(\"contributionPages\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();"
                ]
            },
            "designerId": "0a4fb2d5-4c36-4c28-a7fb-b362837242c5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showBlocAddWindow",
                "fn": "showBlocAddWindow",
                "implHandler": [
                    "Ext.widget(\"ajoutBlocFenetre\").show();\r",
                    "Ext.getCmp(\"boutonAjouterBloc\").hide();\r",
                    "Ext.getCmp(\"addPageBlocBtn\").show();\r",
                    "Ext.getCmp(\"BlocsSelectGrid\").pageMode=true;"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newPageBloc"
            },
            "designerId": "7c7346db-dfbe-4691-ab04-fb477ab4085e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "insertBloc",
                "fn": "insertBloc",
                "implHandler": [
                    "var donnees = Ext.getCmp('BlocsSelectGrid').getSelectionModel().getLastSelected().data;\r",
                    "var nouvBloc = Ext.widget('unBloc', Ext.clone(donnees.configBasique));\r",
                    "nouvBloc.responsive={\r",
                    "    \"phone\":true,\r",
                    "    \"tablet\":true,\r",
                    "    \"desktop\":true\r",
                    "};\r",
                    "nouvBloc.canEdit=true;\r",
                    "nouvBloc.elementStyle=\"\";\r",
                    "nouvBloc.elementTag=\"div\";\r",
                    "nouvBloc.renderDiv=true;\r",
                    "\r",
                    "var target = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());\r",
                    "var orderValue = 1;\r",
                    "if (!Ext.isEmpty(target.items.items)) {\r",
                    "    orderValue=target.items.items[target.items.items.length-1].orderValue+1;\r",
                    "}\r",
                    "nouvBloc.orderValue=orderValue;\r",
                    "target.add(nouvBloc);\r",
                    "Ext.getCmp(\"ajoutBlocFenetre\").close();\r",
                    "nouvBloc.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#addPageBlocBtn"
            },
            "designerId": "37a082a3-056b-4f6c-ba17-9503a4c3bdae"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "blocSelection",
                "fn": "blocSelection",
                "implHandler": [
                    "if (component.canEdit){\r",
                    "    component.getEl().on(\"mouseover\", function(e){\r",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());\r",
                    "        if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {\r",
                    "            component.setIconCls('selectBloc');\r",
                    "        }\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    component.getEl().on(\"mouseout\", function(e){\r",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());\r",
                    "        if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {\r",
                    "        component.setIconCls();}\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    component.getEl().on(\"click\", function(e){\r",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('pageElementIdField').getValue());\r",
                    "        if (!Ext.isEmpty(prevSelected)) {\r",
                    "            if (prevSelected.isXType(\"unBloc\")) {prevSelected.setIconCls();} else {\r",
                    "        prevSelected.removeBodyCls('selectedelement');}\r",
                    "    }\r",
                    "    component.setIconCls('editBloc');\r",
                    "    Ext.getCmp(\"newPageBloc\").disable();\r",
                    "    Ext.getCmp(\"deletePageElement\").enable();\r",
                    "    Ext.getCmp(\"pageElementUp\").enable();\r",
                    "    Ext.getCmp(\"pageElementDown\").enable();\r",
                    "    this.frame(MyPrefData.themeColor);\r",
                    "    Ext.getCmp('pageElementIdField').setValue(component.id);\r",
                    "    var propEdit=Ext.getCmp('pageElementPropsPanel');\r",
                    "    propEdit.setTitle(component.id.replace(\"unBloc\", \"Bloc\"));\r",
                    "    propEdit.setIconCls('editBloc');\r",
                    "    propEdit.removeAll();\r",
                    "    var configSpec = Ext.widget('ConfigSpecBloc');\r",
                    "\r",
                    "\r",
                    "    configSpec.getComponent(0).add(Ext.widget('textfield',{\r",
                    "        itemId:\"eTitleField\",\r",
                    "        fieldLabel:\"Titre \",\r",
                    "        onChange:function(){\r",
                    "            if (this.isValid()){\r",
                    "                component.setTitle(this.getValue());\r",
                    "            }\r",
                    "        },\r",
                    "        labelWidth:60,\r",
                    "        allowBlank:false,\r",
                    "        anchor:\"100%\",\r",
                    "        margin:\"10 0 10 0\",\r",
                    "        value:component.title\r",
                    "    }));\r",
                    "    configSpec.getComponent(0).add(Ext.widget('checkbox',{\r",
                    "        itemId:\"eTitleShowField\",\r",
                    "        fieldLabel:\"Afficher le titre \",\r",
                    "        onChange:function(){\r",
                    "\r",
                    "            component.displayTitle=this.getValue();\r",
                    "\r",
                    "        },\r",
                    "        labelWidth:60,\r",
                    "        inputValue:true,\r",
                    "        anchor:\"100%\",\r",
                    "        margin:\"10 0 10 0\",\r",
                    "        checked:component.displayTitle\r",
                    "    }));\r",
                    "\r",
                    "\r",
                    "    /*\r",
                    "    configSpec.getComponent(0).add(Ext.widget('numberfield',{\r",
                    "    fieldLabel:\"Hauteur fluide \",\r",
                    "    onChange:function(){\r",
                    "    if(this.isValid()) {\r",
                    "    abstractcomponent.flex=this.getValue();\r",
                    "    abstractcomponent.up().doLayout();\r",
                    "    }\r",
                    "    },\r",
                    "    labelWidth:60,\r",
                    "    allowDecimals:false,\r",
                    "    allowBlank:false,\r",
                    "    minValue:1,\r",
                    "    anchor:\"100%\",\r",
                    "    margin:\"10 0 0 0\",\r",
                    "    value:abstractcomponent.flex\r",
                    "    }));\r",
                    "\r",
                    "    */\r",
                    "\r",
                    "    configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{\r",
                    "        fieldLabel:\"Visibilité \",\r",
                    "        anchor:\"100%\",\r",
                    "        labelWidth:60,\r",
                    "        margin:\"0 0 10 0\",\r",
                    "        vertical:true,\r",
                    "        columns:1,\r",
                    "        items: [\r",
                    "        { boxLabel: 'Téléphone', checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },\r",
                    "        { boxLabel: 'Tablette',checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},\r",
                    "        { boxLabel: 'Ordinateur',checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}}\r",
                    "        ]\r",
                    "\r",
                    "    }));  \r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "        itemId:\"eClassHTMLField\",\r",
                    "        fieldLabel:\"Classe HTML \",\r",
                    "        onChange:function(){\r",
                    "            if (this.isValid()){\r",
                    "                component.classHTML=this.getValue();\r",
                    "            }\r",
                    "        },\r",
                    "        labelWidth:60,\r",
                    "        allowBlank:true,\r",
                    "        anchor:\"100%\",\r",
                    "        margin:\"10 0 0 0\",\r",
                    "        value:component.classHTML\r",
                    "    }));\r",
                    "\r",
                    "\r",
                    "\r",
                    "    configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "        itemId:\"eidHTMLField\",\r",
                    "        fieldLabel:\"Id HTML \",\r",
                    "        onChange:function(){\r",
                    "            if (this.isValid()){\r",
                    "                component.idHTML=this.getValue();\r",
                    "            }\r",
                    "        },\r",
                    "        labelWidth:60,\r",
                    "        allowBlank:true,\r",
                    "        anchor:\"100%\",\r",
                    "        margin:\"10 0 0 0\",\r",
                    "        value:component.idHTML\r",
                    "    }));\r",
                    "\r",
                    "    configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "        itemId:\"urlPrefixHTMLField\",\r",
                    "        fieldLabel:\"Préfixe URL \",\r",
                    "        onChange:function(){\r",
                    "            if (this.isValid()){\r",
                    "                component.urlPrefix=this.getValue();\r",
                    "            }\r",
                    "        },\r",
                    "        labelWidth:60,\r",
                    "        regex :new RegExp(/^([a-z]|[1-9]|[-]){0,}$/),\r",
                    "        allowBlank:true,\r",
                    "        anchor:\"100%\",\r",
                    "        margin:\"10 0 0 0\",\r",
                    "        value:component.urlPrefix\r",
                    "    }));\r",
                    "    configSpec.getComponent(1).add(Ext.widget('textfield',{\r",
                    "        itemId:\"eStyleField\",\r",
                    "        fieldLabel:\"Style \",\r",
                    "        onChange:function(){\r",
                    "            if (this.isValid()){\r",
                    "                component.elementStyle=this.getValue();\r",
                    "            }\r",
                    "        },\r",
                    "        labelWidth:60,\r",
                    "        allowBlank:true,\r",
                    "        anchor:\"100%\",\r",
                    "        margin:\"10 0 0 0\",\r",
                    "        value:component.elementStyle\r",
                    "    }));\r",
                    "    configSpec.getComponent(1).add(Ext.widget('combobox',{\r",
                    "        itemId:\"eTagField\",\r",
                    "        fieldLabel:\"Tag \",\r",
                    "        queryMode:\"local\",\r",
                    "        store:[\"div\",\"span\",\"header\",\"section\",\"footer\"],\r",
                    "        onChange:function(){\r",
                    "            if (this.isValid()){\r",
                    "                component.elementTag=this.getValue();\r",
                    "            }\r",
                    "        },\r",
                    "        labelWidth:60,\r",
                    "        allowBlank:true,\r",
                    "        anchor:\"100%\",\r",
                    "        margin:\"10 0 0 0\",\r",
                    "        value:component.elementTag\r",
                    "    }));\r",
                    "    configSpec.getComponent(1).add(Ext.widget('checkbox',{\r",
                    "        itemId:\"eRenderDivField\",\r",
                    "        fieldLabel:\"Afficher dans une div \",\r",
                    "        onChange:function(){\r",
                    "\r",
                    "            component.renderDiv=this.getValue();\r",
                    "\r",
                    "        },\r",
                    "        labelWidth:60,\r",
                    "        inputValue:true,\r",
                    "        anchor:\"100%\",\r",
                    "        margin:\"10 0 10 0\",\r",
                    "        checked:component.renderDiv\r",
                    "    }));\r",
                    "\r",
                    "    var categories = Ext.clone(component.champsConfig.simple);\r",
                    "    var categoriesADV = Ext.clone(component.champsConfig.avance);\r",
                    "\r",
                    "    Ext.Array.forEach(categoriesADV,function(someCat){someCat.isAdv=true;});\r",
                    "    categories=Ext.Array.merge(categories,categoriesADV);\r",
                    "    for (j=0; j<categories.length; j++){\r",
                    "        var nCateg = Ext.create('Ext.form.FieldSet', {title: categories[j].categorie, collapsible:true, layout: 'anchor'});\r",
                    "        nCateg.isAdv=categories[j].isAdv;\r",
                    "\r",
                    "        var champsS = Ext.clone(categories[j].champs);\r",
                    "        for (i=0; i<champsS.length; i++) {\r",
                    "            if (champsS[i].type =='Ext.ux.TreePicker') {\r",
                    "                var filteredStore=  Ext.create(\"Ext.data.TreeStore\",{autoLoad: false,\r",
                    "                    autoSync: false,\r",
                    "                    isOptimised:true,\r",
                    "                    usedCollection:\"Pages\",\r",
                    "                    model: 'Rubedo.model.pageDataModel',\r",
                    "                    proxy: {\r",
                    "                        type: 'ajax',\r",
                    "                        api: {\r",
                    "                            create: 'pages/create',\r",
                    "                            read: 'pages/tree',\r",
                    "                            update: 'pages/update',\r",
                    "                            destroy: 'pages/delete'\r",
                    "                        },\r",
                    "                        reader: {\r",
                    "                            type: 'json',\r",
                    "                            getResponseData: function(response) {\r",
                    "                                var data, error;\r",
                    "\r",
                    "                                try {\r",
                    "                                    data = Ext.decode(response.responseText);\r",
                    "                                    if (Ext.isDefined(data.data)){data.children=data.data;}// error fix\r",
                    "                                    return this.readRecords(data);\r",
                    "                                } catch (ex) {\r",
                    "                                    error = new Ext.data.ResultSet({\r",
                    "                                        total  : 0,\r",
                    "                                        count  : 0,\r",
                    "                                        records: [],\r",
                    "                                        success: false,\r",
                    "                                        message: ex.message\r",
                    "                                    });\r",
                    "\r",
                    "                                    this.fireEvent('exception', this, response, error);\r",
                    "                                    console.log(ex);\r",
                    "\r",
                    "                                    Ext.Logger.warn('Unable to parse the JSON returned by the server');\r",
                    "\r",
                    "                                    return error;\r",
                    "                                }\r",
                    "                            },\r",
                    "                            messageProperty: 'message'\r",
                    "                        }\r",
                    "                    },\r",
                    "                    sorters: {\r",
                    "                        property: 'orderValue'\r",
                    "                    }\r",
                    "                }); \r",
                    "\r",
                    "                filteredStore.getProxy().extraParams.filter=\"[{\\\"property\\\":\\\"site\\\",\\\"value\\\":\\\"\"+Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected().get(\"site\")+\"\\\"}]\";\r",
                    "                filteredStore.load();\r",
                    "                champsS[i].config.store= filteredStore;\r",
                    "                champsS[i].config.displayField=\"text\";\r",
                    "                champsS[i].config.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];\r",
                    "\r",
                    "\r",
                    "\r",
                    "            }else if (champsS[i].isAutoStored){\r",
                    "                var miniStore=Ext.create('Ext.data.Store', {\r",
                    "                    fields:[{name:\"value\"},{name:\"label\"}],\r",
                    "                    data:champsS[i].autoStoreData,\r",
                    "                    autoload:true\r",
                    "                });\r",
                    "                champsS[i].config.store= miniStore;\r",
                    "                champsS[i].config.displayField=\"label\";\r",
                    "                champsS[i].config.valueField=\"value\";\r",
                    "            }\r",
                    "            var nChampS = Ext.create(champsS[i].type, champsS[i].config);\r",
                    "            if (champsS[i].type =='Ext.form.field.Trigger'){\r",
                    "                var Ouvrir = Ext.clone(champsS[i].ouvrir);\r",
                    "                var targeting=Ext.clone(nChampS.id);\r",
                    "                nChampS.onTriggerClick= function() {\r",
                    "                    var fenetre = Ext.widget(Ouvrir);\r",
                    "                    fenetre.show();\r",
                    "                    fenetre.mainFieldId=targeting;\r",
                    "\r",
                    "                } ;  \r",
                    "            }\r",
                    "            nChampS.labelSeparator= ' ';\r",
                    "            nChampS.anchor= '100%';   \r",
                    "            nChampS.labelWidth=100;\r",
                    "            nChampS.setValue(component.configBloc[nChampS.name]);\r",
                    "            if ((nChampS.isXType(\"combobox\"))&&(!nChampS.isXType(\"treepicker\"))){\r",
                    "                nChampS.getStore().fieldId=Ext.clone(nChampS.id);\r",
                    "                nChampS.getStore().fieldValue=Ext.clone(component.configBloc[nChampS.name]);\r",
                    "                nChampS.getStore().addListener(\"load\",function(storeThing){\r",
                    "                    Ext.getCmp(storeThing.fieldId).setValue(storeThing.fieldValue);\r",
                    "                },this,{single:true});\r",
                    "                }\r",
                    "                if (nChampS.isXType(\"treepicker\")){\r",
                    "                    nChampS.on('select', function(){component.configBloc[this.name]=this.getValue(); });\r",
                    "\r",
                    "                }\r",
                    "                if (nChampS.isXType(\"comboboxselect\")){\r",
                    "                    nChampS.on('afterrender', function(thing){thing.fireEvent(\"change\");});\r",
                    "\r",
                    "                }\r",
                    "                nChampS.on('change', function(){component.configBloc[this.name]=this.getValue();});\r",
                    "                nCateg.add(nChampS);\r",
                    "            }\r",
                    "            if(nCateg.isAdv){\r",
                    "                configSpec.getComponent(1).add(nCateg);\r",
                    "            }else{\r",
                    "                configSpec.getComponent(0).add(nCateg);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "        }\r",
                    "        propEdit.add(configSpec);\r",
                    "\r",
                    "\r",
                    "        if ((!ACL.interfaceRights['write.ui.pages'])||(Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected().get(\"readOnly\"))){\r",
                    "            Ext.Array.forEach(Ext.getCmp(\"pageElementPropsPanel\").query(\"field\"), function(truc){truc.setReadOnly(true);});\r",
                    "            Ext.Array.forEach(Ext.getCmp(\"pageElementPropsPanel\").query(\"button\"), function(truc){if (!truc.isXType(\"tab\")){truc.disable();}});\r",
                    "        }\r",
                    "        e.stopEvent();\r",
                    "\r",
                    "    });}"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "UnBloc",
                "designer|controlQuery": "#mainPageEdition unBloc"
            },
            "designerId": "14fe1e98-83ce-46a5-be63-48558f1afbcb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "savePage",
                "fn": "savePage",
                "implHandler": [
                    "var me=this;\r",
                    "if (Ext.getCmp(\"mainPageAttributeForm\").getForm().isValid()) {\r",
                    "    var editedPage=Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected();\r",
                    "    var newBlocks=this.saveBlocks(Ext.getCmp(\"mainPageEdition\"));\r",
                    "    var store=Ext.getCmp(\"mainPageTree\").getStore();\r",
                    "    store.suspendAutoSync();\r",
                    "    editedPage.beginEdit();\r",
                    "    editedPage.set(\"blocks\",newBlocks);\r",
                    "    editedPage.set(Ext.getCmp(\"mainPageAttributeForm\").getForm().getFieldValues());\r",
                    "    editedPage.endEdit();\r",
                    "    store.resumeAutoSync();\r",
                    "    store.sync();\r",
                    "    store.addListener(\"update\", function(a, record){\r",
                    "        Ext.getCmp(\"mainPageAttributeForm\").getForm().loadRecord(record);\r",
                    "        var arButtons = [ ];\r",
                    "        me.breadcrumbBuilder(record,arButtons);\r",
                    "        Ext.getCmp(\"pageTreeBreadcrumb\").removeAll();\r",
                    "        Ext.getCmp(\"pageTreeBreadcrumb\").add(arButtons.reverse());\r",
                    "        var metaBox = Ext.getCmp(\"contributionPages\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "        var values= record.getData();\r",
                    "        values.creation= Ext.Date.format(values.createTime, 'd-m-Y');\r",
                    "        values.derniereModification= Ext.Date.format(values.lastUpdateTime, 'd-m-Y');\r",
                    "        metaBox.update(values);\r",
                    "        metaBox.show();\r",
                    "                                                   \r",
                    "                                                   },this,{single:true});\r",
                    "    Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected().collapseChildren(true);\r",
                    "    Ext.getCmp(\"mainPageTree\").getStore().load({\"node\":Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected()});\r",
                    "    Ext.getCmp(\"pagesInternalPreview\").removeAll();\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'xhr-get-page-url',\r",
                    "        params: {\r",
                    "            \"page-id\": editedPage.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var targetedUrl = Ext.JSON.decode(response.responseText).url;\r",
                    "            Ext.getCmp(\"pagesInternalPreview\").add(Ext.widget(\"container\",{\r",
                    "                autoEl: {\r",
                    "                    tag: 'iframe',\r",
                    "                    src: targetedUrl+\"?preview=1\"\r",
                    "                }\r",
                    "            }));\r",
                    "        },\r",
                    "        failure:function(){\r",
                    "            Ext.Msg.alert('Erreur', 'Erreur dans la récupération de l\\'url de la page');\r",
                    "        }\r",
                    "    });\r",
                    "} else {\r",
                    "    Ext.getCmp(\"mainPageAttributeForm\").up().setActiveTab(2);\r",
                    "    Ext.Msg.alert(\"Erreur\", \"Les propriétés de la page sont invalides.\");\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#pageSaveBtn"
            },
            "designerId": "b1fb801d-af5e-43a7-b7f8-56799de85ce4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onWindowBeforeDestroy",
                "fn": "onWindowBeforeDestroy",
                "implHandler": [
                    "if (component.isXType(\"window\")){\r",
                    "    Ext.getStore(\"MasksComboStore\").removeAll();\r",
                    "    Ext.getStore(\"PagesDataStore\").getProxy().extraParams.filter=\"[{\\\"property\\\":\\\"site\\\",\\\"value\\\":\\\"emptyDecoy\\\"}]\";\r",
                    "    Ext.getStore(\"PagesDataStore\").load();\r",
                    "    Ext.getStore(\"PageDisplayedContentsStore\").removeAll();\r",
                    "}"
                ],
                "name": "beforedestroy",
                "scope": "me",
                "designer|targetType": "Ext.window.Window",
                "designer|controlQuery": "#contributionPages"
            },
            "designerId": "6120f6e7-46b7-410a-971d-e8c79c4f2e57"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onPagesSitesComboBeforeRender",
                "fn": "onPagesSitesComboBeforeRender",
                "implHandler": [
                    "var me=this;\r",
                    "component.getStore().addListener(\"load\",function(store,records){\r",
                    "    if (!Ext.isEmpty(records)){\r",
                    "    component.select(records[0]);\r",
                    "    if (component.id==\"previewSitesCombo\"){\r",
                    "        me.pagePreviewSelect(component, [records[0]]);\r",
                    "    } else {\r",
                    "        me.pageSiteSelect(component, [records[0]]);\r",
                    "    }\r",
                    "}\r",
                    "},this,{single:true});"
                ],
                "name": "beforerender",
                "scope": "me",
                "designer|targetType": "Ext.form.field.ComboBox",
                "designer|controlQuery": "#pagesSitesCombo, #previewSitesCombo"
            },
            "designerId": "fed768ea-12ff-49c5-8386-55e42679392e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "pagePreviewSelect",
                "fn": "pagePreviewSelect",
                "implHandler": [
                    "Ext.getStore(\"PagesPreviewStore\").getProxy().extraParams.filter=\"[{\\\"property\\\":\\\"site\\\",\\\"value\\\":\\\"\"+records[0].get(\"id\")+\"\\\"}]\";\r",
                    "Ext.getStore(\"PagesPreviewStore\").load();\r",
                    "Ext.getCmp(\"contribPreviewMain\").removeAll();"
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.form.field.ComboBox",
                "designer|controlQuery": "#previewSitesCombo"
            },
            "designerId": "7d7ddd9d-d877-4060-9865-9fec1199851e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onPreviewPageTreeSelect",
                "fn": "onPreviewPageTreeSelect",
                "implHandler": [
                    "Ext.getCmp(\"contribPreviewMain\").removeAll();\r",
                    "var dateValue=\"\";\r",
                    "if (!Ext.isEmpty(Ext.getCmp(\"advancedPreviewDateField\").getValue())){\r",
                    "    dateValue=\"&preview_date=\"+Ext.Date.format(Ext.getCmp(\"advancedPreviewDateField\").getValue(), \"U\");\r",
                    "\r",
                    "}\r",
                    "if (!Ext.isEmpty(record)){\r",
                    "    Ext.getCmp(\"contribPreviewMain\").removeAll();\r",
                    "    if(!record.isRoot()){\r",
                    "        Ext.Ajax.request({\r",
                    "            url: 'xhr-get-page-url',\r",
                    "            params: {\r",
                    "                \"page-id\": record.get(\"id\")\r",
                    "            },\r",
                    "            success: function(response){\r",
                    "                var targetedUrl = Ext.JSON.decode(response.responseText).url;\r",
                    "                var showArg =encodeURIComponent(targetedUrl+\"?preview=1\"+\"&preview_draft=\"+Ext.getCmp(\"advancedPreviewDraftField\").getValue()+dateValue);\r",
                    "                Ext.getCmp(\"contribPreviewMain\").add(Ext.widget(\"container\",{\r",
                    "                    autoEl: {\r",
                    "                        tag: 'iframe',\r",
                    "                        src: \"resources/responsiveShow/?device=\"+Ext.getCmp(\"previewDeviceCombo\").getActiveItem().deviceValue+\"&url=\"+showArg\r",
                    "                    }\r",
                    "                }));\r",
                    "            },\r",
                    "            failure:function(){\r",
                    "                Ext.Msg.alert('Erreur', 'Erreur dans la récupération de l\\'url de la page');\r",
                    "            }\r",
                    "        });\r",
                    "    }}"
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.tree.Panel",
                "designer|controlQuery": "#previewPageTree"
            },
            "designerId": "56a373a5-6913-4cda-b321-5fb604f616bd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onPagePreviewRefreshBtnClick",
                "fn": "onPagePreviewRefreshBtnClick",
                "implHandler": [
                    "var record = Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected();\r",
                    "if ((!Ext.isEmpty(record))&&(!record.isRoot())){\r",
                    "    Ext.getCmp(\"pagesInternalPreview\").removeAll();\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'xhr-get-page-url',\r",
                    "        params: {\r",
                    "            \"page-id\": record.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var targetedUrl = Ext.JSON.decode(response.responseText).url;\r",
                    "            Ext.getCmp(\"pagesInternalPreview\").add(Ext.widget(\"container\",{\r",
                    "                autoEl: {\r",
                    "                    tag: 'iframe',\r",
                    "                    src: targetedUrl+\"?preview=1\"\r",
                    "                }\r",
                    "            }));\r",
                    "        },\r",
                    "        failure:function(){\r",
                    "            Ext.Msg.alert('Erreur', 'Erreur dans la récupération de l\\'url de la page');\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#pagePreviewRefreshBtn"
            },
            "designerId": "c918931f-c27c-4264-9d18-6cc8b64eb2c2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderBlocks",
                "fn": "renderBlocks",
                "designer|params": [
                    "mBlocks",
                    "editable"
                ],
                "implHandler": [
                    "Ext.Array.forEach(mBlocks, function(block){\r",
                    "    if (block.parentCol.indexOf(\"page-\")==-1) {\r",
                    "        block.parentCol=\"page-\"+block.parentCol;\r",
                    "    }\r",
                    "    if (block.id.indexOf(\"page-\")==-1) {\r",
                    "        block.id=\"page-\"+block.id;\r",
                    "    }\r",
                    "    var targetCol=Ext.getCmp(block.parentCol);\r",
                    "    if ((!Ext.isEmpty(targetCol))&&(targetCol.mType=='col')){\r",
                    "        block.canEdit=editable;\r",
                    "        if (editable) {\r",
                    "            var insertIndex=0;\r",
                    "            Ext.Array.forEach(targetCol.items.items, function(brother){\r",
                    "                if (brother.orderValue<block.orderValue){\r",
                    "                    insertIndex=insertIndex+1;\r",
                    "                }\r",
                    "            });\r",
                    "            targetCol.insert(insertIndex, Ext.widget(\"unBloc\",block));\r",
                    "        } else{\r",
                    "            targetCol.add(Ext.widget(\"unBloc\",block));\r",
                    "        }\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "697d3f08-71dd-4250-a19d-1915efb54c1c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "saveBlocks",
                "fn": "saveBlocks",
                "designer|params": [
                    "startComp"
                ],
                "implHandler": [
                    "var newBlocks = [ ];\r",
                    "Ext.Array.forEach(startComp.query(\"unBloc\"), function(nBloc){\r",
                    "    if (nBloc.canEdit){\r",
                    "        newBlocks.push({\r",
                    "\r",
                    "            bType:nBloc.bType,\r",
                    "            id:nBloc.getId().replace(\"page-\",\"\"),\r",
                    "            parentCol:nBloc.up().getId().replace(\"page-\",\"\"),\r",
                    "            mType:\"block\",\r",
                    "            champsConfig:nBloc.champsConfig,\r",
                    "            configBloc:nBloc.configBloc,\r",
                    "            orderValue:nBloc.orderValue,\r",
                    "            title:nBloc.title,\r",
                    "            elementStyle:nBloc.elementStyle,\r",
                    "            elementTag:nBloc.elementTag,\r",
                    "            renderDiv:nBloc.renderDiv,\r",
                    "            responsive:nBloc.responsive,\r",
                    "            classHTML:nBloc.classHTML,\r",
                    "            displayTitle:nBloc.displayTitle,\r",
                    "            idHTML:nBloc.idHTML,\r",
                    "            urlPrefix:nBloc.urlPrefix,\r",
                    "            flex:nBloc.flex,\r",
                    "            canEdit:nBloc.canEdit\r",
                    "\r",
                    "        });\r",
                    "    }\r",
                    "\r",
                    "});\r",
                    "return(newBlocks);"
                ]
            },
            "designerId": "03579757-73d3-4682-95af-acdc91dcfeee"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onAdvancedPreviewPageRefreshClick",
                "fn": "onAdvancedPreviewPageRefreshClick",
                "implHandler": [
                    "var record=Ext.getCmp(\"previewPageTree\").getSelectionModel().getLastSelected();\r",
                    "var dateValue=\"\";\r",
                    "if (!Ext.isEmpty(Ext.getCmp(\"advancedPreviewDateField\").getValue())){\r",
                    "    dateValue=\"&preview_date=\"+Ext.Date.format(Ext.getCmp(\"advancedPreviewDateField\").getValue(), \"U\");\r",
                    "\r",
                    "}\r",
                    "if (!Ext.isEmpty(record)){\r",
                    "    Ext.getCmp(\"contribPreviewMain\").removeAll();\r",
                    "    if(!record.isRoot()){\r",
                    "        Ext.Ajax.request({\r",
                    "            url: 'xhr-get-page-url',\r",
                    "            params: {\r",
                    "                \"page-id\": record.get(\"id\")\r",
                    "            },\r",
                    "            success: function(response){\r",
                    "                var targetedUrl = Ext.JSON.decode(response.responseText).url;\r",
                    "                var showArg =encodeURIComponent(targetedUrl+\"?preview=1\"+\"&preview_draft=\"+Ext.getCmp(\"advancedPreviewDraftField\").getValue()+dateValue);\r",
                    "                Ext.getCmp(\"contribPreviewMain\").add(Ext.widget(\"container\",{\r",
                    "                    autoEl: {\r",
                    "                        tag: 'iframe',\r",
                    "                        src: \"resources/responsiveShow/?device=\"+Ext.getCmp(\"previewDeviceCombo\").getActiveItem().deviceValue+\"&url=\"+showArg\r",
                    "                    }\r",
                    "                }));\r",
                    "            },\r",
                    "            failure:function(){\r",
                    "                Ext.Msg.alert('Erreur', 'Erreur dans la récupération de l\\'url de la page');\r",
                    "            }\r",
                    "        });\r",
                    "    }}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#advancedPreviewPageRefresh"
            },
            "designerId": "f4a5fbda-c3f3-452f-ae1a-7c849557ecdb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onPanelActivate",
                "fn": "onPanelActivate",
                "implHandler": [
                    "var record = Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected();\r",
                    "if ((!Ext.isEmpty(record))&&(!record.isRoot())){\r",
                    "    component.getComponent(0).getStore().getProxy().extraParams.id=record.get(\"id\");\r",
                    "    component.getComponent(0).getStore().load();\r",
                    "}"
                ],
                "name": "activate",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#pageContentDisplayer"
            },
            "designerId": "5091cbda-a9df-4eac-981f-ca61c7c60bc4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onNewPageMaskSelectorAfterRender",
                "fn": "onNewPageMaskSelectorAfterRender",
                "implHandler": [
                    "var target=Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected();\r",
                    "if (!target.isRoot()){\r",
                    "    component.setValue(target.get(\"maskId\"));\r",
                    "}"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.form.field.ComboBox",
                "designer|controlQuery": "#newPageMaskSelector"
            },
            "designerId": "bf10d1bf-4fdb-4d8e-a9bb-94b9048e7483"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "breadcrumbBuilder",
                "fn": "breadcrumbBuilder",
                "designer|params": [
                    "node",
                    "array"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "if (node.isRoot()) {\r",
                    "    \r",
                    "} else {\r",
                    "    var button = Ext.widget(\"button\", {text:node.get(\"text\")+\"<b> ></b>\", iconCls:\"masque-icon\"});\r",
                    "    button.on(\"click\",function(){ Ext.getCmp(\"contributionPages\").getComponent(0).getSelectionModel().select(node);});\r",
                    "    array.push(button);\r",
                    "    me.breadcrumbBuilder(node.parentNode,array);\r",
                    "}"
                ]
            },
            "designerId": "485d72de-4ede-48af-b4b7-0646f7a95e2a"
        }
    ]
}