{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "ACLController",
        "designer|userClassName": "ACLController"
    },
    "designerId": "dc1acb41-f9a0-4ebc-8338-2cd4321f5712",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "Ext.define('ACL', {\r",
                    "    singleton:true,\r",
                    "    CSRFToken:\"notYetSet\",\r",
                    "    interfaceRights:{\r",
                    "        \"read.ui.taxonomy\":false,\r",
                    "        \"write.ui.taxonomy\":false,\r",
                    "        \"write.ui.taxonomyTerms\":false,\r",
                    "        \"read.ui.contentTypes\":false,\r",
                    "        \"write.ui.contentTypes\":false,\r",
                    "        \"read.ui.contents\":false,\r",
                    "        \"write.ui.contents\":false,\r",
                    "        \"read.ui.contents.draft\":false,\r",
                    "        \"read.ui.contents.pending\":false,\r",
                    "        \"read.ui.contents.published\":false,\r",
                    "        \"read.ui.contents.refused\":false,\r",
                    "        \"write.ui.contents.draft\":false,\r",
                    "        \"write.ui.contents.pending\":false,\r",
                    "        \"write.ui.contents.refused\":false,\r",
                    "        \"write.ui.contents.published\":false,\r",
                    "        \"write.ui.contents.draftToPending\":false,\r",
                    "        \"write.ui.contents.pendingToDraft\":false,\r",
                    "        \"write.ui.contents.pendingToPublished\":false,\r",
                    "        \"write.ui.contents.putOnline\":false,\r",
                    "        \"write.ui.contents.putOffline\":false,\r",
                    "        \"read.ui.masks\":false,\r",
                    "        \"write.ui.masks\":false,\r",
                    "        \"read.ui.users\":false,\r",
                    "        \"write.ui.users\":false,\r",
                    "        \"read.ui.sites\":false,\r",
                    "        \"write.ui.sites\":false,\r",
                    "        \"read.ui.pages\":false,\r",
                    "        \"write.ui.pages\":false,\r",
                    "        \"read.ui.dam\":false,\r",
                    "        \"write.ui.dam\":false,\r",
                    "        \"read.ui.damTypes\":false,\r",
                    "        \"write.ui.damTypes\":false,\r",
                    "        \"read.ui.workspaces\":false,\r",
                    "        \"write.ui.workspaces\":false,\r",
                    "        \"read.ui.queries\":false,\r",
                    "        \"write.ui.queries\":false,\r",
                    "        \"read.ui.technicalDashboard\":false,\r",
                    "        \"execute.ui.technicalDashboard\":false,\r",
                    "        \"read.ui.groups\":false,\r",
                    "        \"write.ui.groups\":false,\r",
                    "        \"read.ui.workflows\":false,\r",
                    "        \"write.ui.workflows\":false,\r",
                    "        \"exe.ui.elasticSearch\":false,\r",
                    "        \"read.ui.dependantTypes\":false,\r",
                    "        \"write.ui.dependantTypes\":false,\r",
                    "        \"read.ui.forms\":false,\r",
                    "        \"write.ui.forms\":false,\r",
                    "        \"admin.ui.groups\":false,\r",
                    "        \"exe.ui.import\":false,\r",
                    "        \"write.ui.mailingLists\":false,\r",
                    "        \"read.ui.mailingLists\":false,\r",
                    "        \"exe.ui.purgeContentType\":false,\r",
                    "        \"exe.ui.purgeDamType\":false,\r",
                    "        \"read.ui.directories\":false,\r",
                    "        \"write.ui.directories\":false,\r",
                    "        \"read.ui.languages\":false,\r",
                    "        \"write.ui.languages\":false,\r",
                    "        \"read.ui.customThemes\":false,\r",
                    "        \"write.ui.customThemes\":false,\r",
                    "        \"read.ui.userTypes\":false,\r",
                    "        \"write.ui.userTypes\":false,\r",
                    "        \"read.ui.emails\":false,\r",
                    "        \"read.ui.emailTemplates\":false,\r",
                    "        \"write.ui.emails\":false,\r",
                    "        \"write.ui.emailTemplates\":false,\r",
                    "        \"read.ui.applicationLogs\":false,\r",
                    "        \"read.ui.shippers\":false,\r",
                    "        \"read.ui.orders\":false,\r",
                    "        \"read.ui.taxes\":false,\r",
                    "        \"read.ui.stock\":false,\r",
                    "        \"read.ui.paymentMeans\":false\r",
                    "    }\r",
                    "});\r",
                    "Ext.Ajax.on(\"beforerequest\", function(conn, options){\r",
                    "    if (Ext.isEmpty(options.params)){\r",
                    "        options.params={};\r",
                    "    }\r",
                    "    if(!Ext.isEmpty(Ext.getCmp(\"workingLanguageField\").getValue())){\r",
                    "        options.params.workingLanguage=Ext.getCmp(\"workingLanguageField\").getValue();\r",
                    "    }\r",
                    "    options.params.token=ACL.CSRFToken;\r",
                    "});\r",
                    "/*Ext.override(Ext.form.field.Text, {\r",
                    "stripCharsRe:/<\\/?[^>]+>/gi\r",
                    "});*/"
                ]
            },
            "name": "init",
            "designerId": "2830bd31-d38c-4fac-869d-a550f739c628"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "component",
                "designer|targetType": "Ext.Component",
                "fn": "onComponentRender",
                "implHandler": [
                    "if (!Ext.isEmpty(component.ACL)) {   \r",
                    "    if (ACL.interfaceRights[component.ACL]===false){\r",
                    "        component.hide();\r",
                    "        component.clearListeners();\r",
                    "        component.fireEvent=Ext.emptyFn;\r",
                    "    }\r",
                    "}"
                ],
                "name": "render",
                "scope": "me"
            },
            "name": "onComponentRender",
            "designerId": "fa87d97c-595c-421e-b2c0-1f4f38d36f1a"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onLaunch",
                "implHandler": [
                    "var me=this;\r",
                    "Ext.Ajax.request({\r",
                    "    url:'current-user/get-token',\r",
                    "    method:\"GET\",\r",
                    "    params:{\r",
                    "    },\r",
                    "    success:function(response){\r",
                    "        ACL.CSRFToken=Ext.JSON.decode(response.responseText).token;\r",
                    "    },\r",
                    "    failure:function(){\r",
                    "        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.tokenRecoveryError);\r",
                    "    }\r",
                    "});\r",
                    "Ext.Ajax.request({\r",
                    "    url:'acl',\r",
                    "    params:{\r",
                    "        data: Ext.JSON.encode(ACL.interfaceRights)\r",
                    "    },\r",
                    "    success:function(response){\r",
                    "        ACL.interfaceRights=Ext.JSON.decode(response.responseText);\r",
                    "        Ext.getCmp('boutonPincipalInterface').enable();\r",
                    "        var task = new Ext.util.DelayedTask(function(){\r",
                    "            if(MyPrefData.simpleMode){\r",
                    "                Ext.getCmp(\"ViewportPrimaire\").insert(0,Ext.widget(\"simpleModeMainBar\"));\r",
                    "            }\r",
                    "        });\r",
                    "        task.delay(300);\r",
                    "    },\r",
                    "    failure:function(){\r",
                    "        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.rightsRecoveryError);\r",
                    "    }\r",
                    "});\r",
                    "ACL.sessionCheckIterator=setInterval(function(){me.checkSessionStatus();},60000);"
                ]
            },
            "name": "onLaunch",
            "designerId": "83ba7d31-8371-4044-a1c9-120f85c20615"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "checkSessionStatus",
                "implHandler": [
                    "var accessToken=Ext.util.Cookies.get(\"accessToken\");",
                    "var refreshToken=Ext.util.Cookies.get(\"refreshToken\");",
                    "if (!accessToken&&!refreshToken){",
                    "    if (Ext.isEmpty(Ext.getCmp(\"sessionExpiredWindow\"))){",
                    "                Ext.widget(\"sessionExpiredWindow\").show();",
                    "            }",
                    "    clearInterval(ACL.sessionCheckIterator);",
                    "} else if (!accessToken&&refreshToken){",
                    "    Ext.Ajax.request({",
                    "    url:'/api/v1/auth/oauth2/refresh',",
                    "    params:{",
                    "        \"refresh_token\":refreshToken",
                    "    },",
                    "    success:function(response){",
                    "        var decodedResponse=Ext.JSON.decode(response.responseText);",
                    "        if (decodedResponse.success) {",
                    "            var expirationDate=decodedResponse.token.createTime+decodedResponse.token.lifetime;",
                    "            expirationDate=new Date(expirationDate*1000);",
                    "            Ext.util.Cookies.set(\"accessToken\",decodedResponse.token.access_token,expirationDate);",
                    "            Ext.util.Cookies.set(\"refreshToken\",decodedResponse.token.refresh_token);",
                    "        } else {",
                    "            if (Ext.isEmpty(Ext.getCmp(\"sessionExpiredWindow\"))){",
                    "                Ext.widget(\"sessionExpiredWindow\").show();",
                    "            }",
                    "            clearInterval(ACL.sessionCheckIterator);",
                    "",
                    "        }",
                    "    },",
                    "    failure:function(){",
                    "        if (Ext.isEmpty(Ext.getCmp(\"sessionExpiredWindow\"))){",
                    "                Ext.widget(\"sessionExpiredWindow\").show();",
                    "            }",
                    "        clearInterval(ACL.sessionCheckIterator);",
                    "    }",
                    "});",
                    "}",
                    ""
                ]
            },
            "name": "checkSessionStatus",
            "designerId": "81a08c0f-cbaf-45b8-9c90-0a2728094fd7"
        }
    ]
}