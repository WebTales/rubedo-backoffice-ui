{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "LocalisationModel"
        ],
        "stores": [
            "LocalisationStore"
        ],
        "designer|userClassName": "LocalisationController",
        "designer|userAlias": "LocalisationController"
    },
    "designerId": "765f93a9-83e7-4405-aaaa-740265c87f51",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "Ext.override(Ext.form.field.Date, {\r",
                    "    submitFormat:'U',\r",
                    "    altFormats:'U|m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j'\r",
                    "});\r",
                    "Ext.require(\"Ext.ux.callout.Callout\");\r",
                    "\r",
                    "Ext.Date.defaultFormat=\"d/m/Y\";\r",
                    "//define localisation singletons \r",
                    "Ext.define(\"Rubedo.RubedoAppHelp\",{\r",
                    "    singleton:true,\r",
                    "    \"pages\": \"<p>The different pages of a site can easily be enriched with functional blocks.The 'Pages' application allows:</p> <ul><li>to access the tree view of sites maintained on the platform,</li> <li>to add pages based on existing pages masks</li> <li>to modify or delete pages,</li> <li> to add functionalities to pages through the library of functional blocks</li> <li>to preview the display of a page in front-office,</li> <li>to manage SEO settings,</li> <li>to manage reading and writing rights through workspaces.</li></ul>\",\r",
                    "    \"sites\": \"<p>Rubedo natively offers the site building feature.The 'Sites' application allows:</p> <ul><li>to create new sites through a wizard</li> <li>on the basis of existing models or from a blank template</li> <li>to modify the settings of existing sites</li></ul>\",\r",
                    "    \"masks\": \"<p>Pages masks represent the different rendering templates available in front office.The \\\"Page masks\\\" application allows:</p> <ul><li>to create new layout templates in rows and columns</li> <li>to duplicate existing masks, possibly from one site to another</li> <li>to manage the persistent functional blocks, such as menus</li> <li>to form a library of elements (rows, columns, or blocks) that is reusable between masks</li> <li>to manage Responsive Design settings : visibility of rows, columns and blocks on phone, tablet, or desktop</li></ul>\",\r",
                    "    \"contentTypes\": \"<p>Content types correspond to the structured data managed by Rubedo: articles, news,.. .etc. The 'Content Types' application allows :</p> <ul><li>to create new content types using an advanced editor</li> <li>to set up input controls, default values, mandatory state for each field</li> <li>to modify existing content types</li> <li>to manage localizable (several language), and searchable state of each field</li> <li>to manage input aid</li> <li>to declare vocabularies applicable to the classification of the contents</li> <li>to choose the workflow to apply to contents</li> <li>to declare read and write workspaces for contents</li></ul>\",\r",
                    "    \"damTypes\": \"<p>Digital asset types correspond to Rubedo-managed files: images, video, audio, animation or documents.'Digital Asset Types' application allows:</p> <ul><li>to create new digital asset types (image, document, video, audio, animation)</li> <li>to add metadata (author, copyright, caption, etc) using an advanced editor</li> <li>to set input controls, default values, mandatory state for each field</li> <li>to edit existing digital asset types</li> <li>to manage localizable(several language) and searchable state for each field</li> <li>to manage input aid</li> <li>to choose vocabularies eligible as classification</li> <li>to declare read and write workspaces</li></ul>\",\r",
                    "    \"queries\": \"<p>Queries are used to create automatic or manual lists of contents and digital assets.The \\\"Queries\\\" application allows:</p> <ul><li>to create and save simple or advanced, content or digital asset queries</li> <li>to edit or remove existing queries</li> <ul>\",\r",
                    "    \"taxonomy\": \"<p>Taxonomy alows for the creation of a multi-dimensional classification of contents and digital assets.The \\\"Taxonomy\\\" application allows:</p> <ul><li>to create new vocabularies and add terms using a tree</li> <li>to apply rights for workspaces and inpu aid for each vocabulary</li> <li>to define vocabulary settings: expandable, multi-choice, mandatory</li></ul>\",\r",
                    "    \"groups\": \"<p>Groups are used to associate users with rights in the form of workspaces and roles.The 'Groups' application allows:</p> <ul><li>to create groups of users</li> <li>to add users to these groups</li> <li>to set up the rights associated with each group: workspaces (read, write, default) and roles</li> <li>to manage groups (deletion, modification, inheritance)</li></ul>\",\r",
                    "    \"workspaces\": \"<p>Workspaces are used to restrict access (read, write or broadcast) on content, digital asset types or sites topics to specific user groups.The 'Workspaces' application allows:</p> <ul><li>to create workspaces</li> <li>to delete or edit workspaces</li></ul>\",\r",
                    "    \"users\": \"<p>Front-office and back-office users are grouped in an internal directory. The rights granted to a user are linked to groups to which he belongs.The 'Users' application allows:</p> <ul><li>to add users</li> <li>to complete profiles (email, service, job title, photo,...)</li> <li>to manage  access and rights (identifier, password, groups, account validityt)</li></ul> \",\r",
                    "    \"contents\": \"<p>Rubedo manages a transverse repository of content that can be published on different sites and workspaces.The \\\"Contents\\\" application allows:</p> <ul><li>to create contents using an existing content type</li> <li>to manage its status in the workflow of publication attributed to the content type</li> <li>to manage delayed publication</li> <li>to classify content using vocabularies allowed for this contnet type</li> <li>to associate contents to contribution and diffusion workspaces</li> <li>to modify contents</li> <li>to duplicate contents</li> <li>to add contents to favorites</li></ul> \",\r",
                    "    \"dam\": \"<p>The DAM allows you to manage digital assets (images, video, audio, animation or documents) based on predefined digital asset types.The \\\"DAM\\\" application allows:</p> <ul><li>to create digital assets using existing digital asset types</li> <li>to upload digital assets and apply metadata settings</li> <li>to classify digital assets using vocabularies allowed for this digital asset type</li> <li>to set up contributionand diffusion workspaces </li> <li>to edit digital assets</li> <li>to add digital assets to favorites</li></ul>\",\r",
                    "    \"forms\": \"<p>This application is used to conduct online surveys. Stages and questions can be easly created and manged through drag and drop. The \\\"Surveys\\\" application allows:</p> <ul><li>to add, edit, delete, and duplicate a survey</li> <li>to add a survey to favorites</li> <li>to manage the settings and unique answer conditions of a survey and put it online</li> <li>to create a survey using the tool palette of formatting (Wysiwyg, image, section, page, title) and settings (type of questions and their specific settings)</li> <li>to manage questions and answers (label settings(, input aid, mandatory state, conditionals, and options)</li> <li>to exploit the results of each survey by exporting to CSV format</li></ul>\"\r",
                    "\r",
                    "});\r",
                    "Ext.define(\"Rubedo.RubedoInterfaceLoc\",{\r",
                    "    singleton:true\r",
                    "});\r",
                    "Ext.define(\"Rubedo.RubedoAutomatedElementsLoc\",{\r",
                    "    singleton:true,\r",
                    "    \"notifTitle\": \"Notification\",\r",
                    "    \"notifCreate\": \"<p>Succesful creation.</p>\",\r",
                    "    \"notifUpdate\": \"<p>Successful update.</p>\",\r",
                    "    \"notifDestroy\": \"<p>Successful deletion.</p>\",\r",
                    "    \"errorTitle\": \"Error\",\r",
                    "    \"serverConnectionError\": \"Server connection interrupted\",\r",
                    "    \"internalServerError\": \"Internal server error\",\r",
                    "    \"unkownError\": \"Unknown error\",\r",
                    "    \"activateText\": \"Activate\",\r",
                    "    \"pageHoldsDefaultError\": \"This page cannot be deleted because it u one of its decendantes is used as a detail of the site page\",\r",
                    "    \"pageHoldsDefaultServerError\": \"Error in the determination of the deletable status of the page\",\r",
                    "    \"deactivateText\": \"Disable\",\r",
                    "    \"windowBeforeUnloadMessage\": \"You will leave the Back Office and lose any unsaved changes.\",\r",
                    "    \"maskIsUsedText\": \"The mask cannot be deleted because it is used by pages.\",\r",
                    "    \"selectAnElementText\": \"Select an item\",\r",
                    "    \"columnText\": \"Column\",\r",
                    "    \"lignText\": \"Line\",\r",
                    "    \"titleText\": \"Title\",\r",
                    "    \"displayTitleText\": \"Display the title\",\r",
                    "    \"visibilityText\": \"Visibility\",\r",
                    "    \"telephoneText\": \"Phone\",\r",
                    "    \"tabletText\": \"Tablet\",\r",
                    "    \"computerText\": \"Desktop\",\r",
                    "    \"HTMLClassText\": \"HTML class\",\r",
                    "    \"HTMLIdText\": \"HTML ID\",\r",
                    "    \"styleText\": \"Style\",\r",
                    "    \"tagText\": \"Tag\",\r",
                    "    \"displayAsTabsText\": \"Display in tabs\",\r",
                    "    \"displayRowTagText\": \"Display the row tag\",\r",
                    "    \"displayRowFluidTagText\": \"Show row-fluid tag\",\r",
                    "    \"includeInAContainerText\": \"Include in a container\",\r",
                    "    \"includeInAContainerFluidText\": \"Include in a fluid container\",\r",
                    "    \"containerIdText\": \"ID of the container\",\r",
                    "    \"containerClassText\": \"Container class\",\r",
                    "    \"mainColumnText\": \"Main column\",\r",
                    "    \"mainColumnRTip\": \"Sets the display location for content detail in pages using this mask.\",\r",
                    "    \"showSpanAndOffsetText\": \"Display the span and offset\",\r",
                    "    \"offsetText\": \"Offset\",\r",
                    "    \"spanText\": \"Span\",\r",
                    "    \"columnIdRecoveryError\": \"Error in the recovery of a column identifier\",\r",
                    "    \"displayInADivText\": \"Display in a div\",\r",
                    "    \"divIdText\": \"ID of the div\",\r",
                    "    \"divClassText\": \"The div class\",\r",
                    "    \"blockText\": \"Block\",\r",
                    "    \"URLPrefixText\": \"URL Prefix\",\r",
                    "    \"invalidMetaError\": \"Some metadata fields are invalid.\",\r",
                    "    \"invalidTaxoError\": \"Some taxonomy fields are invalid.\",\r",
                    "    \"invalidFieldsError\": \"Some fields are invalid.\",\r",
                    "    \"insufficientContentRightsError\": \"You have insufficient rights to view or modify this content\",\r",
                    "    \"newContentText\": \"New content\",\r",
                    "    \"maxOneLocFieldError\": \"A content type cannot have multiple fields of type \\\"Location\\\".\",\r",
                    "    \"contentTypeIsUsedError\": \"This content type is used by content and therefore cannot be deleted.\",\r",
                    "    \"warningTitle\": \"Warning\",\r",
                    "    \"contentTypeIncompatModifError\": \"The content type is used by content and these amendments are not compatible.\",\r",
                    "    \"contentTypeModifWarning\": \"This content type is used by content. Changing it could have repercussions. </br> Would you like to continue?\",\r",
                    "    \"fieldReplicaText\": \"Replica of the field\",\r",
                    "    \"successTitle\": \"Success\",\r",
                    "    \"contentsDeleteError\": \"Error in deleting content\",\r",
                    "    \"contentTypeHasBeenEmptiedText\": \"The content type has been emptied\",\r",
                    "    \"fieldNameAlreadyUsedError\": \"Name already used by another field\",\r",
                    "    \"passwordsDoNotMatchError\": \"Passwords don't match\",\r",
                    "    \"passwordChangedText\": \"Password changed\",\r",
                    "    \"rightsRecoveryError\": \"Error in the recovery of the rights\",\r",
                    "    \"tokenRecoveryError\": \"Error in retrieving the security token\",\r",
                    "    \"siteModifWarning\": \"The modification of this site will involve the closing of the page management window. This will result in the loss of any changes not saved in that window. </br> Do you want to continue?\",\r",
                    "    \"pageURLRecoveryError\": \"Error in retrieving the url of the page\",\r",
                    "    \"pagePreviewText\": \"This is an overview of this page as available online on\",\r",
                    "    \"associatedMaskText\": \"Associated mask\",\r",
                    "    \"pagePropertiesInvalidError\": \"The properties of the page are invalid.\",\r",
                    "    \"stageText\": \"Step\",\r",
                    "    \"onText\": \"out of\",\r",
                    "    \"ascText\": \"Ascending\",\r",
                    "    \"descText\": \"Descending\",\r",
                    "    \"andText\": \"And\",\r",
                    "    \"thenText\": \"Then\",\r",
                    "    \"mediaTypeIsUsedError\": \"This type of media is used by media and therefore cannot be deleted.\",\r",
                    "    \"invalidRightsPropertiesError\": \"Invalid rights configuration\",\r",
                    "    \"newDamText\": \"New media\",\r",
                    "    \"DAMEditText\": \"Edition of the media\",\r",
                    "    \"DAMDisplayText\": \"Display of the media\",\r",
                    "    \"searchText\": \"Search\",\r",
                    "    \"identifierRecoveryError\": \"Error in the recovery of an identifier\",\r",
                    "    \"invalidFormPropertiesError\": \"Invalid form properties\",\r",
                    "    \"fileAnalysisError\": \"Error in parsing the file\",\r",
                    "    \"identifiedFieldsText\": \"identified fields and\",\r",
                    "    \"importableContentsText\": \"importable contents\",\r",
                    "    \"importedContentsText\": \"contents imported\",\r",
                    "    \"importError\": \"Error during import\",\r",
                    "    \"eligibleContentTypesText\": \"Eligible content types\",\r",
                    "    \"eachContentMustVerifyRulesText\": \"Each content must verify the following rules\",\r",
                    "    \"eachContentMustVerifyAtLeastOneRuleText\": \"Each content must verify at least one of the following rules\",\r",
                    "    \"taxonomyText\": \"Taxonomy\",\r",
                    "    \"rulesAndSortsOnFieldsText\": \"Rules and sorting on content fields\",\r",
                    "    \"ascSortText\": \"Sort ascending\",\r",
                    "    \"descSortText\": \"sort descending\",\r",
                    "    \"relationBetweenRulesText\": \"Relationship between the rules\",\r",
                    "    \"creationText\": \"Creation\",\r",
                    "    \"lastUpdateText\": \"Last modified\",\r",
                    "    \"noVocabForTheseCtText\": \"No vocabulary available for this set of content types\",\r",
                    "    \"ruleText\": \"Rule\",\r",
                    "    \"tRuleAllText\": \"Contains all the terms\",\r",
                    "    \"tRuleAllRecText\": \"Contains all the terms or at least a descendant per term\",\r",
                    "    \"tRuleSomeText\": \"Contains at least one of the terms\",\r",
                    "    \"tRuleSomeREcText\": \"Contains at least one of the terms or at least one of the descendants of one of the terms\",\r",
                    "    \"tRuleNotText\": \"Does not contain any of the following terms\",\r",
                    "    \"tRuleNotRecText\": \"Does not contain the following terms or their descendants\",\r",
                    "    \"CTMustHaveTitleError\": \"The content type must have a 'Title' field\",\r",
                    "    \"CTMustHaveOnlyOneTitleError\": \"The content type must have only a single field of type \\\"title\\\"\",\r",
                    "    \"CTMustHaveOnlyOneSummaryError\": \"The content type must have only a single field of type \\\"Summary\\\"\",\r",
                    "    \"CRMustHaveOnlyOneLocFieldError\": \"The content type must have only a single field of type 'Location'\",\r",
                    "    \"notMentionedText\": \"not filled\",\r",
                    "    \"showOnlyIfText\": \"Displayed if and only if\",\r",
                    "    \"orText\": \"Or\",\r",
                    "    \"rootText\": \"Root\",\r",
                    "    \"esGeoQueryText\": \"Geolocated Elastic Search Query Wizard\",\r",
                    "    \"esQueryText\": \"Elastic Search Query Wizard\",\r",
                    "    \"esDAMQueryText\": \"DAM Elastic Search Query Wizard\",\r",
                    "    \"keywordsText\": \"Keywords\",\r",
                    "    \"defaultKeywordsText\": \"Default keywords\",\r",
                    "    \"defaultSinglePageText\": \"Default detail page\",\r",
                    "    \"homePageText\": \"Homepage\",\r",
                    "    \"rolesText\": \"Roles\",\r",
                    "    \"authorText\": \"Author\",\r",
                    "    \"versionText\": \"Version\",\r",
                    "    \"contentsText\": \"Contents\",\r",
                    "    \"displayText\": \"Display\",\r",
                    "    \"publishedText\": \"published\",\r",
                    "    \"pendingText\": \"pending validation\",\r",
                    "    \"draftText\": \"draft\",\r",
                    "    \"refusedText\": \"refused\",\r",
                    "    \"yesText\": \"Yes\",\r",
                    "    \"noText\": \"No\",\r",
                    "    \"mediasText\": \"Media\",\r",
                    "    \"simpleQueryText\": \"Simple query\",\r",
                    "    \"manualQueryText\": \"Manual query\",\r",
                    "    \"restoreText\": \"Restore\",\r",
                    "    \"originalFileMText\": \"Original file *\",\r",
                    "    \"noneText\": \"None\",\r",
                    "    \"basicText\": \"Basic\",\r",
                    "    \"formUniqueAnswerMessage\": \"You have already completed this survey. Thank you.\",\r",
                    "    \"formEndMessage\": \"Thank you for completing this survey.\",\r",
                    "    \"oldVersionText\": \"(A more recent version of Rubedo is available)\",\r",
                    "    \"summaryText\": \"Summary\",\r",
                    "    \"showDesktopTooltip\": \"Show desktop\",\r",
                    "    \"userText\":\"user\",\r",
                    "    \"usersText\":\"users\",\r",
                    "    \"emptyText\":\"empty\",\r",
                    "    \"groupsText\":\"Groups\",\r",
                    "    \"removeText\":\"Remove\",\r",
                    "    \"duplicateFieldText\":\"Duplicate of the field\",\r",
                    "    \"duplicateText\":\"Duplicate\",\r",
                    "    \"multivaluedText\":\"Multivalued\",\r",
                    "    \"searchableText\":\"Searchable\",\r",
                    "    \"localizableText\":\"Localizable\",\r",
                    "    \"optionalText\":\"Optional\",\r",
                    "    \"fileTypeText\":\"File type\",\r",
                    "    \"tooltipText\":\"Tooltip\",\r",
                    "    \"nameText\":\"Name\",\r",
                    "    \"labelText\":\"Label\",\r",
                    "    \"fileFieldText\":\"File\",\r",
                    "    \"fileFieldDescription\":\"<h2>File field<\\/h2> <\\/br> <p>This field allows for the upload of files.<\\/p>\",\r",
                    "    \"databaseIsUpToDateText\":\"Database is up to date\",\r",
                    "    \"databaseNeedsUpdateText\":\"Database update required\",\r",
                    "    \"databaseUpdateWarning\":\"This action will update the Rubedo database. It is recommended that you back-up your data before starting. Would you like to continue ?\",\r",
                    "    \"databaseUpdatedToText\":\"The database has been updated to version\",\r",
                    "    \"folderViewText\":\"Folder view\",\r",
                    "    \"switchToFolderViewText\": \"Switch to folder view\",\r",
                    "    \"searchViewText\":\"Search view\",\r",
                    "    \"switchToSearchViewText\":\"Switch to search view\",\r",
                    "    \"notFiledText\": \"Not filed\",\r",
                    "    \"mediaTypeText\":\"Media type\",\r",
                    "    \"filesUploadedText\":\"files uploaded\",\r",
                    "    \"allText\":\"All\",\r",
                    "    \"contentTypeText\":\"Content type\",\r",
                    "    \"encodingText\":\"Encoding\"    \r",
                    "});\r",
                    "// attach event and load localisation store\r",
                    "/*Ext.getStore(\"LocalisationStore\").on(\"load\",function(){\r",
                    "\r",
                    "});*/\r",
                    "//me.updateLocalisationSingletons();"
                ]
            },
            "designerId": "02134674-1f73-49b0-ab08-b1257bec9f4e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onButtonAfterRender1",
                "implHandler": [
                    "try {\r",
                    "    component.on(\"click\", function(){\r",
                    "        Ext.widget('callout', {\r",
                    "            cls: 'gray',\r",
                    "            width: 400,\r",
                    "            html:Rubedo.RubedoAppHelp[component.RApplication],\r",
                    "            calloutArrowLocation: 'top-right',\r",
                    "            target: component,\r",
                    "            relativePosition: 't-b',\r",
                    "            relativeOffsets: [-184,0],\r",
                    "            fadeInDuration: 200,\r",
                    "            fadeOutDuration: 200,\r",
                    "            dismissDelay: 60000\r",
                    "        }).show();\r",
                    "\r",
                    "    });\r",
                    "} catch (err){\r",
                    "    console.log(\"failed to show application help\");\r",
                    "}"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#RHelpBtn"
            },
            "designerId": "c94d5e08-9c29-411e-ab6a-d4b0134271e9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onComponentBeforeRender",
                "implHandler": [
                    "if (component.localiserId){\r",
                    "    var configs = Rubedo.RubedoInterfaceLoc[component.localiserId];\r",
                    "    if (!Ext.isEmpty(configs)) {\r",
                    "        Ext.apply(component, configs);\r",
                    "        if (!Ext.isEmpty(configs.tooltip)) {\r",
                    "            component.setTooltip(configs.tooltip);\r",
                    "        }\r",
                    "    }\r",
                    "    if ((component.isXType(\"button\"))&&(component.scale==\"large\")&&(Ext.isEmpty(component.dontStretch))){\r",
                    "        component.minWidth=48;\r",
                    "    }\r",
                    "}\r",
                    "if ((component.isXType(\"field\"))||(component.isXType(\"checkboxgroup\"))||(component.isXType(\"radiogroup\"))){\r",
                    "    component.labelSeparator=\" \";\r",
                    "    if (component.name==\"localizable\"){\r",
                    "        //temporary localiser hide\r",
                    "        component.hide();\r",
                    "    }\r",
                    "}"
                ],
                "name": "beforerender",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Base",
                "designer|controlQuery": "component"
            },
            "designerId": "20545d3d-55c2-4f5f-b471-7cfc1046dd2b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onBasefieldAdded",
                "implHandler": [
                    "if (component.localiserId){\r",
                    "    var configs = Rubedo.RubedoInterfaceLoc[component.localiserId];\r",
                    "    if (!Ext.isEmpty(configs)) {\r",
                    "        Ext.apply(component, configs);\r",
                    "    }\r",
                    "}\r",
                    "if (!Ext.isEmpty(component.RTip)){\r",
                    "    component.anchor=\"90%\";\r",
                    "    container.insert(pos,Ext.widget(\"RHelpBtn\", {tooltip:component.RTip}));\r",
                    "}"
                ],
                "name": "added",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Base",
                "designer|controlQuery": "field, checkboxgroup, radiogroup"
            },
            "designerId": "4989e511-4ecd-48f4-bcbb-2cfcdfbf915d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "produceInterfaceLocalisationJSON",
                "implHandler": [
                    "var result= { };\r",
                    "var count=0;\r",
                    "Ext.Object.each(Rubedo.view, function(a){\r",
                    "    var test=Ext.create(\"Rubedo.view.\"+a,{id:undefined});\r",
                    "    if (!Ext.isEmpty(test.localiserId)){\r",
                    "        count=count+1;\r",
                    "        if ((test.isXType(\"field\"))||(test.isXType(\"radiogroup\"))||(test.isXType(\"checkboxgroup\"))){\r",
                    "            result[test.localiserId]={\r",
                    "                fieldLabel:test.fieldLabel,\r",
                    "                boxLabel:test.boxLabel,\r",
                    "                buttonText:test.buttonText,\r",
                    "                RTip:test.RTip\r",
                    "            };\r",
                    "        } else if (test.isXType(\"button\")){\r",
                    "            result[test.localiserId]={\r",
                    "                text:test.text,\r",
                    "                tooltip:test.tooltip\r",
                    "            };\r",
                    "        } else if (test.isXType(\"menuitem\")){\r",
                    "            result[test.localiserId]={\r",
                    "                text:test.text,\r",
                    "                tooltip:test.tooltip\r",
                    "            };\r",
                    "        }else if (test.isXType(\"fieldset\")){\r",
                    "            result[test.localiserId]={\r",
                    "                title:test.title\r",
                    "            };\r",
                    "        } else if (test.isXType(\"panel\")){\r",
                    "            result[test.localiserId]={\r",
                    "                title:test.title,\r",
                    "                tooltip:test.tooltip\r",
                    "            };\r",
                    "        } else if (test.isXType(\"window\")){\r",
                    "            result[test.localiserId]={\r",
                    "                title:test.title\r",
                    "            };\r",
                    "        }else if (test.isXType(\"gridcolumn\")){\r",
                    "            result[test.localiserId]={\r",
                    "                text:test.text\r",
                    "            };\r",
                    "        } else {\r",
                    "            console.log(\"unhandled localised component for id : \"+test.localiserId); \r",
                    "            count=count-1;\r",
                    "        }\r",
                    "        if (!Ext.isEmpty(result[test.localiserId])){\r",
                    "            Ext.Object.each(result[test.localiserId], function(key, value, myself) {\r",
                    "                if (Ext.isEmpty(value)){\r",
                    "                    delete result[test.localiserId][key];\r",
                    "                }\r",
                    "            });\r",
                    "        }\r",
                    "    }\r",
                    "    try{\r",
                    "        Ext.Array.forEach(test.query(\"component\"), function(component){\r",
                    "            if (!Ext.isEmpty(component.localiserId)){\r",
                    "                count=count+1;\r",
                    "                if ((component.isXType(\"field\"))||(component.isXType(\"radiogroup\"))||(component.isXType(\"checkboxgroup\"))){\r",
                    "                    result[component.localiserId]={\r",
                    "                        fieldLabel:component.fieldLabel,\r",
                    "                        boxLabel:component.boxLabel,\r",
                    "                        buttonText:component.buttonText,\r",
                    "                        RTip:component.RTip\r",
                    "                    };\r",
                    "                } else if (component.isXType(\"button\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        text:component.text,\r",
                    "                        tooltip:component.tooltip\r",
                    "                    };\r",
                    "                } else if (component.isXType(\"menuitem\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        text:component.text\r",
                    "                    };\r",
                    "                }else if (component.isXType(\"fieldset\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        title:component.title\r",
                    "                    };\r",
                    "                } else if (component.isXType(\"panel\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        title:component.title,\r",
                    "                        tooltip:component.tooltip\r",
                    "                    };\r",
                    "                } else if (component.isXType(\"window\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        title:component.title\r",
                    "                    };\r",
                    "                }else if (component.isXType(\"gridcolumn\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        text:component.text\r",
                    "                    };\r",
                    "                } else {\r",
                    "                    console.log(\"unhandled localised component for id : \"+component.localiserId); \r",
                    "                    count=count-1;\r",
                    "                }\r",
                    "                if (!Ext.isEmpty(result[component.localiserId])){\r",
                    "                    Ext.Object.each(result[component.localiserId], function(key, value, myself) {\r",
                    "                        if (Ext.isEmpty(value)){\r",
                    "                            delete result[component.localiserId][key];\r",
                    "                        }\r",
                    "                    });\r",
                    "                }\r",
                    "            }\r",
                    "        });\r",
                    "\r",
                    "    }catch(err){\r",
                    "        console.log(err);\r",
                    "    }\r",
                    "    test.destroy();\r",
                    "});\r",
                    "console.log(count+\" localised interface components\");\r",
                    "return(Ext.JSON.encode(result));"
                ]
            },
            "designerId": "80910a7c-a857-449a-9aa4-f6257d05c76a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateLocalisationSingletons",
                "implHandler": [
                    "//new method using simple JSON files\r",
                    "var userLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "if (Ext.isEmpty(userLanguage)){\r",
                    "    userLanguage=\"en\";\r",
                    "}\r",
                    "if (userLanguage==\"en\"){\r",
                    "    Ext.Date.defaultFormat=\"m/d/Y\";\r",
                    "}\r",
                    "Ext.Ajax.request({\r",
                    "    url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/appHelp.json',\r",
                    "    params: {\r",
                    "\r",
                    "    },\r",
                    "    success: function(response){\r",
                    "        var singletonUpdates = Ext.JSON.decode(response.responseText);\r",
                    "        Ext.apply(Rubedo.RubedoAppHelp, singletonUpdates);\r",
                    "    },\r",
                    "    failure:function(){\r",
                    "        console.log(\"RubedoAppHelp singleton could not be localized for the current language\");\r",
                    "    }\r",
                    "});\r",
                    "Ext.Ajax.request({\r",
                    "    url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/componentLabels.json',\r",
                    "    params: {\r",
                    "\r",
                    "    },\r",
                    "    success: function(response){\r",
                    "        var singletonUpdates = Ext.JSON.decode(response.responseText);\r",
                    "        Ext.apply(Rubedo.RubedoInterfaceLoc, singletonUpdates);\r",
                    "    },\r",
                    "    failure:function(){\r",
                    "        console.log(\"RubedoInterfaceLoc singleton could not be localized for the current language\");\r",
                    "    }\r",
                    "});\r",
                    "Ext.Ajax.request({\r",
                    "    url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/automatedElements.json',\r",
                    "    params: {\r",
                    "\r",
                    "    },\r",
                    "    success: function(response){\r",
                    "        var singletonUpdates = Ext.JSON.decode(response.responseText);\r",
                    "        Ext.apply(Rubedo.RubedoAutomatedElementsLoc, singletonUpdates);\r",
                    "    },\r",
                    "    failure:function(){\r",
                    "        console.log(\"RubedoAutomatedElementsLoc singleton could not be localized for the current language\");\r",
                    "    }\r",
                    "});\r",
                    "if (!Ext.isEmpty(Ext.getStore(\"TypesChampsDataStore\"))){\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'resources/localisationfiles/generic/fieldTypes.json',\r",
                    "        params: {\r",
                    "\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var genericStructureString = response.responseText;\r",
                    "            Ext.Ajax.request({\r",
                    "                url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/fieldTypeLabels.json',\r",
                    "                params: {\r",
                    "\r",
                    "                },\r",
                    "                success: function(response){\r",
                    "                    var localisedLabels =Ext.JSON.decode(response.responseText);\r",
                    "                    Ext.Object.each(localisedLabels, function(key, value, myself) {\r",
                    "                        replacer=new RegExp(key, 'g');\r",
                    "                        genericStructureString=genericStructureString.replace(replacer, value);\r",
                    "                    });\r",
                    "                    var decodedFT=Ext.JSON.decode(genericStructureString);\r",
                    "                    Ext.getStore(\"TypesChampsDataStore\").removeAll();\r",
                    "                    Ext.getStore(\"TypesChampsDataStore\").loadData(decodedFT);\r",
                    "\r",
                    "\r",
                    "                },\r",
                    "                failure:function(){\r",
                    "                    console.log(\"FieldTypes store could not be localised for this language\");\r",
                    "                }\r",
                    "            });\r",
                    "        },\r",
                    "        failure:function(){\r",
                    "            console.log(\"FieldTypes store could not retrieve generic structure\");\r",
                    "        }\r",
                    "    });\r",
                    "}\r",
                    "if (!Ext.isEmpty(Ext.getStore(\"BlocsDataStore\"))){\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'resources/localisationfiles/generic/blockTypes.json',\r",
                    "        params: {\r",
                    "\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var genericStructureString = response.responseText;\r",
                    "            Ext.Ajax.request({\r",
                    "                url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/blockTypeLabels.json',\r",
                    "                params: {\r",
                    "\r",
                    "                },\r",
                    "                success: function(response){\r",
                    "                    var localisedLabels =Ext.JSON.decode(response.responseText);\r",
                    "                    Ext.Object.each(localisedLabels, function(key, value, myself) {\r",
                    "                        replacer=new RegExp(key, 'g');\r",
                    "                        genericStructureString=genericStructureString.replace(replacer, value);\r",
                    "                    });\r",
                    "                    var decodedFT=Ext.JSON.decode(genericStructureString);\r",
                    "                    Ext.getStore(\"BlocsDataStore\").removeAll();\r",
                    "                    Ext.getStore(\"BlocsDataStore\").loadData(decodedFT);\r",
                    "\r",
                    "\r",
                    "                },\r",
                    "                failure:function(){\r",
                    "                    console.log(\"Blocks store could not be localised for this language\");\r",
                    "                }\r",
                    "            });\r",
                    "        },\r",
                    "        failure:function(){\r",
                    "            console.log(\"Blocks store could not retrieve generic structure\");\r",
                    "        }\r",
                    "    });\r",
                    "}\r",
                    "if (!Ext.isEmpty(Ext.getStore(\"FormFieldTypesStore\"))){\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'resources/localisationfiles/generic/formFieldTypes.json',\r",
                    "        params: {\r",
                    "\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var genericStructureString = response.responseText;\r",
                    "            Ext.Ajax.request({\r",
                    "                url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/formFieldLabels.json',\r",
                    "                params: {\r",
                    "\r",
                    "                },\r",
                    "                success: function(response){\r",
                    "                    var localisedLabels =Ext.JSON.decode(response.responseText);\r",
                    "                    Ext.Object.each(localisedLabels, function(key, value, myself) {\r",
                    "                        replacer=new RegExp(key, 'g');\r",
                    "                        genericStructureString=genericStructureString.replace(replacer, value);\r",
                    "                    });\r",
                    "                    var decodedFT=Ext.JSON.decode(genericStructureString);\r",
                    "                    Ext.getStore(\"FormFieldTypesStore\").removeAll();\r",
                    "                    Ext.getStore(\"FormFieldTypesStore\").loadData(decodedFT);\r",
                    "\r",
                    "\r",
                    "                },\r",
                    "                failure:function(){\r",
                    "                    console.log(\"Form Fields store could not be localised for this language\");\r",
                    "                }\r",
                    "            });\r",
                    "        },\r",
                    "        failure:function(){\r",
                    "            console.log(\"Form Fields store could not retrieve generic structure\");\r",
                    "        }\r",
                    "    });\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "//Old method using the database\r",
                    "var userLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "Ext.Array.forEach(Ext.getStore(\"LocalisationStore\").getRange(),function(localiser){\r",
                    "    var toUpdate =Rubedo[localiser.get(\"name\")];\r",
                    "    if (!Ext.isEmpty(toUpdate)){\r",
                    "        Ext.apply(toUpdate, localiser.get(\"items\"));\r",
                    "    }\r",
                    "});\r",
                    "if ((!Ext.isEmpty(userLanguage))&&(userLanguage!=\"fre\")){\r",
                    "    Ext.Array.forEach(Ext.getStore(\"LocalisationStore\").getRange(),function(localiser){\r",
                    "        var toUpdate =Rubedo[localiser.get(\"name\")];\r",
                    "        if (!Ext.isEmpty(toUpdate)){\r",
                    "            if(!Ext.isEmpty(localiser.get(\"i18n\")[userLanguage])){\r",
                    "                Ext.apply(toUpdate, localiser.get(\"i18n\")[userLanguage]);\r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "}*/"
                ]
            },
            "designerId": "ccc2e951-4238-41b3-b475-42aaf17282a1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createLocalisationDefaults",
                "implHandler": [
                    "//deprecated method\r",
                    "/*var me = this;\r",
                    "var defaultHelp={\r",
                    "pages:\"<p>Les différentes pages d'un site peuvent aisément être enrichies de blocs fonctionnels.L'application \\\"Pages\\\" permet :</p><ul><li> d'accéder à la vue arborescente des sites gérés sur la plateforme,</li><li> d'ajouter des pages sur la base des masques de pages existants,</li><li> de modifier ou de supprimer des pages,</li><li> d'ajouter des fonctionnalités aux pages par le biais de la bibliothèque de blocs fonctionnels,</li><li> de prévisualiser l'affichage d'une page en front-office,</li><li> de gérer les paramètres de référencement naturel,</li><li> de gérer les droits en lecture et écriture au travers des espaces de travail.</li></ul>\",\r",
                    "sites:\"<p>Rubedo offre nativement la fonctionnalité d'usine à sites.L'application \\\"Sites\\\" permet  :</p><ul><li> de créer de nouveaux sites au travers d'un assistant de création </li><li>  sur la base de modèles existants ou en partant d'un modèle vierge </li><li>  de modifier le paramétrage des sites existants</li></ul>\",\r",
                    "masks:\"<p>Les masques de pages représentent les différents gabarits de rendu disponibles en front-office.L'application \\\"Masques de pages\\\" permet  :</p><ul><li> de créer de nouveaux gabarits de mise en page en lignes et colonnes</li> <li>  de dupliquer des masques existants, éventuellement d'un site vers un autre</li> <li>  de gérer les blocs fonctionnels persistants, tels que les menus</li> <li>  de constituer une bibliothèques d'éléments (lignes, colonnes ou blocs) réutilisables entre les masques</li> <li>  de gérer les paramètres de \\\"Responsive Design\\\" : visibilité des lignes, colonnes et blocs sur téléphone, tablette, ou ordinateur</li> </ul>\",\r",
                    "contentTypes:\"<p>Les types de contenus correspondent aux données structurées gérées par Rubedo : articles, news, ...etc.L'application \\\"Types de contenus\\\" permet  :</p><ul><li> de créer de nouveaux types de contenus à l'aide d'un éditeur avancé</li><li>  de paramétrer champs par champs les contrôles de saisie, les valeurs par défaut, le caractère obligatoire</li><li>  de modifier des types de contenus existants</li><li>  de gérer le caractère localisable (plusieurs langue), et recherchable d'un champ</li><li>  de gérer les aides à la saisie</li><li>  de déclarer les vocabulaires applicables à la classification du contenu</li><li>  de déclarer le workflow applicable au contenu</li><li>  de déclarer le ou les espaces de travail autorisés pour la création et la diffusion des contenus</li></ul>\",\r",
                    "damTypes:\"<p>Les types de média correspondent aux fichiers gérés par Rubedo : images, vidéo, audio, animation ou documents bureautiques.L'application \\\"Types de médias\\\" permet  :</p><ul><li> de créer de nouveaux types de médias (image, document, vidéo, audio, animation)</li><li> d'y ajouter des métadonnées (auteur, copyright, sous-titrage, ...etc.) à l'aide d'un éditeur avancé</li><li> de paramétrer champs par champs les contrôles de saisie, les valeurs par défaut, le caractère obligatoire</li><li> de modifier des types de médias existants</li><li> de gérer le caractère localisable (plusieurs langue), et recherchable d'une métadonnée</li><li> de gérer les aides à la saisie</li><li> de déclarer les vocabulaires applicables à la classification d'un média</li><li> de déclarer le ou les espaces de travail autorisés pour la création et la diffusion des médias</li></ul>\",\r",
                    "queries:\"<p>Les requêtes permettent de créer des listes automatiques ou manuelles de contenus, documents et médias.L'application \\\"Requêtes\\\" permet  :</p><ul><li> de créer et sauvegarder des requêtes simples ou avancées, sur les contenus ou les médias</li><li> de modifier des requêtes existantes</li><ul>\",\r",
                    "taxonomy:\"<p>La taxonomie permet de créer une classification multi-dimensionnelle de l'ensemble des contenus (textes, médias et documents).L'application \\\"Taxonomie\\\" permet  :</p><ul><li> de créer de nouveaux vocabulaires arborescents et d'y ajouter des termes</li> <li> d'appliquer des droits pour les espaces de travail et une aide dédiée pour chaque taxonomie</li> <li> de définir ses caractéristiques : extensible, choix multiple, obligatoire</li></ul>\",\r",
                    "groups:\"<p>Les groupes permettent de définir les utilisateurs, les espaces de travail et les rôles de gestion associés.L'application \\\"Groupes\\\" permet  :</p><ul><li> de créer des groupes d'utilisateurs</li><li>  d'ajouter des utilisateurs à ces groupes</li><li>  de paramétrer les droits associés à chaque groupe : Espaces de travail (en lecture, en contribution, par défaut) et rôles</li><li>  de gérer les groupes (suppression, modification, déplacement, hiérarchisation)</li></ul>\",\r",
                    "workspaces:\"<p>Les espaces de travail permettent de réserver l'accès en lecture, écriture ou diffusion sur des types de contenus, de médias ou des rubriques de sites à des groupes d'utilisateurs spécifiques.L'application \\\"Espaces de travail\\\" permet  :</p><ul><li> de créer des espaces</li><li> de supprimer les espaces de travail</li></ul>\",\r",
                    "users:\"<p>Les utilisateurs front-office et back-office sont regroupés au sein d'un annuaire interne. Les droits accordés à un utilisateur sont liés aux groupes auxquels il appartient.L'application \\\"Utilisateurs\\\" permet  :</p><ul><li> d'ajouter des utilisateurs</li> <li> de compléter les profils (email, service, fonction, photo, ...)</li> <li>  de gérer les accès et les droits (identifiant, mot de passe, groupes, validité du compte)</li> </ul> \",\r",
                    "contents:\"<p>Rubedo gère un référentiel transverse de contenus qui peuvent être publiés sur différents sites et espaces de travail.L'application \\\"Contenus\\\" permet  :</p><ul><li> de créer un contenu à partir d'un type de contenu paramétré</li> <li>  de gérer son état dans le workflow de publication attribué au type de contenu</li> <li>  de gérer la publication différée</li> <li>  de classer le contenu à l'aide des vocabulaires autorisés pour ce type de contenu</li> <li>  d'associer le contenu à un espace de contribution et des espaces de diffusion</li> <li>  de modifier les contenus</li> <li>  de dupliquer les contenus</li> <li>  d'ajouter un contenu en favori</li> </ul> \",\r",
                    "dam:\"<p>La médiathèque permet de gérer les médias ( images, vidéo, audio, animation ou documents) en fonction des types de médias paramétrés.L'application \\\"Médiathèque\\\" permet  :</p><ul><li> de créer un média à partir d'un type de média paramétré</li><li>  d'uploader un média et de renseigner les métadonnées associées</li><li>  de classer le média à l'aide des vocabulaires autorisés pour ce type de média</li><li>  d'associer le média à un espace de contribution et des espaces de diffusion</li><li>  de modifier les média</li><li>  d'ajouter un média en favori</li></ul>\",\r",
                    "forms:\"<p>Rubedo permet de réaliser des enquêtes en ligne à l'aide de l'application questionnaire. Les fonctions de glisser/déposer facilitent la création des questions et des étapes. L'application Questionnaire permet :</p><ul><li> d'ajouter, supprimer et dupliquer un questionnaire</li><li> d'ajouter un questionnaire en favoris</li><li> de gérer les propriétés d'un questionnaire,  les conditions d'unicité et sa mise en ligne</li><li> de créer un questionnaire à l'aide des palettes d'outils de mise en forme (Wysiwyg, image, section, page, titre) et de paramétrage (type de questions)</li><li> de gérer les paramétres des questions et des réponses (label, bulle d'aide, obligatoire, conditionnel et options)</li><li> d'exploiter les résultats de chaque questionnaire en exportant au format csv</li></ul>\"\r",
                    "};\r",
                    "var defaultAutomatedElementsLoc={\r",
                    "notifTitle:\"Notififcation\",\r",
                    "notifCreate:\"<p>Création réussie.</p>\",\r",
                    "notifUpdate:\"<p>Mise à jour réussie.</p>\",\r",
                    "notifDestroy:\"<p>Suppression réussie.</p>\",\r",
                    "errorTitle:\"Erreur\",\r",
                    "serverConnectionError:\"Connexion au serveur interrompue\",\r",
                    "internalServerError:\"Erreur interne du serveur\",\r",
                    "unkownError:\"Erreur inconnue\",\r",
                    "activateText:\"Activer\",\r",
                    "pageHoldsDefaultError:\"Cette page ne peut etre suprimée car elle u une de ses décendantes est utilisée comme page de détail du site\",\r",
                    "pageHoldsDefaultServerError:\"Erreur dans la détermination du statut supprimable de la page\",\r",
                    "deactivateText:\"Désactiver\",\r",
                    "windowBeforeUnloadMessage:\"Vous allez quitter le Back Office et perdre toute modification non sauvegardée.\",\r",
                    "maskIsUsedText:\"Le masque ne peut etre supprimé car il est utilisé par des pages.\",\r",
                    "selectAnElementText:\"Sélectionnez un élément\",\r",
                    "columnText:\"Colonne\",\r",
                    "lignText:\"Ligne\",\r",
                    "titleText:\"Titre\",\r",
                    "displayTitleText:\"Afficher le titre\",\r",
                    "visibilityText:\"Visibilité\",\r",
                    "telephoneText:\"Téléphone\",\r",
                    "tabletText:\"Tablette\",\r",
                    "computerText:\"Ordinateur\",\r",
                    "HTMLClassText:\"Classe HTML\",\r",
                    "HTMLIdText:\"Id HTML\",\r",
                    "styleText:\"Style\",\r",
                    "tagText:\"Tag\",\r",
                    "displayAsTabsText:\"Afficher en onglets\",\r",
                    "displayRowTagText:\"Afficher la baliser row\",\r",
                    "displayRowFluidTagText:\"Afficher la balise row-fluid\",\r",
                    "includeInAContainerText:\"Inclure dans un container\",\r",
                    "includeInAContainerFluidText:\"Inclure dans un container-fluid\",\r",
                    "containerIdText:\"Id du container\",\r",
                    "containerClassText:\"Classe du container\",\r",
                    "mainColumnText:\"Colonne principale\",\r",
                    "mainColumnRTip:\"Permet de définir l'emplacement d'affichage des contenus proposés sous forme de liste dans les pages utilisants ce masque.\",\r",
                    "showSpanAndOffsetText:\"Afficher le span et l'offset\",\r",
                    "offsetText:\"Offset\",\r",
                    "spanText:\"Span\",\r",
                    "columnIdRecoveryError:\"Erreur dans la récupération d\\'un identifiant de colonne\",\r",
                    "displayInADivText:\"Afficher dans une div\",\r",
                    "divIdText:\"Id de la div\",\r",
                    "divClassText:\"Classe de la div\",\r",
                    "blockText:\"Bloc\",\r",
                    "URLPrefixText:\"Préfixe URL\",\r",
                    "invalidMetaError:\"Certains champs de métadonnées sont invalides.\",\r",
                    "invalidTaxoError:\"Certains champs de taxonomie sont invalides.\",\r",
                    "invalidFieldsError:\"Certains champs sont invalides.\",\r",
                    "insufficientContentRightsError:\"Vos droits sont insuffisants pour afficher ou modifier ce contenu\",\r",
                    "newContentText:\"Nouveau Contenu\",\r",
                    "maxOneLocFieldError:\"Un type de contenus ne peut pas avoir plusieurs champs de type \\\"Localisation\\\".\",\r",
                    "contentTypeIsUsedError:\"Ce type de contenu est utilsé par des contenus et ne peut donc pas etre supprimé.\",\r",
                    "warningTitle:\"Attention\",\r",
                    "contentTypeIncompatModifError:\"Le type de contenu est utilisé par des contenus et ces modifications ne sont pas compatibles.\",\r",
                    "contentTypeModifWarning:\"Ce type de contenu est utilisé par des contenus. Le modifier pourrait avoir de répercussions. </br> Souhaitez-vous continuer ?\",\r",
                    "fieldReplicaText:\"Replique du champ\",\r",
                    "successTitle:\"Succés\",\r",
                    "contentsDeleteError:\"Erreur dans la suppression des contenus\",\r",
                    "contentTypeHasBeenEmptiedText:\"Le type de contenu a été vidé\",\r",
                    "fieldNameAlreadyUsedError:\"Nom dèjà utilisé par un autre champ\",\r",
                    "passwordsDoNotMatchError:\"Les mots de passe ne correspondent pas\",\r",
                    "passwordChangedText:\"Mot de passe changé\",\r",
                    "rightsRecoveryError:\"Erreur dans la récupération des droits\",\r",
                    "tokenRecoveryError:\"Erreur dans la récupération du jeton de sécurité\",\r",
                    "siteModifWarning:\"La modification de ce site impliquera la fermeture de la fenetre de gestion des pages. Cela entrainera la perte de toute modification non sauvegardée dans cette fenetre. </br> Souhaitez-vous poursuivre ?\",\r",
                    "pageURLRecoveryError:\"Erreur dans la récupèration de l'url de la page\",\r",
                    "pagePreviewText:\"Ceci est un aperçu de cette page telle que disponible en ligne en\",\r",
                    "associatedMaskText:\"Masque associé\",\r",
                    "pagePropertiesInvalidError:\"Les propriétés de la page sont invalides.\",\r",
                    "stageText:\"Etape\",\r",
                    "onText:\"sur\",\r",
                    "ascText:\"Croissant\",\r",
                    "descText:\"Decroissant\",\r",
                    "andText:\"Et\",\r",
                    "thenText:\"Puis\",\r",
                    "mediaTypeIsUsedError:\"Ce type de média est utilisé par des médias et ne peut donc etre supprimé.\",\r",
                    "invalidRightsPropertiesError:\"Configuration invalide des droits\",\r",
                    "newDamText:\"Nouveau média\",\r",
                    "DAMEditText:\"Edition du média\",\r",
                    "DAMDisplayText:\"Affichage du média\",\r",
                    "searchText:\"Recherche\",\r",
                    "identifierRecoveryError:\"Erreur dans la récupération d'un identifiant\",\r",
                    "invalidFormPropertiesError:\"Propriétés du formulaire invalides\",\r",
                    "fileAnalysisError:\"Erreur dans l'analyse du fichier\",\r",
                    "identifiedFieldsText:\"champs identifiés et\",\r",
                    "importableContentsText:\"contenus importables\",\r",
                    "importedContentsText:\"contenus importés\",\r",
                    "importError:\"Erreur lors de l'import\",\r",
                    "eligibleContentTypesText:\"Types de contenus eligibles\",\r",
                    "eachContentMustVerifyRulesText:\"Chaque contenu doit verifier les règles suivantes\",\r",
                    "eachContentMustVerifyAtLeastOneRuleText:\"Chaque contenu doit verifier au moins une des règles suivantes\",\r",
                    "taxonomyText:\"Taxonomie\",\r",
                    "rulesAndSortsOnFieldsText:\"Règles et tris sur les champs des contenus\",\r",
                    "ascSortText:\"tri croissant\",\r",
                    "descSortText:\"tri decroissant\",\r",
                    "relationBetweenRulesText:\"Relation entre les règles\",\r",
                    "creationText:\"Création\",\r",
                    "lastUpdateText:\"Dernière modification\",\r",
                    "noVocabForTheseCtText:\"Pas de vocabulaire disponible pour cet ensemble de types de contenus\",\r",
                    "ruleText:\"Règle\",\r",
                    "tRuleAllText:\"Contient tous les termes\",\r",
                    "tRuleAllRecText:\"Contient tous les termes ou au moins un descendant par terme\",\r",
                    "tRuleSomeText:\"Contient au moins un des termes\",\r",
                    "tRuleSomeREcText:\"Contient au moins un des termes ou au moins un des descendants d’un des termes\",\r",
                    "tRuleNotText:\"Ne contient aucun des termes suivants\",\r",
                    "tRuleNotRecText:\"Ne contient ni les termes suivants ni leurs descendants\",\r",
                    "CTMustHaveTitleError:\"Le type de contenu doit obligatoirement avoir un champ de type \\\"Titre\\\"\",\r",
                    "CTMustHaveOnlyOneTitleError:\"Le type de contenu ne doit avoir qu'un seul champ de type \\\"Titre\\\"\",\r",
                    "CTMustHaveOnlyOneSummaryError:\"Le type de contenu ne doit avoir qu'un seul champ de type \\\"Résumé\\\"\",\r",
                    "CRMustHaveOnlyOneLocFieldError:\"Le type de contenu ne doit avoir qu'un seul champ de type \\\"Localisation\\\"\",\r",
                    "notMentionedText:\"non renseigné\",\r",
                    "showOnlyIfText:\"Affiché si et seulement si\",\r",
                    "orText:\"Ou\",\r",
                    "rootText:\"Racine\",\r",
                    "esGeoQueryText:\"Assistant de requête Elastic Search geolocalisée\",\r",
                    "esQueryText:\"Assistant de requête Elastic Search\",\r",
                    "esDAMQueryText:\"Assistant de requête DAM Elastic Search\",\r",
                    "keywordsText:\"Mots-clés\",\r",
                    "defaultKeywordsText:\"Mots-clés par défaut\",\r",
                    "defaultSinglePageText:\"Page de détail par défaut\",\r",
                    "homePageText:\"Page d'accueil\",\r",
                    "rolesText:\"Rôles\"\r",
                    "};\r",
                    "var defaultInterfaceLoc=me.produceInterfaceLocalisationJSON();\r",
                    "var store=Ext.getStore(\"LocalisationStore\");\r",
                    "var helpRec=store.findRecord(\"name\",\"RubedoAppHelp\");\r",
                    "store.suspendAutoSync();\r",
                    "if (Ext.isEmpty(helpRec)){\r",
                    "store.add({name:\"RubedoAppHelp\",items:defaultHelp,i18n:{}});\r",
                    "} else {\r",
                    "helpRec.set(\"items\",defaultHelp);\r",
                    "}\r",
                    "\r",
                    "var intLocRec=store.findRecord(\"name\",\"RubedoInterfaceLoc\");\r",
                    "if (Ext.isEmpty(intLocRec)){\r",
                    "store.add({name:\"RubedoInterfaceLoc\",items:defaultInterfaceLoc,i18n:{}});\r",
                    "} else {\r",
                    "intLocRec.set(\"items\",defaultInterfaceLoc);\r",
                    "}\r",
                    "var autoElsLoc=store.findRecord(\"name\",\"RubedoAutomatedElementsLoc\");\r",
                    "if (Ext.isEmpty(autoElsLoc)){\r",
                    "store.add({name:\"RubedoAutomatedElementsLoc\",items:defaultAutomatedElementsLoc,i18n:{}});\r",
                    "} else {\r",
                    "autoElsLoc.set(\"items\",defaultAutomatedElementsLoc);\r",
                    "}\r",
                    "store.resumeAutoSync();\r",
                    "store.sync();\r",
                    "console.log(\"Done saving localisation. Please reload the page.\");*/"
                ]
            },
            "designerId": "16e3c536-8ddf-47b6-81f8-80802e7dafb6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onFieldsetAfterRender",
                "implHandler": [
                    "var task = new Ext.util.DelayedTask(function(){\r",
                    "    component.setTitle(component.title);\r",
                    "});\r",
                    "task.delay(100);"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.form.FieldSet",
                "designer|controlQuery": "fieldset"
            },
            "designerId": "413bd541-5efe-49f4-b8f1-ad5d536d2703"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "extractLocFromBlocksJson",
                "implHandler": [
                    "var me = this;\r",
                    "var data = Ext.clone(Ext.Array.pluck(Ext.getStore(\"BlocsDataStore\").getRange(), \"data\"));\r",
                    "var extractedLoc = { };\r",
                    "Ext.Array.forEach(data, function(block){\r",
                    "    block.category=me.insertAndReplace(extractedLoc, block.category);\r",
                    "    block.type=me.insertAndReplace(extractedLoc, block.type);\r",
                    "    block.description=me.insertAndReplace(extractedLoc, block.description);\r",
                    "    block.configBasique.title=me.insertAndReplace(extractedLoc, block.configBasique.title);\r",
                    "    Ext.Array.forEach(block.configBasique.champsConfig.simple, function(category){\r",
                    "        category.categorie=me.insertAndReplace(extractedLoc, category.categorie);\r",
                    "        Ext.Array.forEach(category.champs, function(field){\r",
                    "            field.config.fieldLabel=me.insertAndReplace(extractedLoc, field.config.fieldLabel);\r",
                    "            if (!Ext.isEmpty(field.autoStoreData)){\r",
                    "                Ext.Array.forEach(field.autoStoreData, function(option){\r",
                    "                    option.label=me.insertAndReplace(extractedLoc, option.label);\r",
                    "                });\r",
                    "            }\r",
                    "        });\r",
                    "    });\r",
                    "    Ext.Array.forEach(block.configBasique.champsConfig.avance, function(category){\r",
                    "        category.categorie=me.insertAndReplace(extractedLoc, category.categorie);\r",
                    "        Ext.Array.forEach(category.champs, function(field){\r",
                    "            field.config.fieldLabel=me.insertAndReplace(extractedLoc, field.config.fieldLabel);\r",
                    "            if (!Ext.isEmpty(field.autoStoreData)){\r",
                    "                Ext.Array.forEach(field.autoStoreData, function(option){\r",
                    "                    option.label=me.insertAndReplace(extractedLoc, option.label);\r",
                    "                });\r",
                    "            }\r",
                    "        });\r",
                    "    });\r",
                    "});\r",
                    "console.log(Ext.JSON.encode(extractedLoc));\r",
                    "console.log(\"\\n \\n\");\r",
                    "console.log(Ext.JSON.encode(data));"
                ]
            },
            "designerId": "135734d5-8fd3-4b96-9764-767a7262b2f7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "extractLocFromFormFieldsJson",
                "implHandler": [
                    "var me = this;\r",
                    "var data = Ext.clone(Ext.Array.pluck(Ext.getStore(\"FormFieldTypesStore\").getRange(), \"data\"));\r",
                    "var extractedLoc = { };\r",
                    "Ext.Array.forEach(data, function(block){\r",
                    "    block.type=me.insertAndReplace(extractedLoc, block.type);\r",
                    "    block.description=me.insertAndReplace(extractedLoc, block.description);\r",
                    "    if (!Ext.isEmpty(block.itemConfig.label)){\r",
                    "        block.itemConfig.label=me.insertAndReplace(extractedLoc, block.itemConfig.label);\r",
                    "    }\r",
                    "    if (!Ext.isEmpty(block.itemConfig.html)){\r",
                    "        block.itemConfig.html=me.insertAndReplace(extractedLoc, block.itemConfig.html);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "});\r",
                    "console.log(Ext.JSON.encode(extractedLoc));\r",
                    "console.log(\"\\n \\n\");\r",
                    "console.log(Ext.JSON.encode(data));"
                ]
            },
            "designerId": "40374021-cf90-452e-b789-487de97acf90"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "extractLocFromFTJson",
                "implHandler": [
                    "var me = this;\r",
                    "var data = Ext.clone(Ext.Array.pluck(Ext.getStore(\"TypesChampsDataStore\").getRange(), \"data\"));\r",
                    "var extractedLoc = { };\r",
                    "Ext.Array.forEach(data, function(block){\r",
                    "    block.category=me.insertAndReplace(extractedLoc, block.category);\r",
                    "    block.type=me.insertAndReplace(extractedLoc, block.type);\r",
                    "    block.description=me.insertAndReplace(extractedLoc, block.description);\r",
                    "    block.config.fieldLabel=me.insertAndReplace(extractedLoc, block.config.fieldLabel);\r",
                    "    Ext.Array.forEach(block.configFields, function(field){\r",
                    "        field.config.fieldLabel=me.insertAndReplace(extractedLoc, field.config.fieldLabel);\r",
                    "    });\r",
                    "\r",
                    "});\r",
                    "console.log(Ext.JSON.encode(extractedLoc));\r",
                    "console.log(\"\\n \\n\");\r",
                    "console.log(Ext.JSON.encode(data));"
                ]
            },
            "designerId": "07885f77-2341-4fb7-a6fc-5d8fb735ee13"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "insertAndReplace",
                "designer|params": [
                    "locObj",
                    "targetString"
                ],
                "implHandler": [
                    "var newId=\"#\"+Ext.id()+\"#\";\r",
                    "var finalId=Ext.clone(newId);\r",
                    "Ext.Object.each(locObj, function(key, value, myself) {\r",
                    "    if (value==targetString){\r",
                    "        finalId=key;\r",
                    "    }\r",
                    "});\r",
                    "if (newId==finalId){\r",
                    "    locObj[finalId]=targetString;\r",
                    "}\r",
                    "return(finalId);"
                ]
            },
            "designerId": "561eeccd-ba92-4fe0-b9ae-9caba83908b8"
        }
    ]
}