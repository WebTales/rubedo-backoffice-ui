{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "LocalisationModel"
        ],
        "stores": [
            "LocalisationStore"
        ],
        "designer|userClassName": "LocalisationController",
        "designer|userAlias": "LocalisationController"
    },
    "designerId": "765f93a9-83e7-4405-aaaa-740265c87f51",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "Ext.override(Ext.form.field.Date, {\r",
                    "    submitFormat:'U',\r",
                    "    altFormats:'U|m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j'\r",
                    "});\r",
                    "Ext.require(\"Ext.ux.callout.Callout\");\r",
                    "\r",
                    "//get language param\r",
                    "\r",
                    "//apply correct locale file\r",
                    "\r",
                    "//define localisation singletons \r",
                    "Ext.define(\"Rubedo.RubedoAppHelp\",{\r",
                    "    singleton:true,\r",
                    "    pages:\"<p>Les différentes pages d'un site peuvent aisément être enrichies de blocs fonctionnels.L'application \\\"Pages\\\" permet :</p><ul><li> d'accéder à la vue arborescente des sites gérés sur la plateforme,</li><li> d'ajouter des pages sur la base des masques de pages existants,</li><li> de modifier ou de supprimer des pages,</li><li> d'ajouter des fonctionnalités aux pages par le biais de la bibliothèque de blocs fonctionnels,</li><li> de prévisualiser l'affichage d'une page en front-office,</li><li> de gérer les paramètres de référencement naturel,</li><li> de gérer les droits en lecture et écriture au travers des espaces de travail.</li></ul>\",\r",
                    "    sites:\"<p>Rubedo offre nativement la fonctionnalité d'usine à sites.L'application \\\"Sites\\\" permet  :</p><ul><li> de créer de nouveaux sites au travers d'un assistant de création </li><li>  sur la base de modèles existants ou en partant d'un modèle vierge </li><li>  de modifier le paramétrage des sites existants</li></ul>\",\r",
                    "    masks:\"<p>Les masques de pages représentent les différents gabarits de rendu disponibles en front-office.L'application \\\"Masques de pages\\\" permet  :</p><ul><li> de créer de nouveaux gabarits de mise en page en lignes et colonnes</li> <li>  de dupliquer des masques existants, éventuellement d'un site vers un autre</li> <li>  de gérer les blocs fonctionnels persistants, tels que les menus</li> <li>  de constituer une bibliothèques d'éléments (lignes, colonnes ou blocs) réutilisables entre les masques</li> <li>  de gérer les paramètres de \\\"Responsive Design\\\" : visibilité des lignes, colonnes et blocs sur téléphone, tablette, ou ordinateur</li> </ul>\",\r",
                    "    contentTypes:\"<p>Les types de contenus correspondent aux données structurées gérées par Rubedo : articles, news, ...etc.L'application \\\"Types de contenus\\\" permet  :</p><ul><li> de créer de nouveaux types de contenus à l'aide d'un éditeur avancé</li><li>  de paramétrer champs par champs les contrôles de saisie, les valeurs par défaut, le caractère obligatoire</li><li>  de modifier des types de contenus existants</li><li>  de gérer le caractère localisable (plusieurs langue), et recherchable d'un champ</li><li>  de gérer les aides à la saisie</li><li>  de déclarer les vocabulaires applicables à la classification du contenu</li><li>  de déclarer le workflow applicable au contenu</li><li>  de déclarer le ou les espaces de travail autorisés pour la création et la diffusion des contenus</li></ul>\",\r",
                    "    damTypes:\"<p>Les types de média correspondent aux fichiers gérés par Rubedo : images, vidéo, audio, animation ou documents bureautiques.L'application \\\"Types de médias\\\" permet  :</p><ul><li> de créer de nouveaux types de médias (image, document, vidéo, audio, animation)</li><li> d'y ajouter des métadonnées (auteur, copyright, sous-titrage, ...etc.) à l'aide d'un éditeur avancé</li><li> de paramétrer champs par champs les contrôles de saisie, les valeurs par défaut, le caractère obligatoire</li><li> de modifier des types de médias existants</li><li> de gérer le caractère localisable (plusieurs langue), et recherchable d'une métadonnée</li><li> de gérer les aides à la saisie</li><li> de déclarer les vocabulaires applicables à la classification d'un média</li><li> de déclarer le ou les espaces de travail autorisés pour la création et la diffusion des médias</li></ul>\",\r",
                    "    queries:\"<p>Les requêtes permettent de créer des listes automatiques ou manuelles de contenus, documents et médias.L'application \\\"Requêtes\\\" permet  :</p><ul><li> de créer et sauvegarder des requêtes simples ou avancées, sur les contenus ou les médias</li><li> de modifier des requêtes existantes</li><ul>\",\r",
                    "    taxonomy:\"<p>La taxonomie permet de créer une classification multi-dimensionnelle de l'ensemble des contenus (textes, médias et documents).L'application \\\"Taxonomie\\\" permet  :</p><ul><li> de créer de nouveaux vocabulaires arborescents et d'y ajouter des termes</li> <li> d'appliquer des droits pour les espaces de travail et une aide dédiée pour chaque taxonomie</li> <li> de définir ses caractéristiques : extensible, choix multiple, obligatoire</li></ul>\",\r",
                    "    groups:\"<p>Les groupes permettent de définir les utilisateurs, les espaces de travail et les rôles de gestion associés.L'application \\\"Groupes\\\" permet  :</p><ul><li> de créer des groupes d'utilisateurs</li><li>  d'ajouter des utilisateurs à ces groupes</li><li>  de paramétrer les droits associés à chaque groupe : Espaces de travail (en lecture, en contribution, par défaut) et rôles</li><li>  de gérer les groupes (suppression, modification, déplacement, hiérarchisation)</li></ul>\",\r",
                    "    workspaces:\"<p>Les espaces de travail permettent de réserver l'accès en lecture, écriture ou diffusion sur des types de contenus, de médias ou des rubriques de sites à des groupes d'utilisateurs spécifiques.L'application \\\"Espaces de travail\\\" permet  :</p><ul><li> de créer des espaces</li><li> de supprimer les espaces de travail</li></ul>\",\r",
                    "    users:\"<p>Les utilisateurs front-office et back-office sont regroupés au sein d'un annuaire interne. Les droits accordés à un utilisateur sont liés aux groupes auxquels il appartient.L'application \\\"Utilisateurs\\\" permet  :</p><ul><li> d'ajouter des utilisateurs</li> <li> de compléter les profils (email, service, fonction, photo, ...)</li> <li>  de gérer les accès et les droits (identifiant, mot de passe, groupes, validité du compte)</li> </ul> \",\r",
                    "    contents:\"<p>Rubedo gère un référentiel transverse de contenus qui peuvent être publiés sur différents sites et espaces de travail.L'application \\\"Contenus\\\" permet  :</p><ul><li> de créer un contenu à partir d'un type de contenu paramétré</li> <li>  de gérer son état dans le workflow de publication attribué au type de contenu</li> <li>  de gérer la publication différée</li> <li>  de classer le contenu à l'aide des vocabulaires autorisés pour ce type de contenu</li> <li>  d'associer le contenu à un espace de contribution et des espaces de diffusion</li> <li>  de modifier les contenus</li> <li>  de dupliquer les contenus</li> <li>  d'ajouter un contenu en favori</li> </ul> \",\r",
                    "    dam:\"<p>La médiathèque permet de gérer les médias ( images, vidéo, audio, animation ou documents) en fonction des types de médias paramétrés.L'application \\\"Médiathèque\\\" permet  :</p><ul><li> de créer un média à partir d'un type de média paramétré</li><li>  d'uploader un média et de renseigner les métadonnées associées</li><li>  de classer le média à l'aide des vocabulaires autorisés pour ce type de média</li><li>  d'associer le média à un espace de contribution et des espaces de diffusion</li><li>  de modifier les média</li><li>  d'ajouter un média en favori</li></ul>\",\r",
                    "    forms:\"<p>Rubedo permet de réaliser des enquêtes en ligne à l'aide de l'application questionnaire. Les fonctions de glisser/déposer facilitent la création des questions et des étapes. L'application Questionnaire permet :</p><ul><li> d'ajouter, supprimer et dupliquer un questionnaire</li><li> d'ajouter un questionnaire en favoris</li><li> de gérer les propriétés d'un questionnaire,  les conditions d'unicité et sa mise en ligne</li><li> de créer un questionnaire à l'aide des palettes d'outils de mise en forme (Wysiwyg, image, section, page, titre) et de paramétrage (type de questions)</li><li> de gérer les paramétres des questions et des réponses (label, bulle d'aide, obligatoire, conditionnel et options)</li><li> d'exploiter les résultats de chaque questionnaire en exportant au format csv</li></ul>\"\r",
                    "\r",
                    "});\r",
                    "Ext.define(\"Rubedo.RubedoInterfaceLoc\",{\r",
                    "    singleton:true\r",
                    "});\r",
                    "Ext.define(\"Rubedo.RubedoAutomatedElementsLoc\",{\r",
                    "    singleton:true,\r",
                    "    notifTitle:\"Notififcation\",\r",
                    "    notifCreate:\"<p>Création réussie.</p>\",\r",
                    "    notifUpdate:\"<p>Mise à jour réussie.</p>\",\r",
                    "    notifDestroy:\"<p>Suppression réussie.</p>\",\r",
                    "    errorTitle:\"Erreur\",\r",
                    "    serverConnectionError:\"Connexion au serveur interrompue\",\r",
                    "    internalServerError:\"Erreur interne du serveur\",\r",
                    "    unkownError:\"Erreur inconnue\",\r",
                    "    activateText:\"Activer\",\r",
                    "    pageHoldsDefaultError:\"Cette page ne peut etre suprimée car elle u une de ses décendantes est utilisée comme page de détail du site\",\r",
                    "    pageHoldsDefaultServerError:\"Erreur dans la détermination du statut supprimable de la page\",\r",
                    "    deactivateText:\"Désactiver\",\r",
                    "    windowBeforeUnloadMessage:\"Vous allez quitter le Back Office et perdre toute modification non sauvegardée.\",\r",
                    "    maskIsUsedText:\"Le masque ne peut etre supprimé car il est utilisé par des pages.\",\r",
                    "    selectAnElementText:\"Sélectionnez un élément\",\r",
                    "    columnText:\"Colonne\",\r",
                    "    lignText:\"Ligne\",\r",
                    "    titleText:\"Titre\",\r",
                    "    displayTitleText:\"Afficher le titre\",\r",
                    "    visibilityText:\"Visibilité\",\r",
                    "    telephoneText:\"Téléphone\",\r",
                    "    tabletText:\"Tablette\",\r",
                    "    computerText:\"Ordinateur\",\r",
                    "    HTMLClassText:\"Classe HTML\",\r",
                    "    HTMLIdText:\"Id HTML\",\r",
                    "    styleText:\"Style\",\r",
                    "    tagText:\"Tag\",\r",
                    "    displayAsTabsText:\"Afficher en onglets\",\r",
                    "    displayRowTagText:\"Afficher la baliser row\",\r",
                    "    displayRowFluidTagText:\"Afficher la balise row-fluid\",\r",
                    "    includeInAContainerText:\"Inclure dans un container\",\r",
                    "    includeInAContainerFluidText:\"Inclure dans un container-fluid\",\r",
                    "    containerIdText:\"Id du container\",\r",
                    "    containerClassText:\"Classe du container\",\r",
                    "    mainColumnText:\"Colonne principale\",\r",
                    "    mainColumnRTip:\"Permet de définir l'emplacement d'affichage des contenus proposés sous forme de liste dans les pages utilisants ce masque.\",\r",
                    "    showSpanAndOffsetText:\"Afficher le span et l'offset\",\r",
                    "    offsetText:\"Offset\",\r",
                    "    spanText:\"Span\",\r",
                    "    columnIdRecoveryError:\"Erreur dans la récupération d\\'un identifiant de colonne\",\r",
                    "    displayInADivText:\"Afficher dans une div\",\r",
                    "    divIdText:\"Id de la div\",\r",
                    "    divClassText:\"Classe de la div\",\r",
                    "    blockText:\"Bloc\",\r",
                    "    URLPrefixText:\"Préfixe URL\",\r",
                    "    invalidMetaError:\"Certains champs de métadonnées sont invalides.\",\r",
                    "    invalidTaxoError:\"Certains champs de taxonomie sont invalides.\",\r",
                    "    invalidFieldsError:\"Certains champs sont invalides.\",\r",
                    "    insufficientContentRightsError:\"Vos droits sont insuffisants pour afficher ou modifier ce contenu\",\r",
                    "    newContentText:\"Nouveau Contenu\",\r",
                    "    maxOneLocFieldError:\"Un type de contenus ne peut pas avoir plusieurs champs de type \\\"Localisation\\\".\",\r",
                    "    contentTypeIsUsedError:\"Ce type de contenu est utilsé par des contenus et ne peut donc pas etre supprimé.\",\r",
                    "    warningTitle:\"Attention\",\r",
                    "    contentTypeIncompatModifError:\"Le type de contenu est utilisé par des contenus et ces modifications ne sont pas compatibles.\",\r",
                    "    contentTypeModifWarning:\"Ce type de contenu est utilisé par des contenus. Le modifier pourrait avoir de répercussions. </br> Souhaitez-vous continuer ?\",\r",
                    "    fieldReplicaText:\"Replique du champ\",\r",
                    "    successTitle:\"Succés\",\r",
                    "    contentsDeleteError:\"Erreur dans la suppression des contenus\",\r",
                    "    contentTypeHasBeenEmptiedText:\"Le type de contenu a été vidé\",\r",
                    "    fieldNameAlreadyUsedError:\"Nom dèjà utilisé par un autre champ\",\r",
                    "    passwordsDoNotMatchError:\"Les mots de passe ne correspondent pas\",\r",
                    "    passwordChangedText:\"Mot de passe changé\",\r",
                    "    rightsRecoveryError:\"Erreur dans la récupération des droits\",\r",
                    "    tokenRecoveryError:\"Erreur dans la récupération du jeton de sécurité\",\r",
                    "    siteModifWarning:\"La modification de ce site impliquera la fermeture de la fenetre de gestion des pages. Cela entrainera la perte de toute modification non sauvegardée dans cette fenetre. </br> Souhaitez-vous poursuivre ?\",\r",
                    "    pageURLRecoveryError:\"Erreur dans la récupèration de l'url de la page\",\r",
                    "    pagePreviewText:\"Ceci est un aperçu de cette page telle que disponible en ligne en\",\r",
                    "    associatedMaskText:\"Masque associé\",\r",
                    "    pagePropertiesInvalidError:\"Les propriétés de la page sont invalides.\",\r",
                    "    stageText:\"Etape\",\r",
                    "    onText:\"sur\",\r",
                    "    ascText:\"Croissant\",\r",
                    "    descText:\"Decroissant\",\r",
                    "    andText:\"Et\",\r",
                    "    thenText:\"Puis\",\r",
                    "    mediaTypeIsUsedError:\"Ce type de média est utilisé par des médias et ne peut donc etre supprimé.\",\r",
                    "    invalidRightsPropertiesError:\"Configuration invalide des droits\",\r",
                    "    newDamText:\"Nouveau média\",\r",
                    "    DAMEditText:\"Edition du média\",\r",
                    "    DAMDisplayText:\"Affichage du média\",\r",
                    "    searchText:\"Recherche\",\r",
                    "    identifierRecoveryError:\"Erreur dans la récupération d'un identifiant\",\r",
                    "    invalidFormPropertiesError:\"Propriétés du formulaire invalides\",\r",
                    "    fileAnalysisError:\"Erreur dans l'analyse du fichier\",\r",
                    "    identifiedFieldsText:\"champs identifiés et\",\r",
                    "    importableContentsText:\"contenus importables\",\r",
                    "    importedContentsText:\"contenus importés\",\r",
                    "    importError:\"Erreur lors de l'import\"\r",
                    "\r",
                    "});\r",
                    "// attach event and load localisation store\r",
                    "Ext.getStore(\"LocalisationStore\").on(\"load\",function(){\r",
                    "    me.updateLocalisationSingletons();\r",
                    "});"
                ]
            },
            "designerId": "02134674-1f73-49b0-ab08-b1257bec9f4e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onButtonAfterRender1",
                "implHandler": [
                    "try {\r",
                    "    component.on(\"click\", function(){\r",
                    "        Ext.widget('callout', {\r",
                    "            cls: 'gray',\r",
                    "            width: 400,\r",
                    "            html:Rubedo.RubedoAppHelp[component.RApplication],\r",
                    "            calloutArrowLocation: 'top-right',\r",
                    "            target: component,\r",
                    "            relativePosition: 't-b',\r",
                    "            relativeOffsets: [-184,0],\r",
                    "            fadeInDuration: 200,\r",
                    "            fadeOutDuration: 200,\r",
                    "            dismissDelay: 60000\r",
                    "        }).show();\r",
                    "\r",
                    "    });\r",
                    "} catch (err){\r",
                    "    console.log(\"failed to show application help\");\r",
                    "}"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#RHelpBtn"
            },
            "designerId": "c94d5e08-9c29-411e-ab6a-d4b0134271e9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onComponentBeforeRender",
                "implHandler": [
                    "if (component.localiserId){\r",
                    "    var configs = Rubedo.RubedoInterfaceLoc[component.localiserId];\r",
                    "    if (!Ext.isEmpty(configs)) {\r",
                    "        Ext.apply(component, configs);\r",
                    "    }\r",
                    "    if ((component.isXType(\"button\"))&&(component.scale==\"large\")){\r",
                    "        component.minWidth=48;\r",
                    "    }\r",
                    "}\r",
                    "if ((component.isXType(\"field\"))||(component.isXType(\"checkboxgroup\"))||(component.isXType(\"radiogroup\"))){\r",
                    "    component.labelSeparator=\" \";\r",
                    "    if (component.fieldLabel==\"Localisable\"){\r",
                    "        //temporary localiser hide\r",
                    "        component.hide();\r",
                    "    }\r",
                    "}"
                ],
                "name": "beforerender",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Base",
                "designer|controlQuery": "component"
            },
            "designerId": "20545d3d-55c2-4f5f-b471-7cfc1046dd2b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onBasefieldAdded",
                "implHandler": [
                    "if (component.localiserId){\r",
                    "    var configs = Rubedo.RubedoInterfaceLoc[component.localiserId];\r",
                    "    if (!Ext.isEmpty(configs)) {\r",
                    "        Ext.apply(component, configs);\r",
                    "    }\r",
                    "}\r",
                    "if (!Ext.isEmpty(component.RTip)){\r",
                    "    component.anchor=\"90%\";\r",
                    "    container.insert(pos,Ext.widget(\"RHelpBtn\", {tooltip:component.RTip}));\r",
                    "}"
                ],
                "name": "added",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Base",
                "designer|controlQuery": "field, checkboxgroup, radiogroup"
            },
            "designerId": "4989e511-4ecd-48f4-bcbb-2cfcdfbf915d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "produceInterfaceLocalisationJSON",
                "implHandler": [
                    "var result= { };\r",
                    "var count=0;\r",
                    "Ext.Object.each(Rubedo.view, function(a){\r",
                    "    var test=Ext.create(\"Rubedo.view.\"+a,{id:undefined});\r",
                    "    if (!Ext.isEmpty(test.localiserId)){\r",
                    "        count=count+1;\r",
                    "        if (test.isXType(\"field\")){\r",
                    "            result[test.localiserId]={\r",
                    "                fieldLabel:test.fieldLabel,\r",
                    "                RTip:test.RTip\r",
                    "            };\r",
                    "        } else if (test.isXType(\"button\")){\r",
                    "            result[test.localiserId]={\r",
                    "                text:test.text,\r",
                    "                tooltip:test.tooltip\r",
                    "            };\r",
                    "        } else if (test.isXType(\"fieldset\")){\r",
                    "            result[test.localiserId]={\r",
                    "                title:test.title\r",
                    "            };\r",
                    "        } else if (test.isXType(\"panel\")){\r",
                    "            result[test.localiserId]={\r",
                    "                title:test.title\r",
                    "            };\r",
                    "        } else if (test.isXType(\"window\")){\r",
                    "            result[test.localiserId]={\r",
                    "                title:test.title\r",
                    "            };\r",
                    "        }else if (test.isXType(\"gridcolumn\")){\r",
                    "            result[test.localiserId]={\r",
                    "                text:test.text\r",
                    "            };\r",
                    "        } else {\r",
                    "            console.log(\"unhandled localised component for id : \"+test.localiserId); \r",
                    "            count=count-1;\r",
                    "        }\r",
                    "    }\r",
                    "    try{\r",
                    "        Ext.Array.forEach(test.query(\"component\"), function(component){\r",
                    "            if (!Ext.isEmpty(component.localiserId)){\r",
                    "                count=count+1;\r",
                    "                if (component.isXType(\"field\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        fieldLabel:component.fieldLabel,\r",
                    "                        RTip:component.RTip\r",
                    "                    };\r",
                    "                } else if (component.isXType(\"button\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        text:component.text\r",
                    "                    };\r",
                    "                } else if (component.isXType(\"fieldset\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        title:component.title\r",
                    "                    };\r",
                    "                } else if (component.isXType(\"panel\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        title:component.title\r",
                    "                    };\r",
                    "                } else if (component.isXType(\"window\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        title:component.title\r",
                    "                    };\r",
                    "                }else if (component.isXType(\"gridcolumn\")){\r",
                    "                    result[component.localiserId]={\r",
                    "                        text:component.text\r",
                    "                    };\r",
                    "                } else {\r",
                    "                    console.log(\"unhandled localised component for id : \"+component.localiserId); \r",
                    "                    count=count-1;\r",
                    "                }\r",
                    "            }\r",
                    "        });\r",
                    "\r",
                    "    }catch(err){\r",
                    "        //console.log(err);\r",
                    "    }\r",
                    "    test.destroy();\r",
                    "});\r",
                    "console.log(count+\" localised interface components\");\r",
                    "return(result);"
                ]
            },
            "designerId": "80910a7c-a857-449a-9aa4-f6257d05c76a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateLocalisationSingletons",
                "implHandler": [
                    "//todo : move this to server side\r",
                    "\r",
                    "var userLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "Ext.Array.forEach(Ext.getStore(\"LocalisationStore\").getRange(),function(localiser){\r",
                    "    var toUpdate =Rubedo[localiser.get(\"name\")];\r",
                    "    if (!Ext.isEmpty(toUpdate)){\r",
                    "        Ext.apply(toUpdate, localiser.get(\"items\"));\r",
                    "    }\r",
                    "});\r",
                    "if ((!Ext.isEmpty(userLanguage))&&(userLanguage!=\"fre\")){\r",
                    "    Ext.Array.forEach(Ext.getStore(\"LocalisationStore\").getRange(),function(localiser){\r",
                    "        var toUpdate =Rubedo[localiser.get(\"name\")];\r",
                    "        if (!Ext.isEmpty(toUpdate)){\r",
                    "            if(!Ext.isEmpty(localiser.get(\"i18n\")[userLanguage])){\r",
                    "                Ext.apply(toUpdate, localiser.get(\"i18n\")[userLanguage]);\r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ]
            },
            "designerId": "ccc2e951-4238-41b3-b475-42aaf17282a1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createLocalisationDefaults",
                "implHandler": [
                    "var me = this;\r",
                    "var defaultHelp={\r",
                    "    pages:\"<p>Les différentes pages d'un site peuvent aisément être enrichies de blocs fonctionnels.L'application \\\"Pages\\\" permet :</p><ul><li> d'accéder à la vue arborescente des sites gérés sur la plateforme,</li><li> d'ajouter des pages sur la base des masques de pages existants,</li><li> de modifier ou de supprimer des pages,</li><li> d'ajouter des fonctionnalités aux pages par le biais de la bibliothèque de blocs fonctionnels,</li><li> de prévisualiser l'affichage d'une page en front-office,</li><li> de gérer les paramètres de référencement naturel,</li><li> de gérer les droits en lecture et écriture au travers des espaces de travail.</li></ul>\",\r",
                    "    sites:\"<p>Rubedo offre nativement la fonctionnalité d'usine à sites.L'application \\\"Sites\\\" permet  :</p><ul><li> de créer de nouveaux sites au travers d'un assistant de création </li><li>  sur la base de modèles existants ou en partant d'un modèle vierge </li><li>  de modifier le paramétrage des sites existants</li></ul>\",\r",
                    "    masks:\"<p>Les masques de pages représentent les différents gabarits de rendu disponibles en front-office.L'application \\\"Masques de pages\\\" permet  :</p><ul><li> de créer de nouveaux gabarits de mise en page en lignes et colonnes</li> <li>  de dupliquer des masques existants, éventuellement d'un site vers un autre</li> <li>  de gérer les blocs fonctionnels persistants, tels que les menus</li> <li>  de constituer une bibliothèques d'éléments (lignes, colonnes ou blocs) réutilisables entre les masques</li> <li>  de gérer les paramètres de \\\"Responsive Design\\\" : visibilité des lignes, colonnes et blocs sur téléphone, tablette, ou ordinateur</li> </ul>\",\r",
                    "    contentTypes:\"<p>Les types de contenus correspondent aux données structurées gérées par Rubedo : articles, news, ...etc.L'application \\\"Types de contenus\\\" permet  :</p><ul><li> de créer de nouveaux types de contenus à l'aide d'un éditeur avancé</li><li>  de paramétrer champs par champs les contrôles de saisie, les valeurs par défaut, le caractère obligatoire</li><li>  de modifier des types de contenus existants</li><li>  de gérer le caractère localisable (plusieurs langue), et recherchable d'un champ</li><li>  de gérer les aides à la saisie</li><li>  de déclarer les vocabulaires applicables à la classification du contenu</li><li>  de déclarer le workflow applicable au contenu</li><li>  de déclarer le ou les espaces de travail autorisés pour la création et la diffusion des contenus</li></ul>\",\r",
                    "    damTypes:\"<p>Les types de média correspondent aux fichiers gérés par Rubedo : images, vidéo, audio, animation ou documents bureautiques.L'application \\\"Types de médias\\\" permet  :</p><ul><li> de créer de nouveaux types de médias (image, document, vidéo, audio, animation)</li><li> d'y ajouter des métadonnées (auteur, copyright, sous-titrage, ...etc.) à l'aide d'un éditeur avancé</li><li> de paramétrer champs par champs les contrôles de saisie, les valeurs par défaut, le caractère obligatoire</li><li> de modifier des types de médias existants</li><li> de gérer le caractère localisable (plusieurs langue), et recherchable d'une métadonnée</li><li> de gérer les aides à la saisie</li><li> de déclarer les vocabulaires applicables à la classification d'un média</li><li> de déclarer le ou les espaces de travail autorisés pour la création et la diffusion des médias</li></ul>\",\r",
                    "    queries:\"<p>Les requêtes permettent de créer des listes automatiques ou manuelles de contenus, documents et médias.L'application \\\"Requêtes\\\" permet  :</p><ul><li> de créer et sauvegarder des requêtes simples ou avancées, sur les contenus ou les médias</li><li> de modifier des requêtes existantes</li><ul>\",\r",
                    "    taxonomy:\"<p>La taxonomie permet de créer une classification multi-dimensionnelle de l'ensemble des contenus (textes, médias et documents).L'application \\\"Taxonomie\\\" permet  :</p><ul><li> de créer de nouveaux vocabulaires arborescents et d'y ajouter des termes</li> <li> d'appliquer des droits pour les espaces de travail et une aide dédiée pour chaque taxonomie</li> <li> de définir ses caractéristiques : extensible, choix multiple, obligatoire</li></ul>\",\r",
                    "    groups:\"<p>Les groupes permettent de définir les utilisateurs, les espaces de travail et les rôles de gestion associés.L'application \\\"Groupes\\\" permet  :</p><ul><li> de créer des groupes d'utilisateurs</li><li>  d'ajouter des utilisateurs à ces groupes</li><li>  de paramétrer les droits associés à chaque groupe : Espaces de travail (en lecture, en contribution, par défaut) et rôles</li><li>  de gérer les groupes (suppression, modification, déplacement, hiérarchisation)</li></ul>\",\r",
                    "    workspaces:\"<p>Les espaces de travail permettent de réserver l'accès en lecture, écriture ou diffusion sur des types de contenus, de médias ou des rubriques de sites à des groupes d'utilisateurs spécifiques.L'application \\\"Espaces de travail\\\" permet  :</p><ul><li> de créer des espaces</li><li> de supprimer les espaces de travail</li></ul>\",\r",
                    "    users:\"<p>Les utilisateurs front-office et back-office sont regroupés au sein d'un annuaire interne. Les droits accordés à un utilisateur sont liés aux groupes auxquels il appartient.L'application \\\"Utilisateurs\\\" permet  :</p><ul><li> d'ajouter des utilisateurs</li> <li> de compléter les profils (email, service, fonction, photo, ...)</li> <li>  de gérer les accès et les droits (identifiant, mot de passe, groupes, validité du compte)</li> </ul> \",\r",
                    "    contents:\"<p>Rubedo gère un référentiel transverse de contenus qui peuvent être publiés sur différents sites et espaces de travail.L'application \\\"Contenus\\\" permet  :</p><ul><li> de créer un contenu à partir d'un type de contenu paramétré</li> <li>  de gérer son état dans le workflow de publication attribué au type de contenu</li> <li>  de gérer la publication différée</li> <li>  de classer le contenu à l'aide des vocabulaires autorisés pour ce type de contenu</li> <li>  d'associer le contenu à un espace de contribution et des espaces de diffusion</li> <li>  de modifier les contenus</li> <li>  de dupliquer les contenus</li> <li>  d'ajouter un contenu en favori</li> </ul> \",\r",
                    "    dam:\"<p>La médiathèque permet de gérer les médias ( images, vidéo, audio, animation ou documents) en fonction des types de médias paramétrés.L'application \\\"Médiathèque\\\" permet  :</p><ul><li> de créer un média à partir d'un type de média paramétré</li><li>  d'uploader un média et de renseigner les métadonnées associées</li><li>  de classer le média à l'aide des vocabulaires autorisés pour ce type de média</li><li>  d'associer le média à un espace de contribution et des espaces de diffusion</li><li>  de modifier les média</li><li>  d'ajouter un média en favori</li></ul>\",\r",
                    "    forms:\"<p>Rubedo permet de réaliser des enquêtes en ligne à l'aide de l'application questionnaire. Les fonctions de glisser/déposer facilitent la création des questions et des étapes. L'application Questionnaire permet :</p><ul><li> d'ajouter, supprimer et dupliquer un questionnaire</li><li> d'ajouter un questionnaire en favoris</li><li> de gérer les propriétés d'un questionnaire,  les conditions d'unicité et sa mise en ligne</li><li> de créer un questionnaire à l'aide des palettes d'outils de mise en forme (Wysiwyg, image, section, page, titre) et de paramétrage (type de questions)</li><li> de gérer les paramétres des questions et des réponses (label, bulle d'aide, obligatoire, conditionnel et options)</li><li> d'exploiter les résultats de chaque questionnaire en exportant au format csv</li></ul>\"\r",
                    "};\r",
                    "var defaultInterfaceLoc=me.produceInterfaceLocalisationJSON();\r",
                    "var store=Ext.getStore(\"LocalisationStore\");\r",
                    "var helpRec=store.findRecord(\"name\",\"RubedoAppHelp\");\r",
                    "store.suspendAutoSync();\r",
                    "if (Ext.isEmpty(helpRec)){\r",
                    "    store.add({name:\"RubedoAppHelp\",items:defaultHelp,i18n:{}})\r",
                    "} else {\r",
                    "    helpRec.set(\"items\",defaultHelp);\r",
                    "}\r",
                    "\r",
                    "var intLocRec=store.findRecord(\"name\",\"RubedoInterfaceLoc\");\r",
                    "if (Ext.isEmpty(intLocRec)){\r",
                    "    store.add({name:\"RubedoInterfaceLoc\",items:defaultInterfaceLoc,i18n:{}})\r",
                    "} else {\r",
                    "    intLocRec.set(\"items\",defaultInterfaceLoc);\r",
                    "}\r",
                    "store.resumeAutoSync();\r",
                    "store.sync();\r",
                    "console.log(\"Done saving localisation. Please reload the page.\");"
                ]
            },
            "designerId": "16e3c536-8ddf-47b6-81f8-80802e7dafb6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onFieldsetAfterRender",
                "implHandler": [
                    "var task = new Ext.util.DelayedTask(function(){\r",
                    "    component.setTitle(component.title);\r",
                    "});\r",
                    "task.delay(100);"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.form.FieldSet",
                "designer|controlQuery": "fieldset"
            },
            "designerId": "413bd541-5efe-49f4-b8f1-ad5d536d2703"
        }
    ]
}