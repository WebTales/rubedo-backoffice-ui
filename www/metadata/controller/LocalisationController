{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "LocalisationController",
        "designer|userClassName": "LocalisationController",
        "models": [
            "LocalisationModel"
        ],
        "stores": [
            "LocalisationStore"
        ]
    },
    "designerId": "765f93a9-83e7-4405-aaaa-740265c87f51",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "var me=this;",
                    "Ext.override(Ext.form.field.Date, {",
                    "    submitFormat:'U',",
                    "    altFormats:'U|m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j',",
                    "    initComponent: function() {",
                    "\t\t  this.format = this.format + ' ' + 'H:i:s';",
                    "\t\t  this.callParent();",
                    "\t  },",
                    "\t  // overwrite",
                    "\t  createPicker: function() {",
                    "\t\t  var me = this,",
                    "\t\t\t  format = Ext.String.format;",
                    "",
                    "\t\t  return Ext.create('Ext.ux.DateTimePicker', {",
                    "\t\t\t    ownerCt: me.ownerCt,",
                    "\t\t\t    renderTo: document.body,",
                    "\t\t\t    floating: true,",
                    "\t\t\t    hidden: true,",
                    "\t\t\t    focusOnShow: true,",
                    "\t\t\t    minDate: me.minValue,",
                    "\t\t\t    maxDate: me.maxValue,",
                    "\t\t\t    disabledDatesRE: me.disabledDatesRE,",
                    "\t\t\t    disabledDatesText: me.disabledDatesText,",
                    "\t\t\t    disabledDays: me.disabledDays,",
                    "\t\t\t    disabledDaysText: me.disabledDaysText,",
                    "\t\t\t    format: me.format,",
                    "\t\t\t    showToday: me.showToday,",
                    "\t\t\t    startDay: me.startDay,",
                    "\t\t\t    minText: format(me.minText, me.formatDate(me.minValue)),",
                    "\t\t\t    maxText: format(me.maxText, me.formatDate(me.maxValue)),",
                    "\t\t\t    listeners: {",
                    "\t\t\t\t    scope: me,",
                    "\t\t\t\t    select: me.onSelect",
                    "\t\t\t    },",
                    "\t\t\t    keyNavConfig: {",
                    "\t\t\t\t    esc: function() {",
                    "\t\t\t\t\t    me.collapse();",
                    "\t\t\t\t    }",
                    "\t\t\t    }",
                    "\t\t    });",
                    "\t  }",
                    "",
                    "});",
                    "Ext.override(Ext.form.field.Number, {",
                    "    getSubmitValue: function(){return(this.getValue());}",
                    "});",
                    "Ext.require(\"Ext.ux.callout.Callout\");",
                    "",
                    "Ext.Date.defaultFormat=\"d/m/Y\";",
                    "//define localisation singletons",
                    "Ext.define(\"Rubedo.RubedoAppHelp\",{",
                    "    singleton:true,",
                    "    \"pages\": \"<p>The different pages of a site can easily be enriched with functional blocks.The 'Pages' application allows:</p> <ul><li>to access the tree view of sites maintained on the platform,</li> <li>to add pages based on existing pages masks</li> <li>to modify or delete pages,</li> <li> to add functionalities to pages through the library of functional blocks</li> <li>to preview the display of a page in front-office,</li> <li>to manage SEO settings,</li> <li>to manage reading and writing rights through workspaces.</li></ul>\",",
                    "    \"sites\": \"<p>Rubedo natively offers the site building feature.The 'Sites' application allows:</p> <ul><li>to create new sites through a wizard</li> <li>on the basis of existing models or from a blank template</li> <li>to modify the settings of existing sites</li></ul>\",",
                    "    \"masks\": \"<p>Pages masks represent the different rendering templates available in front office.The \\\"Page masks\\\" application allows:</p> <ul><li>to create new layout templates in rows and columns</li> <li>to duplicate existing masks, possibly from one site to another</li> <li>to manage the persistent functional blocks, such as menus</li> <li>to form a library of elements (rows, columns, or blocks) that is reusable between masks</li> <li>to manage Responsive Design settings : visibility of rows, columns and blocks on phone, tablet, or desktop</li></ul>\",",
                    "    \"contentTypes\": \"<p>Content types correspond to the structured data managed by Rubedo: articles, news,.. .etc. The 'Content Types' application allows :</p> <ul><li>to create new content types using an advanced editor</li> <li>to set up input controls, default values, mandatory state for each field</li> <li>to modify existing content types</li> <li>to manage localizable (several language), and searchable state of each field</li> <li>to manage input aid</li> <li>to declare vocabularies applicable to the classification of the contents</li> <li>to choose the workflow to apply to contents</li> <li>to declare read and write workspaces for contents</li></ul>\",",
                    "    \"damTypes\": \"<p>Digital asset types correspond to Rubedo-managed files: images, video, audio, animation or documents.'Digital Asset Types' application allows:</p> <ul><li>to create new digital asset types (image, document, video, audio, animation)</li> <li>to add metadata (author, copyright, caption, etc) using an advanced editor</li> <li>to set input controls, default values, mandatory state for each field</li> <li>to edit existing digital asset types</li> <li>to manage localizable(several language) and searchable state for each field</li> <li>to manage input aid</li> <li>to choose vocabularies eligible as classification</li> <li>to declare read and write workspaces</li></ul>\",",
                    "    \"queries\": \"<p>Queries are used to create automatic or manual lists of contents and digital assets.The \\\"Queries\\\" application allows:</p> <ul><li>to create and save simple or advanced, content or digital asset queries</li> <li>to edit or remove existing queries</li> <ul>\",",
                    "    \"taxonomy\": \"<p>Taxonomy alows for the creation of a multi-dimensional classification of contents and digital assets.The \\\"Taxonomy\\\" application allows:</p> <ul><li>to create new vocabularies and add terms using a tree</li> <li>to apply rights for workspaces and inpu aid for each vocabulary</li> <li>to define vocabulary settings: expandable, multi-choice, mandatory</li></ul>\",",
                    "    \"groups\": \"<p>Groups are used to associate users with rights in the form of workspaces and roles.The 'Groups' application allows:</p> <ul><li>to create groups of users</li> <li>to add users to these groups</li> <li>to set up the rights associated with each group: workspaces (read, write, default) and roles</li> <li>to manage groups (deletion, modification, inheritance)</li></ul>\",",
                    "    \"workspaces\": \"<p>Workspaces are used to restrict access (read, write or broadcast) on content, digital asset types or sites topics to specific user groups.The 'Workspaces' application allows:</p> <ul><li>to create workspaces</li> <li>to delete or edit workspaces</li></ul>\",",
                    "    \"users\": \"<p>Front-office and back-office users are grouped in an internal directory. The rights granted to a user are linked to groups to which he belongs.The 'Users' application allows:</p> <ul><li>to add users</li> <li>to complete profiles (email, service, job title, photo,...)</li> <li>to manage  access and rights (identifier, password, groups, account validityt)</li></ul> \",",
                    "    \"contents\": \"<p>Rubedo manages a transverse repository of content that can be published on different sites and workspaces.The \\\"Contents\\\" application allows:</p> <ul><li>to create contents using an existing content type</li> <li>to manage its status in the workflow of publication attributed to the content type</li> <li>to manage delayed publication</li> <li>to classify content using vocabularies allowed for this contnet type</li> <li>to associate contents to contribution and diffusion workspaces</li> <li>to modify contents</li> <li>to duplicate contents</li> <li>to add contents to favorites</li></ul> \",",
                    "    \"dam\": \"<p>The DAM allows you to manage digital assets (images, video, audio, animation or documents) based on predefined digital asset types.The \\\"DAM\\\" application allows:</p> <ul><li>to create digital assets using existing digital asset types</li> <li>to upload digital assets and apply metadata settings</li> <li>to classify digital assets using vocabularies allowed for this digital asset type</li> <li>to set up contributionand diffusion workspaces </li> <li>to edit digital assets</li> <li>to add digital assets to favorites</li></ul>\",",
                    "    \"forms\": \"<p>This application is used to conduct online surveys. Stages and questions can be easly created and manged through drag and drop. The \\\"Surveys\\\" application allows:</p> <ul><li>to add, edit, delete, and duplicate a survey</li> <li>to add a survey to favorites</li> <li>to manage the settings and unique answer conditions of a survey and put it online</li> <li>to create a survey using the tool palette of formatting (Wysiwyg, image, section, page, title) and settings (type of questions and their specific settings)</li> <li>to manage questions and answers (label settings(, input aid, mandatory state, conditionals, and options)</li> <li>to exploit the results of each survey by exporting to CSV format</li></ul>\"",
                    "",
                    "});",
                    "Ext.define(\"Rubedo.RubedoInterfaceLoc\",{",
                    "    singleton:true",
                    "});",
                    "Ext.define(\"Rubedo.RubedoAutomatedElementsLoc\",{",
                    "    singleton:true,",
                    "    \"notifTitle\": \"Notification\",",
                    "    \"cacheClearedText\":\"Cache cleared\",",
                    "    \"loadOnLaunchText\":\"Load on launch\",",
                    "    \"notifCreate\": \"<p>Successful creation.</p>\",",
                    "    \"notifUpdate\": \"<p>Successful update.</p>\",",
                    "    \"notifDestroy\": \"<p>Successful deletion.</p>\",",
                    "    \"errorTitle\": \"Error\",",
                    "    \"serverConnectionError\": \"Server connection interrupted\",",
                    "    \"internalServerError\": \"Internal server error\",",
                    "    \"unkownError\": \"Unknown error\",",
                    "    \"activateText\": \"Activate\",",
                    "    \"pageHoldsDefaultError\": \"This page cannot be deleted because it or one of its decendantes is the homepage or the detail page\",",
                    "    \"pageHoldsDefaultServerError\": \"Error in the determination of the deletable status of the page\",",
                    "    \"deactivateText\": \"Disable\",",
                    "    \"windowBeforeUnloadMessage\": \"You will leave the Back Office and lose any unsaved changes.\",",
                    "    \"maskIsUsedText\": \"The mask cannot be deleted because it is used by pages.\",",
                    "    \"selectAnElementText\": \"Select an item\",",
                    "    \"columnText\": \"Column\",",
                    "    \"lignText\": \"Line\",",
                    "    \"titleText\": \"Title\",",
                    "    \"displayTitleText\": \"Display the title\",",
                    "    \"visibilityText\": \"Visibility\",",
                    "    \"telephoneText\": \"Phone\",",
                    "    \"tabletText\": \"Tablet\",",
                    "    \"computerText\": \"Desktop\",",
                    "    \"HTMLClassText\": \"HTML class\",",
                    "    \"HTMLIdText\": \"HTML ID\",",
                    "    \"styleText\": \"Style\",",
                    "    \"tagText\": \"Tag\",",
                    "    \"displayAsTabsText\": \"Display in tabs\",",
                    "    \"displayRowTagText\": \"Display the row tag\",",
                    "    \"displayRowFluidTagText\": \"Show row-fluid tag\",",
                    "    \"includeInAContainerText\": \"Include in a container\",",
                    "    \"includeInAContainerFluidText\": \"Include in a fluid container\",",
                    "    \"containerIdText\": \"ID of the container\",",
                    "    \"containerClassText\": \"Container class\",",
                    "    \"mainColumnText\": \"Main column\",",
                    "    \"mainColumnRTip\": \"Sets the display location for content detail in pages using this mask.\",",
                    "    \"showSpanAndOffsetText\": \"Display the span and offset\",",
                    "    \"offsetText\": \"Offset\",",
                    "    \"spanText\": \"Span\",",
                    "    \"columnIdRecoveryError\": \"Error in the recovery of a column identifier\",",
                    "    \"displayInADivText\": \"Display in a div\",",
                    "    \"divIdText\": \"ID of the div\",",
                    "    \"divClassText\": \"The div class\",",
                    "    \"blockText\": \"Block\",",
                    "    \"URLPrefixText\": \"URL Prefix\",",
                    "    \"invalidMetaError\": \"Some metadata fields are invalid.\",",
                    "    \"invalidTaxoError\": \"Some taxonomy fields are invalid.\",",
                    "    \"invalidFieldsError\": \"Some fields are invalid.\",",
                    "    \"insufficientContentRightsError\": \"You have insufficient rights to view or modify this content\",",
                    "    \"newContentText\": \"New content\",",
                    "    \"maxOneLocFieldError\": \"A content type cannot have multiple fields of type \\\"Location\\\".\",",
                    "    \"contentTypeIsUsedError\": \"This content type is used by content and therefore cannot be deleted.\",",
                    "    \"warningTitle\": \"Warning\",",
                    "    \"contentTypeIncompatModifError\": \"The content type is used by content and these amendments are not compatible.\",",
                    "    \"contentTypeModifWarning\": \"This content type is used by content. Changing it could have repercussions. </br> Would you like to continue?\",",
                    "    \"fieldReplicaText\": \"Replica of the field\",",
                    "    \"successTitle\": \"Success\",",
                    "    \"contentsDeleteError\": \"Error in deleting content\",",
                    "    \"contentTypeHasBeenEmptiedText\": \"The content type has been emptied\",",
                    "    \"fieldNameAlreadyUsedError\": \"Name already used by another field\",",
                    "    \"passwordsDoNotMatchError\": \"Passwords don't match\",",
                    "    \"passwordChangedText\": \"Password changed\",",
                    "    \"rightsRecoveryError\": \"Error in the recovery of the rights\",",
                    "    \"tokenRecoveryError\": \"Error in retrieving the security token\",",
                    "    \"siteModifWarning\": \"The modification of this site will involve the closing of the page management window. This will result in the loss of any changes not saved in that window. </br> Do you want to continue?\",",
                    "    \"pageURLRecoveryError\": \"Error in retrieving the url of the page\",",
                    "    \"pagePreviewText\": \"This is an overview of this page as available online on\",",
                    "    \"associatedMaskText\": \"Associated mask\",",
                    "    \"pagePropertiesInvalidError\": \"The properties of the page are invalid.\",",
                    "    \"stageText\": \"Step\",",
                    "    \"onText\": \"out of\",",
                    "    \"ascText\": \"Ascending\",",
                    "    \"descText\": \"Descending\",",
                    "    \"andText\": \"And\",",
                    "    \"thenText\": \"Then\",",
                    "    \"mediaTypeIsUsedError\": \"This type of media is used by media and therefore cannot be deleted.\",",
                    "    \"invalidRightsPropertiesError\": \"Invalid rights configuration\",",
                    "    \"newDamText\": \"New media\",",
                    "    \"DAMEditText\": \"Edition of the media\",",
                    "    \"DAMDisplayText\": \"Display of the media\",",
                    "    \"searchText\": \"Search\",",
                    "    \"identifierRecoveryError\": \"Error in the recovery of an identifier\",",
                    "    \"invalidFormPropertiesError\": \"Invalid form properties\",",
                    "    \"fileAnalysisError\": \"Error in parsing the file\",",
                    "    \"identifiedFieldsText\": \"identified fields and\",",
                    "    \"importableContentsText\": \"importable contents\",",
                    "    \"importedContentsText\": \"contents imported\",",
                    "    \"importError\": \"Error during import\",",
                    "    \"eligibleContentTypesText\": \"Eligible content types\",",
                    "    \"eachContentMustVerifyRulesText\": \"Each content must verify the following rules\",",
                    "    \"eachContentMustVerifyAtLeastOneRuleText\": \"Each content must verify at least one of the following rules\",",
                    "    \"taxonomyText\": \"Taxonomy\",",
                    "    \"rulesAndSortsOnFieldsText\": \"Rules and sorting on content fields\",",
                    "    \"ascSortText\": \"Sort ascending\",",
                    "    \"descSortText\": \"sort descending\",",
                    "    \"relationBetweenRulesText\": \"Relationship between the rules\",",
                    "    \"creationText\": \"Creation\",",
                    "    \"lastUpdateText\": \"Last modified\",",
                    "    \"noVocabForTheseCtText\": \"No vocabulary available for this set of content types\",",
                    "    \"ruleText\": \"Rule\",",
                    "    \"tRuleAllText\": \"Contains all the terms\",",
                    "    \"tRuleAllRecText\": \"Contains all the terms or at least a descendant per term\",",
                    "    \"tRuleSomeText\": \"Contains at least one of the terms\",",
                    "    \"tRuleSomeREcText\": \"Contains at least one of the terms or at least one of the descendants of one of the terms\",",
                    "    \"tRuleNotText\": \"Does not contain any of the following terms\",",
                    "    \"tRuleNotRecText\": \"Does not contain the following terms or their descendants\",",
                    "    \"CTMustHaveTitleError\": \"The content type must have a 'Title' field\",",
                    "    \"CTMustHaveOnlyOneTitleError\": \"The content type must have only a single field of type \\\"title\\\"\",",
                    "    \"CTMustHaveOnlyOneSummaryError\": \"The content type must have only a single field of type \\\"Summary\\\"\",",
                    "    \"CRMustHaveOnlyOneLocFieldError\": \"The content type must have only a single field of type 'Location'\",",
                    "    \"notMentionedText\": \"not filled\",",
                    "    \"showOnlyIfText\": \"Displayed if and only if\",",
                    "    \"orText\": \"Or\",",
                    "    \"rootText\": \"Root\",",
                    "    \"esGeoQueryText\": \"Geolocated Elastic Search Query Wizard\",",
                    "    \"esQueryText\": \"Elastic Search Query Wizard\",",
                    "    \"esDAMQueryText\": \"DAM Elastic Search Query Wizard\",",
                    "    \"keywordsText\": \"Keywords\",",
                    "    \"defaultKeywordsText\": \"Default keywords\",",
                    "    \"defaultSinglePageText\": \"Default detail page\",",
                    "    \"homePageText\": \"Homepage\",",
                    "    \"rolesText\": \"Roles\",",
                    "    \"authorText\": \"Author\",",
                    "    \"versionText\": \"Version\",",
                    "    \"contentsText\": \"Contents\",",
                    "    \"displayText\": \"Display\",",
                    "    \"publishedText\": \"published\",",
                    "    \"pendingText\": \"pending validation\",",
                    "    \"draftText\": \"draft\",",
                    "    \"refusedText\": \"refused\",",
                    "    \"yesText\": \"Yes\",",
                    "    \"noText\": \"No\",",
                    "    \"mediasText\": \"Media\",",
                    "    \"simpleQueryText\": \"Simple query\",",
                    "    \"manualQueryText\": \"Manual query\",",
                    "    \"restoreText\": \"Restore\",",
                    "    \"originalFileMText\": \"Original file *\",",
                    "    \"noneText\": \"None\",",
                    "    \"basicText\": \"Basic\",",
                    "    \"formUniqueAnswerMessage\": \"You have already completed this survey. Thank you.\",",
                    "    \"formEndMessage\": \"Thank you for completing this survey.\",",
                    "    \"oldVersionText\": \"(A more recent version of Rubedo is available)\",",
                    "    \"summaryText\": \"Summary\",",
                    "    \"showDesktopTooltip\": \"Show desktop\",",
                    "    \"userText\":\"user\",",
                    "    \"usersText\":\"users\",",
                    "    \"emptyText\":\"empty\",",
                    "    \"groupsText\":\"Groups\",",
                    "    \"removeText\":\"Remove\",",
                    "    \"duplicateFieldText\":\"Duplicate of the field\",",
                    "    \"duplicateText\":\"Duplicate\",",
                    "    \"multivaluedText\":\"Multivalued\",",
                    "    \"searchableText\":\"Searchable\",",
                    "    \"localizableText\":\"Localizable\",",
                    "    \"optionalText\":\"Optional\",",
                    "    \"fileTypeText\":\"File type\",",
                    "    \"tooltipText\":\"Tooltip\",",
                    "    \"nameText\":\"Name\",",
                    "    \"labelText\":\"Label\",",
                    "    \"fileFieldText\":\"File\",",
                    "    \"fileFieldDescription\":\"<h2>File field<\\/h2> <\\/br> <p>This field allows for the upload of files.<\\/p>\",",
                    "    \"databaseIsUpToDateText\":\"Database is up to date\",",
                    "    \"databaseNeedsUpdateText\":\"Database update required\",",
                    "    \"databaseUpdateWarning\":\"This action will update the Rubedo database. It is recommended that you back-up your data before starting. Would you like to continue ?\",",
                    "    \"databaseUpdatedToText\":\"The database has been updated to version\",",
                    "    \"folderViewText\":\"Folder view\",",
                    "    \"switchToFolderViewText\": \"Switch to folder view\",",
                    "    \"searchViewText\":\"Search view\",",
                    "    \"switchToSearchViewText\":\"Switch to search view\",",
                    "    \"notFiledText\": \"Not filed\",",
                    "    \"mediaTypeText\":\"Media type\",",
                    "    \"filesUploadedText\":\"files uploaded\",",
                    "    \"allText\":\"All\",",
                    "    \"contentTypeText\":\"Content type\",",
                    "    \"encodingText\":\"Encoding\",",
                    "    \"siteLanguageChoiceError\":\"The default site language must be one of the site languages\",",
                    "    \"delconBaseText\":\"Are you sure you want to delete\",",
                    "    \"thisMaskText\":\"this page mask\",",
                    "    \"thisPageText\": \"this page\",",
                    "    \"thisContentTypeText\":\"this content type\",",
                    "    \"thisMediaTypeText\":\"this media type\",",
                    "    \"thisSurveyText\":\"this survey\",",
                    "    \"thisFolderText\":\"this folder\",",
                    "    \"thisMediaText\":\"this digital asset\",",
                    "    \"thisVocabularyText\":\"this vocabulary\",",
                    "    \"atLeastOneLocError\":\"At least one language must be active\",",
                    "    \"alreadyTranslatedError\":\"This item has already been translated in all active languages\",",
                    "    \"missingLocError\":\"This version is not eligible for localized revert\",",
                    "    \"imageRequiredError\":\"An image must be selected\",",
                    "    \"localizationErrorText\":\"Localization error\",",
                    "    \"noCurrentWorkingLanguageError\":\"No working language selected\",",
                    "    \"currentWorkingLanguageText\":\"Current working language\",",
                    "    \"languagesText\":\"Languages\",",
                    "    \"locStrategyText\":\"Localizastion strategy\",",
                    "    \"useBrowserLanguageText\":\"Use browser language\",",
                    "    \"onlyOneText\":\"Only one\",",
                    "    \"withFallbackText\":\"With fallback\",",
                    "    \"editText\":\"Edit\",",
                    "    \"alreadyAnsweredText\":\"Already answered\",",
                    "    \"MediaFieldNeedsTypeError\":\"Media fields require a media type\",",
                    "    \"damTypeHasBeenEmptiedText\": \"The media type has been emptied\",",
                    "    \"themePreviewText\":\"Theme preview\",",
                    "    \"fieldText\":\"Field\",",
                    "    \"dbclickToAssignText\":\"Double-click available fields to assign to this column\",",
                    "    \"boReloadRequired\":\"This change requires an interface reload in order to fully take effect. Would you like to reload now ?\",",
                    "    \"thisUserTypeText\":\"this user type\",",
                    "    \"userTypeIsUsedError\":\"This user type is used by users and therfore cannot be deleted.\",",
                    "    \"widthText\":\"Width\",",
                    "    \"centeredText\":\"Centered\",",
                    "    \"bgColorText\":\"Background color\",",
                    "    \"bbgColorText\":\"Body background color\",",
                    "    \"imageText\":\"Image\",",
                    "    \"textText\":\"Text\",",
                    "    \"emailBodyText\":\"Email body\",",
                    "    \"emailSendWarning\":\"Are you sure you want to send this email to all users subscribed to the selected mailing list ?\",",
                    "    \"modelText\":\"Model\",",
                    "    \"mailText\":\"Mail\",",
                    "    \"displayLabelText\":\"Display label\",",
                    "    \"productTypeText\":\"ProductType\",",
                    "    \"configurableText\":\"Configurable\",",
                    "    \"productsText\":\"Products\",",
                    "    \"updateText\":\"Update\",",
                    "    \"neverText\":\"Never\",",
                    "    \"largeDesktopText\":\"Large desktop\",",
                    "    \"customTemplateText\":\"Custom template\",",
                    "    \"displayAsTabsText\":\"Display as tabs\",",
                    "    \"stackingThresholdText\": \"Stacking threshold\",",
                    "    \"cancelledText\":\"Cancelled\",",
                    "    \"pendingPaymentText\":\"Pending payment\",",
                    "    \"payedText\":\"Payed\",",
                    "    \"loadOnLaunchText\":\"Load on launch\",",
                    "    \"cacheClearedText\":\"Cache cleared\",",
                    "    \"edAll\":\"All states\",",
                    "    \"edDraft\":\"Draft\",",
                    "    \"edArchived\":\"Archived\",",
                    "    \"edFuture\":\"Future\",",
                    "    \"edPublished\":\"Published now\",",
                    "    \"edPending\":\"Pending validation\"",
                    "});"
                ]
            },
            "name": "init",
            "designerId": "02134674-1f73-49b0-ab08-b1257bec9f4e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#RHelpBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onButtonAfterRender1",
                "implHandler": [
                    "try {\r",
                    "    component.on(\"click\", function(){\r",
                    "        Ext.widget('callout', {\r",
                    "            cls: 'gray',\r",
                    "            width: 400,\r",
                    "            html:Rubedo.RubedoAppHelp[component.RApplication],\r",
                    "            calloutArrowLocation: 'top-right',\r",
                    "            target: component,\r",
                    "            relativePosition: 't-b',\r",
                    "            relativeOffsets: [-184,0],\r",
                    "            fadeInDuration: 200,\r",
                    "            fadeOutDuration: 200,\r",
                    "            dismissDelay: 60000\r",
                    "        }).show();\r",
                    "\r",
                    "    });\r",
                    "} catch (err){\r",
                    "    console.log(\"failed to show application help\");\r",
                    "}"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "onButtonAfterRender1",
            "designerId": "c94d5e08-9c29-411e-ab6a-d4b0134271e9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "component",
                "designer|targetType": "Ext.form.field.Base",
                "fn": "onComponentBeforeRender",
                "implHandler": [
                    "if (component.localiserId){\r",
                    "    var configs = Rubedo.RubedoInterfaceLoc[component.localiserId];\r",
                    "    if (!Ext.isEmpty(configs)) {\r",
                    "        Ext.apply(component, configs);\r",
                    "        if (!Ext.isEmpty(configs.tooltip)) {\r",
                    "            component.setTooltip(configs.tooltip);\r",
                    "        }\r",
                    "    }\r",
                    "    if ((component.isXType(\"button\"))&&(component.scale==\"large\")&&(Ext.isEmpty(component.dontStretch))){\r",
                    "        component.minWidth=48;\r",
                    "    }\r",
                    "}\r",
                    "if ((component.isXType(\"field\"))||(component.isXType(\"checkboxgroup\"))||(component.isXType(\"radiogroup\"))){\r",
                    "    component.labelSeparator=\" \";\r",
                    "}"
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "name": "onComponentBeforeRender",
            "designerId": "20545d3d-55c2-4f5f-b471-7cfc1046dd2b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "field, checkboxgroup, radiogroup",
                "designer|targetType": "Ext.form.field.Base",
                "fn": "onBasefieldAdded",
                "implHandler": [
                    "if (component.localiserId){\r",
                    "    var configs = Rubedo.RubedoInterfaceLoc[component.localiserId];\r",
                    "    if (!Ext.isEmpty(configs)) {\r",
                    "        Ext.apply(component, configs);\r",
                    "    }\r",
                    "}\r",
                    "if (!Ext.isEmpty(component.RTip)){\r",
                    "    component.anchor=\"90%\";\r",
                    "    container.insert(pos,Ext.widget(\"RHelpBtn\", {tooltip:component.RTip}));\r",
                    "}"
                ],
                "name": "added",
                "scope": "me"
            },
            "name": "onBasefieldAdded",
            "designerId": "4989e511-4ecd-48f4-bcbb-2cfcdfbf915d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "produceInterfaceLocalisationJSON",
                "implHandler": [
                    "var result= { };\r",
                    "var count=0;\r",
                    "Ext.Object.each(Rubedo.view, function(a){\r",
                    "    try{\r",
                    "        var test=Ext.create(\"Rubedo.view.\"+a,{id:undefined});\r",
                    "        if (!Ext.isEmpty(test.localiserId)){\r",
                    "            count=count+1;\r",
                    "            if ((test.isXType(\"field\"))||(test.isXType(\"radiogroup\"))||(test.isXType(\"checkboxgroup\"))){\r",
                    "                result[test.localiserId]={\r",
                    "                    fieldLabel:test.fieldLabel,\r",
                    "                    boxLabel:test.boxLabel,\r",
                    "                    buttonText:test.buttonText,\r",
                    "                    RTip:test.RTip\r",
                    "                };\r",
                    "            } else if (test.isXType(\"button\")){\r",
                    "                result[test.localiserId]={\r",
                    "                    text:test.text,\r",
                    "                    tooltip:test.tooltip\r",
                    "                };\r",
                    "            } else if (test.isXType(\"menuitem\")){\r",
                    "                result[test.localiserId]={\r",
                    "                    text:test.text,\r",
                    "                    tooltip:test.tooltip\r",
                    "                };\r",
                    "            }else if (test.isXType(\"fieldset\")){\r",
                    "                result[test.localiserId]={\r",
                    "                    title:test.title\r",
                    "                };\r",
                    "            } else if (test.isXType(\"panel\")){\r",
                    "                result[test.localiserId]={\r",
                    "                    title:test.title,\r",
                    "                    tooltip:test.tooltip\r",
                    "                };\r",
                    "            } else if (test.isXType(\"window\")){\r",
                    "                result[test.localiserId]={\r",
                    "                    title:test.title\r",
                    "                };\r",
                    "            }else if (test.isXType(\"gridcolumn\")){\r",
                    "                result[test.localiserId]={\r",
                    "                    text:test.text\r",
                    "                };\r",
                    "            } else {\r",
                    "                console.log(\"unhandled localised component for id : \"+test.localiserId);\r",
                    "                count=count-1;\r",
                    "            }\r",
                    "            if (!Ext.isEmpty(result[test.localiserId])){\r",
                    "                Ext.Object.each(result[test.localiserId], function(key, value, myself) {\r",
                    "                    if (Ext.isEmpty(value)){\r",
                    "                        delete result[test.localiserId][key];\r",
                    "                    }\r",
                    "                });\r",
                    "            }\r",
                    "        }\r",
                    "        try{\r",
                    "            Ext.Array.forEach(test.query(\"component\"), function(component){\r",
                    "                if (!Ext.isEmpty(component.localiserId)){\r",
                    "                    count=count+1;\r",
                    "                    if ((component.isXType(\"field\"))||(component.isXType(\"radiogroup\"))||(component.isXType(\"checkboxgroup\"))){\r",
                    "                        result[component.localiserId]={\r",
                    "                            fieldLabel:component.fieldLabel,\r",
                    "                            boxLabel:component.boxLabel,\r",
                    "                            buttonText:component.buttonText,\r",
                    "                            RTip:component.RTip\r",
                    "                        };\r",
                    "                    } else if (component.isXType(\"button\")){\r",
                    "                        result[component.localiserId]={\r",
                    "                            text:component.text,\r",
                    "                            tooltip:component.tooltip\r",
                    "                        };\r",
                    "                    } else if (component.isXType(\"menuitem\")){\r",
                    "                        result[component.localiserId]={\r",
                    "                            text:component.text\r",
                    "                        };\r",
                    "                    }else if (component.isXType(\"fieldset\")){\r",
                    "                        result[component.localiserId]={\r",
                    "                            title:component.title\r",
                    "                        };\r",
                    "                    } else if (component.isXType(\"panel\")){\r",
                    "                        result[component.localiserId]={\r",
                    "                            title:component.title,\r",
                    "                            tooltip:component.tooltip\r",
                    "                        };\r",
                    "                    } else if (component.isXType(\"window\")){\r",
                    "                        result[component.localiserId]={\r",
                    "                            title:component.title\r",
                    "                        };\r",
                    "                    }else if (component.isXType(\"gridcolumn\")){\r",
                    "                        result[component.localiserId]={\r",
                    "                            text:component.text\r",
                    "                        };\r",
                    "                    } else {\r",
                    "                        console.log(\"unhandled localised component for id : \"+component.localiserId);\r",
                    "                        count=count-1;\r",
                    "                    }\r",
                    "                    if (!Ext.isEmpty(result[component.localiserId])){\r",
                    "                        Ext.Object.each(result[component.localiserId], function(key, value, myself) {\r",
                    "                            if (Ext.isEmpty(value)){\r",
                    "                                delete result[component.localiserId][key];\r",
                    "                            }\r",
                    "                        });\r",
                    "                    }\r",
                    "                }\r",
                    "            });\r",
                    "\r",
                    "        }catch(err){\r",
                    "            console.log(err);\r",
                    "        }\r",
                    "        try{\r",
                    "            test.destroy();\r",
                    "        }catch(err){console.log(\"destroy anomaly\");}\r",
                    "        }catch(err){console.log(\"loc anomaly\");}\r",
                    "        });\r",
                    "        console.log(count+\" localised interface components\");\r",
                    "        return(Ext.JSON.encode(result));"
                ]
            },
            "name": "produceInterfaceLocalisationJSON",
            "designerId": "80910a7c-a857-449a-9aa4-f6257d05c76a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateLocalisationSingletons",
                "implHandler": [
                    "var userLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");",
                    "if (Ext.isEmpty(userLanguage)){",
                    "    userLanguage=\"en\";",
                    "}",
                    "if (userLanguage==\"en\"){",
                    "    Ext.Date.defaultFormat=\"m/d/Y\";",
                    "}",
                    "Ext.Ajax.request({",
                    "    url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/appHelp.json',",
                    "    params: {",
                    "",
                    "    },",
                    "    success: function(response){",
                    "        var singletonUpdates = Ext.JSON.decode(response.responseText);",
                    "        Ext.apply(Rubedo.RubedoAppHelp, singletonUpdates);",
                    "    },",
                    "    failure:function(){",
                    "        console.log(\"RubedoAppHelp singleton could not be localized for the current language\");",
                    "    }",
                    "});",
                    "Ext.Ajax.request({",
                    "    url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/componentLabels.json',",
                    "    params: {",
                    "",
                    "    },",
                    "    success: function(response){",
                    "        var singletonUpdates = Ext.JSON.decode(response.responseText);",
                    "        Ext.apply(Rubedo.RubedoInterfaceLoc, singletonUpdates);",
                    "        if(Rubedo.RubedoInterfaceLoc.hideAllWindowsBtn&&Rubedo.RubedoInterfaceLoc.hideAllWindowsBtn.tooltip){",
                    "            Ext.getCmp(\"desktopHomeBtn\").setTooltip(Rubedo.RubedoInterfaceLoc.hideAllWindowsBtn.tooltip);",
                    "        }",
                    "    },",
                    "    failure:function(){",
                    "        console.log(\"RubedoInterfaceLoc singleton could not be localized for the current language\");",
                    "    }",
                    "});",
                    "Ext.Ajax.request({",
                    "    url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/automatedElements.json',",
                    "    params: {",
                    "",
                    "    },",
                    "    success: function(response){",
                    "        var singletonUpdates = Ext.JSON.decode(response.responseText);",
                    "        Ext.apply(Rubedo.RubedoAutomatedElementsLoc, singletonUpdates);",
                    "    },",
                    "    failure:function(){",
                    "        console.log(\"RubedoAutomatedElementsLoc singleton could not be localized for the current language\");",
                    "    }",
                    "});",
                    "if (!Ext.isEmpty(Ext.getStore(\"TypesChampsDataStore\"))){",
                    "    Ext.Ajax.request({",
                    "        url: 'resources/localisationfiles/generic/fieldTypes.json',",
                    "        params: {",
                    "",
                    "        },",
                    "        success: function(response){",
                    "            var genericStructureString = response.responseText;",
                    "            Ext.Ajax.request({",
                    "                url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/fieldTypeLabels.json',",
                    "                params: {",
                    "",
                    "                },",
                    "                success: function(response){",
                    "                    var localisedLabels =Ext.JSON.decode(response.responseText);",
                    "                    Ext.Object.each(localisedLabels, function(key, value, myself) {",
                    "                        replacer=new RegExp(key, 'g');",
                    "                        genericStructureString=genericStructureString.replace(replacer, value);",
                    "                    });",
                    "                    var decodedFT=Ext.JSON.decode(genericStructureString);",
                    "                    Ext.getStore(\"TypesChampsDataStore\").removeAll();",
                    "                    Ext.getStore(\"TypesChampsDataStore\").loadData(decodedFT);",
                    "",
                    "",
                    "                },",
                    "                failure:function(){",
                    "                    console.log(\"FieldTypes store could not be localised for this language\");",
                    "                }",
                    "            });",
                    "        },",
                    "        failure:function(){",
                    "            console.log(\"FieldTypes store could not retrieve generic structure\");",
                    "        }",
                    "    });",
                    "}",
                    "if (!Ext.isEmpty(Ext.getStore(\"BlocsDataStore\"))){",
                    "    Ext.Ajax.request({",
                    "        url: 'blocks',",
                    "        method:'GET',",
                    "        params: {",
                    "",
                    "        },",
                    "        success: function(response){",
                    "            var genericStructureString = response.responseText;",
                    "            Ext.Ajax.request({",
                    "                url: '/components/webtales/rubedo-localization/'+userLanguage+'/BackOffice/blockTypeLabels.json',",
                    "                params: {",
                    "",
                    "                },",
                    "                success: function(response){",
                    "                    var localisedLabels =Ext.JSON.decode(response.responseText);",
                    "                    Ext.Object.each(localisedLabels, function(key, value, myself) {",
                    "                        replacer=new RegExp(key, 'g');",
                    "                        genericStructureString=genericStructureString.replace(replacer, value);",
                    "                    });",
                    "                    var decodedFT=Ext.JSON.decode(genericStructureString);",
                    "                    Ext.Array.forEach(decodedFT,function(candidateBlock){",
                    "                        if (Ext.isEmpty(candidateBlock)){",
                    "                            Ext.Array.remove(decodedFT,candidateBlock);",
                    "                        }",
                    "                    });",
                    "                    Ext.getStore(\"BlocsDataStore\").removeAll();",
                    "                    Ext.getStore(\"BlocsDataStore\").loadData(decodedFT);",
                    "                    var task6 = new Ext.util.DelayedTask(function(){",
                    "                        if (!PHPOptions.addECommerce){",
                    "                            Ext.getStore(\"BlocsDataStore\").filter(\"isECommerce\",false);",
                    "                        }",
                    "                    });",
                    "                    task6.delay(400);",
                    "",
                    "",
                    "                },",
                    "                failure:function(){",
                    "                    console.log(\"Blocks store could not be localised for this language\");",
                    "                }",
                    "            });",
                    "        },",
                    "        failure:function(){",
                    "            console.log(\"Blocks store could not retrieve generic structure\");",
                    "        }",
                    "    });",
                    "}",
                    "",
                    "this.correctLanguageMenu();",
                    "if (!Ext.isEmpty(Ext.getStore(\"AllLanguagesStore4\"))){",
                    "    Ext.getStore(\"AllLanguagesStore4\").load();",
                    "}",
                    "",
                    "",
                    ""
                ]
            },
            "name": "updateLocalisationSingletons",
            "designerId": "ccc2e951-4238-41b3-b475-42aaf17282a1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "fieldset",
                "designer|targetType": "Ext.form.FieldSet",
                "fn": "onFieldsetAfterRender",
                "implHandler": [
                    "var task = new Ext.util.DelayedTask(function(){\r",
                    "    component.setTitle(component.title);\r",
                    "});\r",
                    "task.delay(100);"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "onFieldsetAfterRender",
            "designerId": "413bd541-5efe-49f4-b8f1-ad5d536d2703"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "extractLocFromBlocksJson",
                "implHandler": [
                    "var me = this;\r",
                    "var data = Ext.clone(Ext.Array.pluck(Ext.getStore(\"BlocsDataStore\").getRange(), \"data\"));\r",
                    "var extractedLoc = { };\r",
                    "Ext.Array.forEach(data, function(block){\r",
                    "    block.category=me.insertAndReplace(extractedLoc, block.category);\r",
                    "    block.type=me.insertAndReplace(extractedLoc, block.type);\r",
                    "    block.description=me.insertAndReplace(extractedLoc, block.description);\r",
                    "    block.configBasique.title=me.insertAndReplace(extractedLoc, block.configBasique.title);\r",
                    "    Ext.Array.forEach(block.configBasique.champsConfig.simple, function(category){\r",
                    "        category.categorie=me.insertAndReplace(extractedLoc, category.categorie);\r",
                    "        Ext.Array.forEach(category.champs, function(field){\r",
                    "            field.config.fieldLabel=me.insertAndReplace(extractedLoc, field.config.fieldLabel);\r",
                    "            if (!Ext.isEmpty(field.autoStoreData)){\r",
                    "                Ext.Array.forEach(field.autoStoreData, function(option){\r",
                    "                    option.label=me.insertAndReplace(extractedLoc, option.label);\r",
                    "                });\r",
                    "            }\r",
                    "        });\r",
                    "    });\r",
                    "    Ext.Array.forEach(block.configBasique.champsConfig.avance, function(category){\r",
                    "        category.categorie=me.insertAndReplace(extractedLoc, category.categorie);\r",
                    "        Ext.Array.forEach(category.champs, function(field){\r",
                    "            field.config.fieldLabel=me.insertAndReplace(extractedLoc, field.config.fieldLabel);\r",
                    "            if (!Ext.isEmpty(field.autoStoreData)){\r",
                    "                Ext.Array.forEach(field.autoStoreData, function(option){\r",
                    "                    option.label=me.insertAndReplace(extractedLoc, option.label);\r",
                    "                });\r",
                    "            }\r",
                    "        });\r",
                    "    });\r",
                    "});\r",
                    "console.log(Ext.JSON.encode(extractedLoc));\r",
                    "console.log(\"\\n \\n\");\r",
                    "console.log(Ext.JSON.encode(data));"
                ]
            },
            "name": "extractLocFromBlocksJson",
            "designerId": "135734d5-8fd3-4b96-9764-767a7262b2f7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "extractLocFromFormFieldsJson",
                "implHandler": [
                    "var me = this;\r",
                    "var data = Ext.clone(Ext.Array.pluck(Ext.getStore(\"FormFieldTypesStore\").getRange(), \"data\"));\r",
                    "var extractedLoc = { };\r",
                    "Ext.Array.forEach(data, function(block){\r",
                    "    block.type=me.insertAndReplace(extractedLoc, block.type);\r",
                    "    block.description=me.insertAndReplace(extractedLoc, block.description);\r",
                    "    if (!Ext.isEmpty(block.itemConfig.label)){\r",
                    "        block.itemConfig.label=me.insertAndReplace(extractedLoc, block.itemConfig.label);\r",
                    "    }\r",
                    "    if (!Ext.isEmpty(block.itemConfig.html)){\r",
                    "        block.itemConfig.html=me.insertAndReplace(extractedLoc, block.itemConfig.html);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "});\r",
                    "console.log(Ext.JSON.encode(extractedLoc));\r",
                    "console.log(\"\\n \\n\");\r",
                    "console.log(Ext.JSON.encode(data));"
                ]
            },
            "name": "extractLocFromFormFieldsJson",
            "designerId": "40374021-cf90-452e-b789-487de97acf90"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "extractLocFromFTJson",
                "implHandler": [
                    "var me = this;\r",
                    "var data = Ext.clone(Ext.Array.pluck(Ext.getStore(\"TypesChampsDataStore\").getRange(), \"data\"));\r",
                    "var extractedLoc = { };\r",
                    "Ext.Array.forEach(data, function(block){\r",
                    "    block.category=me.insertAndReplace(extractedLoc, block.category);\r",
                    "    block.type=me.insertAndReplace(extractedLoc, block.type);\r",
                    "    block.description=me.insertAndReplace(extractedLoc, block.description);\r",
                    "    block.config.fieldLabel=me.insertAndReplace(extractedLoc, block.config.fieldLabel);\r",
                    "    Ext.Array.forEach(block.configFields, function(field){\r",
                    "        field.config.fieldLabel=me.insertAndReplace(extractedLoc, field.config.fieldLabel);\r",
                    "    });\r",
                    "\r",
                    "});\r",
                    "console.log(Ext.JSON.encode(extractedLoc));\r",
                    "console.log(\"\\n \\n\");\r",
                    "console.log(Ext.JSON.encode(data));"
                ]
            },
            "name": "extractLocFromFTJson",
            "designerId": "07885f77-2341-4fb7-a6fc-5d8fb735ee13"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "locObj",
                    "targetString"
                ],
                "fn": "insertAndReplace",
                "implHandler": [
                    "var newId=\"#\"+Ext.id()+\"#\";\r",
                    "var finalId=Ext.clone(newId);\r",
                    "Ext.Object.each(locObj, function(key, value, myself) {\r",
                    "    if (value==targetString){\r",
                    "        finalId=key;\r",
                    "    }\r",
                    "});\r",
                    "if (newId==finalId){\r",
                    "    locObj[finalId]=targetString;\r",
                    "}\r",
                    "return(finalId);"
                ]
            },
            "name": "insertAndReplace",
            "designerId": "561eeccd-ba92-4fe0-b9ae-9caba83908b8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#workingLanguageField",
                "designer|targetType": "Ext.form.field.Hidden",
                "fn": "onWorkingLanguageFieldChange",
                "implHandler": [
                    "var myBtn=Ext.getCmp(\"workingLanguageBtn\");\r",
                    "if (Ext.isEmpty(newValue)){\r",
                    "    myBtn.setIcon(null);\r",
                    "    myBtn.setIconCls(\"infoWarning\");\r",
                    "    myBtn.setTooltip(Rubedo.RubedoAutomatedElementsLoc.noCurrentWorkingLanguageError);\r",
                    "    myBtn.setText(null);\r",
                    "} else {\r",
                    "    var myRec=Ext.getStore(\"AllLanguagesStore3\").query(\"locale\",newValue,false,false,true).items[0];\r",
                    "    myBtn.setIconCls(null);\r",
                    "    myBtn.setIcon('/assets/flags/16/'+myRec.get(\"flagCode\")+'.png');\r",
                    "    myBtn.setTooltip(Rubedo.RubedoAutomatedElementsLoc.currentWorkingLanguageText+\" : \"+myRec.get(\"label\"));\r",
                    "    myBtn.setText(myRec.get(\"label\"));\r",
                    "    if (!Ext.isEmpty(myRec.get(\"ownLabel\"))){\r",
                    "        myBtn.setText(myRec.get(\"ownLabel\"));\r",
                    "    }\r",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "name": "onWorkingLanguageFieldChange",
            "designerId": "1afe91a9-9ab2-4ca3-ad70-935ea26a0c78"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#entete",
                "designer|targetType": "Ext.toolbar.Toolbar",
                "fn": "onEnteteAfterRender",
                "implHandler": [
                    "var task = new Ext.util.DelayedTask(function(){\r",
                    "    component.remove(Ext.getCmp(\"ESSearchField\"));\r",
                    "    component.insert(8, Ext.widget(\"ESSearchField\"));\r",
                    "    Ext.getCmp(\"desktopHomeBtn\").setTooltip(Rubedo.RubedoAutomatedElementsLoc.showDesktopTooltip);\r",
                    "});\r",
                    "task.delay(600);\r",
                    ""
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "onEnteteAfterRender",
            "designerId": "24d32aa9-59d8-40cb-83f0-8b907d7b54ac"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#workingLanguageBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onWorkingLanguageBtnClick",
                "implHandler": [
                    "//Ext.widget(\"workingLanguageChangeWindow\").show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onWorkingLanguageBtnClick",
            "designerId": "d812dfcd-f615-49ea-8fe0-4ed344f33145"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#currentLanguageChangeSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onCurrentLanguageChangeSubmitBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    Ext.getCmp(\"workingLanguageField\").setValue(form.getValues().language);\r",
                    "    Ext.getStore(\"CurrentUserDataStore\").getRange()[0].set(\"workingLanguage\",form.getValues().language);\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onCurrentLanguageChangeSubmitBtnClick",
            "designerId": "06a5ed2d-d911-442e-b51e-edf409c3a85c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "correctLanguageMenu",
                "implHandler": [
                    "var myMenu=Ext.getCmp(\"LanguageChangerMenu\");",
                    "if(!Ext.isEmpty(myMenu)){",
                    "    myMenu.removeAll();",
                    "    if (Ext.getStore(\"AllLanguagesStore3\").getRange().length>1){",
                    "        Ext.Array.forEach(Ext.getStore(\"AllLanguagesStore3\").getRange(),function(language){",
                    "            var newItem=Ext.widget(\"menuitem\",{text:language.get(\"label\"), icon:\"/assets/flags/16/\"+language.get(\"flagCode\")+\".png\"});",
                    "            if (!Ext.isEmpty(language.get(\"ownLabel\"))){",
                    "                newItem.setText(language.get(\"ownLabel\"));",
                    "            }",
                    "            newItem.on(\"click\",function(){",
                    "                Ext.getCmp(\"workingLanguageField\").setValue(language.get(\"locale\"));",
                    "                Ext.getStore(\"CurrentUserDataStore\").getRange()[0].set(\"workingLanguage\",language.get(\"locale\"));",
                    "            });",
                    "            myMenu.add(newItem);",
                    "",
                    "        });",
                    "    } else {",
                    "        myMenu.up().hide();",
                    "    }",
                    "}"
                ]
            },
            "name": "correctLanguageMenu",
            "designerId": "e0efd64f-9e4e-4678-9ce1-e6db77ea2d0b"
        }
    ]
}