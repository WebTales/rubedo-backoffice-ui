{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "MainStoresController",
        "designer|userAlias": "MainStoresController"
    },
    "id": "ExtBox1-ext-gen10969",
    "designerId": "bf25a36d-563e-484d-b6b8-b387924e3a62",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "init",
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "Ext.data.StoreManager.each(function(store){\r",
                    "    //notifs\r",
                    "    store.on(\"write\", function(theStore,roperation){\r",
                    "        if (roperation.action==\"update\") {\r",
                    "            me.fireNotif(\"Notification\", \"<p>Mise à jour réussie.</p>\");\r",
                    "        }\r",
                    "        else if (roperation.action==\"create\") {\r",
                    "            me.fireNotif(\"Notification\", \"<p>Création réussie.</p>\");\r",
                    "        }\r",
                    "        else if (roperation.action==\"destroy\") {\r",
                    "            me.fireNotif(\"Notification\", \"<p>Suppression réussie.</p>\");\r",
                    "        }\r",
                    "    });\r",
                    "    //events for optimised stores\r",
                    "    if (store.isOptimised){\r",
                    "        store.on(\"load\", function(theStore,records,successful){\r",
                    "            if (successful) {\r",
                    "                theStore.isUsed=true;\r",
                    "            }\r",
                    "        });\r",
                    "        store.on(\"clear\", function(theStore){\r",
                    "            theStore.isUsed=false;\r",
                    "        });\r",
                    "        store.on(\"write\", function(theStore,roperation){\r",
                    "            me.reloadActiveBrothers(theStore.usedCollection, theStore.storeId, theStore.forcedSync);\r",
                    "        });\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    //error handling (needs work) \r",
                    "    var proxy = store.getProxy();\r",
                    "    if (!Ext.isEmpty(proxy)) {\r",
                    "        proxy.on(\"exception\", function( proxy, response, operation, options ){\r",
                    "            var message = \"\";\r",
                    "            if (response.status === 0) {message= \"Connexion au serveur interrompue\";}\r",
                    "            else if (response.status === 500) {message= \"Erreur interne du serveur\";}\r",
                    "            Ext.Msg.alert(\"Erreur\", message);\r",
                    "            if (operation.action==\"update\") {\r",
                    "                Ext.Array.forEach(operation.records, function (record){ record.reject();});\r",
                    "            }\r",
                    "            else if (operation.action==\"create\") {\r",
                    "                store.remove(operation.records);\r",
                    "            }\r",
                    "            else if (operation.action==\"destroy\") {\r",
                    "                Ext.Array.forEach(operation.records, function (record){ store.insert(record.index || 0, record);});\r",
                    "                store.removed= [];\r",
                    "            }\r",
                    "            console.log(store);\r",
                    "            console.log(response);\r",
                    "\r",
                    "        });\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "3f2282cf-a673-4541-9ce2-896c6e5906b4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onComponentRender",
                "fn": "onComponentRender",
                "implHandler": [
                    "if ((abstractcomponent.managesStore)&&(abstractcomponent.store)) {\r",
                    "    abstractcomponent.getStore().load();\r",
                    "\r",
                    "    abstractcomponent.on(\"beforedestroy\", function(thing){thing.getStore().clearFilter(true); thing.getStore().removeAll(); });\r",
                    "} "
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.Component",
                "designer|controlQuery": "component"
            },
            "designerId": "06e76d2a-cde1-4cb5-8774-9ff15fa1ee63"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "reloadActiveBrothers",
                "fn": "reloadActiveBrothers",
                "designer|params": [
                    "collectionName",
                    "myId",
                    "forcedMode"
                ],
                "implHandler": [
                    "Ext.data.StoreManager.each(function(someStore){\r",
                    "    if ((someStore.isOptimised)&&((someStore.isUsed)||(forcedMode))&&(someStore.usedCollection==collectionName)&&(!someStore.isLoading())&&(someStore.storeId!=myId)) {\r",
                    "        someStore.load();\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "13ecd8e3-c429-4167-92cf-6364ddb00501"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "fireNotif",
                "fn": "fireNotif",
                "designer|params": [
                    "title",
                    "message"
                ],
                "implHandler": [
                    "Ext.create('Ext.ux.window.Notification', {\r",
                    "    title: title,\r",
                    "    position: 'tr',\r",
                    "    manager: 'instructions',\r",
                    "    cls: 'ux-notification-light',\r",
                    "    iconCls: 'ux-notification-icon-information',\r",
                    "    html: message,\r",
                    "    autoCloseDelay: 4000,\r",
                    "    styleHtmlContent:true,\r",
                    "    slideBackDuration: 500,\r",
                    "    slideInAnimation: 'bounceOut',\r",
                    "    slideBackAnimation: 'easeIn'\r",
                    "}).show();"
                ]
            },
            "designerId": "006f72cb-a2d6-45bc-9d0b-e276d2ed1673"
        }
    ]
}