{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "assistantRequetageController",
        "views": [
            "assisstantRE4",
            "regleChampAR"
        ]
    },
    "designerId": "da7dabb6-9585-4ae7-8847-4b4d76cdb27e",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonNextRequeteur",
                "designer|targetType": "Ext.button.Button",
                "fn": "suivant",
                "implHandler": [
                    "var me=this;\r",
                    "var simpleMode = Ext.getCmp(\"assistantRequetage\").simpleMode;\r",
                    "var initialQuery = Ext.getCmp(\"assistantRequetage\").initialQuery;\r",
                    "var editorMode = Ext.getCmp(\"assistantRequetage\").editorMode;\r",
                    "var nextOK = 1;\r",
                    "var etapeC = button.up().up().getLayout().getActiveItem().items.items;\r",
                    "var i = 0;\r",
                    "for (i=0;i<etapeC.length; i++) {\r",
                    "    if ((etapeC[i].isXType('field'))&&(!(etapeC[i].isValid()))) { nextOK = 0;}\r",
                    "}\r",
                    "if (nextOK == 1) {\r",
                    "\r",
                    "    var etape = button.up().up().getLayout().getActiveItem();\r",
                    "    if (etape.id=='assisstantRE5'){\r",
                    "        this.displayQuery(this.readQuery());\r",
                    "    }\r",
                    "    else if (etape.id=='assisstantRE1') {\r",
                    "        var keepInMind=false;\r",
                    "        if((editorMode)&&(Ext.getCmp('champTCRequeteur').getValue().toString()==initialQuery.contentTypes.toString())){\r",
                    "            keepInMind=true;\r",
                    "        }\r",
                    "\r",
                    "        me.adaptToTCSelect(keepInMind);\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    var tousET= Ext.getCmp('assistantRequetage').getLayout().getLayoutItems().length;\r",
                    "    var suivET= Ext.getCmp('assistantRequetage').getLayout().getNext().etape;\r",
                    "    if (suivET==tousET) { Ext.getCmp('boutonNextRequeteur').disable();}\r",
                    "    else if (suivET==2) { Ext.getCmp('boutonPrevRequeteur').enable();}\r",
                    "    if (Ext.isDefined(suivET)) {\r",
                    "        button.up().up().getLayout().next();\r",
                    "\r",
                    "        Ext.getCmp('progressAR').updateProgress(suivET/tousET, Rubedo.RubedoAutomatedElementsLoc.stageText+\" \"+suivET+\" \"+Rubedo.RubedoAutomatedElementsLoc.onText+\" \"+tousET);\r",
                    "    }\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "suivant",
            "designerId": "b83c1479-9cbe-478c-bde1-54b5275f3a77"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonPrevRequeteur",
                "designer|targetType": "Ext.button.Button",
                "fn": "precedent",
                "implHandler": [
                    "var tousET= Ext.getCmp('assistantRequetage').getLayout().getLayoutItems().length;\r",
                    "var suivET= Ext.getCmp('assistantRequetage').getLayout().getPrev().etape;\r",
                    "if (suivET==tousET-1) { Ext.getCmp('boutonNextRequeteur').enable();}\r",
                    "else if (suivET==1) { Ext.getCmp('boutonPrevRequeteur').disable();}\r",
                    "if (Ext.isDefined(suivET)) {\r",
                    "    button.up().up().getLayout().prev();\r",
                    "    Ext.getCmp('progressAR').updateProgress(suivET/tousET, Rubedo.RubedoAutomatedElementsLoc.stageText+\" \"+suivET+\" \"+Rubedo.RubedoAutomatedElementsLoc.onText+\" \"+tousET);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "precedent",
            "designerId": "4667034e-54b1-41f0-9662-9b004a9c8479"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "[itemId='boutonEnleveRegleAR']",
                "designer|targetType": "Ext.button.Button",
                "fn": "enleveRegle",
                "implHandler": [
                    "if (button.up().up().up().items.items.indexOf(button.up().up())==2) {\r",
                    "    if (!Ext.isEmpty(button.up().up().up().getComponent(3))){\r",
                    "        button.up().up().up().getComponent(3).getComponent(0).getComponent(0).destroy();\r",
                    "    }\r",
                    "}\r",
                    "button.up().up().destroy();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "enleveRegle",
            "designerId": "20f3e13d-6f29-47e0-ba81-ac64ffef193e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonSelectAllTCAR",
                "designer|targetType": "Ext.button.Button",
                "fn": "selectAllTC",
                "implHandler": [
                    "Ext.getCmp('champTCRequeteur').select(Ext.getCmp('champTCRequeteur').getStore().data.items);"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "selectAllTC",
            "designerId": "c95df528-b694-421e-b11a-54c5cba5aea0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonCreateurReglesChampsAR",
                "designer|targetType": "Ext.button.Button",
                "fn": "ajoutRegleChamp",
                "implHandler": [
                    "var nRegle= Ext.getCmp('createurReglesChampsAR').getValue();\r",
                    "if (nRegle !== null) {\r",
                    "    var enrobage = Ext.widget('regleChampAR');\r",
                    "    enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);\r",
                    "    var mainThing = Ext.widget(nRegle.cType, {flex:1, mame:nRegle.name});\r",
                    "    mainThing.name=nRegle.name;\r",
                    "    mainThing.usedRole=\"value\";\r",
                    "    mainThing.ruleId=nRegle.ruleId;\r",
                    "    mainThing.isAddedRuleField=true;\r",
                    "    enrobage.getComponent(0).insert(1,mainThing);\r",
                    "    if (nRegle.cType== 'checkboxfield') {\r",
                    "        var operateur= Ext.widget('tbtext', {text: ' = '});\r",
                    "    }\r",
                    "    else{\r",
                    "        var storeOper = Ext.create('Ext.data.Store', {\r",
                    "            fields: ['operateur'],\r",
                    "            data : [\r",
                    "            {\"operateur\":\"=\"},\r",
                    "            {\"operateur\":\"<=\"},\r",
                    "            {\"operateur\":\"<\"},\r",
                    "            {\"operateur\":\">=\"},\r",
                    "            {\"operateur\":\">\"},\r",
                    "            {\"operateur\":\"!=\"}\r",
                    "            ]\r",
                    "        });\r",
                    "        var operateur= Ext.create('Ext.form.ComboBox', {\r",
                    "            name:nRegle.name+\"Operator\",\r",
                    "            store: storeOper,\r",
                    "            usedRole:\"rule\",\r",
                    "            isAddedRuleField:true,\r",
                    "            ruleId:nRegle.ruleId,\r",
                    "            flex:1,\r",
                    "            queryMode: 'local',\r",
                    "            displayField: 'operateur',\r",
                    "            valueField: 'operateur',\r",
                    "            editable: false,\r",
                    "            multiSelect:false,\r",
                    "            allowBlank:false,\r",
                    "            forceSelect: true\r",
                    "        });\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "    enrobage.getComponent(0).insert(1,operateur);\r",
                    "    if (Ext.getCmp('assisstantRE4').items.items.length>2){\r",
                    "        enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>'+Rubedo.RubedoAutomatedElementsLoc.andText+'</b>'}));\r",
                    "    }\r",
                    "\r",
                    "    Ext.getCmp('assisstantRE4').add(enrobage);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "ajoutRegleChamp",
            "designerId": "0889cbbf-053a-469f-99aa-a047a88adba7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#queryBuildSaveBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onQueryBuildSaveBtnClick",
                "implHandler": [
                    "if ((Ext.getCmp(\"assistantRequetage\").simpleMode)||(button.up().getForm().isValid())){",
                    "    var result=this.readQuery();",
                    "    if (Ext.getCmp(\"assistantRequetage\").editorMode){",
                    "        if (Ext.getCmp(\"assistantRequetage\").directToCombo){",
                    "            var usedStore=Ext.getStore(\"QueriesStore\");",
                    "        } else {",
                    "            var usedStore=Ext.getStore(\"MainQueriesStore\");",
                    "        }",
                    "",
                    "        var editedOne=usedStore.findRecord(\"id\",Ext.getCmp(\"assistantRequetage\").recId);",
                    "        editedOne.beginEdit();",
                    "        editedOne.set(\"query\", result);",
                    "        if (Ext.getCmp(\"assistantRequetage\").simpleMode){",
                    "            editedOne.set(\"name\", Rubedo.RubedoAutomatedElementsLoc.simpleQueryText);",
                    "        } else {",
                    "            editedOne.set(\"name\", result.queryName);",
                    "        }",
                    "        editedOne.set(\"returnedFields\", result.returnedFields);",
                    "        editedOne.endEdit();",
                    "        Ext.getStore(\"QueriesStore\").addListener(\"update\", function(){",
                    "            Ext.getCmp(Ext.getCmp(\"assistantRequetage\").mainFieldId).select(editedOne);",
                    "        },this,{single:true});",
                    "        }else {",
                    "            var newQuery = Ext.create(\"Rubedo.model.queryDataModel\", {",
                    "                name:result.queryName,",
                    "                returnedFields:result.returnedFields,",
                    "                type:\"advanced\",",
                    "                query:result,",
                    "                averageDuration:0,",
                    "                count:0,",
                    "                usage:[]",
                    "            });",
                    "            if (Ext.getCmp(\"assistantRequetage\").simpleMode){",
                    "                newQuery.set(\"type\", \"simple\");",
                    "                newQuery.set(\"name\", Rubedo.RubedoAutomatedElementsLoc.simpleQueryText);",
                    "            }",
                    "            if (Ext.getCmp(\"assistantRequetage\").adminMode){",
                    "",
                    "                Ext.getStore(\"MainQueriesStore\").add(newQuery);",
                    "                Ext.getStore(\"MainQueriesStore\").addListener(\"datachanged\", function(){",
                    "                    Ext.getCmp(\"mainQueriesGrid\").getSelectionModel().select(newQuery);",
                    "                },this, {single:true});",
                    "                } else {",
                    "                    Ext.getStore(\"QueriesStore\").add(newQuery);",
                    "                    Ext.getStore(\"QueriesStore\").addListener(\"update\", function(){",
                    "                        Ext.getCmp(Ext.getCmp(\"assistantRequetage\").mainFieldId).select(newQuery);",
                    "                    },this,{single:true});",
                    "                    }",
                    "                }",
                    "                Ext.getCmp(\"assistantRequetage\").close();",
                    "            }"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onQueryBuildSaveBtnClick",
            "designerId": "c8e41169-098f-4231-9aa3-cc2f77cbe89d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonCreateurTrisChampsAR",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBoutonCreateurTrisChampsARClick",
                "implHandler": [
                    "var nRegle= Ext.getCmp('createurTrisChampsAR').getValue();\r",
                    "if (nRegle !== null) {\r",
                    "    var enrobage = Ext.widget('regleChampAR');\r",
                    "    enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);\r",
                    "\r",
                    "\r",
                    "    var storeOper = Ext.create('Ext.data.Store', {\r",
                    "        fields: ['operateur', 'label'],\r",
                    "        data : [\r",
                    "        {\"operateur\":\"ASC\", \"label\": Rubedo.RubedoAutomatedElementsLoc.ascText},\r",
                    "        {\"operateur\":\"DESC\", \"label\": Rubedo.RubedoAutomatedElementsLoc.descText}\r",
                    "        ]\r",
                    "    });\r",
                    "    var operateur= Ext.create('Ext.form.ComboBox', {\r",
                    "        name:nRegle.name+\"Direction\",\r",
                    "        store: storeOper,\r",
                    "        usedRole:\"sort\",\r",
                    "        isAddedRuleField:true,\r",
                    "        ruleId:nRegle.ruleId,\r",
                    "        flex:1,\r",
                    "        queryMode: 'local',\r",
                    "        displayField: 'label',\r",
                    "        valueField: 'operateur',\r",
                    "        editable: false,\r",
                    "        multiSelect:false,\r",
                    "        allowBlank:false,\r",
                    "        forceSelect: true\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "\r",
                    "    enrobage.getComponent(0).insert(1,operateur);\r",
                    "    if (Ext.getCmp('assisstantRE5').items.items.length>2){\r",
                    "        enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>'+Rubedo.RubedoAutomatedElementsLoc.thenText+' </b>'}));\r",
                    "    }\r",
                    "\r",
                    "    Ext.getCmp('assisstantRE5').add(enrobage);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onBoutonCreateurTrisChampsARClick",
            "designerId": "f1495402-66f3-4688-9ffc-1f0fc1301fa9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "readQuery",
                "implHandler": [
                    "var mainWin= Ext.getCmp(\"assistantRequetage\");",
                    "var result = {};",
                    "result.vocabularies={ };",
                    "result.fieldRules=[ ];",
                    "Ext.Array.forEach(mainWin.query(\"field\"),function(field){",
                    "    if (field.submitValue){",
                    "        if ((field.isVocabularyField)&&(!Ext.isEmpty(field.getValue()))) {",
                    "            if ((Ext.isEmpty(result.vocabularies[field.vocabularyId]))&&(field.usedRole!=\"rule\")){",
                    "                result.vocabularies[field.vocabularyId]={ };",
                    "            }",
                    "            if (!(Ext.isEmpty(result.vocabularies[field.vocabularyId]))){",
                    "                if (Ext.isArray(field.getValue())){",
                    "                    result.vocabularies[field.vocabularyId][field.usedRole]=field.getValue();",
                    "                } else {",
                    "                    result.vocabularies[field.vocabularyId][field.usedRole]=[field.getValue()];",
                    "                }",
                    "            }",
                    "",
                    "        } else if (field.isAddedRuleField){",
                    "           /* if (Ext.isEmpty(result.fieldRules[field.ruleId])){",
                    "                result.fieldRules[field.ruleId]={ };",
                    "            }",
                    "            result.fieldRules[field.ruleId][field.usedRole]=field.getValue();*/",
                    "",
                    "        } else {",
                    "            if (Ext.Array.contains([\"contentTypes\",\"queryName\",\"vocabulariesRule\",\"returnedFields\"],field.name)){",
                    "            \tresult[field.name]=field.getValue();",
                    "            }",
                    "        }",
                    "    }",
                    "});",
                    "if (!Ext.isEmpty(Ext.getCmp('assisstantRE4'))){",
                    "    Ext.Array.forEach(Ext.getCmp('assisstantRE4').query(\"regleChampAR\"), function(newRule){",
                    "        var objInter={};",
                    "        Ext.Array.forEach(newRule.query(\"field\"),function(field){",
                    "            if (field.isAddedRuleField){",
                    "            \tobjInter.field=field.ruleId;",
                    "                objInter[field.usedRole]=field.getValue();",
                    "            }",
                    "        });",
                    "        result.fieldRules.push(objInter);",
                    "    });",
                    "}",
                    "if (!Ext.isEmpty(Ext.getCmp('assisstantRE5'))){",
                    "    Ext.Array.forEach(Ext.getCmp('assisstantRE5').query(\"regleChampAR\"), function(newRule){",
                    "        var objInter={};",
                    "        Ext.Array.forEach(newRule.query(\"field\"),function(field){",
                    "            if (field.isAddedRuleField){",
                    "            \tobjInter.field=field.ruleId;",
                    "                objInter[field.usedRole]=field.getValue();",
                    "            }",
                    "        });",
                    "        result.fieldRules.push(objInter);",
                    "    });",
                    "}",
                    "if (!Ext.isArray(result.contentTypes)){",
                    "    result.contentTypes=[result.contentTypes];",
                    "}",
                    "return(result);"
                ]
            },
            "name": "readQuery",
            "designerId": "f1e97592-b58d-4d07-9a6d-1b36966a0aca"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "query"
                ],
                "fn": "displayQuery",
                "implHandler": [
                    "var htmlDisplay=\"<h3>\"+Rubedo.RubedoAutomatedElementsLoc.eligibleContentTypesText+\"</h3><ul>\";\r",
                    "Ext.Array.forEach(query.contentTypes, function(ctid){\r",
                    "    htmlDisplay+=\"<li>\"+Ext.getStore('TCNDepCombo').findRecord(\"id\",ctid).get(\"type\")+\"</li>\";\r",
                    "});\r",
                    "var qVocRule=Rubedo.RubedoAutomatedElementsLoc.eachContentMustVerifyRulesText;\r",
                    "if (query.vocabulariesRule!=\"AND\"){\r",
                    "    qVocRule=Rubedo.RubedoAutomatedElementsLoc.eachContentMustVerifyAtLeastOneRuleText;\r",
                    "}\r",
                    "if (!Ext.isEmpty(query.vocabularies)){\r",
                    "    htmlDisplay+=\"</ul><h3>\"+Rubedo.RubedoAutomatedElementsLoc.taxonomyText+\" : \"+qVocRule+\"</h3>\";\r",
                    "    try {Ext.Object.each(query.vocabularies, function(key, value, myself){\r",
                    "        if(!Ext.isEmpty(value.terms)){\r",
                    "            var myFields = Ext.getCmp(\"assisstantRE2\").query(\"field[vocabularyId=\"+key+\"]\");\r",
                    "            htmlDisplay+=\"<h4>\"+Ext.getStore('TaxonomyForQA').findRecord(\"id\",key).get(\"name\")+\" : \"+myFields[1].getStore().findRecord(\"valeur\",value.rule).get(\"nom\")+\"</h4><ul>\";\r",
                    "            Ext.Array.forEach(value.terms, function(term){\r",
                    "                try{\r",
                    "                    htmlDisplay+=\"<li>\"+myFields[0].getStore().findRecord(\"id\",term).get(\"text\")+\"</li>\";\r",
                    "                } catch (err){\r",
                    "                    htmlDisplay+=\"<li>\"+myFields[0].getStore().getNodeById(term).get(\"text\")+\"</li>\";\r",
                    "                }\r",
                    "            });\r",
                    "            htmlDisplay+=\"</ul>\";\r",
                    "        }\r",
                    "    });} catch(err){\r",
                    "        console.log(\"erreur de recuperation des libellés des termes\");\r",
                    "    }\r",
                    "}\r",
                    "if (!Ext.isEmpty(query.fieldRules)){\r",
                    "    htmlDisplay+=\"<h3>\"+Rubedo.RubedoAutomatedElementsLoc.rulesAndSortsOnFieldsText+\"</h3><ul>\";\r",
                    "    Ext.Array.forEach(query.fieldRules, function(value){\r",
                    "        var key=value.field;\r",
                    "        var interKey=Ext.clone(key);\r",
                    "        try {\r",
                    "            var possiblesArry=Ext.Array.pluck(Ext.Array.pluck(Ext.getStore('champsTCARStore').getRange(),\"data\"),\"valeur\");\r",
                    "            Ext.Array.forEach(possiblesArry,function(possibleField){\r",
                    "                if (possibleField.ruleId==key){\r",
                    "                    interKey=possibleField.label;\r",
                    "                }\r",
                    "            });\r",
                    "\r",
                    "        } catch(err){\r",
                    "            console.log(\"failed to get field label\")\r",
                    "        }\r",
                    "        var tri = \"\";\r",
                    "        var a = value.rule||\"\";\r",
                    "        var b = value.value||\"\";\r",
                    "        var c=Ext.clone(b);\r",
                    "        if(Ext.isDate(c)){c=Ext.Date.format(c, 'j F, Y, G:i');}\r",
                    "        if (!Ext.isEmpty(value.sort)){\r",
                    "            if (value.sort==\"ASC\") {tri=\", \"+Rubedo.RubedoAutomatedElementsLoc.ascSortText;} else {tri=\", \"+Rubedo.RubedoAutomatedElementsLoc.descSortText;}\r",
                    "        }\r",
                    "\r",
                    "        htmlDisplay+=\"<li>\"+interKey+\" \"+a+\" \"+c+\" \"+tri+\"</li>\";\r",
                    "    });\r",
                    "    htmlDisplay+=\"</ul>\";\r",
                    "}\r",
                    "var target= Ext.getCmp(\"querySummaryBox\");\r",
                    "target.update(htmlDisplay);"
                ]
            },
            "name": "displayQuery",
            "designerId": "d3bac03a-cde0-4bb8-8fdf-ef18d886ec1a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mainQueriesGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onMainQueriesGridSelectionChange",
                "implHandler": [
                    "if (Ext.isEmpty(selected)){\r",
                    "    Ext.getCmp(\"queryMainRemoveBtn\").disable();\r",
                    "    Ext.getCmp(\"queryMainEditBtn\").disable();\r",
                    "    Ext.getCmp(\"queryPlayBtn\").disable();\r",
                    "} else if (!selected[0].get(\"readOnly\")){\r",
                    "    Ext.getCmp(\"queryMainRemoveBtn\").enable();\r",
                    "    Ext.getCmp(\"queryMainEditBtn\").enable();\r",
                    "    Ext.getCmp(\"queryPlayBtn\").enable();\r",
                    "} else  {\r",
                    "    Ext.getCmp(\"queryMainRemoveBtn\").disable();\r",
                    "    Ext.getCmp(\"queryMainEditBtn\").disable();\r",
                    "    Ext.getCmp(\"queryPlayBtn\").enable();\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "onMainQueriesGridSelectionChange",
            "designerId": "bc3641f6-fae2-49cc-bbfe-03dbdbe653c4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#queryMainRemoveBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onQueryMainRemoveBtnClick",
                "implHandler": [
                    "\r",
                    "var delCon = Ext.widget('delConfirmZ');\r",
                    "delCon.show();\r",
                    "Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "    Ext.getStore(\"MainQueriesStore\").remove(Ext.getCmp(\"mainQueriesGrid\").getSelectionModel().getLastSelected());\r",
                    "    Ext.getCmp('delConfirmZ').close();\r",
                    "\r",
                    "});  \r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onQueryMainRemoveBtnClick",
            "designerId": "07af0387-d3c5-4652-9b8e-bcb0eea3c16e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#queryMainAddBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onQueryMainAddBtnClick",
                "implHandler": [
                    "Ext.widget(\"assistantRequetage\",{adminMode:true}).show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onQueryMainAddBtnClick",
            "designerId": "4cf919e2-c969-4bb3-b6e3-ff5beb12d841"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#queryMainEditBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onQueryMainEditBtnClick",
                "implHandler": [
                    "var initialQuery = Ext.clone(Ext.getCmp(\"mainQueriesGrid\").getSelectionModel().getLastSelected().get(\"query\"));\r",
                    "var recId = Ext.clone(Ext.getCmp(\"mainQueriesGrid\").getSelectionModel().getLastSelected().get(\"id\"));\r",
                    "Ext.widget(\"assistantRequetage\",{editorMode:true, recId:recId, initialQuery:initialQuery,ROMode:button.ROMode}).show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onQueryMainEditBtnClick",
            "designerId": "8c1b7706-432e-4021-afea-a921443a92d7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "keepInMind"
                ],
                "fn": "adaptToTCSelect",
                "implHandler": [
                    "var simpleMode = Ext.getCmp(\"assistantRequetage\").simpleMode;\r",
                    "var editorMode = Ext.getCmp(\"assistantRequetage\").editorMode;\r",
                    "var initialQuery = Ext.getCmp(\"assistantRequetage\").initialQuery;\r",
                    "Ext.getCmp('assisstantRE2').removeAll();\r",
                    "if(!simpleMode){\r",
                    "    var reglesAnciennes= Ext.clone(Ext.getCmp('assisstantRE4').items.items.length);\r",
                    "    var m =2;\r",
                    "    for (m=2; m<reglesAnciennes; m++){\r",
                    "        Ext.getCmp('assisstantRE4').getComponent(2).destroy();\r",
                    "    }}\r",
                    "\r",
                    "    var storeL = Ext.create('Ext.data.Store', {\r",
                    "        fields: ['valeur', 'nom'],\r",
                    "        data : [\r",
                    "        {valeur: 'AND', nom :'ET'},\r",
                    "        {valeur: 'OR', nom :'OU'}\r",
                    "        ]\r",
                    "    });\r",
                    "\r",
                    "    var lien = Ext.create('Ext.form.ComboBox', {\r",
                    "        anchor: '100%',\r",
                    "        fieldLabel: Rubedo.RubedoAutomatedElementsLoc.relationBetweenRulesText,\r",
                    "        store: storeL,\r",
                    "        value: 'OR',\r",
                    "        name: \"vocabulariesRule\",\r",
                    "        queryMode: 'local',\r",
                    "        displayField: 'nom',\r",
                    "        valueField: 'valeur',\r",
                    "        labelWidth: 150,\r",
                    "        editable: false,\r",
                    "        forceSelect: true,\r",
                    "        allowBlank: false\r",
                    "\r",
                    "    });\r",
                    "    if (simpleMode) {\r",
                    "        lien.setValue('AND');\r",
                    "        lien.setReadOnly(true);\r",
                    "        lien.hide();\r",
                    "    } else if (editorMode&&keepInMind) {\r",
                    "        lien.setValue(initialQuery.vocabulariesRule);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    var typesContenus = Ext.getCmp('champTCRequeteur').getValue();\r",
                    "    if(!Ext.isEmpty(typesContenus)){\r",
                    "        if (simpleMode) {\r",
                    "            typesContenus=[typesContenus];\r",
                    "        }\r",
                    "        var champsRegles = [ ];\r",
                    "        champsRegles.push({nom:Rubedo.RubedoAutomatedElementsLoc.creationText,\r",
                    "            valeur: {\r",
                    "                cType: 'datefield',\r",
                    "                name: 'creation',\r",
                    "                ruleId:'createTime',\r",
                    "                label: Rubedo.RubedoAutomatedElementsLoc.creationText\r",
                    "            }\r",
                    "        });\r",
                    "        champsRegles.push({nom:Rubedo.RubedoAutomatedElementsLoc.lastUpdateText,\r",
                    "            valeur: {\r",
                    "                cType: 'datefield',\r",
                    "                name: 'derniereModification',\r",
                    "                ruleId:'lastUpdateTime',\r",
                    "                label: Rubedo.RubedoAutomatedElementsLoc.lastUpdateText\r",
                    "            }});\r",
                    "            if (typesContenus.length==1) {\r",
                    "                var myThingType=Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]);\r",
                    "                var champsReq = Ext.clone(myThingType.data.champs);\r",
                    "                var champsEligibles = [\"datefield\", \"numberfield\", \"timefield\", \"slider\",\"ratingField\"];\r",
                    "                var champsReqF = Ext.Array.filter(champsReq, function(champ){\r",
                    "                    if (Ext.Array.contains(champsEligibles, champ.cType)) {return true;} else {return false;}\r",
                    "                });\r",
                    "                champsReqF = Ext.Array.map(champsReqF, function(champ){\r",
                    "                    return ({nom:champ.config.fieldLabel, valeur:{cType: champ.cType, ruleId: \"fields.\"+champ.config.name, name: \"fields.\"+champ.config.name, label: champ.config.fieldLabel}});\r",
                    "                });\r",
                    "\r",
                    "                champsRegles = Ext.Array.merge(champsRegles, champsReqF);\r",
                    "\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "\r",
                    "            Ext.getStore('champsTCARStore').loadData(champsRegles);\r",
                    "\r",
                    "\r",
                    "            var vocabulaires = Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]).data.vocabularies;\r",
                    "            var j = 1;\r",
                    "            for (j=1; j<typesContenus.length; j++) {\r",
                    "                var vocabSuivant = Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[j]).data.vocabularies;\r",
                    "                vocabulaires = Ext.Array.intersect(vocabulaires, vocabSuivant);\r",
                    "            }\r",
                    "            if(Ext.isEmpty(vocabulaires)){\r",
                    "                Ext.getCmp('assisstantRE2').add(Ext.widget(\"container\", {styleHtmlContent:true, html:\"<p>\"+Rubedo.RubedoAutomatedElementsLoc.noVocabForTheseCTText+\"</p>\"}));\r",
                    "            }\r",
                    "            if (vocabulaires.length>1) {Ext.getCmp('assisstantRE2').add(lien);}\r",
                    "            //Ext.Array.remove(vocabulaires,\"navigation\");\r",
                    "            var k =0;\r",
                    "            for (k=0; k<vocabulaires.length; k++) {\r",
                    "                try{\r",
                    "\r",
                    "                    var leVocab = Ext.getStore('TaxonomyForQA').findRecord('id', vocabulaires[k]);\r",
                    "                    if (leVocab.get(\"inputAsTree\")){\r",
                    "                        var storeT = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                            model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                            remoteFilter:\"true\",\r",
                    "                            proxy: {\r",
                    "                                type: 'ajax',\r",
                    "                                api: {\r",
                    "                                    read: 'taxonomy-terms/tree'\r",
                    "                                },\r",
                    "                                reader: {\r",
                    "                                    type: 'json',\r",
                    "                                    messageProperty: 'message'\r",
                    "                                },\r",
                    "                                encodeFilters: function(filters) {\r",
                    "                                    var min = [],\r",
                    "                                        length = filters.length,\r",
                    "                                        i = 0;\r",
                    "\r",
                    "                                    for (; i < length; i++) {\r",
                    "                                        min[i] = {\r",
                    "                                            property: filters[i].property,\r",
                    "                                            value   : filters[i].value\r",
                    "                                        };\r",
                    "                                        if (filters[i].type) {\r",
                    "                                            min[i].type = filters[i].type;\r",
                    "                                        }\r",
                    "                                        if (filters[i].operator) {\r",
                    "                                            min[i].operator = filters[i].operator;\r",
                    "                                        }\r",
                    "                                    }\r",
                    "                                    return this.applyEncoding(min);\r",
                    "                                }\r",
                    "                            },\r",
                    "                            filters: {\r",
                    "                                property: 'vocabularyId',\r",
                    "                                value: leVocab.get(\"id\")\r",
                    "                            }\r",
                    "\r",
                    "                        });\r",
                    "                        var toUse=\"Ext.ux.TreePicker\";\r",
                    "                        if((leVocab.get(\"multiSelect\"))&&(!simpleMode)){toUse=\"Ext.ux.TreeMultiPicker\";}\r",
                    "                        if(leVocab.get(\"id\")=='navigation'){storeT.getProxy().api={read:\"taxonomy-terms/navigation-tree?add-current-page=true\"};}\r",
                    "                        storeT.load();\r",
                    "                        var selecteur = Ext.create(toUse, {\r",
                    "                            name:leVocab.get(\"id\"),\r",
                    "                            fieldLabel: leVocab.get(\"name\"),\r",
                    "                            vocabularyId:leVocab.get(\"id\"),\r",
                    "                            isVocabularyField:true,\r",
                    "                            usedRole:\"terms\",\r",
                    "                            store: storeT,\r",
                    "                            anchor:\"100%\",\r",
                    "                            ignoreIsNotPage:true,\r",
                    "                            displayField:\"text\",\r",
                    "                            allowBlank: !leVocab.data.mandatory,\r",
                    "                            plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")]\r",
                    "                        });\r",
                    "\r",
                    "\r",
                    "                    } else {\r",
                    "                        var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "                            model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                            remoteFilter:\"true\",\r",
                    "                            pageSize:2000,\r",
                    "                            proxy: {\r",
                    "                                type: 'ajax',\r",
                    "                                api: {\r",
                    "                                    read: 'taxonomy-terms'\r",
                    "                                },\r",
                    "                                reader: {\r",
                    "                                    type: 'json',\r",
                    "                                    messageProperty: 'message',\r",
                    "                                    root: 'data'\r",
                    "                                },\r",
                    "                                encodeFilters: function(filters) {\r",
                    "                                    var min = [],\r",
                    "                                        length = filters.length,\r",
                    "                                        i = 0;\r",
                    "\r",
                    "                                    for (; i < length; i++) {\r",
                    "                                        min[i] = {\r",
                    "                                            property: filters[i].property,\r",
                    "                                            value   : filters[i].value\r",
                    "                                        };\r",
                    "                                        if (filters[i].type) {\r",
                    "                                            min[i].type = filters[i].type;\r",
                    "                                        }\r",
                    "                                        if (filters[i].operator) {\r",
                    "                                            min[i].operator = filters[i].operator;\r",
                    "                                        }\r",
                    "                                    }\r",
                    "                                    return this.applyEncoding(min);\r",
                    "                                }\r",
                    "                            },\r",
                    "                            filters: {\r",
                    "                                property: 'vocabularyId',\r",
                    "                                value: leVocab.get(\"id\")\r",
                    "                            }\r",
                    "\r",
                    "                        });\r",
                    "                        storeT.on(\"beforeload\", function(s,o){\r",
                    "                            o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "                            if (!Ext.isEmpty(o.params.comboQuery)){\r",
                    "\r",
                    "                                var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                                    property:\"text\",\r",
                    "                                    value:o.params.comboQuery,\r",
                    "                                    operator:'like'\r",
                    "                                });\r",
                    "\r",
                    "                                o.filters.push(newFilter);\r",
                    "\r",
                    "                            }\r",
                    "\r",
                    "\r",
                    "                        });\r",
                    "                        var selecteur = Ext.widget('comboboxselect', {\r",
                    "                            name:leVocab.get(\"id\"),\r",
                    "                            anchor:\"100%\",\r",
                    "                            vocabularyId:leVocab.get(\"id\"),\r",
                    "                            isVocabularyField:true,\r",
                    "                            usedRole:\"terms\",\r",
                    "                            fieldLabel: leVocab.get(\"name\"),\r",
                    "                            autoScroll: false,\r",
                    "                            store: storeT,\r",
                    "                            queryMode: 'remote',\r",
                    "                            queryParam: 'comboQuery',\r",
                    "                            minChars:3,\r",
                    "                            displayField: 'text',\r",
                    "                            valueField: 'id',\r",
                    "                            filterPickList: true,\r",
                    "                            typeAhead: true,\r",
                    "                            forceSelection: !leVocab.data.expandable,\r",
                    "                            createNewOnEnter: leVocab.data.expandable,\r",
                    "                            multiSelect: leVocab.data.multiSelect,\r",
                    "                            allowBlank: !leVocab.data.mandatory\r",
                    "                        });\r",
                    "\r",
                    "                    }\r",
                    "\r",
                    "                    var storeR = Ext.create('Ext.data.Store', {\r",
                    "                        fields: ['valeur', 'nom'],\r",
                    "                        data : [\r",
                    "                        {valeur: 'all', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleAllText},\r",
                    "                        {valeur: 'allRec', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleAllRecText},\r",
                    "                        {valeur: 'some', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleSomeText},\r",
                    "                        {valeur: 'someRec', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleSomeREcText},\r",
                    "                        {valeur: 'not', nom : Rubedo.RubedoAutomatedElementsLoc.tRuleNotText},\r",
                    "                        {valeur: 'notRec', nom : Rubedo.RubedoAutomatedElementsLoc.tRuleNotRecText}\r",
                    "                        ]\r",
                    "                    });\r",
                    "\r",
                    "                    var regle = Ext.create('Ext.form.ComboBox', {\r",
                    "                        name:leVocab.get(\"id\")+\"QueryRule\",\r",
                    "                        anchor: '100%',\r",
                    "                        vocabularyId:leVocab.get(\"id\"),\r",
                    "                        isVocabularyField:true,\r",
                    "                        usedRole:\"rule\",\r",
                    "                        fieldLabel: Rubedo.RubedoAutomatedElementsLoc.ruleText,\r",
                    "                        store: storeR,\r",
                    "                        queryMode: 'local',\r",
                    "                        displayField: 'nom',\r",
                    "                        valueField: 'valeur',\r",
                    "                        editable: false,\r",
                    "                        value: 'some',\r",
                    "                        forceSelect: true,\r",
                    "                        allowBlank: false\r",
                    "\r",
                    "                    });\r",
                    "                    if ((keepInMind)&&(editorMode)&&(!Ext.isEmpty(initialQuery.vocabularies[leVocab.get(\"id\")]))){\r",
                    "                        regle.setValue(initialQuery.vocabularies[leVocab.get(\"id\")].rule[0]);\r",
                    "                        selecteur.setValue(initialQuery.vocabularies[leVocab.get(\"id\")].terms);\r",
                    "                    }\r",
                    "                    if (simpleMode) {\r",
                    "                        regle.setValue(\"all\");\r",
                    "                        regle.setReadOnly(true);\r",
                    "                        regle.hide();\r",
                    "                        selecteur.multiSelect=false;\r",
                    "                        var enrobage=Ext.widget(\"container\", {anchor:\"100%\", layout:\"anchor\"});\r",
                    "                    } else {\r",
                    "\r",
                    "\r",
                    "                        var enrobage = Ext.widget('fieldset', {\r",
                    "                            title : leVocab.get(\"name\"),\r",
                    "                            collapsible: true,\r",
                    "                            collapsed:true\r",
                    "\r",
                    "\r",
                    "                        });}\r",
                    "                        enrobage.add(selecteur);\r",
                    "                        enrobage.add(regle);\r",
                    "\r",
                    "                        Ext.getCmp('assisstantRE2').add(enrobage);\r",
                    "\r",
                    "                    }catch(err) {console.log(\"vocabulary error\");}\r",
                    "\r",
                    "                    }    \r",
                    "                }\r",
                    "\r",
                    ""
                ]
            },
            "name": "adaptToTCSelect",
            "designerId": "2541f598-8a9e-400c-bb19-64d5790c6c38"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mainQueriesGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onMainQueriesGridItemDblClick",
                "implHandler": [
                    "Ext.getCmp(\"queryMainEditBtn\").fireEvent(\"click\",Ext.getCmp(\"queryMainEditBtn\"));"
                ],
                "name": "itemdblclick",
                "scope": "me"
            },
            "name": "onMainQueriesGridItemDblClick",
            "designerId": "a4cf7b54-f02b-4620-bd41-aa9492f47683"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "fieldRules"
                ],
                "fn": "restoreFieldRules",
                "implHandler": [
                    "if (Ext.isObject(fieldRules)){",
                    "    var arrayFixer=[ ];",
                    "    Ext.Object.each(fieldRules, function(key, value, myself) {",
                    "        var newFix=value;",
                    "        newFix.field=key;",
                    "        arrayFixer.push(newFix);",
                    "    });",
                    "    fieldRules=arrayFixer;",
                    "}",
                    "Ext.Array.forEach(fieldRules, function(value){",
                    "    var key=value.field;",
                    "    try{",
                    "        if (!Ext.isEmpty(value.rule)) {",
                    "",
                    "            var tester = Ext.getCmp('createurReglesChampsAR').getStore().getRange()[Ext.getCmp('createurReglesChampsAR').getStore().findBy(function(record){",
                    "                if (record.data.valeur.ruleId==key) {",
                    "                    return(true);",
                    "                }",
                    "            })];",
                    "            if (!Ext.isEmpty(tester)){",
                    "                var nRegle= tester.data.valeur;",
                    "                var enrobage = Ext.widget('regleChampAR');",
                    "                enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);",
                    "                var mainThing = Ext.widget(nRegle.cType, {flex:1, mame:nRegle.name});",
                    "                var insertus=Ext.clone(value.value);",
                    "                if(mainThing.isXType(\"datefield\")){ insertus= new Date(value.value);}",
                    "                mainThing.setValue(insertus);",
                    "                mainThing.name=nRegle.name;",
                    "                mainThing.usedRole=\"value\";",
                    "                mainThing.ruleId=nRegle.ruleId;",
                    "                mainThing.isAddedRuleField=true;",
                    "                enrobage.getComponent(0).insert(1,mainThing);",
                    "                if (nRegle.cType== 'checkboxfield') {",
                    "                    var operateur= Ext.widget('tbtext', {text: ' = '});",
                    "                }",
                    "                else{",
                    "                    var storeOper = Ext.create('Ext.data.Store', {",
                    "                        fields: ['operateur'],",
                    "                        data : [",
                    "                            {\"operateur\":\"=\"},",
                    "                            {\"operateur\":\"<=\"},",
                    "                            {\"operateur\":\"<\"},",
                    "                            {\"operateur\":\">=\"},",
                    "                            {\"operateur\":\">\"},",
                    "                            {\"operateur\":\"!=\"}",
                    "                        ]",
                    "                    });",
                    "                    var operateur= Ext.create('Ext.form.ComboBox', {",
                    "                        name:nRegle.name+\"Operator\",",
                    "                        store: storeOper,",
                    "                        usedRole:\"rule\",",
                    "                        isAddedRuleField:true,",
                    "                        ruleId:nRegle.ruleId,",
                    "                        flex:1,",
                    "                        queryMode: 'local',",
                    "                        displayField: 'operateur',",
                    "                        valueField: 'operateur',",
                    "                        editable: false,",
                    "                        multiSelect:false,",
                    "                        allowBlank:false,",
                    "                        forceSelect: true",
                    "                    });",
                    "                    operateur.setValue(value.rule);",
                    "",
                    "                }",
                    "                enrobage.getComponent(0).insert(1,operateur);",
                    "                if (Ext.getCmp('assisstantRE4').items.items.length>2){",
                    "                    enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>ET </b>'}));",
                    "                }",
                    "",
                    "                Ext.getCmp('assisstantRE4').add(enrobage);",
                    "            }",
                    "",
                    "",
                    "        }",
                    "        if (!Ext.isEmpty(value.sort)) {",
                    "",
                    "            var tester = Ext.getStore(\"champsTCARStore\").getRange()[Ext.getStore(\"champsTCARStore\").findBy(function(record){",
                    "                if (record.data.valeur.ruleId==key) {",
                    "                    return(true);",
                    "                }",
                    "            })];",
                    "            if (!Ext.isEmpty(tester)){",
                    "                var nRegle= tester.data.valeur;",
                    "                var enrobage = Ext.widget('regleChampAR');",
                    "                enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);",
                    "",
                    "",
                    "                var storeOper = Ext.create('Ext.data.Store', {",
                    "                    fields: ['operateur', 'label'],",
                    "                    data : [",
                    "                        {\"operateur\":\"ASC\", \"label\": Rubedo.RubedoAutomatedElementsLoc.ascText},",
                    "                        {\"operateur\":\"DESC\", \"label\": Rubedo.RubedoAutomatedElementsLoc.descText}",
                    "                    ]",
                    "                });",
                    "                var operateur= Ext.create('Ext.form.ComboBox', {",
                    "                    name:nRegle.name+\"Direction\",",
                    "                    store: storeOper,",
                    "                    usedRole:\"sort\",",
                    "                    isAddedRuleField:true,",
                    "                    ruleId:nRegle.ruleId,",
                    "                    flex:1,",
                    "                    queryMode: 'local',",
                    "                    displayField: 'label',",
                    "                    valueField: 'operateur',",
                    "                    editable: false,",
                    "                    multiSelect:false,",
                    "                    allowBlank:false,",
                    "                    forceSelect: true",
                    "                });",
                    "",
                    "                operateur.setValue(value.sort);",
                    "",
                    "                enrobage.getComponent(0).insert(1,operateur);",
                    "                if (Ext.getCmp('assisstantRE5').items.items.length>2){",
                    "                    enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>'+Rubedo.RubedoAutomatedElementsLoc.thenText+' </b>'}));",
                    "                }",
                    "",
                    "                Ext.getCmp('assisstantRE5').add(enrobage);",
                    "            }",
                    "",
                    "        }",
                    "    } catch(err){console.log(\"field error\");}});"
                ]
            },
            "name": "restoreFieldRules",
            "designerId": "04b065c4-7e4b-4c5e-8715-da8d42bba5ad"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#queryPlayBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onQueryPlayBtnClick",
                "implHandler": [
                    "Ext.widget(\"QuerySimWindow\",{queryId:Ext.getCmp(\"mainQueriesGrid\").getSelectionModel().getLastSelected().get(\"id\")}).show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onQueryPlayBtnClick",
            "designerId": "a6717c40-6670-4a09-959b-5184156753b3"
        }
    ]
}