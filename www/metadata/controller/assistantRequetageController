{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "assistantRequetageController",
        "views": [
            "assisstantRE4",
            "regleChampAR"
        ]
    },
    "id": "ExtBox1-ext-gen43952",
    "designerId": "da7dabb6-9585-4ae7-8847-4b4d76cdb27e",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "suivant",
                "fn": "suivant",
                "implHandler": [
                    "var me=this;\r",
                    "var simpleMode = Ext.getCmp(\"assistantRequetage\").simpleMode;\r",
                    "var initialQuery = Ext.getCmp(\"assistantRequetage\").initialQuery;\r",
                    "var editorMode = Ext.getCmp(\"assistantRequetage\").editorMode;\r",
                    "var nextOK = 1;\r",
                    "var etapeC = button.up().up().getLayout().getActiveItem().items.items;\r",
                    "var i = 0;\r",
                    "for (i=0;i<etapeC.length; i++) {\r",
                    "    if ((etapeC[i].isXType('field'))&&(!(etapeC[i].isValid()))) { nextOK = 0;}\r",
                    "}\r",
                    "if (nextOK == 1) {\r",
                    "\r",
                    "    var etape = button.up().up().getLayout().getActiveItem();\r",
                    "    if (etape.id=='assisstantRE5'){\r",
                    "        this.displayQuery(this.readQuery());\r",
                    "    }\r",
                    "    else if (etape.id=='assisstantRE1') {\r",
                    "        var keepInMind=false;\r",
                    "        if((editorMode)&&(Ext.getCmp('champTCRequeteur').getValue().toString()==initialQuery.contentTypes.toString())){\r",
                    "            keepInMind=true;\r",
                    "        }\r",
                    "\r",
                    "        me.adaptToTCSelect(keepInMind);\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    var tousET= Ext.getCmp('assistantRequetage').getLayout().getLayoutItems().length;\r",
                    "    var suivET= Ext.getCmp('assistantRequetage').getLayout().getNext().etape;\r",
                    "    if (suivET==tousET) { Ext.getCmp('boutonNextRequeteur').hide();}\r",
                    "    else if (suivET==2) { Ext.getCmp('boutonPrevRequeteur').show();}\r",
                    "    if (Ext.isDefined(suivET)) {\r",
                    "        button.up().up().getLayout().next();\r",
                    "\r",
                    "        Ext.getCmp('progressAR').updateProgress(suivET/tousET, 'Etape '+suivET+' sur '+tousET);\r",
                    "    }\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonNextRequeteur"
            },
            "designerId": "b83c1479-9cbe-478c-bde1-54b5275f3a77"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "precedent",
                "fn": "precedent",
                "implHandler": [
                    "var tousET= Ext.getCmp('assistantRequetage').getLayout().getLayoutItems().length;\r",
                    "var suivET= Ext.getCmp('assistantRequetage').getLayout().getPrev().etape;\r",
                    "if (suivET==tousET-1) { Ext.getCmp('boutonNextRequeteur').show();}\r",
                    "else if (suivET==1) { Ext.getCmp('boutonPrevRequeteur').hide();}\r",
                    "if (Ext.isDefined(suivET)) {\r",
                    "    button.up().up().getLayout().prev();\r",
                    "    Ext.getCmp('progressAR').updateProgress(suivET/tousET, 'Etape '+suivET+' sur '+tousET);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonPrevRequeteur"
            },
            "designerId": "4667034e-54b1-41f0-9662-9b004a9c8479"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "enleveRegle",
                "fn": "enleveRegle",
                "implHandler": [
                    "if (button.up().up().up().items.items.indexOf(button.up().up())==2) {\r",
                    "    if (!Ext.isEmpty(button.up().up().up().getComponent(3))){\r",
                    "        button.up().up().up().getComponent(3).getComponent(0).getComponent(0).destroy();\r",
                    "    }\r",
                    "}\r",
                    "button.up().up().destroy();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "[itemId='boutonEnleveRegleAR']"
            },
            "designerId": "20f3e13d-6f29-47e0-ba81-ac64ffef193e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectAllTC",
                "fn": "selectAllTC",
                "implHandler": [
                    "Ext.getCmp('champTCRequeteur').select(Ext.getCmp('champTCRequeteur').getStore().data.items);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonSelectAllTCAR"
            },
            "designerId": "c95df528-b694-421e-b11a-54c5cba5aea0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "ajoutRegleChamp",
                "fn": "ajoutRegleChamp",
                "implHandler": [
                    "var nRegle= Ext.getCmp('createurReglesChampsAR').getValue();\r",
                    "if (nRegle !== null) {\r",
                    "    var enrobage = Ext.widget('regleChampAR');\r",
                    "    enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);\r",
                    "    var mainThing = Ext.widget(nRegle.cType, {flex:1, mame:nRegle.name});\r",
                    "    mainThing.name=nRegle.name;\r",
                    "    mainThing.usedRole=\"value\";\r",
                    "    mainThing.ruleId=nRegle.ruleId;\r",
                    "    mainThing.isAddedRuleField=true;\r",
                    "    enrobage.getComponent(0).insert(1,mainThing);\r",
                    "    if (nRegle.cType== 'checkboxfield') {\r",
                    "        var operateur= Ext.widget('tbtext', {text: ' = '});\r",
                    "    }\r",
                    "    else{\r",
                    "        var storeOper = Ext.create('Ext.data.Store', {\r",
                    "            fields: ['operateur'],\r",
                    "            data : [\r",
                    "            {\"operateur\":\"=\"},\r",
                    "            {\"operateur\":\"<=\"},\r",
                    "            {\"operateur\":\"<\"},\r",
                    "            {\"operateur\":\">=\"},\r",
                    "            {\"operateur\":\">\"},\r",
                    "            {\"operateur\":\"!=\"}\r",
                    "            ]\r",
                    "        });\r",
                    "        var operateur= Ext.create('Ext.form.ComboBox', {\r",
                    "            name:nRegle.name+\"Operator\",\r",
                    "            store: storeOper,\r",
                    "            usedRole:\"rule\",\r",
                    "            isAddedRuleField:true,\r",
                    "            ruleId:nRegle.ruleId,\r",
                    "            flex:1,\r",
                    "            queryMode: 'local',\r",
                    "            displayField: 'operateur',\r",
                    "            valueField: 'operateur',\r",
                    "            editable: false,\r",
                    "            multiSelect:false,\r",
                    "            allowBlank:false,\r",
                    "            forceSelect: true\r",
                    "        });\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "    enrobage.getComponent(0).insert(1,operateur);\r",
                    "    if (Ext.getCmp('assisstantRE4').items.items.length>2){\r",
                    "        enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>ET </b>'}));\r",
                    "    }\r",
                    "\r",
                    "    Ext.getCmp('assisstantRE4').add(enrobage);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonCreateurReglesChampsAR"
            },
            "designerId": "0889cbbf-053a-469f-99aa-a047a88adba7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onQueryBuildSaveBtnClick",
                "fn": "onQueryBuildSaveBtnClick",
                "implHandler": [
                    "if ((Ext.getCmp(\"assistantRequetage\").simpleMode)||(button.up().getForm().isValid())){\r",
                    "    var result=this.readQuery();\r",
                    "    if (Ext.getCmp(\"assistantRequetage\").editorMode){\r",
                    "        if (Ext.getCmp(\"assistantRequetage\").directToCombo){\r",
                    "            var usedStore=Ext.getStore(\"QueriesStore\");\r",
                    "        } else {\r",
                    "            var usedStore=Ext.getStore(\"MainQueriesStore\");\r",
                    "        }\r",
                    "\r",
                    "        var editedOne=usedStore.findRecord(\"id\",Ext.getCmp(\"assistantRequetage\").recId);\r",
                    "        editedOne.beginEdit();\r",
                    "        editedOne.set(\"query\", result);\r",
                    "        if (Ext.getCmp(\"assistantRequetage\").simpleMode){\r",
                    "            editedOne.set(\"name\", \"Requête simple\");\r",
                    "        } else {\r",
                    "            editedOne.set(\"name\", result.queryName);\r",
                    "        }\r",
                    "        editedOne.endEdit();\r",
                    "        Ext.getStore(\"QueriesStore\").addListener(\"update\", function(){\r",
                    "            Ext.getCmp(Ext.getCmp(\"assistantRequetage\").mainFieldId).select(editedOne);\r",
                    "        },this,{single:true});\r",
                    "        }else {\r",
                    "            var newQuery = Ext.create(\"Rubedo.model.queryDataModel\", {\r",
                    "                name:result.queryName,\r",
                    "                type:\"advanced\",\r",
                    "                query:result,\r",
                    "                averageDuration:0,\r",
                    "                count:0,\r",
                    "                usage:[]\r",
                    "            });\r",
                    "            if (Ext.getCmp(\"assistantRequetage\").simpleMode){\r",
                    "                newQuery.set(\"type\", \"simple\");\r",
                    "                newQuery.set(\"name\", \"Requête simple\");\r",
                    "            }\r",
                    "            if (Ext.getCmp(\"assistantRequetage\").adminMode){\r",
                    "                \r",
                    "                Ext.getStore(\"MainQueriesStore\").add(newQuery);\r",
                    "                Ext.getStore(\"MainQueriesStore\").addListener(\"datachanged\", function(){\r",
                    "                    Ext.getCmp(\"mainQueriesGrid\").getSelectionModel().select(newQuery);\r",
                    "                },this, {single:true});\r",
                    "            } else {\r",
                    "                Ext.getStore(\"QueriesStore\").add(newQuery);\r",
                    "                Ext.getStore(\"QueriesStore\").addListener(\"update\", function(){\r",
                    "                    Ext.getCmp(Ext.getCmp(\"assistantRequetage\").mainFieldId).select(newQuery);\r",
                    "                },this,{single:true});\r",
                    "                }\r",
                    "            }\r",
                    "            Ext.getCmp(\"assistantRequetage\").close();\r",
                    "        }"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#queryBuildSaveBtn"
            },
            "designerId": "c8e41169-098f-4231-9aa3-cc2f77cbe89d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onBoutonCreateurTrisChampsARClick",
                "fn": "onBoutonCreateurTrisChampsARClick",
                "implHandler": [
                    "var nRegle= Ext.getCmp('createurTrisChampsAR').getValue();\r",
                    "if (nRegle !== null) {\r",
                    "    var enrobage = Ext.widget('regleChampAR');\r",
                    "    enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);\r",
                    "\r",
                    "\r",
                    "    var storeOper = Ext.create('Ext.data.Store', {\r",
                    "        fields: ['operateur', 'label'],\r",
                    "        data : [\r",
                    "        {\"operateur\":\"ASC\", \"label\": \"Croissant\"},\r",
                    "        {\"operateur\":\"DESC\", \"label\": \"Decroissant\"}\r",
                    "        ]\r",
                    "    });\r",
                    "    var operateur= Ext.create('Ext.form.ComboBox', {\r",
                    "        name:nRegle.name+\"Direction\",\r",
                    "        store: storeOper,\r",
                    "        usedRole:\"sort\",\r",
                    "        isAddedRuleField:true,\r",
                    "        ruleId:nRegle.ruleId,\r",
                    "        flex:1,\r",
                    "        queryMode: 'local',\r",
                    "        displayField: 'label',\r",
                    "        valueField: 'operateur',\r",
                    "        editable: false,\r",
                    "        multiSelect:false,\r",
                    "        allowBlank:false,\r",
                    "        forceSelect: true\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "\r",
                    "    enrobage.getComponent(0).insert(1,operateur);\r",
                    "    if (Ext.getCmp('assisstantRE5').items.items.length>2){\r",
                    "        enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>Puis </b>'}));\r",
                    "    }\r",
                    "\r",
                    "    Ext.getCmp('assisstantRE5').add(enrobage);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonCreateurTrisChampsAR"
            },
            "designerId": "f1495402-66f3-4688-9ffc-1f0fc1301fa9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "readQuery",
                "fn": "readQuery",
                "implHandler": [
                    "var mainWin= Ext.getCmp(\"assistantRequetage\");\r",
                    "var result = {};\r",
                    "result.vocabularies={ };\r",
                    "result.fieldRules={ };\r",
                    "Ext.Array.forEach(mainWin.query(\"field\"),function(field){\r",
                    "    if (field.submitValue){\r",
                    "        if (field.isVocabularyField) {\r",
                    "            if (Ext.isEmpty(result.vocabularies[field.vocabularyId])){\r",
                    "                result.vocabularies[field.vocabularyId]={ };                \r",
                    "            }\r",
                    "            if (Ext.isArray(field.getValue())){\r",
                    "                result.vocabularies[field.vocabularyId][field.usedRole]=field.getValue();\r",
                    "            } else {\r",
                    "                result.vocabularies[field.vocabularyId][field.usedRole]=[field.getValue()];\r",
                    "            }\r",
                    "\r",
                    "        } else if (field.isAddedRuleField){\r",
                    "            if (Ext.isEmpty(result.fieldRules[field.ruleId])){\r",
                    "                result.fieldRules[field.ruleId]={ };           \r",
                    "            }\r",
                    "            result.fieldRules[field.ruleId][field.usedRole]=field.getValue();\r",
                    "        } else { \r",
                    "            result[field.name]=field.getValue();\r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    "if (!Ext.isArray(result.contentTypes)){\r",
                    "    result.contentTypes=[result.contentTypes];\r",
                    "}\r",
                    "return(result);"
                ]
            },
            "designerId": "f1e97592-b58d-4d07-9a6d-1b36966a0aca"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "displayQuery",
                "fn": "displayQuery",
                "designer|params": [
                    "query"
                ],
                "implHandler": [
                    "var htmlDisplay=\"<h3>Types de contenus eligibles</h3><ul>\";\r",
                    "Ext.Array.forEach(query.contentTypes, function(ctid){\r",
                    "    htmlDisplay+=\"<li>\"+Ext.getStore('TCNDepCombo').findRecord(\"id\",ctid).get(\"type\")+\"</li>\";\r",
                    "});\r",
                    "var qVocRule=\"chaque contenu doit verifier toutes les règles suivantes\";\r",
                    "if (query.vocabulariesRule!=\"AND\"){\r",
                    "    qVocRule=\"chaque contenu doit verifier au moins une des règles suivantes\";\r",
                    "}\r",
                    "if (!Ext.isEmpty(query.vocabularies)){\r",
                    "htmlDisplay+=\"</ul><h3>Taxonomie : \"+qVocRule+\"</h3>\";\r",
                    "try {Ext.Object.each(query.vocabularies, function(key, value, myself){\r",
                    "    if(!Ext.isEmpty(value.terms)){\r",
                    "        var myFields = Ext.getCmp(\"assisstantRE2\").query(\"field[vocabularyId=\"+key+\"]\");\r",
                    "        htmlDisplay+=\"<h4>\"+Ext.getStore('TaxonomyForQA').findRecord(\"id\",key).get(\"name\")+\" : \"+myFields[1].getStore().findRecord(\"valeur\",value.rule).get(\"nom\")+\"</h4><ul>\";\r",
                    "        Ext.Array.forEach(value.terms, function(term){\r",
                    "            htmlDisplay+=\"<li>\"+myFields[0].getStore().findRecord(\"id\",term).get(\"text\")+\"</li>\";\r",
                    "        });\r",
                    "        htmlDisplay+=\"</ul>\";\r",
                    "    }\r",
                    "});} catch(err){\r",
                    "    console.log(\"erreur de recuperation des libellés des termes\");\r",
                    "}\r",
                    "}\r",
                    "if (!Ext.isEmpty(query.fieldRules)){\r",
                    "htmlDisplay+=\"<h3>Règles et tris sur les champs des contenus</h3><ul>\";\r",
                    "Ext.Object.each(query.fieldRules, function(key, value, myself){\r",
                    "    var tri = \"\";\r",
                    "    var a = value.rule||\"\";\r",
                    "    var b = value.value||\"\";\r",
                    "    var c=Ext.clone(b);\r",
                    "    if(Ext.isDate(c)){c=Ext.Date.format(c, 'j F, Y, G:i');}\r",
                    "    if (!Ext.isEmpty(value.sort)){\r",
                    "        if (value.sort==\"ASC\") {tri=\", tri croissant\";} else {tri=\", tri decroissant\";}\r",
                    "    }\r",
                    "\r",
                    "    htmlDisplay+=\"<li>\"+key+\" \"+a+\" \"+c+\" \"+tri+\"</li>\";\r",
                    "});\r",
                    "htmlDisplay+=\"</ul>\";\r",
                    "}\r",
                    "var target= Ext.getCmp(\"querySummaryBox\");\r",
                    "console.log(query);\r",
                    "target.update(htmlDisplay);"
                ]
            },
            "designerId": "d3bac03a-cde0-4bb8-8fdf-ef18d886ec1a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onMainQueriesGridSelectionChange",
                "fn": "onMainQueriesGridSelectionChange",
                "implHandler": [
                    "if (Ext.isEmpty(selections)){\r",
                    "    Ext.getCmp(\"queryMainRemoveBtn\").disable();\r",
                    "    Ext.getCmp(\"queryMainEditBtn\").disable();\r",
                    "} else if (!selections[0].get(\"readOnly\")){\r",
                    "    Ext.getCmp(\"queryMainRemoveBtn\").enable();\r",
                    "    Ext.getCmp(\"queryMainEditBtn\").enable();\r",
                    "} else  {\r",
                    "    Ext.getCmp(\"queryMainRemoveBtn\").disable();\r",
                    "    Ext.getCmp(\"queryMainEditBtn\").disable();\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#mainQueriesGrid"
            },
            "designerId": "bc3641f6-fae2-49cc-bbfe-03dbdbe653c4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onQueryMainRemoveBtnClick",
                "fn": "onQueryMainRemoveBtnClick",
                "implHandler": [
                    "\r",
                    "var delCon = Ext.widget('delConfirmZ');\r",
                    "delCon.show();\r",
                    "Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "    Ext.getStore(\"MainQueriesStore\").remove(Ext.getCmp(\"mainQueriesGrid\").getSelectionModel().getLastSelected());\r",
                    "    Ext.getCmp('delConfirmZ').close();\r",
                    "\r",
                    "});  \r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#queryMainRemoveBtn"
            },
            "designerId": "07af0387-d3c5-4652-9b8e-bcb0eea3c16e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onQueryMainAddBtnClick",
                "fn": "onQueryMainAddBtnClick",
                "implHandler": [
                    "Ext.widget(\"assistantRequetage\",{adminMode:true}).show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#queryMainAddBtn"
            },
            "designerId": "4cf919e2-c969-4bb3-b6e3-ff5beb12d841"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onQueryMainEditBtnClick",
                "fn": "onQueryMainEditBtnClick",
                "implHandler": [
                    "var initialQuery = Ext.clone(Ext.getCmp(\"mainQueriesGrid\").getSelectionModel().getLastSelected().get(\"query\"));\r",
                    "var recId = Ext.clone(Ext.getCmp(\"mainQueriesGrid\").getSelectionModel().getLastSelected().get(\"id\"));\r",
                    "Ext.widget(\"assistantRequetage\",{editorMode:true, recId:recId, initialQuery:initialQuery,ROMode:button.ROMode}).show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#queryMainEditBtn"
            },
            "designerId": "8c1b7706-432e-4021-afea-a921443a92d7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "adaptToTCSelect",
                "fn": "adaptToTCSelect",
                "designer|params": [
                    "keepInMind"
                ],
                "implHandler": [
                    "var simpleMode = Ext.getCmp(\"assistantRequetage\").simpleMode;\r",
                    "var editorMode = Ext.getCmp(\"assistantRequetage\").editorMode;\r",
                    "var initialQuery = Ext.getCmp(\"assistantRequetage\").initialQuery;\r",
                    "Ext.getCmp('assisstantRE2').removeAll();\r",
                    "if(!simpleMode){\r",
                    "    var reglesAnciennes= Ext.clone(Ext.getCmp('assisstantRE4').items.items.length);\r",
                    "    var m =2;\r",
                    "    for (m=2; m<reglesAnciennes; m++){\r",
                    "        Ext.getCmp('assisstantRE4').getComponent(2).destroy();\r",
                    "    }}\r",
                    "\r",
                    "    var storeL = Ext.create('Ext.data.Store', {\r",
                    "        fields: ['valeur', 'nom'],\r",
                    "        data : [\r",
                    "        {valeur: 'AND', nom :'ET'},\r",
                    "        {valeur: 'OR', nom :'OU'}\r",
                    "        ]\r",
                    "    });\r",
                    "\r",
                    "    var lien = Ext.create('Ext.form.ComboBox', {\r",
                    "        anchor: '100%',\r",
                    "        fieldLabel: 'Relation entre les règles ',\r",
                    "        store: storeL,\r",
                    "        value: 'OR',\r",
                    "        name: \"vocabulariesRule\",\r",
                    "        queryMode: 'local',\r",
                    "        displayField: 'nom',\r",
                    "        valueField: 'valeur',\r",
                    "        labelWidth: 150,\r",
                    "        editable: false,\r",
                    "        forceSelect: true,\r",
                    "        allowBlank: false\r",
                    "\r",
                    "    });\r",
                    "    if (simpleMode) {\r",
                    "        lien.setValue('AND');\r",
                    "        lien.setReadOnly(true);\r",
                    "        lien.hide();\r",
                    "    } else if (editorMode&&keepInMind) {\r",
                    "        lien.setValue(initialQuery.vocabulariesRule);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    var typesContenus = Ext.getCmp('champTCRequeteur').getValue();\r",
                    "    if (simpleMode) {\r",
                    "        typesContenus=[typesContenus];\r",
                    "    }\r",
                    "    var champsRegles = [ ];\r",
                    "    champsRegles.push({nom:'Création',\r",
                    "        valeur: {\r",
                    "            cType: 'datefield',\r",
                    "            name: 'creation',\r",
                    "            ruleId:'createTime',\r",
                    "            label: 'Création'\r",
                    "        }\r",
                    "    });\r",
                    "    champsRegles.push({nom:'Dernière modification',\r",
                    "        valeur: {\r",
                    "            cType: 'datefield',\r",
                    "            name: 'derniereModification',\r",
                    "            ruleId:'lastUpdateTime',\r",
                    "            label: 'Dernière modification'\r",
                    "        }});\r",
                    "        if (typesContenus.length<2) {\r",
                    "            var myThingType=Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]);\r",
                    "            var champsReq = Ext.clone(myThingType.data.champs);\r",
                    "            var champsEligibles = [\"Ext.form.field.Date\", \"Ext.form.field.Time\", \"Ext.form.field.Checkbox\", \"Ext.form.field.Number\"];\r",
                    "            var champsReqF = Ext.Array.filter(champsReq, function(champ){\r",
                    "                if (Ext.Array.contains(champsEligibles, champ.cType)) {return true;} else {return false;}\r",
                    "            });\r",
                    "            champsReqF = Ext.Array.map(champsReqF, function(champ){\r",
                    "                return ({nom:typesContenus[0]+ ' > '+champ.config.fieldLabel, valeur:{cType: champ.cType, ruleId: myThingType.get(\"id\")+'>>'+champ.config.name, name: champ.config.name, label: myThingType.get(\"type\")+' > '+champ.config.fieldLabel}});\r",
                    "            });\r",
                    "\r",
                    "            champsRegles = Ext.Array.merge(champsRegles, champsReqF);\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        var typesDEP = Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]).data.dependantTypes;\r",
                    "        var j = 1;\r",
                    "        for (j=1; j<typesContenus.length; j++) {\r",
                    "            var typesDEPSuivant = Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[j]).data.dependantTypes;\r",
                    "            typesDEP = Ext.Array.intersect(typesDEP, typesDEPSuivant);\r",
                    "        }\r",
                    "        var k=0;\r",
                    "        for (k=0; k<typesDEP.length; k++) {\r",
                    "\r",
                    "            var theTargetType = Ext.getStore('TCDepForQA').findRecord('id',typesDEP[k]);\r",
                    "            champsRegles.push({nom:theTargetType.get(\"type\")+' > '+'Création',\r",
                    "                valeur: {\r",
                    "                    cType: 'datefield',\r",
                    "                    name: 'creation',\r",
                    "                    ruleId:'createTime',\r",
                    "                    label: theTargetType.get(\"type\")+' > '+'Création'\r",
                    "                }\r",
                    "            });\r",
                    "            champsRegles.push({nom:theTargetType.get(\"type\")+' > '+'Dernière modification',\r",
                    "                valeur: {\r",
                    "                    cType: 'datefield',\r",
                    "                    name: 'derniereModification',\r",
                    "                    ruleId:'lastUpdateTime',\r",
                    "                    label: theTargetType.get(\"type\")+' > '+'Dernière modification'\r",
                    "                }});  \r",
                    "\r",
                    "\r",
                    "                var champsReq = Ext.clone(theTargetType.get(\"champs\"));\r",
                    "                var champsEligibles = [\"Ext.form.field.Date\", \"Ext.form.field.Time\", \"Ext.form.field.Checkbox\", \"Ext.form.field.Number\"];\r",
                    "                var champsReqF = Ext.Array.filter(champsReq, function(champ){\r",
                    "                    if (Ext.Array.contains(champsEligibles, champ.cType)) {return true;} else {return false;}\r",
                    "                });\r",
                    "                champsReqF = Ext.Array.map(champsReqF, function(champ){\r",
                    "                    return ({nom:typesDEP[k]+ ' > '+champ.config.fieldLabel, valeur:{cType: champ.cType, ruleId: theTargetType.get(\"id\")+'>>'+champ.config.name , name: champ.config.name, label:theTargetType.get(\"type\")+' > '+champ.config.fieldLabel}});\r",
                    "                });\r",
                    "\r",
                    "                champsRegles = Ext.Array.merge(champsRegles, champsReqF);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "            }\r",
                    "\r",
                    "            Ext.getStore('champsTCARStore').loadData(champsRegles);\r",
                    "\r",
                    "\r",
                    "\r",
                    "            var vocabulaires = Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]).data.vocabularies;\r",
                    "            var j = 1;\r",
                    "            for (j=1; j<typesContenus.length; j++) {\r",
                    "                var vocabSuivant = Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[j]).data.vocabularies;\r",
                    "                vocabulaires = Ext.Array.intersect(vocabulaires, vocabSuivant);\r",
                    "            }\r",
                    "            if(Ext.isEmpty(vocabulaires)){\r",
                    "                Ext.getCmp('assisstantRE2').add(Ext.widget(\"container\", {styleHtmlContent:true, html:\"<p>Aucun vocabulaire disponible pour cet ensemble de types de contenus.</p>\"}));\r",
                    "            }\r",
                    "            if (vocabulaires.length>1) {Ext.getCmp('assisstantRE2').add(lien);}\r",
                    "            //Ext.Array.remove(vocabulaires,\"navigation\");\r",
                    "            var k =0;\r",
                    "            for (k=0; k<vocabulaires.length; k++) {\r",
                    "\r",
                    "                var leVocab = Ext.getStore('TaxonomyForQA').findRecord('id', vocabulaires[k]);\r",
                    "                var vocabAPlat= [ ];\r",
                    "                //this.miseAPlatTaxo(leVocab.data.termes.children, vocabAPlat);\r",
                    "\r",
                    "\r",
                    "                var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "                    model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "                    remoteFilter:\"true\",\r",
                    "                    proxy: {\r",
                    "                        type: 'ajax',\r",
                    "                        api: {\r",
                    "                            read: 'taxonomy-terms'\r",
                    "                        },\r",
                    "                        reader: {\r",
                    "                            type: 'json',\r",
                    "                            messageProperty: 'message',\r",
                    "                            root: 'data'\r",
                    "                        },\r",
                    "                        encodeFilters: function(filters) {\r",
                    "                            var min = [],\r",
                    "                            length = filters.length,\r",
                    "                            i = 0;\r",
                    "\r",
                    "                            for (; i < length; i++) {\r",
                    "                                min[i] = {\r",
                    "                                    property: filters[i].property,\r",
                    "                                    value   : filters[i].value\r",
                    "                                };\r",
                    "                                if (filters[i].type) {\r",
                    "                                    min[i].type = filters[i].type;\r",
                    "                                }\r",
                    "                                if (filters[i].operator) {\r",
                    "                                    min[i].operator = filters[i].operator;\r",
                    "                                }\r",
                    "                            }\r",
                    "                            return this.applyEncoding(min);\r",
                    "                        }\r",
                    "                    },\r",
                    "                    filters: {\r",
                    "                        property: 'vocabularyId',\r",
                    "                        value: leVocab.get(\"id\")\r",
                    "                    }\r",
                    "\r",
                    "                });\r",
                    "                storeT.on(\"beforeload\", function(s,o){\r",
                    "                    if (!Ext.isEmpty(o.params)){\r",
                    "                        o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "                        if (!Ext.isEmpty(o.params.comboQuery)){\r",
                    "\r",
                    "                            var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                                property:\"text\",\r",
                    "                                value:o.params.comboQuery,\r",
                    "                                operator:'like'\r",
                    "                            });\r",
                    "\r",
                    "                            o.filters.push(newFilter);\r",
                    "\r",
                    "                        }\r",
                    "                    }\r",
                    "\r",
                    "                });\r",
                    "\r",
                    "                storeT.load();\r",
                    "                var selecteur = Ext.widget('comboboxselect', {\r",
                    "                    name:leVocab.get(\"id\"),\r",
                    "                    vocabularyId:leVocab.get(\"id\"),\r",
                    "                    isVocabularyField:true,\r",
                    "                    usedRole:\"terms\",\r",
                    "                    anchor:\"100%\",\r",
                    "                    fieldLabel: leVocab.get(\"name\"),\r",
                    "                    autoScroll: false,\r",
                    "                    store: storeT,\r",
                    "                    queryMode: 'remote',\r",
                    "                    queryParam: 'comboQuery',\r",
                    "                    minChars:3,\r",
                    "                    displayField: 'text',\r",
                    "                    valueField: 'id',\r",
                    "                    filterPickList: true,\r",
                    "                    typeAhead: true,\r",
                    "                    forceSelection: !leVocab.data.expandable,\r",
                    "                    createNewOnEnter: leVocab.data.expandable,\r",
                    "                    multiSelect: Ext.clone(leVocab.data.multiSelect),\r",
                    "                    allowBlank: !leVocab.data.mandatory\r",
                    "                });\r",
                    "\r",
                    "                var storeR = Ext.create('Ext.data.Store', {\r",
                    "                    fields: ['valeur', 'nom'],\r",
                    "                    data : [\r",
                    "                        {valeur: 'all', nom :'Contient tous les termes'},\r",
                    "                        {valeur: 'allRec', nom :'Contient tous les termes ou au moins un descendant par terme'},\r",
                    "                        {valeur: 'some', nom :'Contient au moins un des termes'},\r",
                    "                        {valeur: 'someRec', nom :'Contient au moins un des termes ou au moins un des descendants d’un des termes'},\r",
                    "                        {valeur: 'not', nom :'Ne contient aucun des termes suivants'}\r",
                    "                    ]\r",
                    "                });\r",
                    "\r",
                    "                var regle = Ext.create('Ext.form.ComboBox', {\r",
                    "                    name:leVocab.get(\"id\")+\"QueryRule\",\r",
                    "                    anchor: '100%',\r",
                    "                    vocabularyId:leVocab.get(\"id\"),\r",
                    "                    isVocabularyField:true,\r",
                    "                    usedRole:\"rule\",\r",
                    "                    fieldLabel: 'Règle',\r",
                    "                    store: storeR,\r",
                    "                    queryMode: 'local',\r",
                    "                    displayField: 'nom',\r",
                    "                    valueField: 'valeur',\r",
                    "                    editable: false,\r",
                    "                    value: 'some',\r",
                    "                    forceSelect: true,\r",
                    "                    allowBlank: false\r",
                    "\r",
                    "                });\r",
                    "                if ((keepInMind)&&(editorMode)&&(!Ext.isEmpty(initialQuery.vocabularies[leVocab.get(\"id\")]))){\r",
                    "                    regle.setValue(initialQuery.vocabularies[leVocab.get(\"id\")].rule[0]);\r",
                    "                    selecteur.setValue(initialQuery.vocabularies[leVocab.get(\"id\")].terms);\r",
                    "                }\r",
                    "                if (simpleMode) {\r",
                    "                    regle.setValue(\"all\");\r",
                    "                    regle.setReadOnly(true);\r",
                    "                    regle.hide();\r",
                    "                    selecteur.multiSelect=false;\r",
                    "                    var enrobage=Ext.widget(\"container\", {anchor:\"100%\", layout:\"anchor\"});\r",
                    "                } else {\r",
                    "\r",
                    "\r",
                    "                    var enrobage = Ext.widget('fieldset', {\r",
                    "                        title : leVocab.get(\"name\"),\r",
                    "                        collapsible: true,\r",
                    "                        collapsed:true\r",
                    "\r",
                    "\r",
                    "                    });}\r",
                    "                    enrobage.add(selecteur);\r",
                    "                    enrobage.add(regle);\r",
                    "\r",
                    "                    Ext.getCmp('assisstantRE2').add(enrobage);\r",
                    "\r",
                    "\r",
                    "\r",
                    "                }    \r",
                    "\r",
                    ""
                ]
            },
            "designerId": "2541f598-8a9e-400c-bb19-64d5790c6c38"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onMainQueriesGridItemDblClick",
                "fn": "onMainQueriesGridItemDblClick",
                "implHandler": [
                    "Ext.getCmp(\"queryMainEditBtn\").fireEvent(\"click\");"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#mainQueriesGrid"
            },
            "designerId": "a4cf7b54-f02b-4620-bd41-aa9492f47683"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "restoreFieldRules",
                "fn": "restoreFieldRules",
                "designer|params": [
                    "fieldRules"
                ],
                "implHandler": [
                    "Ext.Object.each(fieldRules, function(key, value){\r",
                    "    if (!Ext.isEmpty(value.rule)) {\r",
                    "        //\r",
                    "        var tester = Ext.getCmp('createurReglesChampsAR').getStore().getRange()[Ext.getCmp('createurReglesChampsAR').getStore().findBy(function(record){\r",
                    "            if (record.data.valeur.ruleId==key) {\r",
                    "                return(true);\r",
                    "            }\r",
                    "        })];\r",
                    "        if (!Ext.isEmpty(tester)){\r",
                    "            var nRegle= tester.data.valeur;\r",
                    "            var enrobage = Ext.widget('regleChampAR');\r",
                    "            enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);\r",
                    "            var mainThing = Ext.widget(nRegle.cType, {flex:1, mame:nRegle.name});\r",
                    "            var insertus=Ext.clone(value.value);\r",
                    "            if(mainThing.isXType(\"datefield\")){ insertus= new Date(value.value);}\r",
                    "            mainThing.setValue(insertus);\r",
                    "            mainThing.name=nRegle.name;\r",
                    "            mainThing.usedRole=\"value\";\r",
                    "            mainThing.ruleId=nRegle.ruleId;\r",
                    "            mainThing.isAddedRuleField=true;\r",
                    "            enrobage.getComponent(0).insert(1,mainThing);\r",
                    "            if (nRegle.cType== 'checkboxfield') {\r",
                    "                var operateur= Ext.widget('tbtext', {text: ' = '});\r",
                    "            }\r",
                    "            else{\r",
                    "                var storeOper = Ext.create('Ext.data.Store', {\r",
                    "                    fields: ['operateur'],\r",
                    "                    data : [\r",
                    "                    {\"operateur\":\"=\"},\r",
                    "                    {\"operateur\":\"<=\"},\r",
                    "                    {\"operateur\":\"<\"},\r",
                    "                    {\"operateur\":\">=\"},\r",
                    "                    {\"operateur\":\">\"},\r",
                    "                    {\"operateur\":\"!=\"}\r",
                    "                    ]\r",
                    "                });\r",
                    "                var operateur= Ext.create('Ext.form.ComboBox', {\r",
                    "                    name:nRegle.name+\"Operator\",\r",
                    "                    store: storeOper,\r",
                    "                    usedRole:\"rule\",\r",
                    "                    isAddedRuleField:true,\r",
                    "                    ruleId:nRegle.ruleId,\r",
                    "                    flex:1,\r",
                    "                    queryMode: 'local',\r",
                    "                    displayField: 'operateur',\r",
                    "                    valueField: 'operateur',\r",
                    "                    editable: false,\r",
                    "                    multiSelect:false,\r",
                    "                    allowBlank:false,\r",
                    "                    forceSelect: true\r",
                    "                });\r",
                    "                operateur.setValue(value.rule);\r",
                    "\r",
                    "            }\r",
                    "            enrobage.getComponent(0).insert(1,operateur);\r",
                    "            if (Ext.getCmp('assisstantRE4').items.items.length>2){\r",
                    "                enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>ET </b>'}));\r",
                    "            }\r",
                    "\r",
                    "            Ext.getCmp('assisstantRE4').add(enrobage);\r",
                    "        }\r",
                    "        //\r",
                    "\r",
                    "    }\r",
                    "    if (!Ext.isEmpty(value.sort)) {\r",
                    "        //\r",
                    "        var tester = Ext.getStore(\"champsTCARStore\").getRange()[Ext.getStore(\"champsTCARStore\").findBy(function(record){\r",
                    "            if (record.data.valeur.ruleId==key) {\r",
                    "                return(true);\r",
                    "            }\r",
                    "        })];\r",
                    "        if (!Ext.isEmpty(tester)){\r",
                    "            var nRegle= tester.data.valeur;\r",
                    "            var enrobage = Ext.widget('regleChampAR');\r",
                    "            enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);\r",
                    "\r",
                    "\r",
                    "            var storeOper = Ext.create('Ext.data.Store', {\r",
                    "                fields: ['operateur', 'label'],\r",
                    "                data : [\r",
                    "                {\"operateur\":\"ASC\", \"label\": \"Croissant\"},\r",
                    "                {\"operateur\":\"DESC\", \"label\": \"Decroissant\"}\r",
                    "                ]\r",
                    "            });\r",
                    "            var operateur= Ext.create('Ext.form.ComboBox', {\r",
                    "                name:nRegle.name+\"Direction\",\r",
                    "                store: storeOper,\r",
                    "                usedRole:\"sort\",\r",
                    "                isAddedRuleField:true,\r",
                    "                ruleId:nRegle.ruleId,\r",
                    "                flex:1,\r",
                    "                queryMode: 'local',\r",
                    "                displayField: 'label',\r",
                    "                valueField: 'operateur',\r",
                    "                editable: false,\r",
                    "                multiSelect:false,\r",
                    "                allowBlank:false,\r",
                    "                forceSelect: true\r",
                    "            });\r",
                    "\r",
                    "            operateur.setValue(value.sort);\r",
                    "\r",
                    "            enrobage.getComponent(0).insert(1,operateur);\r",
                    "            if (Ext.getCmp('assisstantRE5').items.items.length>2){\r",
                    "                enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>Puis </b>'}));\r",
                    "            }\r",
                    "\r",
                    "            Ext.getCmp('assisstantRE5').add(enrobage);\r",
                    "        }\r",
                    "        //\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "04b065c4-7e4b-4c5e-8715-da8d42bba5ad"
        }
    ]
}