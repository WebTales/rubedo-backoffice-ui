{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "assistantRequetageController",
        "views": [
            "assisstantRE4",
            "regleChampAR"
        ]
    },
    "id": "ExtBox1-ext-gen43952",
    "designerId": "da7dabb6-9585-4ae7-8847-4b4d76cdb27e",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "suivant",
                "fn": "suivant",
                "implHandler": [
                    "var nextOK = 1;\r",
                    "var etapeC = button.up().up().getLayout().getActiveItem().items.items;\r",
                    "var i = 0;\r",
                    "for (i=0;i<etapeC.length; i++) {\r",
                    "    if ((etapeC[i].isXType('field'))&&(!(etapeC[i].isValid()))) { nextOK = 0;}\r",
                    "}\r",
                    "if (nextOK == 1) {\r",
                    "\r",
                    "    var etape = button.up().up().getLayout().getActiveItem();\r",
                    "    if (etape.id=='assisstantRE1') {\r",
                    "        Ext.getCmp('assisstantRE2').removeAll();\r",
                    "        var reglesAnciennes= Ext.clone(Ext.getCmp('assisstantRE4').items.items.length);\r",
                    "        var m =2;\r",
                    "        for (m=2; m<reglesAnciennes; m++){\r",
                    "            Ext.getCmp('assisstantRE4').getComponent(2).destroy();\r",
                    "        }\r",
                    "\r",
                    "        var storeL = Ext.create('Ext.data.Store', {\r",
                    "            fields: ['valeur', 'nom'],\r",
                    "            data : [\r",
                    "            {valeur: 'et', nom :'ET'},\r",
                    "            {valeur: 'ou', nom :'OU'}\r",
                    "            ]\r",
                    "        });\r",
                    "\r",
                    "        var lien = Ext.create('Ext.form.ComboBox', {\r",
                    "            anchor: '100%',\r",
                    "            fieldLabel: 'Relation entre les règles ',\r",
                    "            store: storeL,\r",
                    "            value: 'OU',\r",
                    "            queryMode: 'local',\r",
                    "            displayField: 'nom',\r",
                    "            valueField: 'valeur',\r",
                    "            labelWidth: 150,\r",
                    "            editable: false,\r",
                    "            forceSelect: true,\r",
                    "            allowBlank: false\r",
                    "\r",
                    "        });\r",
                    "\r",
                    "\r",
                    "        var typesContenus = Ext.getCmp('champTCRequeteur').getValue();\r",
                    "        var champsRegles = [ ];\r",
                    "        champsRegles.push({nom:'Création',\r",
                    "            valeur: {\r",
                    "                cType: 'datefield',\r",
                    "                name: 'creation',\r",
                    "                label: 'Création'\r",
                    "            }\r",
                    "        });\r",
                    "        champsRegles.push({nom:'Dernière modification',\r",
                    "            valeur: {\r",
                    "                cType: 'datefield',\r",
                    "                name: 'derniereModification',\r",
                    "                label: 'Dernière modification'\r",
                    "            }});\r",
                    "            if (typesContenus.length<2) {\r",
                    "                var champsReq = Ext.clone(Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]).data.champs);\r",
                    "                var champsEligibles = [\"datefield\", \"timefield\", \"checkboxfield\", \"numberfield\"];\r",
                    "                var champsReqF = Ext.Array.filter(champsReq, function(champ){\r",
                    "                    if (Ext.Array.contains(champsEligibles, champ.cType)) {return true;} else {return false;}\r",
                    "                });\r",
                    "                champsReqF = Ext.Array.map(champsReqF, function(champ){\r",
                    "                    return ({nom:typesContenus[0]+ ' > '+champ.config.fieldLabel, valeur:{cType: champ.cType, name: champ.config.name, label: typesContenus[0]+' > '+champ.config.fieldLabel}});\r",
                    "                });\r",
                    "\r",
                    "                champsRegles = Ext.Array.merge(champsRegles, champsReqF);\r",
                    "\r",
                    "            }\r",
                    "          \r",
                    "            var typesDEP = Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]).data.dependantTypes;\r",
                    "            var j = 1;\r",
                    "            for (j=1; j<typesContenus.length; j++) {\r",
                    "                var typesDEPSuivant = Ext.getStore('TCDepForQA').findRecord('id',typesContenus[j]).data.dependantTypes;\r",
                    "                typesDEP = Ext.Array.intersect(typesDEP, typesDEPSuivant);\r",
                    "            }\r",
                    "            var k=0;\r",
                    "            for (k=0; k<typesDEP.length; k++) {\r",
                    "               \r",
                    "                var theTargetType = Ext.getStore('TCDepForQA').findRecord('id',typesDEP[k]);\r",
                    "                champsRegles.push({nom:typesDEP[k]+' > '+'Création',\r",
                    "                    valeur: {\r",
                    "                        cType: 'datefield',\r",
                    "                        name: 'creation',\r",
                    "                        label: typesDEP[k]+' > '+'Création'\r",
                    "                    }\r",
                    "                });\r",
                    "                champsRegles.push({nom:typesDEP[k]+' > '+'Dernière modification',\r",
                    "                    valeur: {\r",
                    "                        cType: 'datefield',\r",
                    "                        name: 'derniereModification',\r",
                    "                        label: typesDEP[k]+' > '+'Dernière modification'\r",
                    "                    }});  \r",
                    "\r",
                    "\r",
                    "                    var champsReq = Ext.clone(theTargetType.get(\"champs\"));\r",
                    "                    var champsEligibles = [\"datefield\", \"timefield\", \"checkboxfield\", \"numberfield\"];\r",
                    "                    var champsReqF = Ext.Array.filter(champsReq, function(champ){\r",
                    "                        if (Ext.Array.contains(champsEligibles, champ.cType)) {return true;} else {return false;}\r",
                    "                    });\r",
                    "                    champsReqF = Ext.Array.map(champsReqF, function(champ){\r",
                    "                        return ({nom:typesDEP[k]+ ' > '+champ.config.fieldLabel, valeur:{cType: champ.cType, name: champ.config.name, label: typesDEP[k]+' > '+champ.config.fieldLabel}});\r",
                    "                    });\r",
                    "\r",
                    "                    champsRegles = Ext.Array.merge(champsRegles, champsReqF);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "                Ext.getStore('champsTCARStore').loadData(champsRegles);\r",
                    "\r",
                    "\r",
                    "\r",
                    "                var vocabulaires = Ext.Array.pluck(Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[0]).data.vocabularies, 'id');\r",
                    "                var j = 1;\r",
                    "                for (j=1; j<typesContenus.length; j++) {\r",
                    "                    var vocabSuivant = Ext.Array.pluck(Ext.getStore('TCNDepCombo').findRecord('id',typesContenus[j]).data.vocabularies, 'id');\r",
                    "                    vocabulaires = Ext.Array.intersect(vocabulaires, vocabSuivant);\r",
                    "                }\r",
                    "\r",
                    "                if (vocabulaires.length>1) {Ext.getCmp('assisstantRE2').add(lien);}\r",
                    "\r",
                    "                var k =0;\r",
                    "                for (k=0; k<vocabulaires.length; k++) {\r",
                    "                    var leVocab = Ext.getStore('TaxonomieDataJson').findRecord('id', vocabulaires[k]);\r",
                    "                    var vocabAPlat= [ ];\r",
                    "                    //this.miseAPlatTaxo(leVocab.data.termes.children, vocabAPlat);\r",
                    "\r",
                    "\r",
                    "                    var storeT = Ext.create('Ext.data.Store', {\r",
                    "                        fields: ['terme'],\r",
                    "                        data : vocabAPlat\r",
                    "                    });\r",
                    "\r",
                    "\r",
                    "                    var selecteur = Ext.widget('comboboxselect', {\r",
                    "                        anchor: '100%',\r",
                    "                        fieldLabel: 'Termes ',\r",
                    "                        autoScroll: false,\r",
                    "                        store: storeT,\r",
                    "                        queryMode: 'local',\r",
                    "                        displayField: 'terme',\r",
                    "                        valueField: 'terme',\r",
                    "                        filterPickList: true,\r",
                    "                        typeAhead: true,\r",
                    "                     //   forceSelection: !leVocab.data.etiquettes,\r",
                    "                     //   createNewOnEnter: leVocab.data.etiquettes,\r",
                    "                        multiSelect: true,\r",
                    "                        allowBlank: true\r",
                    "                    });\r",
                    "\r",
                    "                    var storeR = Ext.create('Ext.data.Store', {\r",
                    "                        fields: ['valeur', 'nom'],\r",
                    "                        data : [\r",
                    "                        {valeur: 'all', nom :'Contient tous les termes'},\r",
                    "                        {valeur: 'allRec', nom :'Contient tous les termes ou au moins un descendant par terme'},\r",
                    "                        {valeur: 'some', nom :'Contient au moins un des termes'},\r",
                    "                        {valeur: 'someRec', nom :'Contient au moins un des termes ou au moins un des descendants d’un des termes'}\r",
                    "                        ]\r",
                    "                    });\r",
                    "\r",
                    "                    var regle = Ext.create('Ext.form.ComboBox', {\r",
                    "                        anchor: '100%',\r",
                    "                        fieldLabel: 'Règle',\r",
                    "                        store: storeR,\r",
                    "                        queryMode: 'local',\r",
                    "                        displayField: 'nom',\r",
                    "                        valueField: 'valeur',\r",
                    "                        editable: false,\r",
                    "                        forceSelect: true,\r",
                    "                        allowBlank: false\r",
                    "\r",
                    "                    });\r",
                    "\r",
                    "\r",
                    "                    var enrobage = Ext.widget('fieldset', {\r",
                    "                        title : vocabulaires[k],\r",
                    "                        collapsible: true\r",
                    "\r",
                    "\r",
                    "                    });\r",
                    "                    enrobage.add(selecteur);\r",
                    "                    enrobage.add(regle);\r",
                    "                    Ext.getCmp('assisstantRE2').add(enrobage);\r",
                    "\r",
                    "\r",
                    "\r",
                    "                }    \r",
                    "\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "            var tousET= Ext.getCmp('assistantRequetage').getLayout().getLayoutItems().length;\r",
                    "            var suivET= Ext.getCmp('assistantRequetage').getLayout().getNext().etape;\r",
                    "            if (suivET==4) { Ext.getCmp('boutonNextRequeteur').hide();}\r",
                    "            else if (suivET==2) { Ext.getCmp('boutonPrevRequeteur').show();}\r",
                    "            if (Ext.isDefined(suivET)) {\r",
                    "                button.up().up().getLayout().next();\r",
                    "\r",
                    "                Ext.getCmp('progressAR').updateProgress(suivET/tousET, 'Etape '+suivET+' sur '+tousET);\r",
                    "            }\r",
                    "        }\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonNextRequeteur"
            },
            "designerId": "b83c1479-9cbe-478c-bde1-54b5275f3a77"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "precedent",
                "fn": "precedent",
                "implHandler": [
                    "var tousET= Ext.getCmp('assistantRequetage').getLayout().getLayoutItems().length;\r",
                    "var suivET= Ext.getCmp('assistantRequetage').getLayout().getPrev().etape;\r",
                    "if (suivET==3) { Ext.getCmp('boutonNextRequeteur').show();}\r",
                    "else if (suivET==1) { Ext.getCmp('boutonPrevRequeteur').hide();}\r",
                    "if (Ext.isDefined(suivET)) {\r",
                    "    button.up().up().getLayout().prev();\r",
                    "    Ext.getCmp('progressAR').updateProgress(suivET/tousET, 'Etape '+suivET+' sur '+tousET);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonPrevRequeteur"
            },
            "designerId": "4667034e-54b1-41f0-9662-9b004a9c8479"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "enleveRegle",
                "fn": "enleveRegle",
                "implHandler": [
                    "if (Ext.getCmp('assisstantRE4').items.items.indexOf(button.up().up())==2) {\r",
                    "    Ext.getCmp('assisstantRE4').getComponent(3).getComponent(0).getComponent(0).destroy();  \r",
                    "}\r",
                    "button.up().up().destroy();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "[itemId='boutonEnleveRegleAR']"
            },
            "designerId": "20f3e13d-6f29-47e0-ba81-ac64ffef193e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectAllTC",
                "fn": "selectAllTC",
                "implHandler": [
                    "Ext.getCmp('champTCRequeteur').select(Ext.getCmp('champTCRequeteur').getStore().data.items);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonSelectAllTCAR"
            },
            "designerId": "c95df528-b694-421e-b11a-54c5cba5aea0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "ajoutRegleChamp",
                "fn": "ajoutRegleChamp",
                "implHandler": [
                    "var nRegle= Ext.getCmp('createurReglesChampsAR').getValue();\r",
                    "if (nRegle !== null) {\r",
                    "    var enrobage = Ext.widget('regleChampAR');\r",
                    "    enrobage.getComponent(0).getComponent('nomChamp').setText(nRegle.label);\r",
                    "    enrobage.getComponent(0).insert(1,Ext.widget(nRegle.cType, {flex:1, mame:nRegle.name}));\r",
                    "    if (nRegle.cType== 'checkboxfield') {\r",
                    "        var operateur= Ext.widget('tbtext', {text: ' = '});\r",
                    "    }\r",
                    "    else{\r",
                    "        var storeOper = Ext.create('Ext.data.Store', {\r",
                    "            fields: ['operateur'],\r",
                    "            data : [\r",
                    "            {\"operateur\":\"=\"},\r",
                    "            {\"operateur\":\"<=\"},\r",
                    "            {\"operateur\":\"<\"},\r",
                    "            {\"operateur\":\">=\"},\r",
                    "            {\"operateur\":\">\"},\r",
                    "            {\"operateur\":\"!=\"}\r",
                    "            ]\r",
                    "        });\r",
                    "        var operateur= Ext.create('Ext.form.ComboBox', {\r",
                    "            store: storeOper,\r",
                    "            flex:1,\r",
                    "            queryMode: 'local',\r",
                    "            displayField: 'operateur',\r",
                    "            valueField: 'operateur',\r",
                    "            editable: false,\r",
                    "            multiSelect:false,\r",
                    "            allowBlank:false,\r",
                    "            forceSelect: true\r",
                    "        });\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "    enrobage.getComponent(0).insert(1,operateur);\r",
                    "    if (Ext.getCmp('assisstantRE4').items.items.length>2){\r",
                    "        enrobage.getComponent(0).insert(0,Ext.widget('tbtext', {text: '<b>ET </b>'}));\r",
                    "    }\r",
                    "\r",
                    "    Ext.getCmp('assisstantRE4').add(enrobage);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonCreateurReglesChampsAR"
            },
            "designerId": "0889cbbf-053a-469f-99aa-a047a88adba7"
        }
    ]
}