{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "EmailController",
        "designer|userAlias": "EmailController"
    },
    "designerId": "0c137efa-3885-472d-a4d2-96e811f9f233",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewETRowBtnClick",
                "implHandler": [
                    "var newRow=Ext.widget(\"panel\",{\r",
                    "    eType:\"row\",\r",
                    "    plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],\r",
                    "    id:\"emailType-\"+Ext.id(),\r",
                    "    layout: {\r",
                    "        type: 'hbox',\r",
                    "        align: 'stretchmax'\r",
                    "    },\r",
                    "    eConfig:{\r",
                    "        styles:\"\",\r",
                    "        bgColor:\"\"              \r",
                    "    },\r",
                    "    flex:undefined,\r",
                    "    minHeight:30                  \r",
                    "});\r",
                    "Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue()).add(newRow);\r",
                    "newRow.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newETRowBtn"
            },
            "designerId": "126bde2e-5dcd-4121-8875-0958430edbb8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMainETContainerAfterRender",
                "implHandler": [
                    "component.getComponent(0).addBodyCls('contrastEMBorder');\r",
                    "component.getEl().on(\"click\", function(e){\r",
                    "    Ext.getCmp(\"elementETIdField\").setValue(component.getComponent(0).getId());\r",
                    "    e.stopEvent();\r",
                    "});"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.container.Container",
                "designer|controlQuery": "#mainETContainer"
            },
            "designerId": "543a8a7b-83ee-40e9-b986-d0cd275af490"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMainETHolderAfterRender",
                "implHandler": [
                    "if ((component.eType==\"imageComponent\")||(component.eType==\"textComponent\")){\r",
                    "    component.addBodyCls('contrastCBorder');\r",
                    "} else {\r",
                    "    component.addBodyCls('contrastEMBorder');\r",
                    "}\r",
                    "component.getEl().on(\"click\", function(e){\r",
                    "    Ext.getCmp(\"elementETIdField\").setValue(component.getId());\r",
                    "    e.stopEvent();\r",
                    "});"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#mainETHolder panel"
            },
            "designerId": "338ce064-8461-4840-a300-de1fce060133"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onElementETIdFieldChange",
                "implHandler": [
                    "var me=this;\r",
                    "if (!Ext.isEmpty(oldValue)){\r",
                    "    var oldOne=Ext.getCmp(oldValue);\r",
                    "    if (!Ext.isEmpty(oldOne)){\r",
                    "        oldOne.removeBodyCls('selectedEMElement');\r",
                    "        if (oldOne.eType==\"col\"){\r",
                    "            oldOne.up().removeBodyCls(\"contrastEMPadding\");\r",
                    "            oldOne.up().doLayout();\r",
                    "        } else if ((oldOne.eType==\"imageComponent\")||(oldOne.eType==\"textComponent\")){\r",
                    "            oldOne.up().removeBodyCls(\"contrastEMPadding\");\r",
                    "            oldOne.up().up().removeBodyCls(\"contrastEMPadding\");\r",
                    "            oldOne.up().up().doLayout();\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "if (!Ext.isEmpty(newValue)){\r",
                    "    var newOne=Ext.getCmp(newValue);\r",
                    "    if (!Ext.isEmpty(newOne)){\r",
                    "        newOne.getEl().frame(MyPrefData.themeColor);\r",
                    "        newOne.addBodyCls('selectedEMElement');\r",
                    "        if (newOne.eType==\"col\"){\r",
                    "            newOne.up().addBodyCls(\"contrastEMPadding\");\r",
                    "            newOne.up().doLayout();\r",
                    "        } else if ((newOne.eType==\"imageComponent\")||(newOne.eType==\"textComponent\")){\r",
                    "            newOne.up().addBodyCls(\"contrastEMPadding\");\r",
                    "            newOne.up().up().addBodyCls(\"contrastEMPadding\");\r",
                    "            newOne.up().up().doLayout();\r",
                    "        }\r",
                    "    }\r",
                    "} else {\r",
                    "\r",
                    "}\r",
                    "me.adaptETEditButtons(newValue);"
                ],
                "name": "change",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Hidden",
                "designer|controlQuery": "#elementETIdField"
            },
            "designerId": "2be8bd78-2484-48ee-9f43-8bda3166f1ca"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "adaptETEditButtons",
                "designer|params": [
                    "selectedElement"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "Ext.Array.forEach(Ext.getCmp(\"eTTopBarBox\").query(\"button\"), function(button){button.disable();});\r",
                    "Ext.getCmp(\"ETAddComponentsBtnGr\").disable();\r",
                    "Ext.getCmp(\"eTEditControl\").removeAll();\r",
                    "Ext.getCmp(\"eTEditControl\").setTitle(\"Select an element\");\r",
                    "var thing=Ext.getCmp(selectedElement);\r",
                    "if (!Ext.isEmpty(thing)){\r",
                    "    if (selectedElement==\"mainETHolder\"){\r",
                    "        Ext.getCmp(\"newETRowBtn\").enable();\r",
                    "        Ext.getCmp(\"eTEditControl\").setTitle(\"Email body\");\r",
                    "        me.displayBodyControls();\r",
                    "    } else if (thing.eType==\"row\"){\r",
                    "        Ext.getCmp(\"eTEditControl\").setTitle(\"Row\");\r",
                    "        if(me.calculateRemainingRowWidth(thing)>=10){\r",
                    "            Ext.getCmp(\"newETColBtn\").enable();\r",
                    "        }\r",
                    "        Ext.getCmp(\"moveUPETBtn\").enable();\r",
                    "        Ext.getCmp(\"moveDownETBTn\").enable();\r",
                    "        Ext.getCmp(\"deleteETElBtn\").enable();\r",
                    "        me.displayRowControls(thing);\r",
                    "        me.displayGenericControls(thing,Ext.getCmp(\"eTEditControl\"));\r",
                    "    } else if (thing.eType==\"col\"){\r",
                    "        Ext.getCmp(\"eTEditControl\").setTitle(\"Column\");\r",
                    "        if (Ext.isEmpty(thing.getComponent(0))){\r",
                    "            Ext.getCmp(\"ETAddComponentsBtnGr\").enable();\r",
                    "        }\r",
                    "        Ext.getCmp(\"moveUPETBtn\").enable();\r",
                    "        Ext.getCmp(\"moveDownETBTn\").enable();\r",
                    "        Ext.getCmp(\"deleteETElBtn\").enable();\r",
                    "        me.displayColControls(thing);\r",
                    "        me.displayGenericControls(thing,Ext.getCmp(\"eTEditControl\"));\r",
                    "    } else if (thing.eType==\"imageComponent\"){\r",
                    "        Ext.getCmp(\"eTEditControl\").setTitle(\"Image\");\r",
                    "        Ext.getCmp(\"deleteETElBtn\").enable();\r",
                    "        me.displayImageControls(thing,Ext.getCmp(\"eTEditControl\"));\r",
                    "        me.displayGenericControls(thing,Ext.getCmp(\"eTEditControl\"));\r",
                    "    } else if (thing.eType==\"textComponent\"){\r",
                    "        Ext.getCmp(\"eTEditControl\").setTitle(\"Text\");\r",
                    "        Ext.getCmp(\"deleteETElBtn\").enable();\r",
                    "        me.displayTextControls(thing,Ext.getCmp(\"eTEditControl\"));\r",
                    "        me.displayGenericControls(thing,Ext.getCmp(\"eTEditControl\"));\r",
                    "    }\r",
                    "}"
                ]
            },
            "designerId": "e85a4abe-ef9c-4045-98d5-207d7be889c2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewETColBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var newCol=Ext.widget(\"panel\",{\r",
                    "    eType:\"col\",\r",
                    "    id:\"emailType-\"+Ext.id(),\r",
                    "    layout: {\r",
                    "        type: 'vbox',\r",
                    "        align: 'stretch'\r",
                    "    },\r",
                    "    eConfig:{\r",
                    "        styles:\"\",\r",
                    "        bgColor:\"\" \r",
                    "    },\r",
                    "    width:Ext.Array.min([100,me.calculateRemainingRowWidth(Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue()))]),\r",
                    "    minHeight:28\r",
                    "\r",
                    "});\r",
                    "Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue()).add(newCol);\r",
                    "newCol.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newETColBtn"
            },
            "designerId": "7fe60160-e4cc-45bb-a3f7-57806b157b37"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMoveUPETBtnClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().items.indexOf(field);\r",
                    "    if (pos > 0) {\r",
                    "        field.up().move(pos,pos-1);\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#moveUPETBtn"
            },
            "designerId": "9ee2ab82-0ab1-4ecb-80d7-609f39ac95a0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMoveDownETBTnClick",
                "implHandler": [
                    "var field = Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue());\r",
                    "if (!Ext.isEmpty(field)) {\r",
                    "    var pos = field.up().items.indexOf(field);\r",
                    "    field.up().move(pos,pos+1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#moveDownETBTn"
            },
            "designerId": "322c6208-21df-4887-955b-8239fbf64e67"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "applyWidthConstraints",
                "designer|params": [
                    "field",
                    "col"
                ],
                "implHandler": [
                    "var maxWidth=col.up().getWidth()-2;\r",
                    "Ext.Array.forEach(col.up().items.items, function(otherCol){\r",
                    "    if (otherCol.getId()!=col.getId()){\r",
                    "        maxWidth=maxWidth-otherCol.getWidth();\r",
                    "    }\r",
                    "});\r",
                    "field.setMaxValue(maxWidth);"
                ]
            },
            "designerId": "b2497bd0-4478-452a-aec3-e61175c2db4e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "calculateRemainingRowWidth",
                "designer|params": [
                    "row"
                ],
                "implHandler": [
                    "var maxWidth=row.getWidth()-2;\r",
                    "Ext.Array.forEach(row.items.items, function(otherCol){\r",
                    "    maxWidth=maxWidth-otherCol.getWidth();\r",
                    "});\r",
                    "return(maxWidth);"
                ]
            },
            "designerId": "6f50f766-78ac-41bb-9b1c-f5e927435494"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onETAddImageBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var newImage=Ext.widget(\"panel\",{\r",
                    "    eType:\"imageComponent\",\r",
                    "    id:\"emailType-\"+Ext.id(),\r",
                    "    layout: {\r",
                    "        type: 'fit'\r",
                    "    },\r",
                    "    eConfig:{\r",
                    "        image:null,\r",
                    "        url:null,\r",
                    "        styles:\"\"\r",
                    "    },\r",
                    "    flex:undefined,\r",
                    "                        minHeight:26\r",
                    "\r",
                    "});\r",
                    "Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue()).add(newImage);\r",
                    "me.syncEComponent(newImage, true);\r",
                    "newImage.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#ETAddImageBtn"
            },
            "designerId": "3f3cf8f1-366e-49d6-8de5-8fbfb182bcb7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onETAddTextBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var newText=Ext.widget(\"panel\",{\r",
                    "    eType:\"textComponent\",\r",
                    "    id:\"emailType-\"+Ext.id(),\r",
                    "    layout: {\r",
                    "        type: 'fit'\r",
                    "    },\r",
                    "    eConfig:{\r",
                    "        html:null,\r",
                    "        styles:\"\"\r",
                    "    },\r",
                    "    flex:undefined,\r",
                    "    minHeight:26\r",
                    "\r",
                    "});\r",
                    "Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue()).add(newText);\r",
                    "me.syncEComponent(newText, true);\r",
                    "newText.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#ETAddTextBtn"
            },
            "designerId": "b9ed9ae6-8fd6-49e7-a333-3e0a7462febc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "syncEComponent",
                "designer|params": [
                    "component",
                    "firstTime"
                ],
                "implHandler": [
                    "if (component.eType==\"imageComponent\"){\r",
                    "    if (firstTime){\r",
                    "        component.add(Ext.create('Ext.Img'));\r",
                    "    } \r",
                    "    \r",
                    "    if (Ext.isEmpty(component.eConfig.image)){\r",
                    "        component.getComponent(0).setSrc(\"resources/icones/generic/image_add.png\");\r",
                    "    } else {\r",
                    "        component.getComponent(0).setSrc(\"/dam?media-id=\"+component.eConfig.image);\r",
                    "    }\r",
                    "} else if (component.eType==\"textComponent\"){\r",
                    "    if (firstTime){\r",
                    "        component.add(Ext.create('Ext.Component'));\r",
                    "    }\r",
                    "    component.getComponent(0).update(component.eConfig.html);\r",
                    "}"
                ]
            },
            "designerId": "9c548f30-7121-40ad-8f83-aa832087b2b3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "displayImageControls",
                "designer|params": [
                    "imageComponent",
                    "target"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var imageField=Ext.create('Rubedo.view.ImagePickerField',{\r",
                    "    itemId:\"imageEditor\",\r",
                    "    fieldLabel:\"Image\",\r",
                    "    allowedFileType:\"Image\",\r",
                    "    smallMode:true,\r",
                    "    labelWidth:60,\r",
                    "    anchor:\"100%\",\r",
                    "    value:Ext.clone(imageComponent.eConfig.image)\r",
                    "});\r",
                    "imageField.on(\"change\",function(){\r",
                    "    imageComponent.eConfig.image=imageField.getValue();\r",
                    "    me.syncEComponent(imageComponent);\r",
                    "});\r",
                    "target.add(imageField);\r",
                    "var urlField=Ext.widget(\"textfield\", {\r",
                    "    fieldLabel:\"URL\",\r",
                    "    labelWidth:60,\r",
                    "    anchor:\"100%\",\r",
                    "    vtype:\"url\",\r",
                    "    value:Ext.clone(imageComponent.eConfig.url)\r",
                    "});\r",
                    "urlField.on(\"change\", function(){\r",
                    "\timageComponent.eConfig.url=urlField.getValue();\r",
                    "});\r",
                    "target.add(urlField);"
                ]
            },
            "designerId": "14d010ad-67f7-4ce6-a504-867e856fa201"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDeleteETElBtnClick",
                "implHandler": [
                    "Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue()).up().remove(Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue()));\r",
                    "Ext.getCmp(\"elementETIdField\").setValue(null);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#deleteETElBtn"
            },
            "designerId": "ccf985fc-af0c-4397-b322-dc060a47d447"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "displayTextControls",
                "designer|params": [
                    "textComponent",
                    "target"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "if (textComponent.eConfig.simpleTextMode){\r",
                    "    var textField=Ext.widget('textareafield',{\r",
                    "        itemId:\"textTEditor\",\r",
                    "        fieldLabel:\"Text\",\r",
                    "        labelWidth:60,\r",
                    "        grow:true,\r",
                    "        anchor:\"100%\",\r",
                    "        value:Ext.clone(textComponent.eConfig.html)\r",
                    "    });\r",
                    "} else {\r",
                    "    var textField=Ext.widget('directRTEField',{\r",
                    "        itemId:\"textTEditor\",\r",
                    "        fieldLabel:\"Text\",\r",
                    "        labelWidth:60,\r",
                    "        anchor:\"100%\",\r",
                    "        value:Ext.clone(textComponent.eConfig.html)\r",
                    "    });\r",
                    "}\r",
                    "textField.on(\"change\",function(){\r",
                    "    textComponent.eConfig.html=textField.getValue();\r",
                    "    me.syncEComponent(textComponent);\r",
                    "});\r",
                    "target.add(textField);"
                ]
            },
            "designerId": "303dac8f-446a-44a8-a47e-e3b919bcb594"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "displayRowControls",
                "designer|params": [
                    "row"
                ],
                "implHandler": [
                    "var container=Ext.getCmp(\"eTEditControl\");\r",
                    "var bgColorEdit=Ext.widget(\"AdvancedColorField\",{\r",
                    "    noPickerDisplay:true,\r",
                    "    fieldLabel:\"Background color\",\r",
                    "    labelWidth:60,\r",
                    "    allowBlank:true,\r",
                    "    anchor:\"100%\"\r",
                    "});\r",
                    "bgColorEdit.on(\"change\", function(){\r",
                    "    if (bgColorEdit.isValid()){\r",
                    "    \trow.eConfig.bgColor=bgColorEdit.getValue();\r",
                    "    }\r",
                    "});\r",
                    "container.add(bgColorEdit);\r",
                    "bgColorEdit.setValue(Ext.clone(row.eConfig.bgColor));"
                ]
            },
            "designerId": "34e8a10c-3e64-4e4d-a017-52136650366b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "displayColControls",
                "designer|params": [
                    "col"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var container=Ext.getCmp(\"eTEditControl\");\r",
                    "var spanEdit=Ext.widget('numberfield',{\r",
                    "    itemId:\"spanEditor\",\r",
                    "    fieldLabel:\"Width\",\r",
                    "    labelWidth:60,\r",
                    "    editable:true,\r",
                    "    allowDecimals:false,\r",
                    "    anchor:\"100%\",\r",
                    "    value:col.getWidth(),\r",
                    "    minValue:10\r",
                    "});\r",
                    "spanEdit.on(\"change\",function(){\r",
                    "    if (spanEdit.isValid()){\r",
                    "        col.setWidth(spanEdit.getValue());\r",
                    "        me.applyWidthConstraints(spanEdit,col);\r",
                    "    }\r",
                    "});\r",
                    "me.applyWidthConstraints(spanEdit,col);\r",
                    "container.add(spanEdit);\r",
                    "\r",
                    "var bgColorEdit=Ext.widget(\"AdvancedColorField\",{\r",
                    "    noPickerDisplay:true,\r",
                    "    allowBlank:true,\r",
                    "    fieldLabel:\"Background color\",\r",
                    "    labelWidth:60,\r",
                    "    anchor:\"100%\"\r",
                    "});\r",
                    "bgColorEdit.on(\"change\", function(){\r",
                    "    if (bgColorEdit.isValid()){\r",
                    "        col.eConfig.bgColor=bgColorEdit.getValue();\r",
                    "    }\r",
                    "});\r",
                    "container.add(bgColorEdit);\r",
                    "bgColorEdit.setValue(Ext.clone(col.eConfig.bgColor));"
                ]
            },
            "designerId": "22677d58-ca79-4fe3-a0e8-794df8348db5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "displayGenericControls",
                "designer|params": [
                    "component",
                    "target"
                ],
                "implHandler": [
                    "var styleEdit=Ext.widget(\"textareafield\",{\r",
                    "    itemId:\"styleEditor\",\r",
                    "    fieldLabel:\"Style\",\r",
                    "    labelWidth:60,\r",
                    "    anchor:\"100%\",\r",
                    "    grow:true,\r",
                    "    value:Ext.clone(component.eConfig.styles)\r",
                    "\r",
                    "});\r",
                    "styleEdit.on(\"change\", function(){\r",
                    "    component.eConfig.styles=styleEdit.getValue();\r",
                    "});\r",
                    "target.add(styleEdit);"
                ]
            },
            "designerId": "d63e2bd6-990e-48a4-a7a4-8fe138ed452d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "displayBodyControls",
                "implHandler": [
                    "var container=Ext.getCmp(\"eTEditControl\");\r",
                    "var mainBody=Ext.getCmp(\"mainETHolder\");\r",
                    "if (Ext.isEmpty(mainBody.eConfig)){\r",
                    "    mainBody.eConfig={ };\r",
                    "}\r",
                    "var widthDisplayer=Ext.widget(\"displayfield\",{\r",
                    "    labelWidth:60,\r",
                    "    fieldLabel:\"Width\",\r",
                    "    value:mainBody.getWidth()-4\r",
                    "});\r",
                    "container.add(widthDisplayer);\r",
                    "var centerCheckbox=Ext.widget(\"checkbox\",{\r",
                    "    labelWidth:60,\r",
                    "    fieldLabel:\"Centered\",\r",
                    "    inputValue:true,\r",
                    "    checked:Ext.clone(mainBody.eConfig.centered)\r",
                    "});\r",
                    "centerCheckbox.on(\"change\",function(){\r",
                    "    mainBody.eConfig.centered=centerCheckbox.getValue();\r",
                    "});\r",
                    "container.add(centerCheckbox);\r",
                    "var styleEdit=Ext.widget(\"textareafield\",{\r",
                    "    itemId:\"styleEditor\",\r",
                    "    fieldLabel:\"Style\",\r",
                    "    labelWidth:60,\r",
                    "    anchor:\"100%\",\r",
                    "    grow:true,\r",
                    "    value:Ext.clone(mainBody.eConfig.styles)\r",
                    "\r",
                    "});\r",
                    "styleEdit.on(\"change\", function(){\r",
                    "    mainBody.eConfig.styles=styleEdit.getValue();\r",
                    "});\r",
                    "container.add(styleEdit);\r",
                    "var bgColorEdit=Ext.widget(\"AdvancedColorField\",{\r",
                    "    noPickerDisplay:true,\r",
                    "    allowBlank:true,\r",
                    "    fieldLabel:\"Background color\",\r",
                    "    labelWidth:60,\r",
                    "    anchor:\"100%\"\r",
                    "});\r",
                    "bgColorEdit.on(\"change\", function(){\r",
                    "    if (bgColorEdit.isValid()){\r",
                    "    mainBody.eConfig.bgColor=bgColorEdit.getValue();\r",
                    "    }\r",
                    "});\r",
                    "container.add(bgColorEdit);\r",
                    "bgColorEdit.setValue(Ext.clone(mainBody.eConfig.bgColor));\r",
                    "var bodybgColorEdit=Ext.widget(\"AdvancedColorField\",{\r",
                    "    noPickerDisplay:true,\r",
                    "    allowBlank:true,\r",
                    "    fieldLabel:\"Body background color\",\r",
                    "    labelWidth:60,\r",
                    "    anchor:\"100%\"\r",
                    "});\r",
                    "bodybgColorEdit.on(\"change\", function(){\r",
                    "    if (bodybgColorEdit.isValid()){\r",
                    "    mainBody.eConfig.bodyBgColor=bodybgColorEdit.getValue();\r",
                    "    }\r",
                    "});\r",
                    "container.add(bodybgColorEdit);\r",
                    "bodybgColorEdit.setValue(Ext.clone(mainBody.eConfig.bodyBgColor));"
                ]
            },
            "designerId": "46f52be4-faba-49ae-9c03-09a59a8d08e6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewETBtnClick",
                "implHandler": [
                    "Ext.widget(\"newEmailTemplateWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newETBtn"
            },
            "designerId": "ba961974-4379-4a9b-994f-424df94c7dc5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDeleteEtBtnClick",
                "implHandler": [
                    "var fenetre = Ext.widget('delConfirmZ');\r",
                    "fenetre.show();\r",
                    "Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "    Ext.getCmp(\"mainETGrid\").getStore().remove(Ext.getCmp(\"mainETGrid\").getSelectionModel().getLastSelected());\r",
                    "    Ext.getCmp('delConfirmZ').close();\r",
                    "}); "
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#deleteEtBtn"
            },
            "designerId": "a0e9e761-d2ab-4d4e-ae6a-cdbb9cf7ebd5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetETSelect",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "Ext.getCmp(\"deleteEtBtn\").enable();\r",
                    "Ext.getCmp(\"ETSaverBG\").enable();\r",
                    "Ext.getCmp(\"ETppBG\").enable();\r",
                    "Ext.getCmp(\"mainETHolder\").removeAll();\r",
                    "Ext.getCmp(\"elementETIdField\").setValue(null);\r",
                    "Ext.getCmp(\"mainETHolder\").setWidth(record.get(\"bodyProperties\").bodyWidth+4);\r",
                    "Ext.getCmp(\"mainEmailForm\").getForm().setValues(record.getData());\r",
                    "this.renderRows(record.get(\"rows\"), Ext.getCmp(\"mainETHolder\"));\r",
                    "Ext.getCmp(\"mainETHolder\").eConfig=Ext.clone(record.get(\"bodyProperties\"));\r",
                    "if (record.get(\"isMailModel\")){\r",
                    "    Ext.getCmp(\"ETEploit\").disable();\r",
                    "} else {\r",
                    "    Ext.getCmp(\"ETEploit\").enable();\r",
                    "}\r",
                    "if (Ext.getCmp(\"ETPreviewPanel\").up().getLayout().getActiveItem()==Ext.getCmp(\"ETPreviewPanel\")){\r",
                    "    Ext.getCmp(\"ETPreviewPanel\").removeAll();\r",
                    "Ext.getCmp(\"ETPreviewPanel\").add(Ext.widget(\"component\",{\r",
                    "                autoEl: {\r",
                    "                    tag: 'iframe',\r",
                    "                    src: window.location.protocol+\"//\"+window.location.host+\"/backoffice/emails/preview?id=\"+record.get(\"id\")\r",
                    "                }\r",
                    "            }));\r",
                    "}"
                ]
            },
            "designerId": "4c33d954-eec4-497a-8042-7c575d73ee16"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetETNoSelect",
                "implHandler": [
                    "Ext.getCmp(\"deleteEtBtn\").disable();\r",
                    "Ext.getCmp(\"ETSaverBG\").disable();\r",
                    "Ext.getCmp(\"ETppBG\").disable();\r",
                    "Ext.getCmp(\"ETEploit\").disable();\r",
                    "Ext.getCmp(\"mainETHolder\").removeAll();\r",
                    "Ext.getCmp(\"mainEmailForm\").getForm().reset();\r",
                    "Ext.getCmp(\"elementETIdField\").setValue(null);\r",
                    "Ext.getCmp(\"ETPreviewPanel\").removeAll();"
                ]
            },
            "designerId": "f538eef0-7f20-4258-ad4f-510aca13f01c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewETSubmitBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    var values=form.getValues();\r",
                    "    var newET=Ext.create(\"Rubedo.model.emailTemplateModel\",{\r",
                    "        text:values.text,\r",
                    "        subject:values.text,\r",
                    "        isMailModel:values.isModel,\r",
                    "        rows: [ ],\r",
                    "        bodyProperties:{\r",
                    "            style:\"\",\r",
                    "            centered:true,\r",
                    "            bodyWidth:values.bodyWidth,\r",
                    "            bgColor:\"\",\r",
                    "            bodyBgColor:\"\" \r",
                    "        }\r",
                    "\r",
                    "    });\r",
                    "    if ((!values.isModel)&&(values.useModel)){\r",
                    "        var record=Ext.getCmp(\"mainETGrid\").getStore().findRecord(\"id\",values.model);\r",
                    "        newET.set(\"bodyProperties\", Ext.clone(record.get(\"bodyProperties\")));\r",
                    "        newET.set(\"rows\", Ext.clone(record.get(\"rows\")));\r",
                    "    }\r",
                    "    Ext.getStore(\"EmailTemplates\").add(newET);\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newETSubmitBtn"
            },
            "designerId": "4a01c750-51cf-4e03-99b7-3672e990d575"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMainETGridSelectionChange",
                "implHandler": [
                    "var me=this;\r",
                    "if (Ext.isEmpty(selected)){\r",
                    "    me.resetETNoSelect();\r",
                    "} else {\r",
                    "    me.resetETSelect(selected[0]);\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#mainETGrid"
            },
            "designerId": "412133d3-56e4-42ed-94cb-688bd61cc1a8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderRows",
                "designer|params": [
                    "rows",
                    "target"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var newRows=[ ];\r",
                    "Ext.Array.forEach(rows, function(row){\r",
                    "    var newRow=Ext.widget(\"panel\",{\r",
                    "        eType:\"row\",\r",
                    "        plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],\r",
                    "        id:row.id,\r",
                    "        layout: {\r",
                    "            type: 'hbox',\r",
                    "            align: 'stretchmax'\r",
                    "        },\r",
                    "        eConfig:row.config,\r",
                    "        flex:undefined,\r",
                    "        minHeight:30\r",
                    "\r",
                    "    });\r",
                    "    Ext.Array.forEach(row.cols, function(col){\r",
                    "        var newCol=Ext.widget(\"panel\",{\r",
                    "            eType:\"col\",\r",
                    "            id:col.id,\r",
                    "            layout: {\r",
                    "                type: 'vbox',\r",
                    "                align: 'stretch'\r",
                    "            },\r",
                    "            eConfig:col.config,\r",
                    "            width:col.width,\r",
                    "            flex:undefined,\r",
                    "            minHeight:28\r",
                    "        });\r",
                    "        Ext.Array.forEach(col.components, function(component){\r",
                    "            var newComponent=Ext.widget(\"panel\",{\r",
                    "                eType:component.type,\r",
                    "                id:component.id,\r",
                    "                layout: {\r",
                    "                    type: 'fit'\r",
                    "                },\r",
                    "                eConfig:component.config,\r",
                    "                flex:undefined,\r",
                    "                minHeight:26\r",
                    "\r",
                    "            });\r",
                    "            newCol.add(newComponent);\r",
                    "            me.syncEComponent(newComponent, true);\r",
                    "\r",
                    "        });\r",
                    "        newRow.add(newCol);\r",
                    "    });\r",
                    "    newRows.push(newRow);\r",
                    "});\r",
                    "target.add(newRows);\r",
                    "var task = new Ext.util.DelayedTask(function(){\r",
                    "    target.doLayout();\r",
                    "});\r",
                    "task.delay(300);"
                ]
            },
            "designerId": "66737ad7-f6ee-4e03-b9a8-a9aeeffaf36b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveRows",
                "implHandler": [
                    "var rows=[ ];\r",
                    "Ext.Array.forEach(Ext.getCmp(\"mainETHolder\").items.items, function(row){\r",
                    "    var myCols=[ ];\r",
                    "    Ext.Array.forEach(row.items.items, function(col){\r",
                    "        var myComponents=[ ];\r",
                    "        Ext.Array.forEach(col.items.items, function(component){\r",
                    "            myComponents.push({\r",
                    "                type:component.eType,\r",
                    "                id:component.getId(),\r",
                    "                config:component.eConfig\r",
                    "            });\r",
                    "        });\r",
                    "        var newCol={\r",
                    "            width:col.width,\r",
                    "            config:col.eConfig,\r",
                    "            id:col.getId(),\r",
                    "            components:myComponents\r",
                    "        };\r",
                    "        myCols.push(newCol);\r",
                    "    });\r",
                    "    var newRow={\r",
                    "        config:row.eConfig,\r",
                    "        id:row.getId(),\r",
                    "        cols:myCols\r",
                    "    };\r",
                    "    rows.push(newRow);\r",
                    "});\r",
                    "return(rows);"
                ]
            },
            "designerId": "f8af1a56-22d1-4914-bbac-d3b3dcefd642"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSaveETBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var form=Ext.getCmp(\"mainEmailForm\").getForm();\r",
                    "if (form.isValid()){\r",
                    "    var record=Ext.getCmp(\"mainETGrid\").getSelectionModel().getLastSelected();\r",
                    "    record.beginEdit();\r",
                    "    record.set(\"bodyProperties\",Ext.getCmp(\"mainETHolder\").eConfig);\r",
                    "    record.set(\"rows\",me.saveRows());\r",
                    "    record.set(form.getValues());\r",
                    "    record.endEdit();\r",
                    "} else {\r",
                    "    Ext.getCmp(\"mainEmailForm\").up().setActiveTab(1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#saveETBtn"
            },
            "designerId": "0b657bfa-71c6-4013-9472-c75482953b2b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onETPreviewPanelActivate",
                "implHandler": [
                    "component.removeAll();\r",
                    "component.add(Ext.widget(\"component\",{\r",
                    "                autoEl: {\r",
                    "                    tag: 'iframe',\r",
                    "                    src: window.location.protocol+\"//\"+window.location.host+\"/backoffice/emails/preview?id=\"+Ext.getCmp(\"mainETGrid\").getSelectionModel().getLastSelected().get(\"id\")\r",
                    "                }\r",
                    "            }));"
                ],
                "name": "activate",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#ETPreviewPanel"
            },
            "designerId": "23bddfb2-a7df-4446-9fe9-60a501926b40"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onETSendBtnClick",
                "implHandler": [
                    "Ext.widget(\"sendEmailWindow\").show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#ETSendBtn"
            },
            "designerId": "8305340b-74a2-4ef5-8b10-cda7a8d8f1cc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSendEmailSubmitBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    \r",
                    "    Ext.Msg.confirm(Rubedo.RubedoAutomatedElementsLoc.warningTitle, \"Are you sure you want to send this email to all users subscribed to the selected mailing list ?\" ,function(anser){\r",
                    "                    if (anser==\"yes\"){\r",
                    "                       button.setLoading(true);\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'emails/send',\r",
                    "        method: 'POST',\r",
                    "        params: {\r",
                    "            list: form.getValues().mailingList,\r",
                    "            id:Ext.getCmp(\"mainETGrid\").getSelectionModel().getLastSelected().get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var text = Ext.JSON.decode(response.responseText);\r",
                    "            if (text.success){\r",
                    "                Ext.Msg.alert(\"Success\", \"Mail sent\");\r",
                    "                button.setLoading(false);\r",
                    "                button.up().up().close();\r",
                    "            } else {\r",
                    "                Ext.Msg.alert(\"Error\", \"Error sending mail\");\r",
                    "                button.setLoading(false);\r",
                    "            }\r",
                    "        }\r",
                    "    }); \r",
                    "                        \r",
                    "                    }\r",
                    "                }\r",
                    "\r",
                    "            );\r",
                    "    \r",
                    "   \r",
                    "    \r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#sendEmailSubmitBtn"
            },
            "designerId": "e7990ed9-5be7-419c-8744-d0ef6c0a7bc0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onETAddSimpleTextBtnClick",
                "implHandler": [
                    "var me=this;\r",
                    "var newText=Ext.widget(\"panel\",{\r",
                    "    eType:\"textComponent\",\r",
                    "    id:\"emailType-\"+Ext.id(),\r",
                    "    layout: {\r",
                    "        type: 'fit'\r",
                    "    },\r",
                    "    eConfig:{\r",
                    "        html:null,\r",
                    "                       simpleTextMode:true,\r",
                    "        styles:\"\"\r",
                    "    },\r",
                    "    flex:undefined,\r",
                    "    minHeight:26\r",
                    "\r",
                    "});\r",
                    "Ext.getCmp(Ext.getCmp(\"elementETIdField\").getValue()).add(newText);\r",
                    "me.syncEComponent(newText, true);\r",
                    "newText.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#ETAddSimpleTextBtn"
            },
            "designerId": "d3823b2c-405c-41d3-bce4-739827af49a1"
        }
    ]
}