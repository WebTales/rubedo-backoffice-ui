{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "ImportController",
        "designer|userClassName": "ImportController"
    },
    "designerId": "3923be22-e5f8-4dac-b18f-8fc3eb86f640",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mainCSVinportField, #chooseEncodingField",
                "designer|targetType": "Ext.form.field.File",
                "fn": "onMainCSVinportFieldChange",
                "implHandler": [
                    "if ((value)&&(!filefield.notNow)) {\r",
                    "    var form= filefield.up().up().getForm();\r",
                    "    filefield.up().up().up().setLoading(true);\r",
                    "    form.submit({\r",
                    "        clientValidation: true,\r",
                    "        url: 'import/analyse',\r",
                    "        params: {\r",
                    "\r",
                    "        },\r",
                    "        success: function(form, action) {\r",
                    "            var response = Ext.JSON.decode(action.response.responseText);\r",
                    "            Ext.getStore(\"NotInportFieldsStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsFieldStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsTaxoStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsFieldTranslationStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsTaxoTranslationStore\").removeAll();\r",
                    "            Ext.getCmp(\"fileFieldHelper1\").show();\r",
                    "            Ext.getStore(\"NotInportFieldsStore\").loadData(response.detectedFields);\r",
                    "            filefield.up().nextSibling().getComponent(0).setTitle(response.detectedFieldsCount+\" \"+Rubedo.RubedoAutomatedElementsLoc.identifiedFieldsText+\" \"+response.detectedContentsCount+\" \"+Rubedo.RubedoAutomatedElementsLoc.importableContentsText);\r",
                    "            filefield.up().up().up().setLoading(false);\r",
                    "            Ext.getCmp(\"chooseEncodingField\").enable();\r",
                    "            Ext.getCmp(\"chooseEncodingField\").allowBank=false;\r",
                    "            Ext.getCmp(\"chooseEncodingField\").getStore().removeAll();\r",
                    "            var possibleEncodings=response.encoding.charsetList;\r",
                    "            var introducer=[ ];\r",
                    "            Ext.Array.forEach(possibleEncodings, function(thing){\r",
                    "                introducer.push([thing,thing]);\r",
                    "            });\r",
                    "            Ext.getCmp(\"chooseEncodingField\").getStore().loadData(introducer);\r",
                    "            Ext.getCmp(\"chooseEncodingField\").notNow=true;\r",
                    "            Ext.getCmp(\"chooseEncodingField\").setValue(response.encoding.defaultEncoding);\r",
                    "            var task = new Ext.util.DelayedTask(function(){\r",
                    "                Ext.getCmp(\"chooseEncodingField\").notNow=false;\r",
                    "            });\r",
                    "            task.delay(300);\r",
                    "\r",
                    "        },\r",
                    "        failure: function(form, action) {\r",
                    "            filefield.up().up().up().setLoading(false);\r",
                    "            var message = Rubedo.RubedoAutomatedElementsLoc.fileAnalysisError;\r",
                    "            try {\r",
                    "                var response = Ext.JSON.decode(action.response.responseText);\r",
                    "                if (response.message){\r",
                    "                    message=response.message;\r",
                    "                }\r",
                    "            } catch(err){}\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, message);\r",
                    "                filefield.reset();\r",
                    "            }\r",
                    "        });\r",
                    "    }"
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "05f2ffe9-d0fa-4a54-9b25-797971c64291"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mainImportSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMainImportSubmitBtnClick",
                "implHandler": [
                    "var myForm = button.up().getForm();\r",
                    "if (myForm.isValid()){\r",
                    "    var configs=myForm.getValues();\r",
                    "    Ext.Array.forEach(Ext.getStore(\"InportAsFieldStore\").getRange(), function(record){\r",
                    "        if ((record.get(\"protoId\")!=\"text\")&&(record.get(\"protoId\")!=\"summary\")){\r",
                    "            var protoCType=Ext.getStore(\"TypesChampsDataStore\").findRecord(\"id\", record.get(\"protoId\")).get(\"cType\");\r",
                    "            var interv2=Ext.clone(Ext.create(protoCType).xtype);\r",
                    "            record.set(\"cType\",interv2);\r",
                    "            if (Ext.isEmpty(record.get(\"newName\"))){\r",
                    "                record.set(\"newName\", record.get(\"name\"));\r",
                    "            }\r",
                    "            if (Ext.isEmpty(record.get(\"label\"))){\r",
                    "                record.set(\"label\", record.get(\"newName\"));\r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "    Ext.Array.forEach(Ext.getStore(\"InportAsTaxoStore\").getRange(), function(record){\r",
                    "        if (Ext.isEmpty(record.get(\"newName\"))){\r",
                    "            record.set(\"newName\", record.get(\"name\"));\r",
                    "        }\r",
                    "    });\r",
                    "    var inportAsField=Ext.Array.pluck(Ext.getStore(\"InportAsFieldStore\").getRange(), \"data\");\r",
                    "    var inportAsTaxo=Ext.Array.pluck(Ext.getStore(\"InportAsTaxoStore\").getRange(), \"data\");\r",
                    "    var inportAsFieldTranslation=Ext.Array.pluck(Ext.getStore(\"InportAsFieldTranslationStore\").getRange(), \"data\");\r",
                    "    var inportAsTaxoTranslation=Ext.Array.pluck(Ext.getStore(\"InportAsTaxoTranslationStore\").getRange(), \"data\");\r",
                    "    var form=Ext.getCmp(\"mainCSVinportField\").up().up().getForm();\r",
                    "    var mainImportWindow=Ext.getCmp(\"InportInterface\");\r",
                    "    if (mainImportWindow.whatToImport==\"products\"){\r",
                    "        configs.isProduct=true;\r",
                    "        Ext.apply(configs,Ext.getCmp(\"importProductOptionsForm\").getForm().getValues());\r",
                    "    }\r",
                    "    var paramsToSend={\r",
                    "            configs:Ext.JSON.encode(configs),\r",
                    "            inportAsField: Ext.JSON.encode(inportAsField),\r",
                    "            inportAsTaxo: Ext.JSON.encode(inportAsTaxo),\r",
                    "            inportAsFieldTranslation: Ext.JSON.encode(inportAsFieldTranslation),\r",
                    "            inportAsTaxoTranslation: Ext.JSON.encode(inportAsTaxoTranslation)\r",
                    "        };\r",
                    "    \r",
                    "    button.up().up().setLoading(true);\r",
                    "    form.submit({\r",
                    "        url: 'import/import',\r",
                    "        params: paramsToSend,\r",
                    "        success: function(form, action) {\r",
                    "            var response = Ext.JSON.decode(action.response.responseText);\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, response.importedContentsCount+\" \"+Rubedo.RubedoAutomatedElementsLoc.importedContentsText);\r",
                    "            button.up().up().setLoading(false);\r",
                    "            button.up().up().close();\r",
                    "            Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers(\"Taxonomy\",\"fakeStore\");\r",
                    "            Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers(\"ContentTypes\",\"fakeStore\");\r",
                    "            Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers(\"contents\",\"fakeStore\");\r",
                    "\r",
                    "        },\r",
                    "        failure: function(form, action) {\r",
                    "            button.up().up().setLoading(false);\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.importError);\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "171c9f08-971b-4b77-ab50-d1b65fecdbcc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#fileFieldHelper1",
                "designer|targetType": "Ext.button.Button",
                "fn": "onFileFieldHelper1Click",
                "implHandler": [
                    "Ext.getCmp(\"mainCSVinportField\").reset();\r",
                    "Ext.getStore(\"NotInportFieldsStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsFieldStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsTaxoStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsFieldTranslationStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsTaxoTranslationStore\").removeAll();\r",
                    "Ext.getCmp(\"chooseEncodingField\").getStore().removeAll();\r",
                    "Ext.getCmp(\"chooseEncodingField\").allowBlank=true;\r",
                    "Ext.getCmp(\"chooseEncodingField\").disable();\r",
                    "Ext.getCmp(\"chooseEncodingField\").setValue(null);\r",
                    "button.hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "d874ff6a-0216-465e-85c9-b75bdb6e1eaa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#importChoiceSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onImportChoiceSubmitBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    Ext.widget(\"InportInterface\", form.getValues()).show();\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "c9e0adc1-8a1d-44d4-b224-dfc3bb98681c"
        }
    ]
}