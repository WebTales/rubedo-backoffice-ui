{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "ImportController",
        "designer|userClassName": "ImportController"
    },
    "designerId": "3923be22-e5f8-4dac-b18f-8fc3eb86f640",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mainCSVinportField, #chooseEncodingField",
                "designer|targetType": "Ext.form.field.File",
                "fn": "onMainCSVinportFieldChange",
                "implHandler": [
                    "if ((value)&&(!filefield.notNow)) {\r",
                    "    var form= filefield.up().up().getForm();\r",
                    "    filefield.up().up().up().setLoading(true);\r",
                    "    form.submit({\r",
                    "        clientValidation: true,\r",
                    "        url: 'import/analyse',\r",
                    "        params: {\r",
                    "\r",
                    "        },\r",
                    "        success: function(form, action) {\r",
                    "            var response = Ext.JSON.decode(action.response.responseText);\r",
                    "            Ext.getStore(\"NotInportFieldsStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsFieldStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsTaxoStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsFieldTranslationStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsTaxoTranslationStore\").removeAll();\r",
                    "            Ext.getCmp(\"fileFieldHelper1\").show();\r",
                    "            Ext.getStore(\"NotInportFieldsStore\").loadData(response.detectedFields);\r",
                    "            Ext.getCmp(\"InportInterface\").initailRecoveredCsvFields=response.detectedFields;\r",
                    "            Ext.getCmp(\"importPresetsPannel\").enable();\r",
                    "            try {\r",
                    "                filefield.up().nextSibling().getComponent(0).setTitle(response.detectedFieldsCount+\" \"+Rubedo.RubedoAutomatedElementsLoc.identifiedFieldsText+\" \"+response.detectedContentsCount+\" \"+Rubedo.RubedoAutomatedElementsLoc.importableContentsText);\r",
                    "            } catch (err){}\r",
                    "            filefield.up().up().up().setLoading(false);\r",
                    "            Ext.getCmp(\"chooseEncodingField\").enable();\r",
                    "            Ext.getCmp(\"chooseEncodingField\").allowBank=false;\r",
                    "            Ext.getCmp(\"chooseEncodingField\").getStore().removeAll();\r",
                    "            var possibleEncodings=response.encoding.charsetList;\r",
                    "            var introducer=[ ];\r",
                    "            Ext.Array.forEach(possibleEncodings, function(thing){\r",
                    "                introducer.push([thing,thing]);\r",
                    "            });\r",
                    "            Ext.getCmp(\"chooseEncodingField\").getStore().loadData(introducer);\r",
                    "            Ext.getCmp(\"chooseEncodingField\").notNow=true;\r",
                    "            Ext.getCmp(\"chooseEncodingField\").setValue(response.encoding.defaultEncoding);\r",
                    "            var task = new Ext.util.DelayedTask(function(){\r",
                    "                Ext.getCmp(\"chooseEncodingField\").notNow=false;\r",
                    "            });\r",
                    "            task.delay(300);\r",
                    "\r",
                    "        },\r",
                    "        failure: function(form, action) {\r",
                    "            filefield.up().up().up().setLoading(false);\r",
                    "            var message = Rubedo.RubedoAutomatedElementsLoc.fileAnalysisError;\r",
                    "            try {\r",
                    "                var response = Ext.JSON.decode(action.response.responseText);\r",
                    "                if (response.message){\r",
                    "                    message=response.message;\r",
                    "                }\r",
                    "            } catch(err){}\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, message);\r",
                    "                filefield.reset();\r",
                    "            }\r",
                    "        });\r",
                    "    }"
                ],
                "name": "change",
                "scope": "me"
            },
            "name": "onMainCSVinportFieldChange",
            "designerId": "05f2ffe9-d0fa-4a54-9b25-797971c64291"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mainImportSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMainImportSubmitBtnClick",
                "implHandler": [
                    "var myForm = button.up().getForm();\r",
                    "if (myForm.isValid()){\r",
                    "    var configs=myForm.getValues();\r",
                    "    Ext.Array.forEach(Ext.getStore(\"InportAsFieldStore\").getRange(), function(record){\r",
                    "        if ((record.get(\"protoId\")!=\"text\")&&(record.get(\"protoId\")!=\"summary\")){\r",
                    "            var protoCType=Ext.getStore(\"TypesChampsDataStore\").findRecord(\"id\", record.get(\"protoId\")).get(\"cType\");\r",
                    "            var interv2=Ext.clone(Ext.create(protoCType).xtype);\r",
                    "            record.set(\"cType\",interv2);\r",
                    "            if (Ext.isEmpty(record.get(\"newName\"))){\r",
                    "                record.set(\"newName\", record.get(\"name\"));\r",
                    "            }\r",
                    "            if (Ext.isEmpty(record.get(\"label\"))){\r",
                    "                record.set(\"label\", record.get(\"newName\"));\r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "    Ext.Array.forEach(Ext.getStore(\"InportAsTaxoStore\").getRange(), function(record){\r",
                    "        if (Ext.isEmpty(record.get(\"newName\"))){\r",
                    "            record.set(\"newName\", record.get(\"name\"));\r",
                    "        }\r",
                    "    });\r",
                    "    var inportAsField=Ext.Array.pluck(Ext.getStore(\"InportAsFieldStore\").getRange(), \"data\");\r",
                    "    var inportAsTaxo=Ext.Array.pluck(Ext.getStore(\"InportAsTaxoStore\").getRange(), \"data\");\r",
                    "    var inportAsFieldTranslation=Ext.Array.pluck(Ext.getStore(\"InportAsFieldTranslationStore\").getRange(), \"data\");\r",
                    "    var inportAsTaxoTranslation=Ext.Array.pluck(Ext.getStore(\"InportAsTaxoTranslationStore\").getRange(), \"data\");\r",
                    "    var form=Ext.getCmp(\"mainCSVinportField\").up().up().getForm();\r",
                    "    var mainImportWindow=Ext.getCmp(\"InportInterface\");\r",
                    "    if (mainImportWindow.whatToImport==\"products\"){\r",
                    "        configs.isProduct=true;\r",
                    "        Ext.apply(configs,Ext.getCmp(\"importProductOptionsForm\").getForm().getValues());\r",
                    "    }\r",
                    "    var paramsToSend={\r",
                    "            configs:Ext.JSON.encode(configs),\r",
                    "            inportAsField: Ext.JSON.encode(inportAsField),\r",
                    "            inportAsTaxo: Ext.JSON.encode(inportAsTaxo),\r",
                    "            inportAsFieldTranslation: Ext.JSON.encode(inportAsFieldTranslation),\r",
                    "            inportAsTaxoTranslation: Ext.JSON.encode(inportAsTaxoTranslation)\r",
                    "        };\r",
                    "\r",
                    "    button.up().up().setLoading(true);\r",
                    "    form.submit({\r",
                    "        url: 'import/import',\r",
                    "        params: paramsToSend,\r",
                    "        success: function(form, action) {\r",
                    "            var response = Ext.JSON.decode(action.response.responseText);\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, response.importedContentsCount+\" \"+Rubedo.RubedoAutomatedElementsLoc.importedContentsText);\r",
                    "            button.up().up().setLoading(false);\r",
                    "            button.up().up().close();\r",
                    "            Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers(\"Taxonomy\",\"fakeStore\");\r",
                    "            Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers(\"ContentTypes\",\"fakeStore\");\r",
                    "            Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers(\"contents\",\"fakeStore\");\r",
                    "\r",
                    "        },\r",
                    "        failure: function(form, action) {\r",
                    "            button.up().up().setLoading(false);\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.importError);\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMainImportSubmitBtnClick",
            "designerId": "171c9f08-971b-4b77-ab50-d1b65fecdbcc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#fileFieldHelper1",
                "designer|targetType": "Ext.button.Button",
                "fn": "onFileFieldHelper1Click",
                "implHandler": [
                    "Ext.getCmp(\"mainCSVinportField\").reset();\r",
                    "Ext.getStore(\"NotInportFieldsStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsFieldStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsTaxoStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsFieldTranslationStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsTaxoTranslationStore\").removeAll();\r",
                    "Ext.getCmp(\"chooseEncodingField\").getStore().removeAll();\r",
                    "Ext.getCmp(\"chooseEncodingField\").allowBlank=true;\r",
                    "Ext.getCmp(\"chooseEncodingField\").disable();\r",
                    "Ext.getCmp(\"chooseEncodingField\").setValue(null);\r",
                    "button.hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFileFieldHelper1Click",
            "designerId": "d874ff6a-0216-465e-85c9-b75bdb6e1eaa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#importChoiceSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onImportChoiceSubmitBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    Ext.widget(\"InportInterface\", form.getValues()).show();\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onImportChoiceSubmitBtnClick",
            "designerId": "c9e0adc1-8a1d-44d4-b224-dfc3bb98681c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#importCtSelector",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onImportCtSelectorSelect",
                "implHandler": [
                    "Ext.getCmp(\"importCTFFieldset\").removeAll();\r",
                    "Ext.getCmp(\"importTaxoFieldset\").removeAll();\r",
                    "Ext.getStore(\"ImportKeyFieldStore\").removeAll();\r",
                    "var record=records[0];\r",
                    "var uniqueKeyFields=[\r",
                    "    {\r",
                    "        name:\"text\",\r",
                    "        label:Rubedo.RubedoAutomatedElementsLoc.titleText\r",
                    "    },\r",
                    "    {\r",
                    "        name:\"summary\",\r",
                    "        label:Rubedo.RubedoAutomatedElementsLoc.summaryText\r",
                    "    }\r",
                    "];\r",
                    "var fieldSelectors=[\r",
                    "{\r",
                    "                            xtype: 'combobox',\r",
                    "                            anchor: '100%',\r",
                    "                            fieldLabel: Rubedo.RubedoAutomatedElementsLoc.titleText,\r",
                    "                            name: \"text\",\r",
                    "                            editable: false,\r",
                    "                            displayField: 'name',\r",
                    "                            forceSelection: true,\r",
                    "                            queryMode: 'local',\r",
                    "                            store: 'NotInportFieldsStore',\r",
                    "    plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")],\r",
                    "                            valueField: 'csvIndex'\r",
                    "                        },\r",
                    "    {\r",
                    "                            xtype: 'combobox',\r",
                    "                            anchor: '100%',\r",
                    "                            fieldLabel: Rubedo.RubedoAutomatedElementsLoc.summaryText,\r",
                    "                            name: \"summary\",\r",
                    "                            editable: false,\r",
                    "                            displayField: 'name',\r",
                    "                            forceSelection: true,\r",
                    "                            queryMode: 'local',\r",
                    "                            store: 'NotInportFieldsStore',\r",
                    "        plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")],\r",
                    "                            valueField: 'csvIndex'\r",
                    "                        }\r",
                    "];\r",
                    "var BOLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "Ext.Array.forEach(record.get(\"champs\"),function(champ){\r",
                    "    var label=champ.config.fieldLabel;\r",
                    "    if (champ.config.i18n&&champ.config.i18n[BOLanguage]&&(!Ext.isEmpty(champ.config.i18n[BOLanguage].fieldLabel))){\r",
                    "        label=champ.config.i18n[BOLanguage].fieldLabel;\r",
                    "    }\r",
                    "    uniqueKeyFields.push({\r",
                    "        name:champ.config.name,\r",
                    "        label:label\r",
                    "    });\r",
                    "    fieldSelectors.push({\r",
                    "                            xtype: 'combobox',\r",
                    "                            anchor: '100%',\r",
                    "                            fieldLabel: label,\r",
                    "                            name:champ.config.name,\r",
                    "                            editable: false,\r",
                    "                            displayField: 'name',\r",
                    "                            forceSelection: true,\r",
                    "                            queryMode: 'local',\r",
                    "                            store: 'NotInportFieldsStore',\r",
                    "        plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")],\r",
                    "                            valueField: 'csvIndex'\r",
                    "                        });\r",
                    "});\r",
                    "if (record.get(\"productType\")==\"configurable\"){\r",
                    "    uniqueKeyFields.push({\r",
                    "        name:\"sku\",\r",
                    "        label:\"Base SKU\"\r",
                    "    });\r",
                    "}\r",
                    "Ext.getStore(\"ImportKeyFieldStore\").loadData(uniqueKeyFields);\r",
                    "Ext.getCmp(\"importCTFFieldset\").add(fieldSelectors);\r",
                    "/*\r",
                    "var taxoSelectors=[];\r",
                    "Ext.Array.forEach(record.get(\"vocabularies\"),function(vocabulary){\r",
                    "    if (vocabulary!=\"navigation\"){\r",
                    "    taxoSelectors.push({\r",
                    "                            xtype: 'combobox',\r",
                    "                            anchor: '100%',\r",
                    "                            fieldLabel: Ext.getStore(\"TaxoForImportKeys\").findRecord(\"id\",vocabulary).get(\"name\"),\r",
                    "                            name: \"taxonomyFields_\"+vocabulary,\r",
                    "                            editable: false,\r",
                    "                            displayField: 'name',\r",
                    "                            forceSelection: true,\r",
                    "                            queryMode: 'local',\r",
                    "                            store: 'NotInportFieldsStore',\r",
                    "        plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")],\r",
                    "                            valueField: 'csvIndex'\r",
                    "                        });\r",
                    "    }\r",
                    "});\r",
                    "Ext.getCmp(\"importTaxoFieldset\").add(taxoSelectors);\r",
                    "*/\r",
                    "if (record.get(\"productType\")==\"configurable\"){\r",
                    "    Ext.getCmp(\"updateImportField\").setValue(true);\r",
                    "    if (Ext.isEmpty(Ext.getCmp(\"importProductOptionsFieldset\"))){\r",
                    "        Ext.getCmp(\"importTaxoFieldset\").up().add(Ext.widget(\"importProductOptionsFieldset\", {anchor:\"100%\"}));\r",
                    "    }\r",
                    "} else {\r",
                    "    Ext.getCmp(\"updateImportField\").setValue(false);\r",
                    "    if (!Ext.isEmpty(Ext.getCmp(\"importProductOptionsFieldset\"))){\r",
                    "        Ext.getCmp(\"importProductOptionsFieldset\").up().remove(Ext.getCmp(\"importProductOptionsFieldset\"));\r",
                    "    }\r",
                    "}"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "onImportCtSelectorSelect",
            "designerId": "56e92d0b-d09a-40be-b63b-95c41ef6a07b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#launchUpdateImportBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onLaunchUpdateImportBtnClick",
                "implHandler": [
                    "var myForm = button.up().up().getForm();\r",
                    "if (myForm.isValid()){\r",
                    "    var configs=myForm.getValues();\r",
                    "    var form=Ext.getCmp(\"mainCSVinportField\").up().up().getForm();\r",
                    "    var paramsToSend={\r",
                    "            configs:Ext.JSON.encode(configs)\r",
                    "\r",
                    "        };\r",
                    "\r",
                    "    Ext.getCmp(\"InportInterface\").setLoading(true);\r",
                    "    form.submit({\r",
                    "        url: 'import/import',\r",
                    "        params: paramsToSend,\r",
                    "        success: function(form, action) {\r",
                    "            var response = Ext.JSON.decode(action.response.responseText);\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, response.importedContentsCount+\" \"+Rubedo.RubedoAutomatedElementsLoc.importedContentsText);\r",
                    "            Ext.getCmp(\"InportInterface\").setLoading(false);\r",
                    "            Ext.getCmp(\"InportInterface\").close();\r",
                    "            Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers(\"Taxonomy\",\"fakeStore\");\r",
                    "            Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers(\"ContentTypes\",\"fakeStore\");\r",
                    "            Rubedo.controller.MainStoresController.prototype.reloadActiveBrothers(\"contents\",\"fakeStore\");\r",
                    "\r",
                    "        },\r",
                    "        failure: function(form, action) {\r",
                    "            Ext.getCmp(\"InportInterface\").setLoading(false);\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.importError);\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onLaunchUpdateImportBtnClick",
            "designerId": "d35606a3-a387-43ac-93df-00be88a5b82b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#importPresetSelectorField",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onImportPresetSelectorFieldChange",
                "implHandler": [
                    "if (Ext.isEmpty(newValue)){\r",
                    "    Ext.getCmp(\"importPresetApplyBtn\").disable();\r",
                    "    Ext.getCmp(\"importPresetDeleteBtn\").disable();\r",
                    "} else {\r",
                    "    Ext.getCmp(\"importPresetApplyBtn\").enable();\r",
                    "    Ext.getCmp(\"importPresetDeleteBtn\").enable();\r",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "name": "onImportPresetSelectorFieldChange",
            "designerId": "c0701845-b432-429a-b9af-88fa2c312f99"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#importPresetApplyBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onImportPresetApplyBtnClick",
                "implHandler": [
                    "var preset=Ext.getCmp(\"importPresetSelectorField\").getStore().findRecord(\"id\",Ext.getCmp(\"importPresetSelectorField\").getValue());\r",
                    "if (preset){\r",
                    "    Ext.Msg.confirm(Rubedo.RubedoAutomatedElementsLoc.warningTitle, \"This action wil override all current import settings. Are you sure you want to apply this preset ?\" ,function(anser){\r",
                    "      if (anser==\"yes\"){\r",
                    "          if (preset.get(\"howToImport\")==\"update\"){\r",
                    "              Ext.getCmp(\"fieldMappingTargetForm\").getForm().setValues(preset.get(\"presetData\"));\r",
                    "              if (!Ext.isEmpty(Ext.getCmp(\"importCtSelector\").getValue())){\r",
                    "                  Ext.getCmp(\"importCtSelector\").fireEvent(\"select\",Ext.getCmp(\"importCtSelector\"),[Ext.getCmp(\"importCtSelector\").getStore().findRecord(\"id\",Ext.getCmp(\"importCtSelector\").getValue())]);\r",
                    "                  var task = new Ext.util.DelayedTask(function(){\r",
                    "                      Ext.getCmp(\"fieldMappingTargetForm\").getForm().setValues(preset.get(\"presetData\"));\r",
                    "                  });\r",
                    "                  task.delay(500);\r",
                    "              }\r",
                    "          } else {\r",
                    "              var notImpStore=Ext.getStore(\"NotInportFieldsStore\");\r",
                    "              notImpStore.loadData(Ext.getCmp(\"InportInterface\").initailRecoveredCsvFields);\r",
                    "              Ext.getStore(\"InportAsFieldStore\").removeAll();\r",
                    "              Ext.getStore(\"InportAsTaxoStore\").removeAll();\r",
                    "              Ext.getStore(\"InportAsFieldTranslationStore\").removeAll();\r",
                    "              Ext.getStore(\"InportAsTaxoTranslationStore\").removeAll();\r",
                    "\r",
                    "              Ext.Array.forEach(preset.get(\"presetData\").inportAsField, function(usedField){\r",
                    "                  var movedRec=notImpStore.findRecord(\"csvIndex\",usedField.csvIndex);\r",
                    "                  if (!Ext.isEmpty(movedRec)){\r",
                    "                      notImpStore.remove(movedRec);\r",
                    "                  }\r",
                    "              });\r",
                    "              Ext.Array.forEach(preset.get(\"presetData\").inportAsTaxo, function(usedField){\r",
                    "                  var movedRec=notImpStore.findRecord(\"csvIndex\",usedField.csvIndex);\r",
                    "                  if (!Ext.isEmpty(movedRec)){\r",
                    "                      notImpStore.remove(movedRec);\r",
                    "                  }\r",
                    "              });\r",
                    "              Ext.Array.forEach(preset.get(\"presetData\").inportAsFieldTranslation, function(usedField){\r",
                    "                  var movedRec=notImpStore.findRecord(\"csvIndex\",usedField.csvIndex);\r",
                    "                  if (!Ext.isEmpty(movedRec)){\r",
                    "                      notImpStore.remove(movedRec);\r",
                    "                  }\r",
                    "              });\r",
                    "              Ext.Array.forEach(preset.get(\"presetData\").inportAsTaxoTranslation, function(usedField){\r",
                    "                  var movedRec=notImpStore.findRecord(\"csvIndex\",usedField.csvIndex);\r",
                    "                  if (!Ext.isEmpty(movedRec)){\r",
                    "                      notImpStore.remove(movedRec);\r",
                    "                  }\r",
                    "              });\r",
                    "              Ext.getStore(\"InportAsFieldStore\").loadData(preset.get(\"presetData\").inportAsField);\r",
                    "              Ext.getStore(\"InportAsTaxoStore\").loadData(preset.get(\"presetData\").inportAsTaxo);\r",
                    "              Ext.getStore(\"InportAsFieldTranslationStore\").loadData(preset.get(\"presetData\").inportAsFieldTranslation);\r",
                    "              Ext.getStore(\"InportAsTaxoTranslationStore\").loadData(preset.get(\"presetData\").inportAsTaxoTranslation);\r",
                    "              if (preset.get(\"whatToImport\")==\"products\"){\r",
                    "                  Ext.getCmp(\"importProductOptionsForm\").getForm().setValues(preset.get(\"presetData\").productSettings);\r",
                    "              }\r",
                    "          }\r",
                    "      }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onImportPresetApplyBtnClick",
            "designerId": "fae066b5-0e44-4f14-8c5c-90174d2e92bf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#importPresetDeleteBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onImportPresetDeleteBtnClick",
                "implHandler": [
                    "var preset=Ext.getCmp(\"importPresetSelectorField\").getStore().findRecord(\"id\",Ext.getCmp(\"importPresetSelectorField\").getValue());\r",
                    "if (preset){\r",
                    "    Ext.Msg.confirm(Rubedo.RubedoAutomatedElementsLoc.warningTitle, \"Are you sure you want to delete this preset ?\" ,function(anser){\r",
                    "      if (anser==\"yes\"){\r",
                    "          Ext.getCmp(\"importPresetSelectorField\").getStore().remove(preset);\r",
                    "          Ext.getCmp(\"importPresetSelectorField\").setValue(null);\r",
                    "      }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onImportPresetDeleteBtnClick",
            "designerId": "e217d524-3c10-40a1-bc86-21d0a341395f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#importPresetSaveBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onImportPresetSaveBtnClick",
                "implHandler": [
                    "if (Ext.getCmp(\"importPresetNameField\").isValid()){\r",
                    "\r",
                    "    var howToImport=Ext.getCmp(\"InportInterface\").howToImport;\r",
                    "    var whatToImport=Ext.getCmp(\"InportInterface\").whatToImport;\r",
                    "    var detectedPresets={ };\r",
                    "    if (howToImport==\"update\"){\r",
                    "        detectedPresets=Ext.getCmp(\"fieldMappingTargetForm\").getForm().getValues();\r",
                    "    } else {\r",
                    "        detectedPresets={\r",
                    "            inportAsField : Ext.Array.pluck(Ext.getStore(\"InportAsFieldStore\").getRange(), \"data\"),\r",
                    "            inportAsTaxo : Ext.Array.pluck(Ext.getStore(\"InportAsTaxoStore\").getRange(), \"data\"),\r",
                    "            inportAsFieldTranslation : Ext.Array.pluck(Ext.getStore(\"InportAsFieldTranslationStore\").getRange(), \"data\"),\r",
                    "            inportAsTaxoTranslation : Ext.Array.pluck(Ext.getStore(\"InportAsTaxoTranslationStore\").getRange(), \"data\")\r",
                    "        };\r",
                    "        if (whatToImport==\"products\"){\r",
                    "            detectedPresets.productSettings=Ext.getCmp(\"importProductOptionsForm\").getForm().getValues();\r",
                    "\r",
                    "        }\r",
                    "    }\r",
                    "    var newSetting={\r",
                    "        name:Ext.getCmp(\"importPresetNameField\").getValue(),\r",
                    "        howToImport:howToImport,\r",
                    "        whatToImport:whatToImport,\r",
                    "        presetData:detectedPresets\r",
                    "    };\r",
                    "    Ext.getStore(\"ImportPresets\").add(newSetting);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onImportPresetSaveBtnClick",
            "designerId": "fc6080c9-d433-4a40-b5ed-5e50ce41a9a5"
        }
    ]
}