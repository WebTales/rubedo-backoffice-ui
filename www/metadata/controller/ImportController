{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "ImportController",
        "designer|userAlias": "ImportController"
    },
    "designerId": "3923be22-e5f8-4dac-b18f-8fc3eb86f640",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onMainCSVinportFieldChange",
                "fn": "onMainCSVinportFieldChange",
                "implHandler": [
                    "if (value) {\r",
                    "    var form= filefield.up().up().getForm();\r",
                    "    filefield.up().up().up().setLoading(true);\r",
                    "    form.submit({\r",
                    "        clientValidation: true,\r",
                    "        url: 'import/analyse',\r",
                    "        params: { \r",
                    "\r",
                    "        },\r",
                    "        success: function(form, action) {\r",
                    "            var response = Ext.JSON.decode(action.response.responseText);\r",
                    "            Ext.getStore(\"NotInportFieldsStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsFieldStore\").removeAll();\r",
                    "            Ext.getStore(\"InportAsTaxoStore\").removeAll();\r",
                    "            Ext.getCmp(\"fileFieldHelper1\").show();\r",
                    "            Ext.getStore(\"NotInportFieldsStore\").loadData(response.detectedFields);\r",
                    "            filefield.up().nextSibling().getComponent(0).setTitle(response.detectedFieldsCount+\" champs identifiés et \"+response.detectedContentsCount+\" contenus importables\");\r",
                    "            filefield.up().up().up().setLoading(false);\r",
                    "\r",
                    "        },\r",
                    "        failure: function(form, action) {\r",
                    "            filefield.up().up().up().setLoading(false);\r",
                    "            var message = \"Erreur dans l'analyse du fichier\";\r",
                    "            try {\r",
                    "                var response = Ext.JSON.decode(action.response.responseText);\r",
                    "                if (response.message){\r",
                    "                    message=response.message;\r",
                    "                }\r",
                    "            } catch(err){}\r",
                    "                Ext.Msg.alert(\"Erreur\", message);\r",
                    "                filefield.reset();\r",
                    "            }\r",
                    "        });\r",
                    "    }"
                ],
                "name": "change",
                "scope": "me",
                "designer|targetType": "Ext.form.field.File",
                "designer|controlQuery": "#mainCSVinportField"
            },
            "designerId": "05f2ffe9-d0fa-4a54-9b25-797971c64291"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onMainImportSubmitBtnClick",
                "fn": "onMainImportSubmitBtnClick",
                "implHandler": [
                    "var myForm = button.up().getForm();\r",
                    "if (myForm.isValid()){\r",
                    "    var configs=myForm.getValues();\r",
                    "    Ext.Array.forEach(Ext.getStore(\"InportAsFieldStore\").getRange(), function(record){\r",
                    "\t\trecord.set(\"cType\",Ext.getStore(\"TypesChampsDataStore\").findRecord(\"id\", record.get(\"protoId\")).get(\"cType\"));\r",
                    "        if (Ext.isEmpty(record.get(\"newName\"))){\r",
                    "            record.set(\"newName\", record.get(\"name\"));\r",
                    "        }\r",
                    "        if (Ext.isEmpty(record.get(\"label\"))){\r",
                    "            record.set(\"label\", record.get(\"newName\"));\r",
                    "        }\r",
                    "    });\r",
                    "    Ext.Array.forEach(Ext.getStore(\"InportAsTaxoStore\").getRange(), function(record){\r",
                    "        if (Ext.isEmpty(record.get(\"newName\"))){\r",
                    "            record.set(\"newName\", record.get(\"name\"));\r",
                    "        }\r",
                    "    });\r",
                    "    var inportAsField=Ext.Array.pluck(Ext.getStore(\"InportAsFieldStore\").getRange(), \"data\");\r",
                    "    var inportAsTaxo=Ext.Array.pluck(Ext.getStore(\"InportAsTaxoStore\").getRange(), \"data\");\r",
                    "    var form=Ext.getCmp(\"mainCSVinportField\").up().up().getForm();\r",
                    "    button.up().up().setLoading(true);\r",
                    "    form.submit({\r",
                    "        url: 'import/import',\r",
                    "        params: { \r",
                    "            configs:Ext.JSON.encode(configs),\r",
                    "            inportAsField: Ext.JSON.encode(inportAsField),\r",
                    "            inportAsTaxo: Ext.JSON.encode(inportAsTaxo)\r",
                    "        },\r",
                    "        success: function(form, action) {\r",
                    "            var response = Ext.JSON.decode(action.response.responseText);\r",
                    "            Ext.Msg.alert(\"Succés\", response.importedContentsCount+\" contenus importés.\");            \r",
                    "            button.up().up().setLoading(false);\r",
                    "            button.up().up().close();\r",
                    "\r",
                    "        },\r",
                    "        failure: function(form, action) {\r",
                    "            button.up().up().setLoading(false);\r",
                    "            Ext.Msg.alert(\"Erreur\", \"Erreur lors de l'importation\");\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#mainImportSubmitBtn"
            },
            "designerId": "171c9f08-971b-4b77-ab50-d1b65fecdbcc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onFileFieldHelper1Click",
                "fn": "onFileFieldHelper1Click",
                "implHandler": [
                    "Ext.getCmp(\"mainCSVinportField\").reset();\r",
                    "Ext.getStore(\"NotInportFieldsStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsFieldStore\").removeAll();\r",
                    "Ext.getStore(\"InportAsTaxoStore\").removeAll();\r",
                    "button.hide();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#fileFieldHelper1"
            },
            "designerId": "d874ff6a-0216-465e-85c9-b75bdb6e1eaa"
        }
    ]
}