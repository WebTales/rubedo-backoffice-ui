{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "MailingListsController",
        "designer|userClassName": "MailingListsController"
    },
    "designerId": "fa7809cb-a36e-40d9-92de-589f62b00143",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#MLMainGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onMLMainGridSelectionChange",
                "implHandler": [
                    "if (Ext.isEmpty(selected)){\r",
                    "    Ext.getCmp(\"MailingListsRemove\").disable();\r",
                    "    Ext.getCmp(\"MailingListsUpdate\").disable();\r",
                    "    Ext.getCmp(\"mlUsersManager\").disable();\r",
                    "    Ext.getCmp(\"MLPropsForm\").getForm().reset();\r",
                    "    Ext.getCmp(\"MLPropsForm\").up().disable();\r",
                    "    Ext.getStore(\"MLUsers\").removeAll();\r",
                    "\r",
                    "} else {\r",
                    "    Ext.getCmp(\"MailingListsRemove\").enable();\r",
                    "    Ext.getCmp(\"MailingListsUpdate\").enable();\r",
                    "    Ext.getCmp(\"mlUsersManager\").enable();\r",
                    "    Ext.getCmp(\"MLPropsForm\").up().enable();\r",
                    "    Ext.getStore(\"MLUsers\").getProxy().extraParams.id=selected[0].get(\"id\");\r",
                    "    Ext.getStore(\"MLUsers\").loadPage(1);\r",
                    "    Ext.getStore(\"MLUnsubscribedUsers\").getProxy().extraParams.id=selected[0].get(\"id\");\r",
                    "    Ext.getStore(\"MLUnsubscribedUsers\").loadPage(1);\r",
                    "    Ext.getCmp(\"MLPropsForm\").getForm().loadRecord(selected[0]);\r",
                    "    if ((selected[0].get(\"readOnly\"))||(!ACL.interfaceRights[\"write.ui.mailingLists\"])){\r",
                    "        Ext.Array.forEach(Ext.getCmp(\"MLPropsForm\").query(\"field\"), function(field){\r",
                    "            field.setReadOnly(true);\r",
                    "        });\r",
                    "        Ext.getCmp(\"MailingListsRemove\").disable();\r",
                    "        Ext.getCmp(\"MailingListsUpdate\").disable();\r",
                    "    } else {\r",
                    "        Ext.Array.forEach(Ext.getCmp(\"MLPropsForm\").query(\"field\"), function(field){\r",
                    "            field.setReadOnly(false);\r",
                    "        });\r",
                    "    }\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "onMLMainGridSelectionChange",
            "designerId": "e737eee8-5bab-4921-90ae-ad163b2bd60f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newMLSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewMLSubmitBtnClick",
                "implHandler": [
                    "var form = button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    var newW= Ext.create(\"Rubedo.model.mailingListsModel\", form.getValues());\r",
                    "    Ext.getStore(\"MailingListsCombo\").add(newW);\r",
                    "    Ext.getStore(\"MailingListsCombo\").addListener(\"datachanged\",function(){Ext.getCmp('MLMainGrid').getSelectionModel().select(newW);},this,{single:true});\r",
                    "    button.up().up().close();\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onNewMLSubmitBtnClick",
            "designerId": "ed3c1b1c-1ec0-4af3-b1ca-b6442ad49630"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#MailingListsAdd",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMailingListsAddClick",
                "implHandler": [
                    "Ext.widget(\"newMLWindow\").show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMailingListsAddClick",
            "designerId": "b5a7fee6-497a-4401-b460-5985ffb6243f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#MailingListsRemove",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMailingListsRemoveClick",
                "implHandler": [
                    "var delCon = Ext.widget('delConfirmZ');\r",
                    "delCon.show();\r",
                    "Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "    Ext.getStore(\"MailingListsCombo\").remove(Ext.getCmp(\"MLMainGrid\").getSelectionModel().getLastSelected());\r",
                    "    Ext.getCmp('delConfirmZ').close();\r",
                    "});  "
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMailingListsRemoveClick",
            "designerId": "4ed08ee9-a5cc-421c-bb43-54a9b133fcb9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#MailingListsUpdate",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMailingListsUpdateClick",
                "implHandler": [
                    "var target = Ext.getCmp(\"MLMainGrid\").getSelectionModel().getLastSelected();\r",
                    "var form = Ext.getCmp(\"MLPropsForm\").getForm();\r",
                    "if (form.isValid()){\r",
                    "    target.set(form.getValues());\r",
                    "}  "
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMailingListsUpdateClick",
            "designerId": "c5b0d7dd-e2a0-4ba9-88cf-2f740c833d0b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mlAddUser",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMlAddUserClick",
                "implHandler": [
                    "Ext.widget(\"subscribeUsersWindow\").show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMlAddUserClick",
            "designerId": "c15df487-80d3-4d4d-a2f1-54c079645657"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mlRemoveUser",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMlRemoveUserClick",
                "implHandler": [
                    "Ext.Ajax.request({\r",
                    "    url: 'mailing-lists/unsubscribe-users', \r",
                    "    method:'POST',\r",
                    "    params: {\r",
                    "        mlId: Ext.getCmp(\"MLMainGrid\").getSelectionModel().getLastSelected().get(\"id\"),\r",
                    "        userEmailArray:Ext.JSON.encode(Ext.Array.pluck(Ext.Array.pluck(Ext.getCmp(\"MLUsersGrid\").getSelectionModel().getSelection(),\"data\"), \"email\"))\r",
                    "    },\r",
                    "    success: function(response){\r",
                    "        var answer=Ext.JSON.decode(response.responseText);\r",
                    "        if (answer.success){\r",
                    "            Ext.getStore(\"MLUsers\").load();\r",
                    "            Ext.getStore(\"MLUnsubscribedUsers\").load();\r",
                    "        } else {\r",
                    "            Ext.Msg.alert(\"Error\",\"User unsubscription error\");\r",
                    "        }\r",
                    "    }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMlRemoveUserClick",
            "designerId": "df1aedca-b003-4dfd-a6ec-049291cbcfb0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#MLUsersGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onMLUsersGridSelectionChange",
                "implHandler": [
                    "if (Ext.isEmpty(selected)){\r",
                    "    Ext.getCmp(\"mlRemoveUser\").disable();\r",
                    "} else {\r",
                    "    Ext.getCmp(\"mlRemoveUser\").enable();\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "onMLUsersGridSelectionChange",
            "designerId": "4b211b10-9e97-494b-99aa-0de3945db6c7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mlExportUsersBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMlExportUsersBtnClick",
                "implHandler": [
                    "window.onbeforeunload=Ext.emptyFn;\r",
                    "    window.location.href=\"mailing-lists/export-users?id=\"+Ext.getCmp(\"MLMainGrid\").getSelectionModel().getLastSelected().get(\"id\");\r",
                    "    var task63 = new Ext.util.DelayedTask(function(){\r",
                    "        window.onbeforeunload = function() { return Rubedo.RubedoAutomatedElementsLoc.windowBeforeUnloadMessage; };\r",
                    "    });\r",
                    "    task63.delay(400);"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMlExportUsersBtnClick",
            "designerId": "f7a78f4e-03b0-49dd-afda-fc98eddd409e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mlImportUsersBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMlImportUsersBtnClick",
                "implHandler": [
                    "Ext.widget(\"mlImportWindow\").show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMlImportUsersBtnClick",
            "designerId": "b2412f82-64e4-42ed-8041-f69cfb05d3a9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mlImportSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onMlImportSubmitBtnClick",
                "implHandler": [
                    "",
                    "var form=button.up().getForm();",
                    "if (form.isValid()){",
                    "    button.up().setLoading(true);",
                    "    form.submit({",
                    "        timeout:600,",
                    "        url: 'mailing-lists/import-users',",
                    "        params: {",
                    "            id:Ext.getCmp(\"MLMainGrid\").getSelectionModel().getLastSelected().get(\"id\")",
                    "        },",
                    "        success: function(form, action) {",
                    "            var response = Ext.JSON.decode(action.response.responseText);",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, response.importedContentsCount+\" Users imported\");",
                    "            button.up().setLoading(false);",
                    "            Ext.getStore(\"MLUsers\").load();",
                    "            button.up().up().close();",
                    "",
                    "        },",
                    "        failure: function(form, action) {",
                    "            button.up().setLoading(false);",
                    "            var message = \"Import error\";",
                    "            try {",
                    "                var response = Ext.JSON.decode(action.response.responseText);",
                    "                if (response.message){",
                    "                    message=response.message;",
                    "                }",
                    "            } catch(err){}",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, message);",
                    "            }",
                    "        });",
                    "    }"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMlImportSubmitBtnClick",
            "designerId": "d6ba22b7-860c-4fdd-b544-83f1fb3e1897"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#subscribeUsersSubmitBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onSubscribeUsersSubmitBtnClick",
                "implHandler": [
                    "var form=button.up().getForm();\r",
                    "if (form.isValid()){\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'mailing-lists/subscribe-users', \r",
                    "        method:'POST',\r",
                    "        params: {\r",
                    "            mlId: Ext.getCmp(\"MLMainGrid\").getSelectionModel().getLastSelected().get(\"id\"),\r",
                    "            userEmailArray:Ext.JSON.encode(form.getValues().emails)\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var answer=Ext.JSON.decode(response.responseText);\r",
                    "            if (answer.success){\r",
                    "                button.up().up().close();\r",
                    "                Ext.getStore(\"MLUsers\").load();\r",
                    "            } else {\r",
                    "                Ext.Msg.alert(\"Error\",\"User subscription error\");\r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onSubscribeUsersSubmitBtnClick",
            "designerId": "e7f00a53-ca32-4bdc-a735-c760f9145b0f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#MLUsersGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onMLMainGridItemDblClick",
                "implHandler": [
                    "if (ACL.interfaceRights['read.ui.users']){\r",
                    "    Rubedo.controller.UserTypesController.prototype.prepareContext(record.get(\"id\"),record.get(\"typeId\"));\r",
                    "}"
                ],
                "name": "itemdblclick",
                "scope": "me"
            },
            "name": "onMLMainGridItemDblClick",
            "designerId": "16bb95a0-942d-46d7-9b07-db3ddaeb0ffe"
        }
    ]
}