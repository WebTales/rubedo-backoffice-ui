{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "ContributionContenusController",
        "models": [
            "contenusDataModel"
        ],
        "stores": [
            "ContenusDataJson"
        ],
        "views": [
            "AjouterContenu"
        ]
    },
    "designerId": "d27eb48c-e6bd-435b-8697-8ff50047fcac",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#TypesContenusGrid",
                "designer|targetType": "Ext.grid.View",
                "fn": "typeSelect",
                "implHandler": [
                    "var filArianne = Ext.getCmp(\"TypesContenusGrid\").findParentByType('window').getDockedComponent('filArianne');",
                    "var typeFil = filArianne.getComponent('type');",
                    "if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.type);}",
                    "else { typeFil= Ext.widget('button',{iconCls: \"folder\", text:record.data.type, itemId:'type'});",
                    "      filArianne.add(typeFil);",
                    "     }",
                    "",
                    "Ext.getCmp(\"ContenusGrid\").getStore().getProxy().extraParams.tFilter=Ext.JSON.encode([{property:\"typeId\",value:record.get(\"id\")}]);",
                    "Ext.getCmp(\"ContenusGrid\").features[0].clearFilters();",
                    "Ext.getCmp(\"ContenusGrid\").getStore().loadPage(1);",
                    "",
                    "Ext.Array.forEach(Ext.getCmp(\"contributionContenus\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.enable();});",
                    "var mixedArray=Ext.Array.intersect(Ext.Array.pluck(Ext.Array.pluck(Ext.getStore(\"ContributeWorkspacesCombo\").getRange(),\"data\"),\"id\"),record.get(\"workspaces\"));",
                    "Ext.getCmp(\"boutonAjouterContenu\").disable();",
                    "if (mixedArray.length>0){",
                    "    Ext.getCmp(\"boutonAjouterContenu\").enable();",
                    "}",
                    "Ext.getCmp(\"ajoutPanierContenus\").disable();",
                    "Ext.getCmp(\"boutonSupprimerContenu\").disable();",
                    "Ext.getCmp(\"boutonModifierContenu\").disable();",
                    "Ext.getCmp(\"boutonCopierContenus\").disable();",
                    "Ext.getCmp(\"contribWorkflowBox\").disable();",
                    "Ext.getCmp(\"contentsExportBtn\").enable();",
                    "",
                    "var  customMeta = record.get(\"type\");",
                    "var imageMeta = Ext.getCmp('contributionContenus').getDockedComponent('barreMeta').getComponent('imageBarreMeta');",
                    "if ((!Ext.isEmpty(record.get(\"productType\")))&&(record.get(\"productType\")!=\"none\")){",
                    "    imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/shopping_cart.png');",
                    "} else {",
                    "    imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');",
                    "}",
                    "var boiteMeta = Ext.getCmp(\"contributionContenus\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');",
                    "boiteMeta.update(customMeta);",
                    "var myDependantTypes= [ ];",
                    "Ext.Array.forEach(record.get(\"dependantTypes\"), function(someType){",
                    "    myDependantTypes.push(Ext.getStore(\"DepTypesForContents\").findRecord(\"id\",someType));",
                    "});",
                    "Ext.getStore(\"DepContentsCombo\").removeAll();",
                    "Ext.getStore(\"DepContentsCombo\").loadData(myDependantTypes);"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "typeSelect",
            "designerId": "0466eea6-c776-4c88-b14e-95220a71766a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonPublierNouveauContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "contentSaveAndPublish",
                "implHandler": [
                    "if (button.specialMode){\r",
                    "    if (Ext.getCmp(\"boiteAChampsContenus\").getForm().isValid()){\r",
                    "        var maskMode = false;\r",
                    "        if (Ext.getCmp(button.targetedId).findParentByType(\"window\").id==\"adminFMDP\"){\r",
                    "            maskMode=true;\r",
                    "        }        \r",
                    "        var champs=Ext.getCmp(\"boiteAChampsContenus\").getForm().getValues();\r",
                    "        try {\r",
                    "            if (maskMode){\r",
                    "                champs.text=Ext.getCmp(Ext.getCmp('elementIdField').getValue()).title;\r",
                    "            } else{\r",
                    "                champs.text=Ext.getCmp(Ext.getCmp('pageElementIdField').getValue()).title;\r",
                    "            }\r",
                    "        } catch(err){\r",
                    "            champs.text=\"Special content\";\r",
                    "        }\r",
                    "        champs.summary=\"\";\r",
                    "        if (button.isUpdate) {\r",
                    "            var myRec =Ext.getStore(\"CurrentContent\").getRange()[0];\r",
                    "            myRec.beginEdit();\r",
                    "            if ((myRec.get(\"text\")!=\"Texte Simple\")&&(myRec.get(\"text\")!=\"Texte Riche\")){\r",
                    "                champs.text=myRec.get(\"text\");\r",
                    "            }\r",
                    "            myRec.set(\"text\",champs.text);\r",
                    "            myRec.set(\"champs\",champs);\r",
                    "            Ext.getCmp(\"contentsDLSToolbar\").persisti18n(myRec);\r",
                    "            myRec.endEdit();\r",
                    "            Ext.getStore(\"CurrentContent\").removeAll();\r",
                    "            Ext.getStore('TaxonomyForC2').removeAll();\r",
                    "            Ext.getStore(\"ContentTypesForContent\").removeAll();\r",
                    "            Ext.getStore(\"DepContentsCombo2\").removeAll();\r",
                    "            Ext.getStore('NestedContentsStore').removeAll();\r",
                    "            Ext.getCmp('ajouterContenu').close();\r",
                    "\r",
                    "        } else{\r",
                    "            Ext.getStore(\"CurrentContent\").removeAll();\r",
                    "            var nativeLanguage=Ext.getCmp(\"workingLanguageField\").getValue();\r",
                    "            var i18n= { };\r",
                    "            i18n[nativeLanguage]={fields:champs};\r",
                    "            var nContenu = Ext.create('Rubedo.model.contenusDataModel', {\r",
                    "                text: champs.text,\r",
                    "                champs: champs,\r",
                    "                nativeLanguage:nativeLanguage,\r",
                    "                i18n:i18n,\r",
                    "                online:true,\r",
                    "                taxonomie:[ ],\r",
                    "                status: \"published\",\r",
                    "                typeId: Ext.getStore(\"ContentTypesForContent2\").getRange()[0].get(\"id\")\r",
                    "\r",
                    "            });\r",
                    "            try {\r",
                    "                if (maskMode){\r",
                    "                    nContenu.set(\"maskId\", Ext.getCmp(\"masquesGrid\").getSelectionModel().getLastSelected().get(\"id\"));\r",
                    "                    nContenu.set(\"blockId\", Ext.getCmp('elementIdField').getValue());\r",
                    "                } else{\r",
                    "                    nContenu.set(\"pageId\", Ext.getCmp(\"mainPageTree\").getSelectionModel().getLastSelected().get(\"id\"));\r",
                    "                    nContenu.set(\"blockId\", Ext.getCmp('pageElementIdField').getValue());\r",
                    "                }\r",
                    "            } catch (err){\r",
                    "            }\r",
                    "            Ext.getStore(\"CurrentContent\").add(nContenu);   \r",
                    "            Ext.getStore(\"CurrentContent\").addListener(\"datachanged\",function(){\r",
                    "                Ext.getCmp(button.targetedId).setValue(nContenu.get(\"id\"));\r",
                    "                Ext.getStore(\"ContentTypesForContent2\").removeAll();\r",
                    "                Ext.getStore(\"CurrentContent\").removeAll();\r",
                    "                Ext.getCmp('ajouterContenu').close();\r",
                    "            },this,{single:true});\r",
                    "\r",
                    "            }\r",
                    "\r",
                    "        }\r",
                    "    } else{\r",
                    "        this.nContenuRecorder('published',button.isUpdate);\r",
                    "    }"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "contentSaveAndPublish",
            "designerId": "0be12317-77a9-4e12-adae-fbd3e1286d46"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonEnregistrerNouveauContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "contentSave",
                "implHandler": [
                    "this.nContenuRecorder('draft', button.isUpdate);"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "contentSave",
            "designerId": "43982057-d428-4c80-892d-67f635c19e58"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#nestedContentsOfflineBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "putNestedContentsOffline",
                "implHandler": [
                    "var myStore = Ext.getCmp(\"NestedContentsGrid\").getStore();\r",
                    "myStore.suspendAutoSync();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"NestedContentsGrid\").getSelectionModel().getSelection(), function(nesC){\r",
                    "    nesC.set(\"online\", false);\r",
                    "});\r",
                    "myStore.resumeAutoSync();\r",
                    "myStore.sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "putNestedContentsOffline",
            "designerId": "87d8077d-4130-4766-b7fe-4ed15619aff3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#NestedContentsGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "nestedContentsSelect",
                "implHandler": [
                    "if (Ext.isEmpty(selected)){\r",
                    "    Ext.getCmp(\"nestedContentsDeleteBtn\").disable();\r",
                    "    Ext.getCmp(\"nestedContentsModifyBtn\").disable();\r",
                    "    Ext.getCmp(\"nestedContentsOnlineBtn\").disable();\r",
                    "    Ext.getCmp(\"nestedContentsOfflineBtn\").disable();\r",
                    "} else if (selected.length==1) {\r",
                    "    Ext.getCmp(\"nestedContentsDeleteBtn\").enable();\r",
                    "    Ext.getCmp(\"nestedContentsModifyBtn\").enable();\r",
                    "    if (selected[0].get(\"online\")){\r",
                    "        Ext.getCmp(\"nestedContentsOnlineBtn\").disable();\r",
                    "        Ext.getCmp(\"nestedContentsOfflineBtn\").enable();\r",
                    "    } else {\r",
                    "        Ext.getCmp(\"nestedContentsOnlineBtn\").enable();\r",
                    "        Ext.getCmp(\"nestedContentsOfflineBtn\").disable();\r",
                    "    }\r",
                    "} else {\r",
                    "    Ext.getCmp(\"nestedContentsModifyBtn\").disable();\r",
                    "    Ext.getCmp(\"nestedContentsDeleteBtn\").enable();    \r",
                    "    var onlines = [];\r",
                    "    Ext.Array.forEach(selected, function(someContent){\r",
                    "        Ext.Array.include(onlines, someContent.get(\"online\"));\r",
                    "    });\r",
                    "    if (onlines.length>1) {\r",
                    "        Ext.getCmp(\"nestedContentsOnlineBtn\").disable();\r",
                    "        Ext.getCmp(\"nestedContentsOfflineBtn\").disable();        \r",
                    "    } else {\r",
                    "        if (onlines[0]) {\r",
                    "            Ext.getCmp(\"nestedContentsOnlineBtn\").disable();\r",
                    "        } else {\r",
                    "            Ext.getCmp(\"nestedContentsOfflineBtn\").disable();\r",
                    "        }}\r",
                    "    }"
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "nestedContentsSelect",
            "designerId": "7c34508b-b7bf-46cc-9bbd-67b7260dcd4f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#contributionContenus",
                "designer|targetType": "Ext.window.Window",
                "fn": "onWindowBeforeClose",
                "implHandler": [
                    "if (panel.isXType(\"window\")){\r",
                    "    Ext.getStore(\"TaxonomyForC\").removeAll();\r",
                    "    Ext.getStore(\"DepContentsCombo\").removeAll();\r",
                    "    Ext.getStore(\"NestedContentsStore\").removeAll();\r",
                    "    Ext.getStore(\"ContenusDataJson\").removeAll();\r",
                    "    Ext.getStore(\"DepTypesForContents\").removeAll();\r",
                    "    Ext.getStore(\"TypesContenusNDepDataJson\").removeAll();\r",
                    "}"
                ],
                "name": "beforeclose",
                "scope": "me"
            },
            "name": "onWindowBeforeClose",
            "designerId": "22ca2295-8f59-4e36-acb8-122494e04a8b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "status",
                    "update"
                ],
                "fn": "nContenuRecorder",
                "implHandler": [
                    "if (Ext.getCmp(\"boiteAChampsContenus\").getForm().isValid()){\r",
                    "    if (Ext.getCmp(\"boiteATaxoContenus\").getForm().isValid()){\r",
                    "        if (Ext.getCmp(\"contentMetadataBox\").getForm().isValid()){\r",
                    "            if((!Ext.isEmpty(Ext.getCmp(\"productSettingsForm\")))&&(!Ext.getCmp(\"productSettingsForm\").isValid())){\r",
                    "\r",
                    "                Ext.getCmp(\"productSettingsForm\").up().setActiveTab(Ext.getCmp(\"productSettingsForm\"));\r",
                    "            } else {\r",
                    "                var champs=Ext.getCmp(\"boiteAChampsContenus\").getForm().getValues();\r",
                    "                Ext.Array.forEach(Ext.getCmp(\"boiteAChampsContenus\").query(\"checkboxgroup\"),function(cbGroup){\r",
                    "                    champs[cbGroup.name]=cbGroup.getValue();\r",
                    "                });\r",
                    "                var taxonomie =Ext.getCmp(\"boiteATaxoContenus\").getForm().getValues();\r",
                    "                var droits = Ext.getCmp(\"boiteADroitsContenus\").getForm().getValues();\r",
                    "                var metaData = Ext.getCmp(\"contentMetadataBox\").getForm().getValues();\r",
                    "                if (update) {\r",
                    "                    var myRec =Ext.getStore(\"CurrentContent\").getRange()[0];\r",
                    "                    myRec.beginEdit();\r",
                    "                    myRec.set(\"text\",champs.text);\r",
                    "                    myRec.set(\"champs\",champs);\r",
                    "                    myRec.set(\"taxonomie\",taxonomie);\r",
                    "                    myRec.set(\"status\",status);\r",
                    "                    myRec.set(metaData);\r",
                    "                    myRec.set(droits);\r",
                    "                    Ext.getCmp(\"contentsDLSToolbar\").persisti18n(myRec);\r",
                    "                    if(!Ext.isEmpty(Ext.getCmp(\"productSettingsForm\"))){\r",
                    "                        myRec.set(\"isProduct\",true);\r",
                    "                        var productSettings=Ext.getCmp(\"productSettingsForm\").getComponent(0).getForm().getValues();\r",
                    "                        productSettings.variations=Ext.Array.pluck(Ext.getCmp(\"productVariationsGrid\").getStore().getRange(),\"data\");\r",
                    "                        myRec.set(\"productProperties\",productSettings);\r",
                    "                    }\r",
                    "                    myRec.endEdit();\r",
                    "                    Ext.getStore(\"CurrentContent\").removeAll();\r",
                    "                    Ext.getStore('TaxonomyForC2').removeAll();\r",
                    "                    Ext.getStore(\"ContentTypesForContent\").removeAll();\r",
                    "                    Ext.getStore(\"DepContentsCombo2\").removeAll();\r",
                    "                    Ext.getStore('NestedContentsStore').removeAll();\r",
                    "\r",
                    "                }\r",
                    "                else {\r",
                    "                    var nativeLanguage=Ext.getCmp(\"workingLanguageField\").getValue();\r",
                    "                    var i18n= { };\r",
                    "                    i18n[nativeLanguage]={fields:champs};\r",
                    "                    var nContenu = Ext.create('Rubedo.model.contenusDataModel', {\r",
                    "                        text: champs.text,\r",
                    "                        champs: champs,\r",
                    "                        taxonomie:taxonomie,\r",
                    "                        nativeLanguage:nativeLanguage,\r",
                    "                        i18n:i18n,\r",
                    "                        online:true,\r",
                    "                        status: status,\r",
                    "                        typeId: Ext.getCmp('TypesContenusGridView').getSelectionModel().getLastSelected().get(\"id\")\r",
                    "\r",
                    "                    });\r",
                    "                    nContenu.set(metaData);\r",
                    "                    nContenu.set(droits);\r",
                    "                    if(!Ext.isEmpty(Ext.getCmp(\"productSettingsForm\"))){\r",
                    "                        nContenu.set(\"isProduct\",true);\r",
                    "                        var productSettings=Ext.getCmp(\"productSettingsForm\").getComponent(0).getForm().getValues();\r",
                    "                        productSettings.variations=Ext.Array.pluck(Ext.getCmp(\"productVariationsGrid\").getStore().getRange(),\"data\");\r",
                    "                        nContenu.set(\"productProperties\",productSettings);\r",
                    "                    }\r",
                    "                    Ext.getCmp('ContenusGrid').getStore().add(nContenu);\r",
                    "                }\r",
                    "                Ext.getCmp('ajouterContenu').close();\r",
                    "            }\r",
                    "        } else {\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle,Rubedo.RubedoAutomatedElementsLoc.invalidMetaError);\r",
                    "            Ext.getCmp(\"ajouterContenu\").getComponent(0).setActiveTab(1);\r",
                    "        }\r",
                    "    } else {\r",
                    "        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle,Rubedo.RubedoAutomatedElementsLoc.invalidTaxoError);\r",
                    "        Ext.getCmp(\"ajouterContenu\").getComponent(0).setActiveTab(2);\r",
                    "    }\r",
                    "} else {\r",
                    "    Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle,Rubedo.RubedoAutomatedElementsLoc.invalidFieldsError);\r",
                    "    Ext.getCmp(\"ajouterContenu\").getComponent(0).setActiveTab(0);\r",
                    "}"
                ]
            },
            "name": "nContenuRecorder",
            "designerId": "ae3d7d9c-194f-4fdd-b848-335bc618dcb5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonSupprimerContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "contentDelete",
                "implHandler": [
                    "var cible = Ext.getCmp('ContenusGrid').getSelectionModel().getSelection();\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    var fenetre = Ext.widget('delConfirmZ');\r",
                    "    fenetre.show();\r",
                    "    Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "\r",
                    "        Ext.getCmp('delConfirmZ').close();\r",
                    "        this.getContenusDataJsonStore().remove(cible);\r",
                    "\r",
                    "    }, this);  \r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "contentDelete",
            "designerId": "1e8e3da9-d15d-4ff8-ae22-5814e4e23120"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonModifierContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "contentEdit",
                "implHandler": [
                    "var cible = Ext.getCmp('ContenusGrid').getSelectionModel().getSelection()[0];\r",
                    "this.unitaryContentEdit(cible.get(\"id\"));"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "contentEdit",
            "designerId": "d1d6b138-ff4c-43ec-bf21-9b2632472cf9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#ContenusGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "contentsSelect",
                "implHandler": [
                    "Ext.getCmp(\"boutonModifierContenu\").setText(Rubedo.RubedoAutomatedElementsLoc.editText);\r",
                    "Ext.getCmp(\"boutonModifierContenu\").restricedRead=false;\r",
                    "//console.log(Ext.getCmp(\"boutonModifierContenu\").restricedRead);\r",
                    "var boiteMeta = Ext.getCmp(\"contributionContenus\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "var imageMeta = Ext.getCmp('contributionContenus').getDockedComponent('barreMeta').getComponent('imageBarreMeta');\r",
                    "var customMeta= \"\";\r",
                    "if (selected.length===0) {\r",
                    "    Ext.getCmp(\"ajoutPanierContenus\").disable();\r",
                    "    Ext.getCmp(\"boutonSupprimerContenu\").disable();\r",
                    "    Ext.getCmp(\"boutonModifierContenu\").disable();\r",
                    "    Ext.getCmp(\"boutonCopierContenus\").disable();\r",
                    "    Ext.getCmp(\"contribWorkflowBox\").disable();\r",
                    "    customMeta = Ext.getCmp('TypesContenusGrid').getSelectionModel().getLastSelected().data.type;\r",
                    "    if ((!Ext.isEmpty(Ext.getCmp('TypesContenusGrid').getSelectionModel().getLastSelected().get(\"productType\")))&&(Ext.getCmp('TypesContenusGrid').getSelectionModel().getLastSelected().get(\"productType\")!=\"none\")){\r",
                    "        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/shopping_cart.png');  \r",
                    "    } else {\r",
                    "        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/folder.png');   \r",
                    "    }\r",
                    "\r",
                    "} else if (selected.length==1) {\r",
                    "    Ext.getCmp(\"ajoutPanierContenus\").enable();\r",
                    "    Ext.getCmp(\"boutonCopierContenus\").enable();\r",
                    "    if ((!selected[0].get(\"readOnly\"))&&(ACL.interfaceRights[\"write.ui.contents.\"+selected[0].get(\"status\")])){\r",
                    "        Ext.getCmp(\"boutonModifierContenu\").enable();\r",
                    "        Ext.getCmp(\"boutonSupprimerContenu\").enable();\r",
                    "    }else if (ACL.interfaceRights[\"read.ui.contents.\"+selected[0].get(\"status\")]){\r",
                    "        Ext.getCmp(\"boutonModifierContenu\").enable();\r",
                    "        Ext.getCmp(\"boutonModifierContenu\").setText(Rubedo.RubedoAutomatedElementsLoc.displayText);\r",
                    "        Ext.getCmp(\"boutonModifierContenu\").enable();\r",
                    "        Ext.getCmp(\"boutonSupprimerContenu\").disable();        \r",
                    "    } else {\r",
                    "        Ext.getCmp(\"boutonModifierContenu\").disable();\r",
                    "        Ext.getCmp(\"boutonSupprimerContenu\").disable();\r",
                    "    }\r",
                    "\r",
                    "    Ext.getCmp(\"contribWorkflowBox\").enable();\r",
                    "    Ext.Array.forEach(Ext.getCmp(\"contribWorkflowBox\").items.items, function(item){item.enable();});    \r",
                    "    customMeta=selected[0].get(\"text\")+\"</br> \"+Rubedo.RubedoAutomatedElementsLoc.creationText+\" : \"+Ext.Date.format(selected[0].get(\"createTime\"), Ext.Date.defaultFormat)+\r",
                    "    \" \"+Rubedo.RubedoAutomatedElementsLoc.lastUpdateText+\" : \"+Ext.Date.format(selected[0].get(\"lastUpdateTime\"), Ext.Date.defaultFormat)+\" \"+Rubedo.RubedoAutomatedElementsLoc.authorText+\" : \"+selected[0].get(\"createUser\").fullName;\r",
                    "    boiteMeta.update(customMeta);\r",
                    "    if (selected[0].get(\"online\")) {\r",
                    "        Ext.getCmp(\"contentOnlineBtn\").disable();\r",
                    "    } else {\r",
                    "        Ext.getCmp(\"contentOfflineBtn\").disable();\r",
                    "    }\r",
                    "    if (selected[0].get(\"status\")==\"published\") {\r",
                    "        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_accept.png');\r",
                    "        Ext.getCmp(\"contentAcceptPublishBtn\").disable();\r",
                    "        Ext.getCmp(\"contentSubmitValBtn\").disable();\r",
                    "        Ext.getCmp(\"contentRefuseBtn\").disable();\r",
                    "\r",
                    "    } else if (selected[0].get(\"status\")==\"pending\") {\r",
                    "        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_process.png');\r",
                    "        Ext.getCmp(\"contentSubmitValBtn\").disable();\r",
                    "    } else if (selected[0].get(\"status\")==\"refused\") {\r",
                    "        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_remove.png');\r",
                    "        Ext.getCmp(\"contentRefuseBtn\").disable();\r",
                    "    }else if (selected[0].get(\"status\")==\"draft\") {\r",
                    "        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_edit.png');\r",
                    "        if (!Ext.getCmp(\"contentSubmitValBtn\").isVisible()) {\r",
                    "            Ext.getCmp(\"contentAcceptPublishBtn\").disable();\r",
                    "        }\r",
                    "        Ext.getCmp(\"contentRefuseBtn\").disable();\r",
                    "    } else {\r",
                    "        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_full.png');\r",
                    "    }\r",
                    "    if (selected[0].get(\"readOnly\")){\r",
                    "        Ext.getCmp(\"contribWorkflowBox\").disable();\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "} else {\r",
                    "    Ext.getCmp(\"ajoutPanierContenus\").enable();\r",
                    "    Ext.getCmp(\"boutonSupprimerContenu\").enable();\r",
                    "    Ext.getCmp(\"boutonModifierContenu\").disable();\r",
                    "    Ext.getCmp(\"boutonCopierContenus\").disable();\r",
                    "    Ext.getCmp(\"contribWorkflowBox\").enable();\r",
                    "    var statuses = [];\r",
                    "    var onlines = [];\r",
                    "    var RO = false;\r",
                    "    Ext.Array.forEach(selected, function(someContent){\r",
                    "        Ext.Array.include(statuses, someContent.get(\"status\"));\r",
                    "        Ext.Array.include(onlines, someContent.get(\"online\"));\r",
                    "        if (someContent.get(\"readOnly\")){\r",
                    "            RO=true;\r",
                    "        }\r",
                    "    });\r",
                    "    if (statuses.length>1){\r",
                    "        Ext.getCmp(\"contribWorkflowBox\").disable();\r",
                    "        imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_full.png');\r",
                    "\r",
                    "    } else {\r",
                    "        Ext.Array.forEach(Ext.getCmp(\"contribWorkflowBox\").items.items, function(item){item.enable();});\r",
                    "        if (onlines.length>1) {\r",
                    "            Ext.getCmp(\"contentOnlineBtn\").disable();\r",
                    "            Ext.getCmp(\"contentOfflineBtn\").disable();\r",
                    "\r",
                    "        }else {\r",
                    "            if (onlines[0]) {\r",
                    "                Ext.getCmp(\"contentOnlineBtn\").disable();\r",
                    "            } else {\r",
                    "                Ext.getCmp(\"contentOfflineBtn\").disable();\r",
                    "            }}\r",
                    "            if (statuses[0]==\"published\") {\r",
                    "                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_accept.png');\r",
                    "                Ext.getCmp(\"contentAcceptPublishBtn\").disable();\r",
                    "                Ext.getCmp(\"contentSubmitValBtn\").disable();\r",
                    "                Ext.getCmp(\"contentRefuseBtn\").disable();\r",
                    "\r",
                    "            } else if (statuses[0]==\"pending\") {\r",
                    "                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_process.png');\r",
                    "                Ext.getCmp(\"contentSubmitValBtn\").disable();\r",
                    "\r",
                    "            } else if (statuses[0]==\"refused\") {\r",
                    "                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_remove.png');\r",
                    "                Ext.getCmp(\"contentRefuseBtn\").disable();\r",
                    "\r",
                    "            }else if (statuses[0]==\"draft\") {\r",
                    "                imageMeta.setSrc('resources/icones/'+MyPrefData.iconsDir+'/48x48/page_edit.png');\r",
                    "                if (!Ext.getCmp(\"contentSubmitValBtn\").isVisible()) {\r",
                    "                    Ext.getCmp(\"contentAcceptPublishBtn\").disable();\r",
                    "                }\r",
                    "                Ext.getCmp(\"contentRefuseBtn\").disable();\r",
                    "            }\r",
                    "        }\r",
                    "        customMeta=selected.length+\" \"+Rubedo.RubedoAutomatedElementsLoc.contentsText;\r",
                    "        if (RO==true){\r",
                    "            Ext.getCmp(\"contribWorkflowBox\").disable();\r",
                    "            Ext.getCmp(\"boutonModifierContenu\").disable();\r",
                    "            Ext.getCmp(\"boutonSupprimerContenu\").disable();\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    boiteMeta.update(customMeta);"
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "contentsSelect",
            "designerId": "2af287bb-3cc0-46dd-9a77-33d9b9c7235f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#ContenusGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "doubleClickEdit",
                "implHandler": [
                    "//Ext.getCmp(\"boutonModifierContenu\").fireEvent(\"click\");\r",
                    "this.unitaryContentEdit(record.get(\"id\"));"
                ],
                "name": "itemdblclick",
                "scope": "me"
            },
            "name": "doubleClickEdit",
            "designerId": "29809d19-0d43-44be-9789-cb0efb02186f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#contentOnlineBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "putContentsOnline",
                "implHandler": [
                    "Ext.getStore(\"ContenusDataJson\").suspendAutoSync();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"ContenusGrid\").getSelectionModel().getSelection(), function(content){\r",
                    "\r",
                    "    content.set(\"online\", true);\r",
                    "});\r",
                    "Ext.getStore(\"ContenusDataJson\").resumeAutoSync();\r",
                    "Ext.getStore(\"ContenusDataJson\").sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "putContentsOnline",
            "designerId": "5609cb55-a942-4612-a54f-e9f26e0decce"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#contentRefuseBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "contentRefuse",
                "implHandler": [
                    "Ext.getStore(\"ContenusDataJson\").suspendAutoSync();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"ContenusGrid\").getSelectionModel().getSelection(), function(content){\r",
                    "    if (content.get(\"status\")==\"pending\") {\r",
                    "        content.set(\"status\", \"refused\");\r",
                    "    }});\r",
                    "    Ext.getStore(\"ContenusDataJson\").resumeAutoSync();\r",
                    "    Ext.getStore(\"ContenusDataJson\").sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "contentRefuse",
            "designerId": "94138a98-a78e-4bb5-ad8b-0e949321e587"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#contentOfflineBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "putContentsOffline",
                "implHandler": [
                    "Ext.getStore(\"ContenusDataJson\").suspendAutoSync();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"ContenusGrid\").getSelectionModel().getSelection(), function(content){\r",
                    "\r",
                    "    content.set(\"online\", false);\r",
                    "});\r",
                    "Ext.getStore(\"ContenusDataJson\").resumeAutoSync();\r",
                    "Ext.getStore(\"ContenusDataJson\").sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "putContentsOffline",
            "designerId": "a09ba59a-d8db-44ca-8e79-c42a6a3dcb2d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#contentSubmitValBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "contentSubmitVal",
                "implHandler": [
                    "Ext.getStore(\"ContenusDataJson\").suspendAutoSync();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"ContenusGrid\").getSelectionModel().getSelection(), function(content){\r",
                    "    if ((content.get(\"status\")==\"draft\")||(content.get(\"status\")==\"refused\")) {\r",
                    "        content.set(\"status\", \"pending\");\r",
                    "    }});\r",
                    "    Ext.getStore(\"ContenusDataJson\").resumeAutoSync();\r",
                    "    Ext.getStore(\"ContenusDataJson\").sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "contentSubmitVal",
            "designerId": "eae53a4e-c7fe-4932-b8c5-bc212c9bb55c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#contentAcceptPublishBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "contentAcceptPublish",
                "implHandler": [
                    "Ext.getStore(\"ContenusDataJson\").suspendAutoSync();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"ContenusGrid\").getSelectionModel().getSelection(), function(content){\r",
                    "\r",
                    "    content.set(\"status\", \"published\");\r",
                    "});\r",
                    "Ext.getStore(\"ContenusDataJson\").resumeAutoSync();\r",
                    "Ext.getStore(\"ContenusDataJson\").sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "contentAcceptPublish",
            "designerId": "84f2a9eb-c989-4280-98ec-f1d06b70936e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonSoumettreNouveauContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "contentSaveAndSubmit",
                "implHandler": [
                    "this.nContenuRecorder('pending',button.isUpdate);"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "contentSaveAndSubmit",
            "designerId": "b54053e6-c639-4ad5-819e-ed4b31921c1e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#nestedContentsDeleteBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "nestedContentsDelete",
                "implHandler": [
                    "Ext.getCmp(\"NestedContentsGrid\").getStore().remove(Ext.getCmp(\"NestedContentsGrid\").getSelectionModel().getSelection());"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "nestedContentsDelete",
            "designerId": "c3974fbb-2e52-4e6f-986a-7b7761b2adee"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#nestedContentsOnlineBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "putNestedContentsOnline",
                "implHandler": [
                    "var myStore = Ext.getCmp(\"NestedContentsGrid\").getStore();\r",
                    "myStore.suspendAutoSync();\r",
                    "Ext.Array.forEach(Ext.getCmp(\"NestedContentsGrid\").getSelectionModel().getSelection(), function(nesC){\r",
                    "    nesC.set(\"online\", true);\r",
                    "});\r",
                    "myStore.resumeAutoSync();\r",
                    "myStore.sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "putNestedContentsOnline",
            "designerId": "b6ad5fdb-bf2f-463f-834e-aa0c589df945"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#nestedContentsAddBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "addNestedContent",
                "implHandler": [
                    "if (Ext.getCmp(\"nestedContentsAddCombo\").isValid()) {\r",
                    "    var myType=Ext.getCmp(\"nestedContentsAddCombo\").getStore().findRecord(\"id\",Ext.getCmp(\"nestedContentsAddCombo\").getValue());\r",
                    "    var myWindow = Ext.widget('NestedContentAddWindow');\r",
                    "    Ext.getCmp('ViewportPrimaire').add(myWindow);\r",
                    "    if (Ext.isDefined(window.innerHeight)) {\r",
                    "        if (myWindow.height>(window.innerHeight-40)) {myWindow.setHeight((window.innerHeight-40));}\r",
                    "        if (myWindow.width>(window.innerWidth)) {myWindow.setWidth((window.innerWidth));}\r",
                    "    }\r",
                    "    myWindow.show();\r",
                    "    var formulaireTC = Ext.getCmp('nestedContentsFieldBox');\r",
                    "    var champsD =myType.get(\"champs\");\r",
                    "    Ext.Array.forEach(champsD,function(donnees) {\r",
                    "        var configurateur = Ext.clone(donnees.config);\r",
                    "        if (donnees.cType =='treepicker'){ \r",
                    "            var monStore= Ext.getStore(donnees.store);\r",
                    "            configurateur.store = monStore;\r",
                    "            monStore.load();\r",
                    "        }\r",
                    "        else if (donnees.cType == 'combobox') {\r",
                    "            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "            configurateur.store = monStore;\r",
                    "        }\r",
                    "        var nouvChamp = Ext.widget(donnees.cType, configurateur);\r",
                    "        nouvChamp.config=Ext.clone(donnees.config);\r",
                    "        if (donnees.cType =='triggerfield'){ \r",
                    "            var Ouvrir = Ext.clone(donnees.ouvrir);\r",
                    "            nouvChamp.onTriggerClick= function() {\r",
                    "                var fenetre = Ext.widget(Ouvrir);\r",
                    "                fenetre.showAt(screen.width/2-200, 100);\r",
                    "            } ; \r",
                    "            nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);\r",
                    "        }  \r",
                    "        nouvChamp.anchor = '90%';\r",
                    "        nouvChamp.style = '{float:left;}';\r",
                    "        var enrobage =Ext.widget('ChampTC');\r",
                    "        enrobage.add(nouvChamp);\r",
                    "        enrobage.getComponent('helpBouton').setTooltip(nouvChamp.config.tooltip);\r",
                    "        if (nouvChamp.multivalued) {\r",
                    "            enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: 'Valeurs multiples', itemId: 'boutonReplicateurChamps'}));\r",
                    "\r",
                    "        };\r",
                    "        formulaireTC.add(enrobage);\r",
                    "\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "addNestedContent",
            "designerId": "ccc66b9c-5a97-416f-ae83-84c635ac8e29"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "update"
                ],
                "fn": "nestedContentRecorder",
                "implHandler": [
                    "if (Ext.getCmp(\"nestedContentsFieldBox\").getForm().isValid()){\r",
                    "    var fields=Ext.getCmp(\"nestedContentsFieldBox\").getForm().getValues();\r",
                    "    if (update) {\r",
                    "        var myRec =Ext.getCmp(\"NestedContentsGrid\").getSelectionModel().getSelection()[0];\r",
                    "        myRec.beginEdit();\r",
                    "        myRec.set(\"text\",fields.text);\r",
                    "        myRec.set(\"fields\",fields);\r",
                    "        myRec.endEdit();\r",
                    "\r",
                    "    } \r",
                    "    else {\r",
                    "        var nContenu = Ext.create('Rubedo.model.nestedContentModel', {\r",
                    "            text: fields.text,\r",
                    "            fields: fields,\r",
                    "            typeId: Ext.getCmp('nestedContentsAddCombo').getValue()\r",
                    "\r",
                    "        });\r",
                    "\r",
                    "        Ext.getCmp(\"NestedContentsGrid\").getStore().add(nContenu);\r",
                    "    }\r",
                    "    Ext.getCmp('NestedContentAddWindow').close();\r",
                    "}"
                ]
            },
            "name": "nestedContentRecorder",
            "designerId": "e3e4e254-cc5e-4ecf-8755-659164383223"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#nestedContentRecordBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "saveNestedContent",
                "implHandler": [
                    "this.nestedContentRecorder(button.isUpdate);"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "saveNestedContent",
            "designerId": "9fe56c18-95bf-4c2e-a4a4-4319db241081"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#nestedContentsModifyBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "nestedContentEdit",
                "implHandler": [
                    "var cible = Ext.getCmp('NestedContentsGrid').getSelectionModel().getSelection()[0];\r",
                    "Ext.getCmp(\"nestedContentsAddCombo\").setValue(cible.get(\"typeId\"));\r",
                    "Ext.getCmp(\"nestedContentsAddBtn\").fireEvent(\"click\");\r",
                    "Ext.getCmp('nestedContentsFieldBox').getForm().setValues(cible.get(\"fields\"));\r",
                    "Ext.Object.each(cible.get(\"fields\"), function(key, value, myself){\r",
                    "    if (Ext.isArray(value)) {\r",
                    "        var multiField=Ext.getCmp('nestedContentsFieldBox').query('[name='+key+']')[0];\r",
                    "        var y=0;\r",
                    "        if (multiField.multivalued) {\r",
                    "            Ext.Array.each(value,function(val,index){\r",
                    "                if (index>0) {\r",
                    "                    multiField.up().getComponent('boutonReplicateurChamps').fireEvent(\"click\",multiField.up().getComponent('boutonReplicateurChamps'));\r",
                    "                }\r",
                    "                Ext.getCmp('nestedContentsFieldBox').query('[name='+key+']')[index].setValue(val);\r",
                    "            }); \r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "\r",
                    "Ext.getCmp(\"nestedContentRecordBtn\").isUpdate=true;\r",
                    "Ext.getCmp('ajouterContenu').setTitle(\"Modifier un contenu imbriqué\");"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "nestedContentEdit",
            "designerId": "c95e30f7-faca-4c58-875f-27f2e815b47d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#NestedContentsGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "NCDblClickEdit",
                "implHandler": [
                    "Ext.getCmp(\"nestedContentsModifyBtn\").fireEvent(\"click\");"
                ],
                "name": "itemdblclick",
                "scope": "me"
            },
            "name": "NCDblClickEdit",
            "designerId": "575594ef-2357-4a76-b58a-b2bad0120ca7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#contributionContenus",
                "designer|targetType": "Ext.window.Window",
                "fn": "onWindowRender",
                "implHandler": [
                    "if (component.isXType(\"window\")){\r",
                    "    Ext.getStore(\"TaxonomyForC\").load();\r",
                    "    Ext.getStore(\"DepTypesForContents\").load();\r",
                    "    Ext.getStore(\"TypesContenusNDepDataJson\").load();\r",
                    "}"
                ],
                "name": "render",
                "scope": "me"
            },
            "name": "onWindowRender",
            "designerId": "f3285970-e0ec-4143-bcc6-6cd9ad124687"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "id",
                    "specialMode",
                    "targetedId"
                ],
                "fn": "unitaryContentEdit",
                "implHandler": [
                    "var me=this;\r",
                    "Ext.getStore('TaxonomyForC2').load();\r",
                    "Ext.getStore(\"CurrentContent\").getProxy().extraParams.id = id;\r",
                    "Ext.getStore(\"CurrentContent\").addListener(\"load\",function(theStore,records,successful){\r",
                    "    if (successful){\r",
                    "        var theContent = records[0];\r",
                    "        if ((!theContent.get(\"readOnly\"))&&(ACL.interfaceRights[\"write.ui.contents\"])&&(ACL.interfaceRights[\"write.ui.contents.\"+theContent.get(\"status\")])){\r",
                    "            me.prepareContext(theContent, true, specialMode, targetedId);\r",
                    "        }else if ((ACL.interfaceRights[\"read.ui.contents\"])&&(ACL.interfaceRights[\"read.ui.contents.\"+theContent.get(\"status\")])){\r",
                    "            me.prepareContext(theContent, false, specialMode, targetedId);\r",
                    "        } else {\r",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.insufficientContentRightsError);\r",
                    "            theStore.removeAll();\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "},this,{single:true});\r",
                    "    Ext.getStore(\"CurrentContent\").load();"
                ]
            },
            "name": "unitaryContentEdit",
            "designerId": "1ee0d45e-e7df-43f3-8cc7-65f8e71a5a7e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "content",
                    "contentType",
                    "editMode",
                    "specialMode",
                    "targetedId"
                ],
                "fn": "displayContentEditWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('ajouterContenu', {specialMode:specialMode,editedContentId:content.get(\"id\")});",
                    "Ext.getCmp('ViewportPrimaire').add(fenetre);",
                    "if (Ext.isDefined(window.innerHeight)) {",
                    "    if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}",
                    "    if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}",
                    "}",
                    "fenetre.show();",
                    "Ext.getCmp(\"nestedContentsAddCombo\").bindStore(Ext.getStore(\"DepContentsCombo2\"));",
                    "Ext.getStore(\"VersioningStore\").removeAll();",
                    "Ext.getStore(\"VersioningStore\").clearFilter(true);",
                    "",
                    "Ext.getStore(\"VersioningStore\").filter([",
                    "    Ext.create('Ext.util.Filter', {property: \"contentId\", value: content.get(\"id\")}),",
                    "    Ext.create('Ext.util.Filter', {property:\"publishVersion\", value:{$gt:0}})",
                    "]);",
                    "",
                    "var formulaireTC = Ext.getCmp('boiteAChampsContenus');",
                    "var isProduct=false;",
                    "if ((!Ext.isEmpty(contentType.get(\"productType\")))&&(contentType.get(\"productType\")!=\"none\")){",
                    "    isProduct=true;",
                    "    fenetre.getComponent(0).add(Ext.widget(\"productSettingsForm\"));",
                    "    var variatorFields=[",
                    "        {name:\"price\"},",
                    "        {name:\"stock\"},",
                    "        {name:\"sku\"},",
                    "        {name:\"id\"},",
                    "        {name:'specialOffers',defaultValue:[ ]}",
                    "    ];",
                    "    var variatorColumns=[ ];",
                    "    if (!contentType.get(\"manageStock\")){",
                    "        Ext.getCmp(\"stockManagentForProductFieldset\").hide();",
                    "    }",
                    "}",
                    "var champsD =contentType.get(\"champs\");",
                    "for (g=0; g<champsD.length; g++) {",
                    "    var donnees=champsD[g];",
                    "    var configurateur = Ext.clone(donnees.config);",
                    "    if (!Ext.isEmpty(configurateur.i18n)){",
                    "        var BOLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");",
                    "        if (!Ext.isEmpty(configurateur.i18n[BOLanguage])){",
                    "            if (!Ext.isEmpty(configurateur.i18n[BOLanguage].fieldLabel)){",
                    "                configurateur.fieldLabel=configurateur.i18n[BOLanguage].fieldLabel;",
                    "            }",
                    "            if (!Ext.isEmpty(configurateur.i18n[BOLanguage].tooltip)){",
                    "                configurateur.tooltip=configurateur.i18n[BOLanguage].tooltip;",
                    "            }",
                    "        }",
                    "    }",
                    "    if (donnees.cType =='treepicker'){",
                    "        configurateur.store = Ext.create(\"Ext.data.TreeStore\", {",
                    "            isOptimised: true,",
                    "            usedCollection: 'Pages',",
                    "            autoLoad: false,",
                    "            autoSync: false,",
                    "            remoteFilter: true,",
                    "            model: 'Rubedo.model.taxonomyTermModel',",
                    "            proxy: {",
                    "                type: 'ajax',",
                    "                api: {",
                    "                    read: 'taxonomy-terms/navigation-tree'",
                    "                },",
                    "                reader: {",
                    "                    type: 'json',",
                    "                    getResponseData: function(response) {",
                    "                        var data, error;",
                    "",
                    "                        try {",
                    "                            data = Ext.decode(response.responseText);",
                    "                            if (Ext.isDefined(data.data)){data.children=data.data;}// error fix",
                    "                            return this.readRecords(data);",
                    "                        } catch (ex) {",
                    "                            error = new Ext.data.ResultSet({",
                    "                                total  : 0,",
                    "                                count  : 0,",
                    "                                records: [],",
                    "                                success: false,",
                    "                                message: ex.message",
                    "                            });",
                    "",
                    "                            this.fireEvent('exception', this, response, error);",
                    "                            console.log(ex);",
                    "",
                    "                            Ext.Logger.warn('Unable to parse the JSON returned by the server');",
                    "",
                    "                            return error;",
                    "                        }",
                    "                    },",
                    "                    messageProperty: 'message'",
                    "                }",
                    "            },",
                    "            sorters: {",
                    "                property: 'orderValue'",
                    "            }",
                    "        });",
                    "        configurateur.store.load();",
                    "        configurateur.valueField=\"id\";",
                    "        configurateur.displayField=\"text\";",
                    "        configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];",
                    "    }",
                    "    else if (donnees.cType == 'combobox') {",
                    "        var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));",
                    "        configurateur.store = monStore;",
                    "    }",
                    "    //begin temporary fix",
                    "    configurateur.labelSeparator=\" \";",
                    "    //end temporary fix",
                    "    if (configurateur.useAsVariation&&isProduct){",
                    "        variatorFields.push({name:configurateur.name});",
                    "        var colEditor=Ext.clone(configurateur);",
                    "        colEditor.xtype=donnees.cType;",
                    "        colEditor.multiSelect=false;",
                    "        delete colEditor.fieldLabel;",
                    "        variatorColumns.push({",
                    "            xtype: 'gridcolumn',",
                    "            dataIndex: configurateur.name,",
                    "            text: configurateur.fieldLabel,",
                    "            flex:1,",
                    "            editor:colEditor",
                    "        });",
                    "    } else {",
                    "        try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){",
                    "            var nouvChamp = Ext.create(donnees.cType, configurateur);",
                    "        }",
                    "        nouvChamp.config=Ext.clone(donnees.config);",
                    "",
                    "        //begin temporary fix",
                    "        if(configurateur.tooltip==\"help text\"){configurateur.tooltip=\"\";}",
                    "        //end temporary fix",
                    "        if (donnees.cType =='triggerfield'){",
                    "            var Ouvrir = Ext.clone(donnees.ouvrir);",
                    "            nouvChamp.onTriggerClick= function() {",
                    "                var fenetre = Ext.widget(Ouvrir);",
                    "                fenetre.showAt(screen.width/2-200, 100);",
                    "            } ;",
                    "            nouvChamp.ouvrir =Ext.clone(donnees.ouvrir);",
                    "        }",
                    "        nouvChamp.anchor = '90%';",
                    "        nouvChamp.style = '{float:left;}';",
                    "        var enrobage =Ext.widget('ChampTC');",
                    "        enrobage.add(nouvChamp);",
                    "        enrobage.getComponent('helpBouton').setTooltip(configurateur.tooltip);",
                    "        if (Ext.isEmpty(configurateur.tooltip)){",
                    "            enrobage.getComponent('helpBouton').hidden=true;",
                    "        }",
                    "        if (nouvChamp.multivalued) {",
                    "            enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.duplicateText, itemId: 'boutonReplicateurChamps'}));",
                    "",
                    "        };",
                    "        if (nouvChamp.localizable) {",
                    "            enrobage.localizable=true;",
                    "        }",
                    "        formulaireTC.add(enrobage);",
                    "    }",
                    "}",
                    "if (isProduct){",
                    "    var variatorStore=Ext.create('Ext.data.Store', {",
                    "        fields:variatorFields,",
                    "        data:[]",
                    "    });",
                    "    variatorColumns.push({",
                    "        xtype: 'gridcolumn',",
                    "        dataIndex: 'price',",
                    "        text: 'Price',",
                    "        flex:1,",
                    "        editor:{",
                    "            xtype:\"numberfield\",",
                    "        }",
                    "    });",
                    "    variatorColumns.push({",
                    "        xtype: 'gridcolumn',",
                    "        dataIndex: 'sku',",
                    "        flex:1,",
                    "        text: 'SKU',",
                    "        editor:{",
                    "            xtype:\"textfield\"",
                    "",
                    "        }",
                    "    });",
                    "    if (contentType.get(\"manageStock\")){",
                    "        variatorColumns.push({",
                    "            xtype: 'gridcolumn',",
                    "            dataIndex: 'stock',",
                    "            flex:1,",
                    "            text: 'Stock',",
                    "            editor:{",
                    "                xtype:\"numberfield\",",
                    "                allowDecimals:false,",
                    "                minValue:0",
                    "            }",
                    "        });",
                    "    }",
                    "    Ext.getCmp(\"productVariationsGrid\").reconfigure(variatorStore,variatorColumns);",
                    "}",
                    "var formTaxoTC =  Ext.getCmp('boiteATaxoContenus');",
                    "var lesTaxo = contentType.get(\"vocabularies\");",
                    "var i=0;",
                    "for (i=0; i<lesTaxo.length; i++) {",
                    "",
                    "    var leVocab = Ext.getStore('TaxonomyForC2').findRecord('id', lesTaxo[i]);",
                    "    if (!Ext.isEmpty(leVocab)){",
                    "        if (leVocab.get(\"inputAsTree\")){",
                    "            var storeT = Ext.create(\"Ext.data.TreeStore\", {",
                    "                model:\"Rubedo.model.taxonomyTermModel\",",
                    "                remoteFilter:\"true\",",
                    "                proxy: {",
                    "                    type: 'ajax',",
                    "                    api: {",
                    "                        read: 'taxonomy-terms/tree'",
                    "                    },",
                    "                    reader: {",
                    "                        type: 'json',",
                    "                        messageProperty: 'message'",
                    "                    },",
                    "                    encodeFilters: function(filters) {",
                    "                        var min = [],",
                    "                            length = filters.length,",
                    "                            i = 0;",
                    "",
                    "                        for (; i < length; i++) {",
                    "                            min[i] = {",
                    "                                property: filters[i].property,",
                    "                                value   : filters[i].value",
                    "                            };",
                    "                            if (filters[i].type) {",
                    "                                min[i].type = filters[i].type;",
                    "                            }",
                    "                            if (filters[i].operator) {",
                    "                                min[i].operator = filters[i].operator;",
                    "                            }",
                    "                        }",
                    "                        return this.applyEncoding(min);",
                    "                    }",
                    "                },",
                    "                filters: {",
                    "                    property: 'vocabularyId',",
                    "                    value: leVocab.get(\"id\")",
                    "                }",
                    "",
                    "            });",
                    "            var toUse=\"Ext.ux.TreePicker\";",
                    "            if(leVocab.get(\"multiSelect\")){toUse=\"Ext.ux.TreeMultiPicker\";}",
                    "            if(leVocab.get(\"id\")=='navigation'){storeT.getProxy().api={read:\"taxonomy-terms/navigation-tree\"};}",
                    "            storeT.load();",
                    "            var selecteur = Ext.create(toUse, {",
                    "                name:leVocab.get(\"id\"),",
                    "                fieldLabel: leVocab.get(\"name\"),",
                    "                store: storeT,",
                    "                ignoreIsNotPage:true,",
                    "                anchor:\"90%\",",
                    "                displayField:\"text\",",
                    "                allowBlank: !leVocab.data.mandatory,",
                    "                plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")]",
                    "            });",
                    "",
                    "",
                    "        } else {",
                    "            var storeT = Ext.create('Ext.data.JsonStore', {",
                    "                model:\"Rubedo.model.taxonomyTermModel\",",
                    "                remoteFilter:\"true\",",
                    "                proxy: {",
                    "                    type: 'ajax',",
                    "                    api: {",
                    "                        read: 'taxonomy-terms'",
                    "                    },",
                    "                    reader: {",
                    "                        type: 'json',",
                    "                        messageProperty: 'message',",
                    "                        root: 'data'",
                    "                    },",
                    "                    encodeFilters: function(filters) {",
                    "                        var min = [],",
                    "                            length = filters.length,",
                    "                            i = 0;",
                    "",
                    "                        for (; i < length; i++) {",
                    "                            min[i] = {",
                    "                                property: filters[i].property,",
                    "                                value   : filters[i].value",
                    "                            };",
                    "                            if (filters[i].type) {",
                    "                                min[i].type = filters[i].type;",
                    "                            }",
                    "                            if (filters[i].operator) {",
                    "                                min[i].operator = filters[i].operator;",
                    "                            }",
                    "                        }",
                    "                        return this.applyEncoding(min);",
                    "                    }",
                    "                },",
                    "                filters: {",
                    "                    property: 'vocabularyId',",
                    "                    value: leVocab.get(\"id\")",
                    "                }",
                    "",
                    "            });",
                    "            storeT.on(\"beforeload\", function(s,o){",
                    "                o.filters=Ext.Array.slice(o.filters,0,1);",
                    "                if (o.params&&!Ext.isEmpty(o.params.comboQuery)){",
                    "",
                    "                    var newFilter=Ext.create('Ext.util.Filter', {",
                    "                        property:\"text\",",
                    "                        value:o.params.comboQuery,",
                    "                        operator:'like'",
                    "                    });",
                    "",
                    "                    o.filters.push(newFilter);",
                    "",
                    "                }",
                    "",
                    "",
                    "            });",
                    "            var selecteur = Ext.widget('comboboxselect', {",
                    "                name:leVocab.get(\"id\"),",
                    "                anchor:\"90%\",",
                    "                fieldLabel: leVocab.get(\"name\"),",
                    "                autoScroll: false,",
                    "                store: storeT,",
                    "                queryMode: 'remote',",
                    "                queryParam: 'comboQuery',",
                    "                minChars:3,",
                    "                displayField: 'text',",
                    "                valueField: 'id',",
                    "                filterPickList: true,",
                    "                typeAhead: true,",
                    "                forceSelection: !leVocab.data.expandable,",
                    "                createNewOnEnter: leVocab.data.expandable,",
                    "                multiSelect: leVocab.data.multiSelect,",
                    "                allowBlank: !leVocab.data.mandatory",
                    "            });",
                    "",
                    "        }",
                    "        var enrobage =Ext.widget('ChampTC');",
                    "        enrobage.add(selecteur);",
                    "        enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);",
                    "        if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}",
                    "        formTaxoTC.add(enrobage);",
                    "        storeT.load();",
                    "    }",
                    "}",
                    "",
                    "var cible = content;",
                    "var valuesToApply=cible.get(\"champs\");",
                    "",
                    "if (Ext.isEmpty(valuesToApply)){",
                    "    valuesToApply={ };",
                    "}",
                    "",
                    "try{",
                    "    Ext.apply(valuesToApply, cible.get(\"i18n\")[cible.get(\"locale\")].fields);",
                    "}catch(err){",
                    "    console.log(\"failed to localize fields on input\");",
                    "}",
                    "try{Ext.getCmp('boiteAChampsContenus').getForm().setValues(valuesToApply);} catch(err){console.log(\"form set anomaly\");}",
                    "Ext.Object.each(valuesToApply, function(key, value, myself){",
                    "    if (Ext.isArray(value)) {",
                    "        var multiField=Ext.getCmp('boiteAChampsContenus').query('[name='+key+']')[0];",
                    "        var y=0;",
                    "        if (multiField.multivalued) {",
                    "            Ext.Array.each(value,function(val,index){",
                    "                if (index>0) {",
                    "                    multiField.up().getComponent('boutonReplicateurChamps').fireEvent(\"click\",multiField.up().getComponent('boutonReplicateurChamps'));",
                    "                }",
                    "                Ext.getCmp('boiteAChampsContenus').query('[name='+key+'][xtype='+multiField.xtype+']')[index].setValue(val);",
                    "            });",
                    "        }",
                    "    }",
                    "});",
                    "Ext.getCmp(\"ajouterContenu\").getComponent(0).getLayout().setActiveItem(1);",
                    "Ext.getCmp(\"ajouterContenu\").getComponent(0).getLayout().setActiveItem(0);",
                    "Ext.getCmp(\"boiteATaxoContenus\").getForm().setValues(cible.get(\"taxonomie\"));",
                    "Ext.getCmp(\"boiteADroitsContenus\").getForm().setValues(cible.getData());",
                    "Ext.getCmp(\"contentMetadataBox\").getForm().setValues(cible.getData());",
                    "if (isProduct){",
                    "    Ext.getCmp(\"productSettingsForm\").getComponent(0).getForm().setValues(content.get(\"productProperties\"));",
                    "    Ext.getCmp(\"productVariationsGrid\").getStore().loadData(content.get(\"productProperties\").variations);",
                    "}",
                    "Ext.getCmp(\"boutonEnregistrerNouveauContenu\").isUpdate=true;",
                    "Ext.getCmp(\"boutonPublierNouveauContenu\").isUpdate=true;",
                    "Ext.getCmp(\"boutonSoumettreNouveauContenu\").isUpdate=true;",
                    "Ext.getCmp('ajouterContenu').setTitle(content.get(\"text\"));",
                    "if (!editMode){",
                    "    if ((!content.get(\"readOnly\"))&&(ACL.interfaceRights[\"write.ui.contents\"])&&(content.get(\"status\")==\"published\")&&(ACL.interfaceRights[\"write.ui.contents.draft\"])) {",
                    "        Ext.getCmp(\"boutonSoumettreNouveauContenu\").hide();",
                    "        Ext.getCmp(\"boutonPublierNouveauContenu\").hide();",
                    "        var nct = Ext.getCmp(\"nestedContentsTab\");",
                    "        if (!Ext.isEmpty(nct)){",
                    "            Ext.getCmp('nestedContensTabConfig').destroy();",
                    "            nct.destroy();",
                    "        }",
                    "    }",
                    "    else",
                    "    {",
                    "        Ext.Array.forEach(Ext.getCmp(\"ajouterContenu\").query(\"field\"), function(thing){thing.setReadOnly(true);})",
                    "        Ext.Array.forEach(Ext.getCmp(\"ajouterContenu\").query(\"button\"), function(truc){if (!truc.isXType(\"tab\")){truc.disable();}});",
                    "",
                    "        Ext.getCmp(\"boutonSoumettreNouveauContenu\").up().hide();",
                    "        var nct = Ext.getCmp(\"nestedContentsTab\");",
                    "        if (!Ext.isEmpty(nct)){",
                    "            Ext.getCmp('nestedContensTabConfig').destroy();",
                    "            nct.destroy();",
                    "        }",
                    "    }",
                    "} else {",
                    "    var myId=cible.get(\"id\");",
                    "",
                    "    var nct = Ext.getCmp(\"nestedContentsTab\");",
                    "    if (!Ext.isEmpty(nct)){",
                    "        if (Ext.isEmpty(Ext.getCmp(\"nestedContentsAddCombo\").getStore().getRange())){",
                    "            Ext.getCmp('nestedContensTabConfig').destroy();",
                    "            nct.destroy();",
                    "",
                    "        } else {",
                    "            Ext.getStore('NestedContentsStore').removeAll();",
                    "            Ext.getStore('NestedContentsStore').getProxy().extraParams.parentId=myId;",
                    "            Ext.getStore('NestedContentsStore').load();",
                    "        }",
                    "    }",
                    "}",
                    "if (content.get(\"status\")==\"pending\"){",
                    "    if (ACL.interfaceRights['write.ui.contents.refused']) {",
                    "        Ext.getCmp(\"boutonRefuserNouveauContenu\").show();",
                    "    }",
                    "    Ext.getCmp(\"boutonEnregistrerNouveauContenu\").hide();",
                    "    Ext.getCmp(\"boutonSoumettreNouveauContenu\").hide();",
                    "}",
                    "if (specialMode){",
                    "    try{",
                    "        var nct5 = Ext.getCmp(\"nestedContentsTab\");",
                    "        if (!Ext.isEmpty(nct)){",
                    "            Ext.getCmp('nestedContensTabConfig').destroy();",
                    "            nct5.destroy();",
                    "",
                    "        }",
                    "    } catch(err){ }",
                    "    var nct2 = Ext.getCmp('boiteATaxoContenus');",
                    "    if (!Ext.isEmpty(nct2)){",
                    "        Ext.getCmp('taxoTabConfig').destroy();",
                    "        nct2.destroy();",
                    "",
                    "    }",
                    "    var nct3 = Ext.getCmp(\"contentMetadataBox\");",
                    "    if (!Ext.isEmpty(nct3)){",
                    "        Ext.getCmp('metaTabConfig').destroy();",
                    "        nct3.destroy();",
                    "",
                    "    }",
                    "    var nct4 = Ext.getCmp('boiteADroitsContenus');",
                    "    if (!Ext.isEmpty(nct4)){",
                    "        Ext.getCmp('rightsTabConfig').destroy();",
                    "        nct4.destroy();",
                    "",
                    "    }",
                    "    Ext.getCmp(\"boutonEnregistrerNouveauContenu\").hide();",
                    "    Ext.getCmp(\"boutonSoumettreNouveauContenu\").hide();",
                    "    Ext.getCmp(\"boutonPublierNouveauContenu\").specialMode=true;",
                    "    Ext.getCmp(\"boutonPublierNouveauContenu\").targetedId=targetedId;",
                    "    Ext.getCmp(\"cedtr1\").destroy();",
                    "    Ext.getCmp(\"cedtr2\").destroy();",
                    "    Ext.getCmp(\"cedtrURL\").destroy();",
                    "",
                    "",
                    "}",
                    "if(editMode&&!specialMode){",
                    "",
                    "    Ext.getCmp(\"directContentKiller\").show();",
                    "}",
                    "",
                    "Ext.getCmp(\"contentsDLSToolbar\").recievei18n(cible.get(\"i18n\"),cible.get(\"locale\"),cible.get(\"nativeLanguage\"));"
                ]
            },
            "name": "displayContentEditWindow",
            "designerId": "55e297cb-12c1-4ee8-a3c9-3e88f1d9caed"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "theCT",
                    "targetedId"
                ],
                "fn": "displaySpecialCreate",
                "implHandler": [
                    "if (Ext.isDefined(theCT)) {\r",
                    "    var fenetre = Ext.widget('ajouterContenu', {specialMode:true});\r",
                    "    Ext.getCmp('ViewportPrimaire').add(fenetre);\r",
                    "    if (Ext.isDefined(window.innerHeight)) {\r",
                    "        if (fenetre.height>(window.innerHeight-40)) {fenetre.setHeight((window.innerHeight-40));}\r",
                    "        if (fenetre.width>(window.innerWidth)) {fenetre.setWidth((window.innerWidth));}\r",
                    "    }\r",
                    "    fenetre.show();\r",
                    "    fenetre.setTitle(Rubedo.RubedoAutomatedElementsLoc.newContentText+theCT.get(\"type\"));\r",
                    "    var formulaireTC = Ext.getCmp('boiteAChampsContenus');\r",
                    "    Ext.getCmp(\"contentsVersionPanel\").up().remove( Ext.getCmp(\"contentsVersionPanel\"));\r",
                    "    var champsD =theCT.data.champs;\r",
                    "    for (g=0; g<champsD.length; g++) {\r",
                    "        var donnees=champsD[g];\r",
                    "        var configurateur = Ext.clone(donnees.config);\r",
                    "        if (!Ext.isEmpty(configurateur.i18n)){\r",
                    "            var BOLanguage=Ext.getStore(\"CurrentUserDataStore\").getRange()[0].get(\"language\");\r",
                    "            if (!Ext.isEmpty(configurateur.i18n[BOLanguage])){\r",
                    "                if (!Ext.isEmpty(configurateur.i18n[BOLanguage].fieldLabel)){\r",
                    "                    configurateur.fieldLabel=configurateur.i18n[BOLanguage].fieldLabel;\r",
                    "                }\r",
                    "                if (!Ext.isEmpty(configurateur.i18n[BOLanguage].tooltip)){\r",
                    "                    configurateur.tooltip=configurateur.i18n[BOLanguage].tooltip;\r",
                    "                }\r",
                    "            }\r",
                    "        }\r",
                    "        if (donnees.cType =='treepicker'){ \r",
                    "            configurateur.store = Ext.create(\"Ext.data.TreeStore\", {\r",
                    "                isOptimised: true,\r",
                    "                usedCollection: 'Pages',\r",
                    "                autoLoad: false,\r",
                    "                autoSync: false,\r",
                    "                remoteFilter: true,\r",
                    "                model: 'Rubedo.model.taxonomyTermModel',\r",
                    "                proxy: {\r",
                    "                    type: 'ajax',\r",
                    "                    api: {\r",
                    "                        read: 'taxonomy-terms/navigation-tree'\r",
                    "                    },\r",
                    "                    reader: {\r",
                    "                        type: 'json',\r",
                    "                        getResponseData: function(response) {\r",
                    "                            var data, error;\r",
                    "\r",
                    "                            try {\r",
                    "                                data = Ext.decode(response.responseText);\r",
                    "                                if (Ext.isDefined(data.data)){data.children=data.data;}// error fix\r",
                    "                                return this.readRecords(data);\r",
                    "                            } catch (ex) {\r",
                    "                                error = new Ext.data.ResultSet({\r",
                    "                                    total  : 0,\r",
                    "                                    count  : 0,\r",
                    "                                    records: [],\r",
                    "                                    success: false,\r",
                    "                                    message: ex.message\r",
                    "                                });\r",
                    "\r",
                    "                                this.fireEvent('exception', this, response, error);\r",
                    "                                console.log(ex);\r",
                    "\r",
                    "                                Ext.Logger.warn('Unable to parse the JSON returned by the server');\r",
                    "\r",
                    "                                return error;\r",
                    "                            }\r",
                    "                        },\r",
                    "                        messageProperty: 'message'\r",
                    "                    }\r",
                    "                },\r",
                    "                sorters: {\r",
                    "                    property: 'orderValue'\r",
                    "                }\r",
                    "            });\r",
                    "            configurateur.store.load();\r",
                    "            configurateur.valueField=\"id\";\r",
                    "            configurateur.displayField=\"text\";\r",
                    "            configurateur.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];\r",
                    "        }\r",
                    "        else if (donnees.cType == 'combobox') {\r",
                    "            var monStore=  Ext.create('Ext.data.Store', Ext.clone(donnees.store));\r",
                    "            configurateur.store = monStore;\r",
                    "        }\r",
                    "        //begin temporary fix\r",
                    "        configurateur.labelSeparator=\" \";\r",
                    "        //end temporary fix\r",
                    "        try {var nouvChamp = Ext.widget(donnees.cType, configurateur);} catch(err){\r",
                    "        var nouvChamp = Ext.create(donnees.cType, configurateur);\r",
                    "    }\r",
                    "    nouvChamp.config=Ext.clone(donnees.config);\r",
                    "    //begin temporary fix\r",
                    "    if(configurateur.tooltip==\"help text\"){configurateur.tooltip=\"\";}\r",
                    "    //end temporary fix\r",
                    "    if (donnees.cType =='triggerfield'){ \r",
                    "        var Ouvrir = Ext.clone(donnees.openWindow);\r",
                    "        nouvChamp.onTriggerClick= function() {\r",
                    "            var fenetre = Ext.widget(Ouvrir);\r",
                    "            fenetre.showAt(screen.width/2-200, 100);\r",
                    "        } ; \r",
                    "        nouvChamp.openWindow =Ext.clone(donnees.openWindow);\r",
                    "    }  \r",
                    "    nouvChamp.anchor = '90%';\r",
                    "    nouvChamp.style = '{float:left;}';\r",
                    "    var enrobage =Ext.widget('ChampTC');\r",
                    "    enrobage.add(nouvChamp);\r",
                    "    enrobage.getComponent('helpBouton').setTooltip(configurateur.tooltip);\r",
                    "    if (Ext.isEmpty(configurateur.tooltip)){\r",
                    "        enrobage.getComponent('helpBouton').hidden=true;\r",
                    "    } \r",
                    "    if (nouvChamp.multivalued) {\r",
                    "        enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.duplicateText, itemId: 'boutonReplicateurChamps'}));\r",
                    "\r",
                    "    };\r",
                    "    formulaireTC.add(enrobage);\r",
                    "\r",
                    "}\r",
                    "\r",
                    "try{\r",
                    "    var nct = Ext.getCmp(\"nestedContentsTab\");\r",
                    "    if (!Ext.isEmpty(nct)){\r",
                    "        Ext.getCmp('nestedContensTabConfig').destroy();\r",
                    "        nct.destroy();\r",
                    "\r",
                    "    }} catch(err){ }\r",
                    "        var nct2 = Ext.getCmp('boiteATaxoContenus');\r",
                    "        if (!Ext.isEmpty(nct2)){\r",
                    "            Ext.getCmp('taxoTabConfig').destroy();\r",
                    "            nct2.destroy();\r",
                    "\r",
                    "        }\r",
                    "        var nct3 = Ext.getCmp(\"contentMetadataBox\");\r",
                    "        if (!Ext.isEmpty(nct3)){\r",
                    "            Ext.getCmp('metaTabConfig').destroy();\r",
                    "            nct3.destroy();\r",
                    "\r",
                    "        }\r",
                    "        var nct4 = Ext.getCmp('boiteADroitsContenus');\r",
                    "        if (!Ext.isEmpty(nct4)){\r",
                    "            Ext.getCmp('rightsTabConfig').destroy();\r",
                    "            nct4.destroy();\r",
                    "\r",
                    "        }\r",
                    "        Ext.getCmp(\"boutonEnregistrerNouveauContenu\").hide();\r",
                    "        Ext.getCmp(\"boutonSoumettreNouveauContenu\").hide();\r",
                    "        Ext.getCmp(\"boutonPublierNouveauContenu\").specialMode=true;\r",
                    "        Ext.getCmp(\"boutonPublierNouveauContenu\").targetedId=targetedId;\r",
                    "        Ext.getCmp(\"cedtr1\").destroy();\r",
                    "        Ext.getCmp(\"cedtr2\").destroy();\r",
                    "    \tExt.getCmp(\"cedtrURL\").destroy();\r",
                    "\r",
                    "\r",
                    "    }"
                ]
            },
            "name": "displaySpecialCreate",
            "designerId": "59b973fd-a6b3-49da-80bd-9719b3b8177b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "content",
                    "editMode",
                    "specialMode",
                    "targetedId"
                ],
                "fn": "prepareContext",
                "implHandler": [
                    "var me=this;\r",
                    "Ext.getStore(\"ContentTypesForContent\").addListener(\"load\",function(theStore,records,successful){\r",
                    "    if (successful){\r",
                    "        var myContentType=theStore.findRecord(\"id\",content.get(\"typeId\"));\r",
                    "        if (editMode){\r",
                    "            var myDependantTypes= [ ];\r",
                    "            Ext.Array.forEach(myContentType.get(\"dependantTypes\"), function(someType){\r",
                    "                myDependantTypes.push(theStore.findRecord(\"id\",someType));\r",
                    "            });\r",
                    "            Ext.getStore(\"DepContentsCombo2\").removeAll();\r",
                    "            Ext.getStore(\"DepContentsCombo2\").loadData(myDependantTypes);\r",
                    "        }\r",
                    "        me.displayContentEditWindow(content, myContentType,editMode, specialMode, targetedId);\r",
                    "\r",
                    "    }\r",
                    "},this,{single:true});\r",
                    "    Ext.getStore(\"ContentTypesForContent\").load();"
                ]
            },
            "name": "prepareContext",
            "designerId": "61545fb7-19f6-474e-99b3-0961085bf6c9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "CTType",
                    "targetedId"
                ],
                "fn": "specialContentCreate",
                "implHandler": [
                    "var me=this;\r",
                    "Ext.getStore(\"ContentTypesForContent2\").getProxy().extraParams.filter=\"[{\\\"property\\\":\\\"CTType\\\",\\\"value\\\":\\\"\"+CTType+\"\\\"}]\";\r",
                    "Ext.getStore(\"ContentTypesForContent2\").addListener(\"load\",function(theStore,records,successful){\r",
                    "    if (successful){\r",
                    "        var theCT = records[0];\r",
                    "        me.displaySpecialCreate(theCT,targetedId);\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "},this,{single:true});\r",
                    "    Ext.getStore(\"ContentTypesForContent2\").load();"
                ]
            },
            "name": "specialContentCreate",
            "designerId": "d60e78f1-db2e-4a49-acc3-f879e61fd8cf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#pageContentGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onPageContentGridItemDblClick",
                "implHandler": [
                    "this.unitaryContentEdit(record.get(\"id\"), false);"
                ],
                "name": "itemdblclick",
                "scope": "me"
            },
            "name": "onPageContentGridItemDblClick",
            "designerId": "6d5500da-cac3-42e7-a9ef-15e77f8be732"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonCopierContenus",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBoutonCopierContenusClick",
                "implHandler": [
                    "var copiedOne = Ext.getCmp(\"ContenusGrid\").getSelectionModel().getLastSelected().copy();\r",
                    "Ext.data.Model.id(copiedOne);\r",
                    "copiedOne.data.champs.text=copiedOne.get(\"text\")+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i');\r",
                    "copiedOne.set(\"status\", \"draft\");\r",
                    "copiedOne.set(\"text\",copiedOne.get(\"text\")+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i'));\r",
                    "Ext.getCmp(\"ContenusGrid\").getStore().add(copiedOne);"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onBoutonCopierContenusClick",
            "designerId": "1babab45-9945-4020-b722-3be3ee752bfb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonRefuserNouveauContenu",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBoutonRefuserNouveauContenuClick",
                "implHandler": [
                    "this.nContenuRecorder('refused',true);"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onBoutonRefuserNouveauContenuClick",
            "designerId": "d0aa8ba7-45f3-4228-845a-c4c4765a8b93"
        }
    ]
}