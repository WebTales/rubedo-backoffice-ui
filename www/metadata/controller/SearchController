{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "SearchController",
        "designer|userClassName": "SearchController"
    },
    "designerId": "606ff5d4-d66c-4e04-81ba-5331a2b062fc",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#ESSearchButton",
                "designer|targetType": "Ext.button.Button",
                "fn": "mainSearchLaunch",
                "implHandler": [
                    "var me=this;\r",
                    "if (Ext.getCmp('ESSearchField').isValid()){\r",
                    "    var DisplayResults=Ext.getCmp('searchResultsWindow');\r",
                    "    if (Ext.isEmpty(DisplayResults)){\r",
                    "        DisplayResults=Ext.widget('searchResultsWindow');\r",
                    "        if (MyPrefData.simpleMode){\r",
                    "            DisplayResults.maximized=true;\r",
                    "            DisplayResults.draggable=false;\r",
                    "        }\r",
                    "        Ext.getCmp('desktopCont').add(DisplayResults);\r",
                    "        DisplayResults.show();\r",
                    "    } else {\r",
                    "        DisplayResults.show();\r",
                    "        DisplayResults.toFront();\r",
                    "    }\r",
                    "    var squery= { };\r",
                    "    if  (!Ext.isEmpty(Ext.getCmp('ESSearchField').getValue())){\r",
                    "        squery.query=Ext.getCmp('ESSearchField').getValue();\r",
                    "    }\r",
                    "    Ext.getStore(\"ESFacetteStore\").activeFacettes=squery;\r",
                    "    Ext.getStore(\"ESFacetteStore\").load();\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "73056bf5-5078-4dd5-bd60-eb6b0e8f8262"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#ResultContentsGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "mainResultWindowGetContext",
                "implHandler": [
                    "if ((record.get(\"objectType\")==\"content\")&&(ACL.interfaceRights['read.ui.contents'])){\r",
                    "    Rubedo.controller.ContributionContenusController.prototype.unitaryContentEdit(record.get(\"id\"));\r",
                    "} else if ((record.get(\"objectType\")==\"dam\")&&(ACL.interfaceRights['read.ui.contents'])){\r",
                    "    Rubedo.controller.DAMController.prototype.prepareContext(record.get(\"id\"),record.get(\"typeId\"));\r",
                    "} else if ((record.get(\"objectType\")==\"user\")&&(ACL.interfaceRights['read.ui.users'])){\r",
                    "    Rubedo.controller.UserTypesController.prototype.prepareContext(record.get(\"id\"),record.get(\"typeId\"));\r",
                    "}"
                ],
                "name": "itemdblclick",
                "scope": "me"
            },
            "designerId": "fea6c637-212a-4372-a699-1d94b9313c48"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "facets"
                ],
                "fn": "renderActiveFacets",
                "implHandler": [
                    "Ext.getCmp(\"ESFacetQueryField\").setValue(Ext.getStore(\"ESFacetteStore\").activeFacettes.query);\r",
                    "var target=Ext.getCmp(\"SearchActiveFacetBar\");\r",
                    "target.removeAll();\r",
                    "Ext.Array.forEach(facets, function(thing){\r",
                    "    if (thing.terms.length>1){\r",
                    "        Ext.Array.forEach(thing.terms,function(term){\r",
                    "            var activeOne = Ext.widget('splitbutton',{\r",
                    "                pressed:true,\r",
                    "                cls:\"show-cross\",\r",
                    "                text:thing.label+\" : \"+term.label,\r",
                    "                arrowHandler:function(){\r",
                    "                    Ext.Array.remove(Ext.getStore(\"ESFacetteStore\").activeFacettes[thing.id],term.term);\r",
                    "                    Ext.getStore(\"ESFacetteStore\").loadPage(1);\r",
                    "                },\r",
                    "                handler:function(){\r",
                    "                    Ext.Array.remove(Ext.getStore(\"ESFacetteStore\").activeFacettes[thing.id],term.term);\r",
                    "                    Ext.getStore(\"ESFacetteStore\").loadPage(1);\r",
                    "                }\r",
                    "            });\r",
                    "            if(thing.label==\"Query\"){\r",
                    "                activeOne.setText(Rubedo.RubedoAutomatedElementsLoc.searchText+\" : \"+thing.terms[0].label);\r",
                    "            }\r",
                    "            target.add(activeOne);\r",
                    "        });\r",
                    "    } else {\r",
                    "        var activeOne = Ext.widget('splitbutton',{\r",
                    "            pressed:true,\r",
                    "            cls:\"show-cross\",\r",
                    "            text:thing.label+\" : \"+thing.terms[0].label,\r",
                    "            arrowHandler:function(){\r",
                    "                delete Ext.getStore(\"ESFacetteStore\").activeFacettes[thing.id];\r",
                    "                Ext.getStore(\"ESFacetteStore\").loadPage(1);\r",
                    "            },\r",
                    "            handler:function(){\r",
                    "                delete Ext.getStore(\"ESFacetteStore\").activeFacettes[thing.id];\r",
                    "                Ext.getStore(\"ESFacetteStore\").loadPage(1);\r",
                    "            }\r",
                    "        });\r",
                    "        if(thing.label==\"Query\"){\r",
                    "            activeOne.setText(Rubedo.RubedoAutomatedElementsLoc.searchText+\" : \"+thing.terms[0].label);\r",
                    "        }\r",
                    "        target.add(activeOne);\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "eec912e9-4be7-4df4-b0ae-95514ade0554"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#ESFacetQueryBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onESFacetQueryBtnClick",
                "implHandler": [
                    "Ext.getStore(\"ESFacetteStore\").activeFacettes.query=Ext.getCmp(\"ESFacetQueryField\").getValue();\r",
                    "Ext.getStore(\"ESFacetteStore\").load();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "9b13ba4c-cdde-410c-8ea3-d270023551ef"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "facets"
                ],
                "fn": "renderFacets",
                "implHandler": [
                    "var me=this;\r",
                    "var target=Ext.getCmp(\"searchFacetBox\");\r",
                    "target.removeAll();\r",
                    "Ext.Array.forEach(facets, function(facet){\r",
                    "    if (facet._type==\"range\"){\r",
                    "        facet.terms=[ ];\r",
                    "        if (!Ext.isEmpty(facet.ranges)){\r",
                    "            Ext.Array.forEach(facet.ranges, function(rangeTerm){\r",
                    "                if ((rangeTerm.count<Ext.getStore(\"ESFacetteStore\").getTotalCount())&&(rangeTerm.count!==0)){\r",
                    "                    facet.terms.push(rangeTerm);\r",
                    "                    rangeTerm.term=rangeTerm.from;\r",
                    "\r",
                    "                }\r",
                    "            });\r",
                    "        }\r",
                    "    }\r",
                    "    if (!Ext.isEmpty(facet.terms)){\r",
                    "        var newFacet = Ext.widget(\"fieldset\", {title:facet.label, collapsible:true});\r",
                    "        if((facet.id!=\"type\")&&(facet.id!=\"damType\")&&(facet.id!=\"userType\")&&(!target.up().advancedESQMode)){newFacet.collapse();}\r",
                    "        newFacet.usedProperty=facet.id;\r",
                    "        if (target.up().advancedESQMode){\r",
                    "            var myOperat=\"and\";\r",
                    "            if (!Ext.isEmpty(target.up().defaultFOps[newFacet.usedProperty])){\r",
                    "                myOperat=target.up().defaultFOps[newFacet.usedProperty];\r",
                    "            }\r",
                    "            myOperat=myOperat.toUpperCase();\r",
                    "\r",
                    "            newFacet.add({\r",
                    "                xtype: 'checkbox',\r",
                    "                anchor: '100%',\r",
                    "                fieldLabel: 'Display',\r",
                    "                localiserId:\"displayFacetFieldM\",\r",
                    "                name: 'displayFacet',\r",
                    "                itemId:\"facetIsDisplayedField\",\r",
                    "                inputValue:true,\r",
                    "                checked:Ext.isEmpty(target.up().initialDF)\r",
                    "            });\r",
                    "            newFacet.add({\r",
                    "                xtype: 'combobox',\r",
                    "                localiserId: 'facetOperatorField',\r",
                    "                anchor: '100%',\r",
                    "                fieldLabel: 'Facet operator',\r",
                    "                name: 'facetOperator',\r",
                    "                itemId:\"facetOperatorField\",\r",
                    "                allowBlank: false,\r",
                    "                editable: false,\r",
                    "                store:[[\"AND\",Rubedo.RubedoAutomatedElementsLoc.andText],[\"OR\",Rubedo.RubedoAutomatedElementsLoc.orText]],\r",
                    "                value:myOperat,\r",
                    "                forceSelection: true\r",
                    "            });\r",
                    "\r",
                    "        }\r",
                    "        Ext.Array.forEach(facet.terms, function(term){\r",
                    "            var newTerm=Ext.widget(\"button\",{\r",
                    "                text:term.label+\" (\"+term.count+\")\",\r",
                    "                usedValue:term.term,\r",
                    "                anchor:\"100%\",\r",
                    "                margin:2,\r",
                    "                handler:function(thing){\r",
                    "                    var theProp=Ext.getStore(\"ESFacetteStore\").activeFacettes[thing.up().usedProperty];\r",
                    "                    if ((!Ext.isEmpty(theProp))&&(facet._type!=\"range\")){\r",
                    "                        if (Ext.isArray(theProp)){\r",
                    "                            theProp.push(thing.usedValue);\r",
                    "                        } else {\r",
                    "                            theProp=[theProp,thing.usedValue];\r",
                    "                        }\r",
                    "\r",
                    "                    } else {\r",
                    "                        theProp=thing.usedValue;\r",
                    "\r",
                    "                    }\r",
                    "                    Ext.getStore(\"ESFacetteStore\").activeFacettes[thing.up().usedProperty]=theProp;\r",
                    "                    Ext.getStore(\"ESFacetteStore\").loadPage(1);\r",
                    "                }\r",
                    "            });\r",
                    "            newFacet.add(newTerm);\r",
                    "        });\r",
                    "\r",
                    "        target.add(newFacet);\r",
                    "    }\r",
                    "});\r",
                    "if ((target.up().advancedESQMode)&&(!Ext.isEmpty(target.up().initialDF))){\r",
                    "    var positioner = 0;\r",
                    "    Ext.Array.forEach(target.up().initialDF, function(determinant){\r",
                    "        var notFound=true;\r",
                    "        Ext.Array.forEach(target.items.items, function(candidate, index){\r",
                    "            if(notFound){\r",
                    "                if (candidate.usedProperty==determinant.name){\r",
                    "                    candidate.getComponent(\"facetOperatorField\").setValue(determinant.operator);\r",
                    "                    candidate.getComponent(\"facetIsDisplayedField\").setValue(true);\r",
                    "                    candidate.up().move(index,positioner);\r",
                    "                    positioner=positioner+1;\r",
                    "                    notFound=false;\r",
                    "                }\r",
                    "            }\r",
                    "\r",
                    "        });\r",
                    "\r",
                    "    });\r",
                    "\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "0bf37f2e-bd96-4dc3-b672-d37d65fbc7e7"
        }
    ]
}