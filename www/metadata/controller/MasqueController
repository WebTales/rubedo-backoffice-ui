{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "MasqueController",
        "models": [
            "masquesDataModel"
        ],
        "stores": [
            "VersionsDataJson",
            "MasquesDataJson"
        ],
        "views": [
            "nouveauMasque",
            "ImportationMasques",
            "copierMasque",
            "UnBloc",
            "ConfigSpecBloc",
            "ajoutBlocFenetre",
            "DelConfirmZ"
        ]
    },
    "designerId": "da6ed701-29c3-4603-a441-221b8ebb99cf",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonSupprimerMasque",
                "designer|targetType": "Ext.button.Button",
                "fn": "deleteMask",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'masks/is-used',\r",
                    "        params: {\r",
                    "            id: cible.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var maskIsUsed=Ext.JSON.decode(response.responseText).used;\r",
                    "            if (maskIsUsed){\r",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.maskIsUsedText);\r",
                    "            } else {\r",
                    "                var fenetre = Ext.widget('delConfirmZ');\r",
                    "                fenetre.specificMessage=Rubedo.RubedoAutomatedElementsLoc.thisMaskText;\r",
                    "                fenetre.show();\r",
                    "                Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "                    Ext.getCmp('masquesGrid').getStore().remove(cible);\r",
                    "                    Ext.getCmp('masqueEdition').removeAll();\r",
                    "                    Ext.getCmp('masqueEdition').pageProperties={ };\r",
                    "                    Ext.getCmp(\"newRow\").disable();\r",
                    "                    Ext.getCmp(\"newCol\").disable();\r",
                    "                    Ext.getCmp(\"newBloc\").disable();\r",
                    "                    Ext.getCmp(\"deleteElement\").disable();\r",
                    "                    Ext.getCmp('elementEditControl').setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);\r",
                    "                    Ext.getCmp('elementEditControl').removeAll();\r",
                    "                    Ext.getCmp('elementEditControl').setIconCls();\r",
                    "                    Ext.getCmp('elementIdField').setValue(null);\r",
                    "                    Ext.getCmp('delConfirmZ').close();\r",
                    "                    Ext.Array.forEach(Ext.getCmp(\"adminFMDP\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.disable();});\r",
                    "                    Ext.getCmp(\"boutonSupprimerMasque\").disable();\r",
                    "                    Ext.getCmp(\"adminFMDP\").getDockedComponent('barreMeta').getComponent('boiteBarreMeta').hide();\r",
                    "                }); \r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "deleteMask",
            "designerId": "50908fd7-bd46-4d7d-b504-215fdd4c7c75"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#masquesGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "masquesDisplay",
                "implHandler": [
                    "var dataview = Ext.getCmp(\"masquesGrid\");",
                    "var boiteMeta = dataview.findParentByType('window').getDockedComponent('barreMeta').getComponent('boiteBarreMeta');",
                    "var valeurs= Ext.clone(record.data);",
                    "valeurs.creation= Ext.Date.format(valeurs.createTime, Ext.Date.defaultFormat);",
                    "valeurs.derniereModification= Ext.Date.format(valeurs.lastUpdateTime, Ext.Date.defaultFormat);",
                    "valeurs.autore=valeurs.createUser.fullName;",
                    "boiteMeta.update(valeurs);",
                    "boiteMeta.show();",
                    "",
                    "var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');",
                    "var typeFil = filArianne.getComponent('type');",
                    "if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.text);}",
                    "else { typeFil= Ext.widget('button',{iconCls: \"masque-icon\", text:record.data.text, itemId:'type'});",
                    "filArianne.add(typeFil);",
                    "}",
                    "var masque = record.data;",
                    "var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());",
                    "if (!Ext.isEmpty(prevSelected)) {",
                    "prevSelected.removeBodyCls('selectedelement');",
                    "}",
                    "var newPageProperties=Ext.clone(record.get(\"pageProperties\"));",
                    "if (Ext.isEmpty(newPageProperties)){",
                    "    newPageProperties={ };",
                    "}",
                    "this.getMasqueEdition().pageProperties=newPageProperties;",
                    "Ext.suspendLayouts();",
                    "this.getMasqueEdition().removeAll();",
                    "this.masqueRestit(Ext.clone(masque.rows),1,this.getMasqueEdition());",
                    "this.restoreBlocks(Ext.clone(masque.blocks));",
                    "Ext.resumeLayouts();",
                    "",
                    "Ext.getCmp(\"newRow\").disable();",
                    "Ext.getCmp(\"newCol\").disable();",
                    "Ext.getCmp(\"newBloc\").disable();",
                    "Ext.getCmp(\"importElement\").disable();",
                    "Ext.getCmp(\"exportElement\").disable();",
                    "Ext.getCmp(\"deleteElement\").disable();",
                    "Ext.getCmp(\"moveElementUp\").disable();",
                    "Ext.getCmp(\"moveElementDown\").disable();",
                    "Ext.getCmp('elementEditControl').setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);",
                    "Ext.getCmp('elementEditControl').removeAll();",
                    "Ext.getCmp('elementEditControl').setIconCls();",
                    "Ext.getCmp('elementIdField').setValue(null);",
                    "Ext.getCmp(\"boutonSupprimerMasque\").enable();",
                    "Ext.getCmp(\"AdminfMasquesEnregistrer\").enable();",
                    "Ext.Array.forEach(Ext.getCmp(\"adminFMDP\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.enable();});",
                    "Ext.getCmp(\"mainColumnIdField\").setValue(Ext.clone(record.get(\"mainColumnId\")));",
                    "if (record.get(\"readOnly\")){",
                    "Ext.getCmp(\"masksEditionTopBarBox\").disable();",
                    "Ext.getCmp(\"boutonSupprimerMasque\").disable();",
                    "Ext.getCmp(\"AdminfMasquesEnregistrer\").disable();",
                    "}"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "masquesDisplay",
            "designerId": "90ee9ec3-51ac-45fd-a5c8-da93ce6a5710"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#ReusableElementsGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "reusablesGridSelect",
                "implHandler": [
                    "Ext.getCmp(\"reusableelementDescription\").update(record.data);\r",
                    "Ext.getCmp(\"resusableElementsDeleteBtn\").enable();\r",
                    "var go =true;\r",
                    "var target=Ext.getCmp(\"ReusableElementPicker\").insTar;\r",
                    "\r",
                    "if (record.get(\"mType\")==target.mType) {go=false;}\r",
                    "\r",
                    "else if ((target.mType==\"row\")&&(Ext.getCmp(target.id).getComponent(\"eol\").flex===0)) {go=false;}\r",
                    "else if ((target.mType==\"row\")&&(record.get(\"mType\")==\"col\")&&(record.get(\"mCode\").span>Ext.getCmp(target.id).getComponent(\"eol\").flex)) {go=false;}\r",
                    "\r",
                    "else if ((record.get(\"mType\")==\"row\")&&(target.mType==\"bloc\")) {go=false;}\r",
                    "else if ((record.get(\"mType\")!=\"row\")&&(target.id==\"masqueEdition\")) {go=false;}\r",
                    "else if ((record.get(\"mType\")!=\"bloc\")&&(target.level==4)) {go=false;}\r",
                    "else if((record.get(\"mType\")==\"bloc\")&&(!Ext.isEmpty(target.mCode.rows))) {go=false;}\r",
                    "else if((target.id!=\"masqueEdition\")&&(record.get(\"mType\")==\"row\")&&(!Ext.isEmpty(target.mCode.bloc))) {go=false;}\r",
                    "\r",
                    "\r",
                    "\r",
                    "if (go) {Ext.getCmp(\"REAddButton\").enable(); } else {Ext.getCmp(\"REAddButton\").disable(); }"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "reusablesGridSelect",
            "designerId": "f667b1d0-f417-425f-8afc-d0d5af2b1e38"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "MasqueEdition",
                "selector": "#masqueEdition"
            },
            "name": "MasqueEdition",
            "designerId": "0430d23b-9032-4abc-a5c3-c3d4f9a291e8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "element",
                    "blocks"
                ],
                "fn": "removeIds",
                "implHandler": [
                    "var me=this;\r",
                    "if (element.mType==\"col\"){\r",
                    "    var newId=Ext.id(null,\"column-\");\r",
                    "    Ext.Array.forEach(blocks,function(someBlock){\r",
                    "        if (someBlock.parentCol==element.id){\r",
                    "            someBlock.parentCol=newId;\r",
                    "        }\r",
                    "    });\r",
                    "    element.id=newId;\r",
                    "} else {\r",
                    "    element.id=undefined;\r",
                    "}\r",
                    "if (!Ext.isEmpty(element.columns)) {\r",
                    "    Ext.Array.forEach(element.columns,function(thing){me.removeIds(thing,blocks);});\r",
                    "}\r",
                    "if (!Ext.isEmpty(element.rows)) {\r",
                    "    Ext.Array.forEach(element.rows,function(thing){me.removeIds(thing,blocks);});\r",
                    "}\r",
                    "if (!Ext.isEmpty(element.blocks)) {\r",
                    "    Ext.Array.forEach(element.blocks,function(thing){me.removeIds(thing,blocks);});\r",
                    "}"
                ]
            },
            "name": "removeIds",
            "designerId": "bd0aa780-5af5-48a6-bd54-73374ad60e9d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target",
                    "offsetF",
                    "spanF",
                    "applyFirst"
                ],
                "fn": "applyConstrain",
                "implHandler": [
                    "var myEol=target.up().getComponent(\"eol\");\r",
                    "var myOffset=null;\r",
                    "if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType(\"container\"))&&(!(target.prev().isXType(\"panel\")))) {\r",
                    "    myOffset=target.prev();\r",
                    "}\r",
                    "if (applyFirst) {\r",
                    "    myEol.flex=myEol.flex+target.flex-spanF.getValue();\r",
                    "    target.flex=spanF.getValue();\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "    offsetF.setMaxValue(offsetF.getValue()+myEol.flex);\r",
                    "    target.up().doLayout();\r",
                    "    if (offsetF.getValue()>0){ \r",
                    "        if (Ext.isEmpty(myOffset)) {\r",
                    "            myOffset=Ext.widget(\"container\",{flex:0,reorderable:false,style:\"{background-image:url(resources/images/stripes.png);}\"});\r",
                    "            target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);\r",
                    "\r",
                    "\r",
                    "        } \r",
                    "        myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "        myOffset.flex=offsetF.getValue();\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "        spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "        target.up().doLayout();\r",
                    "\r",
                    "    } else if((offsetF.getValue()===0)) {\r",
                    "        if (!Ext.isEmpty(myOffset)) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "            myOffset.flex=offsetF.getValue();\r",
                    "            offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "            spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "            myOffset.destroy();\r",
                    "            target.up().doLayout();      \r",
                    "        } \r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "else {\r",
                    "    if (Ext.isEmpty(myOffset)){\r",
                    "        offsetF.setValue(0);\r",
                    "        offsetF.setMaxValue(myEol.flex);\r",
                    "    }\r",
                    "    else {\r",
                    "        offsetF.setValue(myOffset.flex);\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex); \r",
                    "    }\r",
                    "\r",
                    "    spanF.setValue(target.flex);\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "}"
                ]
            },
            "name": "applyConstrain",
            "designerId": "23c1d979-a727-40ed-bac2-e4ef8b4c7c72"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "elements",
                    "id",
                    "child",
                    "continueOK"
                ],
                "fn": "spliceMask",
                "implHandler": [
                    "var me=this;\r",
                    "if (continueOK){\r",
                    "    Ext.Array.forEach(elements, function(element){\r",
                    "        if (continueOK){\r",
                    "            if (element.id==id) {\r",
                    "                var leprop=\"rows\";\r",
                    "                if (child.mType==\"col\") { leprop=\"columns\";\r",
                    "                    if(Ext.isEmpty(element[leprop])){\r",
                    "                        element[leprop]=[ ];\r",
                    "                    }\r",
                    "                element[leprop].push(child);}\r",
                    "                if ((element.mType==\"col\")&&(child.mType==\"row\")){\r",
                    "                    element.isTerminal=false;\r",
                    "                }\r",
                    "                continueOK=false;\r",
                    "            } else {\r",
                    "                if (!Ext.isEmpty(element.columns)) {\r",
                    "                    me.spliceMask(element.columns,id,child,continueOK);\r",
                    "                }\r",
                    "                if (!Ext.isEmpty(element.rows)) {\r",
                    "                    me.spliceMask(element.rows,id,child,continueOK);\r",
                    "                }\r",
                    "            }\r",
                    "\r",
                    "        }\r",
                    "    });}"
                ]
            },
            "name": "spliceMask",
            "designerId": "0b1d99fd-b045-4490-bd3e-935590c2ea71"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "someArray",
                    "elementId"
                ],
                "fn": "findElement",
                "implHandler": [
                    "var me=this;\r",
                    "var result= null;\r",
                    "Ext.Array.forEach(someArray, function(element){\r",
                    "    if (result===null){\r",
                    "        if (element.id===elementId){\r",
                    "            result=Ext.clone(element);\r",
                    "        } else {\r",
                    "            if (!Ext.isEmpty(element.columns)) {\r",
                    "                result=(me.findElement(element.columns,elementId));\r",
                    "            }\r",
                    "            if ((!Ext.isEmpty(element.rows))&&(result===null)) {\r",
                    "                result=me.findElement(element.rows,elementId);\r",
                    "            }\r",
                    "            if ((!Ext.isEmpty(element.blocks))&&(result===null)) {\r",
                    "                result=me.findElement(element.blocks,elementId);\r",
                    "            }\r",
                    "        }}\r",
                    "\r",
                    "    });\r",
                    "    return (result);"
                ]
            },
            "name": "findElement",
            "designerId": "6e535155-ae5c-4d33-a23f-38d5eae4fcc0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "cible"
                ],
                "fn": "masqueMAJ",
                "implHandler": [
                    "var nouvZones = [ ];\r",
                    "var zonesM =Ext.getCmp('masqueEdition').items.items;\r",
                    "for (i=0; i<zonesM.length; i++) {\r",
                    "    var nZone = {hauteur: zonesM[i].height, largeur: zonesM[i].width, nom: zonesM[i].title, colonnes: [ ] };\r",
                    "    var colonnesM = zonesM[i].items.items;\r",
                    "    for (j=0; j<colonnesM.length; j++){\r",
                    "        var nColonne = {flex:colonnesM[j].flex, blocs: [ ]};\r",
                    "        var blocsM =colonnesM[j].items.items;\r",
                    "        for(k=0;k<blocsM.length; k++) {\r",
                    "            nColonne.blocks.push({ flex : blocsM[k].flex, title: blocsM[k].title, bType: blocsM[k].bType, champsConfig: blocsM[k].champsConfig, configBloc: blocsM[k].configBloc});\r",
                    "        }        \r",
                    "        nZone.colonnes.push(nColonne);\r",
                    "    }\r",
                    "    nouvZones.push(nZone);\r",
                    "}\r",
                    "cible.data.zones=nouvZones;"
                ]
            },
            "name": "masqueMAJ",
            "designerId": "1d1aba20-f06b-46cd-9b94-ce3f0b0e3b74"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "element"
                ],
                "fn": "getElementDepth",
                "implHandler": [
                    "var me = this;\r",
                    "if (Ext.isEmpty(element)){\r",
                    "    return(0);\r",
                    "}\r",
                    "if (element.mType==\"block\") {\r",
                    "    return(1);\r",
                    "}\r",
                    "else if (element.mType==\"col\") {\r",
                    "    var bDepth = 1;\r",
                    "    if (!Ext.isEmpty(element.blocks)) {bDepth=2;}\r",
                    "    var cDepth = 1;\r",
                    "    if (!Ext.isEmpty(element.rows)) {\r",
                    "        cDepth= 1+Ext.Array.max(Ext.Array.map(element.rows,function(row){return(me.getElementDepth(row));}));\r",
                    "    }\r",
                    "\r",
                    "    return(Math.max(bDepth,cDepth));\r",
                    "}\r",
                    "else if (element.mType==\"row\") {\r",
                    "    if (Ext.isEmpty(element.columns)) {\r",
                    "        return(1);\r",
                    "    }else{\r",
                    "        return( 1+Ext.Array.max(Ext.Array.map(element.columns,function(col){return(me.getElementDepth(col));})));\r",
                    "    }\r",
                    "} else {\r",
                    "    return(0);\r",
                    "}"
                ]
            },
            "name": "getElementDepth",
            "designerId": "9dab9dc0-ebc4-45bd-a056-7fd019fea6e1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "mRows",
                    "its",
                    "cible"
                ],
                "fn": "masqueRestit",
                "implHandler": [
                    "var me=this;",
                    "Ext.Array.forEach(mRows, function(row){",
                    "    var newRow = Ext.widget('panel', {",
                    "        header:false,",
                    "        mType:\"row\",",
                    "        eTitle:row.eTitle,",
                    "        id:row.id,",
                    "        i18n:row.i18n,",
                    "        plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],",
                    "        responsive:row.responsive,",
                    "        displayTitle:row.displayTitle,",
                    "        customTemplate:row.customTemplate,",
                    "        code:row.code,",
                    "        margin:4,",
                    "        layout: {",
                    "            type: 'hbox',",
                    "            align: 'stretch'",
                    "        }",
                    "    });",
                    "    var rFlex=1;",
                    "    var eolWidth=12;",
                    "    Ext.Array.forEach(row.columns, function(column){",
                    "        if (column.offset>0) {",
                    "            newRow.add(Ext.widget('container', {",
                    "                flex:column.offset,",
                    "                reorderable:false,",
                    "                style:\"{background-image:url(resources/images/stripes.png);}\"",
                    "            }));",
                    "            eolWidth=eolWidth-column.offset;",
                    "        }",
                    "        var isFinalCol=false;",
                    "        if (its<=0){isFinalCol=true;}",
                    "        var newCol=Ext.widget('panel', {",
                    "            header:false,",
                    "            flex:column.span,",
                    "            final:isFinalCol,",
                    "            plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],",
                    "            mType:'col',",
                    "            id:column.id,",
                    "            i18n:column.i18n,",
                    "            eTitle:column.eTitle,",
                    "            responsive:column.responsive,",
                    "            displayTitle:column.displayTitle,",
                    "            stackThreshold:column.stackThreshold,",
                    "            customTemplate:column.customTemplate,",
                    "            code:column.code,",
                    "            margin:4,",
                    "            layout: {",
                    "                type: 'vbox',",
                    "                align: 'stretch'",
                    "            }",
                    "        });",
                    "        newCol.plugins[0].on(\"Drop\",function(){",
                    "            me.recalculateBlockOrder(newCol);",
                    "        });",
                    "        if ((its>0)&&(column.isTerminal===false)) {",
                    "            rFlex=Ext.Array.max([rFlex,column.rows.length]);",
                    "            me.masqueRestit(column.rows,its-1,newCol);",
                    "        }",
                    "",
                    "        eolWidth=eolWidth-column.span;",
                    "        newRow.add(newCol);",
                    "",
                    "    });",
                    "    newRow.add(Ext.widget(\"container\",{",
                    "        flex:eolWidth,",
                    "        itemId:\"eol\",",
                    "        reorderable:false",
                    "    }));",
                    "        newRow.flex=rFlex;",
                    "",
                    "    cible.add(newRow);",
                    "});"
                ]
            },
            "name": "masqueRestit",
            "designerId": "36dfcf49-7a25-41ac-9be8-5cd054e2bdb0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#arborescenceSites",
                "designer|targetType": "Ext.tree.Panel",
                "fn": "onTreepanelItemClick",
                "implHandler": [
                    "var cible = Ext.getCmp('arborescenceSites').getSelectionModel().getSelection()[0];\r",
                    "this.getMasqueEdition().removeAll();\r",
                    "this.getMasqueEdition().setWidth(cible.data.largeur);\r",
                    "this.masqueRestit(cible.raw.zones);"
                ],
                "name": "itemclick",
                "scope": "me"
            },
            "name": "onTreepanelItemClick",
            "designerId": "b8b8ae88-6dae-43af-82a5-68d5129ec5d9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonCopierMasque",
                "designer|targetType": "Ext.button.Button",
                "fn": "copyMaskWindow",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    var fenetre = Ext.widget('copierMasque');\r",
                    "    fenetre.showAt(screen.width/2-150, 100);\r",
                    "    Ext.getCmp('copierMasqueTitre').setValue(cible.data.text+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i'));\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "copyMaskWindow",
            "designerId": "fcd80b72-c55f-4cd8-8b60-795aeb1185aa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonNouveauMasque",
                "designer|targetType": "Ext.button.Button",
                "fn": "newMaskWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('nouveauMasque');\r",
                    "fenetre.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "newMaskWindow",
            "designerId": "937a8757-7537-4f4b-b0b9-9367d551ad9b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#creerNouveauMasque",
                "designer|targetType": "Ext.button.Button",
                "fn": "createMask",
                "implHandler": [
                    "if ((Ext.getCmp('nouveauMasqueTitre').isValid())&&(Ext.getCmp('nouveauMasqueSite').isValid())) {\r",
                    "\r",
                    "    var nTitre = Ext.getCmp('nouveauMasqueTitre').getValue();\r",
                    "    var nSite = Ext.getCmp('nouveauMasqueSite').getValue();\r",
                    "    var nouvMasque = Ext.create('model.masquesDataModel', {\r",
                    "        text: nTitre,\r",
                    "        site: nSite,\r",
                    "        rows: [ ],\r",
                    "        blocks:[ ]\r",
                    "    });\r",
                    "    this.getMasquesDataJsonStore().add(nouvMasque);\r",
                    "    this.getMasquesDataJsonStore().addListener(\"datachanged\",function(){Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);},this,{single:true});\r",
                    "\r",
                    "    Ext.getCmp('nouveauMasqueFenetre').close();\r",
                    "    this.masquesDisplay(Ext.getCmp('masquesGridView'),nouvMasque);\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "createMask",
            "designerId": "1cf108dd-b3e6-442c-8aec-e10df6fac9c6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#AdminfMasquesEnregistrer",
                "designer|targetType": "Ext.button.Button",
                "fn": "maskSave",
                "implHandler": [
                    "var me =this;\r",
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    Ext.Ajax.request({\r",
                    "        url: 'masks/is-used',\r",
                    "        params: {\r",
                    "            id: cible.get(\"id\")\r",
                    "        },\r",
                    "        success: function(response){\r",
                    "            var maskIsUsed=Ext.JSON.decode(response.responseText).used;\r",
                    "            if (maskIsUsed){\r",
                    "                var chooser = Ext.widget(\"maskSaveChoiceBox\");\r",
                    "                chooser.getComponent(0).on(\"click\", function(){\r",
                    "                    cible.beginEdit();\r",
                    "                    cible.set(\"rows\",me.saveRows(me.getMasqueEdition()));\r",
                    "                    cible.set(\"blocks\",me.saveBlocks(me.getMasqueEdition()));\r",
                    "                    cible.set(\"pageProperties\",Ext.clone(Ext.getCmp('masqueEdition').pageProperties));\r",
                    "                    cible.set(\"mainColumnId\",Ext.clone(Ext.getCmp(\"mainColumnIdField\").getValue()));\r",
                    "                    cible.endEdit();  \r",
                    "                    chooser.close();\r",
                    "                });\r",
                    "                chooser.getComponent(1).on(\"click\", function(){\r",
                    "                    var nouvMasque = Ext.create('model.masquesDataModel', {\r",
                    "                        text: cible.data.text+\" - Copie du \"+Ext.Date.format(new Date(), 'j F, Y, G:i'),\r",
                    "                        site: cible.get(\"site\")\r",
                    "\r",
                    "                    });\r",
                    "                    var nBlocks=me.saveBlocks(me.getMasqueEdition());\r",
                    "                    Ext.Array.forEach(nBlocks, function(block){\r",
                    "                        block.id=Ext.id();\r",
                    "                    });\r",
                    "                    nouvMasque.set(\"rows\",me.saveRows(me.getMasqueEdition()));\r",
                    "                    nouvMasque.set(\"blocks\",nBlocks);\r",
                    "                    nouvMasque.set(\"pageProperties\",Ext.clone(Ext.getCmp('masqueEdition').pageProperties));\r",
                    "                    nouvMasque.set(\"mainColumnId\",Ext.clone(Ext.getCmp(\"mainColumnIdField\").getValue()));\r",
                    "                    me.getMasquesDataJsonStore().add(nouvMasque);\r",
                    "                    me.getMasquesDataJsonStore().addListener(\"datachanged\",function(){Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);},this,{single:true});  \r",
                    "                    chooser.close();\r",
                    "                });\r",
                    "                chooser.show();\r",
                    "            } else {\r",
                    "                cible.beginEdit();\r",
                    "                cible.set(\"rows\",me.saveRows(me.getMasqueEdition()));\r",
                    "                cible.set(\"blocks\",me.saveBlocks(me.getMasqueEdition()));\r",
                    "                cible.set(\"pageProperties\",Ext.clone(Ext.getCmp('masqueEdition').pageProperties));\r",
                    "                cible.set(\"mainColumnId\",Ext.clone(Ext.getCmp(\"mainColumnIdField\").getValue()));\r",
                    "                cible.endEdit();   \r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "maskSave",
            "designerId": "0beba9df-bf9f-4e8f-963d-36a9dd323b38"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#copierMasque",
                "designer|targetType": "Ext.button.Button",
                "fn": "copyMask",
                "implHandler": [
                    "if ((Ext.getCmp('copierMasqueTitre').isValid())&&(Ext.getCmp('copierMasqueSite').isValid())) {\r",
                    "    var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "    var nTitre = Ext.getCmp('copierMasqueTitre').getValue();\r",
                    "    var nSite = Ext.getCmp('copierMasqueSite').getValue();\r",
                    "    var nRows = Ext.clone(cible.data.rows);\r",
                    "    var nBlocks=Ext.clone(cible.data.blocks);\r",
                    "    Ext.Array.forEach(nBlocks, function(block){\r",
                    "        block.id=Ext.id();\r",
                    "    });\r",
                    "    var nProperties=Ext.clone(cible.data.pageProperties);\r",
                    "    var nMainColumnId=Ext.clone(cible.data.mainColumnId);\r",
                    "    var nouvMasque = Ext.create('model.masquesDataModel', {\r",
                    "        text: nTitre,\r",
                    "        site: nSite,\r",
                    "        rows: nRows,\r",
                    "        blocks:nBlocks,\r",
                    "        pageProperties:nProperties,\r",
                    "        mainColumnId:nMainColumnId\r",
                    "\r",
                    "    });\r",
                    "    this.getMasquesDataJsonStore().add(nouvMasque);\r",
                    "    this.getMasquesDataJsonStore().addListener(\"datachanged\",function(){Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);},this,{single:true});\r",
                    "\r",
                    "    Ext.getCmp('copieMasqueFenetre').close();    \r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "copyMask",
            "designerId": "22678e8c-5ce9-4592-9220-d5edc41a832a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#AdminfMasquesImporter",
                "designer|targetType": "Ext.button.Button",
                "fn": "importMaskWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('importationMasques');\r",
                    "fenetre.showAt(screen.width/2-150, 100);\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "importMaskWindow",
            "designerId": "28793c92-7265-46de-8344-651a0523c5d1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#masqueEdition panel",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "selectionEvents",
                "implHandler": [
                    "var me=this;",
                    "",
                    "if (!component.isXType(\"unBloc\")){",
                    "    component.addBodyCls('contrastBorder');",
                    "    if (component.mType==\"col\"){",
                    "        component.addBodyCls('contrastRow');",
                    "    }",
                    "    component.getEl().on(\"mouseover\", function(e){",
                    "        component.setBorder(4);",
                    "        e.stopEvent();",
                    "    });",
                    "    component.getEl().on(\"mouseout\", function(e){",
                    "        component.setBorder(2);",
                    "        e.stopEvent();",
                    "    });",
                    "    component.getEl().on(\"click\", function(e){",
                    "        e.stopEvent();",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());",
                    "        if (!Ext.isEmpty(prevSelected)) {",
                    "            if (prevSelected.isXType(\"unBloc\")) {prevSelected.setIconCls();} else {",
                    "                prevSelected.removeBodyCls('selectedelement');}",
                    "        }",
                    "        component.addBodyCls('selectedelement');",
                    "        this.frame(MyPrefData.themeColor);",
                    "        Ext.getCmp('elementIdField').setValue(component.id);",
                    "        Ext.getCmp('deleteElement').enable();",
                    "        Ext.getCmp(\"importElement\").enable();",
                    "        Ext.getCmp(\"exportElement\").enable();",
                    "        var propEdit=Ext.getCmp('elementEditControl');",
                    "        if (component.mType==\"col\"){",
                    "            propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.columnText);",
                    "        } else {",
                    "            propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.lignText);",
                    "        }",
                    "        propEdit.setIconCls('editZone');",
                    "",
                    "",
                    "        propEdit.removeAll();",
                    "        var configSpec = Ext.widget('ConfigSpecBloc');",
                    "",
                    "",
                    "        configSpec.getComponent(0).add(Ext.widget('genericLocTextField',{",
                    "            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.titleText,",
                    "            labelWidth:60,",
                    "            anchor:\"100%\",",
                    "            margin:\"10 0 10 0\",",
                    "            targetEntity:component.getId(),",
                    "            targetEntityProp:\"eTitle\",",
                    "            initialLanguage:Ext.getCmp(\"workingLanguageField\").getValue()",
                    "        }));",
                    "        configSpec.getComponent(0).add(Ext.widget('checkbox',{",
                    "            itemId:\"eTitleShowField\",",
                    "            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayTitleText,",
                    "            onChange:function(){",
                    "",
                    "                component.displayTitle=this.getValue();",
                    "",
                    "            },",
                    "            labelWidth:60,",
                    "            inputValue:true,",
                    "            anchor:\"100%\",",
                    "            margin:\"10 0 10 0\",",
                    "            checked:component.displayTitle",
                    "        }));",
                    "",
                    "        configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{",
                    "            fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,",
                    "            anchor:\"100%\",",
                    "            labelWidth:60,",
                    "            margin:\"0 0 10 0\",",
                    "            vertical:true,",
                    "            columns:1,",
                    "            items: [",
                    "                { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },",
                    "                { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},",
                    "                { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}},",
                    "                { boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}",
                    "",
                    "            ]",
                    "",
                    "        }));",
                    "",
                    "        if (component.mType==\"row\"){",
                    "            Ext.getCmp(\"moveElementUp\").enable();",
                    "            Ext.getCmp(\"moveElementDown\").enable();",
                    "            Ext.getCmp('newRow').disable();",
                    "            Ext.getCmp(\"newBloc\").disable();",
                    "            if (component.getComponent(\"eol\").flex===0){",
                    "                Ext.getCmp('newCol').disable();",
                    "            } else {",
                    "                Ext.getCmp('newCol').enable();",
                    "            }",
                    "",
                    "            configSpec.getComponent(1).add(Ext.create('Rubedo.view.ACEField',{",
                    "                fieldLabel:Rubedo.RubedoAutomatedElementsLoc.customTemplateText,",
                    "                onChange:function(){",
                    "",
                    "                    component.customTemplate=this.getValue();",
                    "",
                    "                },",
                    "                labelWidth:60,",
                    "                anchor:\"100%\",",
                    "                margin:\"10 0 10 0\",",
                    "                twigMode:false,",
                    "                defaultTemplateUrl:\"row.html\",",
                    "                value:component.customTemplate",
                    "            }));",
                    "            configSpec.getComponent(1).add(Ext.widget('textfield',{",
                    "    fieldLabel:\"Code\",",
                    "    onChange:function(){",
                    "        if (this.isValid()){",
                    "            component.code=this.getValue();",
                    "        }",
                    "    },",
                    "    labelWidth:60,",
                    "    allowBlank:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 0 0\",",
                    "    value:component.code",
                    "}));",
                    "",
                    "",
                    "        }",
                    "",
                    "        else if (component.mType==\"col\"){",
                    "            Ext.getCmp(\"moveElementUp\").disable();",
                    "            Ext.getCmp(\"moveElementDown\").disable();",
                    "            if ((component.final)){",
                    "                Ext.getCmp('newRow').disable();} else if ((Ext.isDefined(component.items.items[0]))&&(component.items.items[0].isXType(\"unBloc\"))) {",
                    "                    Ext.getCmp('newRow').disable();",
                    "                }else {",
                    "                    Ext.getCmp('newRow').enable();",
                    "                }",
                    "",
                    "            Ext.getCmp('newCol').disable();",
                    "            if ((Ext.isEmpty(component.items.items))||(component.items.items[0].isXType(\"unBloc\"))){",
                    "                Ext.getCmp(\"newBloc\").enable();} else {Ext.getCmp(\"newBloc\").disable();}",
                    "",
                    "            configSpec.getComponent(0).insert(2,Ext.widget('checkbox',{",
                    "                itemId:\"eMainColField\",",
                    "                fieldLabel:Rubedo.RubedoAutomatedElementsLoc.mainColumnText,",
                    "                onChange:function(){",
                    "                    if (this.getValue()){",
                    "                        Ext.getCmp(\"mainColumnIdField\").setValue(component.getId());",
                    "                    } else {",
                    "                        Ext.getCmp(\"mainColumnIdField\").setValue(null);",
                    "                    }",
                    "",
                    "",
                    "                },",
                    "                labelWidth:60,",
                    "                RTip:Rubedo.RubedoAutomatedElementsLoc.mainColumnRTip,",
                    "                inputValue:true,",
                    "                anchor:\"100%\",",
                    "                margin:\"10 0 10 0\",",
                    "                checked:(component.getId()==Ext.getCmp(\"mainColumnIdField\").getValue())",
                    "            }));",
                    "",
                    "",
                    "            var offsetEdit=Ext.widget('numberfield',{",
                    "                itemId:\"offsetEditor\",",
                    "                fieldLabel:Rubedo.RubedoAutomatedElementsLoc.offsetText,",
                    "                editable:false,",
                    "                labelWidth:60,",
                    "                allowDecimals:false,",
                    "                anchor:\"50%\",",
                    "                margin:\"10 0 0 0\",",
                    "                style:\"{float:left;}\",",
                    "                value:0,",
                    "                minValue:0",
                    "            });",
                    "",
                    "            var spanEdit=Ext.widget('numberfield',{",
                    "                itemId:\"spanEditor\",",
                    "                fieldLabel:Rubedo.RubedoAutomatedElementsLoc.spanText,",
                    "                labelWidth:60,",
                    "                editable:false,",
                    "                allowDecimals:false,",
                    "                anchor:\"50%\",",
                    "                margin:\"10 0 0 10\",",
                    "                style:\"{float:right;}\",",
                    "                value:component.flex,",
                    "                minValue:1",
                    "            });",
                    "",
                    "            var stackThreshold=Ext.widget('combobox',{",
                    "                itemId:\"stackThreshold\",",
                    "                fieldLabel:Rubedo.RubedoAutomatedElementsLoc.stackingThresholdText,",
                    "                labelWidth:60,",
                    "                editable:false,",
                    "                forceSelect:true,",
                    "                anchor:\"100%\",",
                    "                value:component.stackThreshold ? component.stackThreshold : \"sm\",",
                    "                onChange:function(){",
                    "",
                    "                    component.stackThreshold=this.getValue();",
                    "",
                    "                },",
                    "                queryMode:\"local\",",
                    "                store:[",
                    "                    [\"xs\",Rubedo.RubedoAutomatedElementsLoc.neverText],",
                    "                    [\"sm\",Rubedo.RubedoAutomatedElementsLoc.telephoneText],",
                    "                    [\"md\",Rubedo.RubedoAutomatedElementsLoc.tabletText],",
                    "                    [\"lg\",Rubedo.RubedoAutomatedElementsLoc.computerText]",
                    "                ]",
                    "            });",
                    "",
                    "            configSpec.getComponent(1).add(Ext.create('Rubedo.view.ACEField',{",
                    "                fieldLabel:Rubedo.RubedoAutomatedElementsLoc.customTemplateText,",
                    "                onChange:function(){",
                    "",
                    "                    component.customTemplate=this.getValue();",
                    "",
                    "                },",
                    "                labelWidth:60,",
                    "                anchor:\"100%\",",
                    "                margin:\"10 0 10 0\",",
                    "                twigMode:false,",
                    "                defaultTemplateUrl:\"column.html\",",
                    "                value:component.customTemplate",
                    "            }));",
                    "",
                    "            configSpec.getComponent(1).add(Ext.widget('textfield',{",
                    "    fieldLabel:\"Code\",",
                    "    onChange:function(){",
                    "        if (this.isValid()){",
                    "            component.code=this.getValue();",
                    "        }",
                    "    },",
                    "    labelWidth:60,",
                    "    allowBlank:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 0 0\",",
                    "    value:component.code",
                    "}));",
                    "",
                    "",
                    "",
                    "            configSpec.getComponent(0).add(offsetEdit);",
                    "            configSpec.getComponent(0).add(spanEdit);",
                    "            me.applyConstrain(component,offsetEdit,spanEdit,false);",
                    "            configSpec.getComponent(0).add(stackThreshold);",
                    "            offsetEdit.on(\"change\",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});",
                    "            spanEdit.on(\"change\",function(){me.applyConstrain(component,offsetEdit,spanEdit,true);});",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "        }",
                    "        propEdit.add(configSpec);",
                    "        if ((!ACL.interfaceRights['write.ui.masks'])||(Ext.getCmp(\"masquesGrid\").getSelectionModel().getLastSelected().get(\"readOnly\"))){",
                    "            Ext.Array.forEach(Ext.getCmp(\"elementEditControl\").query(\"field\"), function(truc){truc.setReadOnly(true);});",
                    "            Ext.Array.forEach(Ext.getCmp(\"elementEditControl\").query(\"button\"), function(truc){if (!truc.isXType(\"tab\")){truc.disable();}});",
                    "        }",
                    "",
                    "    });}"
                ],
                "name": "render",
                "scope": "me"
            },
            "name": "selectionEvents",
            "designerId": "b4a72045-b1e4-4c98-a83e-c7eacb3de7b6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#deleteElement",
                "designer|targetType": "Ext.button.Button",
                "fn": "deleteMaskElement",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "if (cible.mType==\"col\"){\r",
                    "    var myEol=cible.up().getComponent(\"eol\");\r",
                    "    var myOffset=cible.previousSibling();\r",
                    "    if (!Ext.isEmpty(myOffset)) {\r",
                    "        if ((myOffset.isXType(\"container\"))&&(!(myOffset.isXType(\"panel\")))) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex;\r",
                    "            myOffset.up().remove(myOffset);\r",
                    "        }\r",
                    "    }\r",
                    "    myEol.flex=myEol.flex+cible.flex;\r",
                    "\r",
                    "}\r",
                    "cible.up().remove(cible);\r",
                    "Ext.getCmp(\"newRow\").disable();\r",
                    "Ext.getCmp(\"newCol\").disable();\r",
                    "Ext.getCmp(\"newBloc\").disable();\r",
                    "Ext.getCmp(\"importElement\").disable();\r",
                    "Ext.getCmp(\"exportElement\").disable();\r",
                    "Ext.getCmp(\"deleteElement\").disable();\r",
                    "Ext.getCmp(\"moveElementUp\").disable();\r",
                    "Ext.getCmp(\"moveElementDown\").disable();\r",
                    "Ext.getCmp('elementEditControl').setTitle(Rubedo.RubedoAutomatedElementsLoc.selectAnElementText);\r",
                    "Ext.getCmp('elementEditControl').removeAll();\r",
                    "Ext.getCmp('elementEditControl').setIconCls();\r",
                    "Ext.getCmp('elementIdField').setValue(null);\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "deleteMaskElement",
            "designerId": "7dc2e797-0d01-464d-9a9f-6486e7f2707d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newCol",
                "designer|targetType": "Ext.button.Button",
                "fn": "addCol",
                "implHandler": [
                    "var me=this;",
                    "Ext.Ajax.request({",
                    "    url: 'xhr-get-mongo-id',",
                    "    params: { },",
                    "    success: function(response){",
                    "        var servedId = Ext.JSON.decode(response.responseText).mongoID;",
                    "",
                    "        var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());",
                    "        var myEol=cible.getComponent('eol');",
                    "",
                    "        if (myEol.flex>0) {",
                    "            var isFinalCol=false;",
                    "            if (cible.up().mType==\"col\"){",
                    "                isFinalCol=true;",
                    "            }",
                    "            var newCol=Ext.widget('panel', {",
                    "                header:false,",
                    "                flex:1,",
                    "                final:isFinalCol,",
                    "                plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],",
                    "                id:servedId,",
                    "                eTitle:Rubedo.RubedoAutomatedElementsLoc.titleText,",
                    "                responsive:{",
                    "                    phone:true,",
                    "                    tablet:true,",
                    "                    desktop:true,",
                    "                    largeDesktop:true",
                    "                },",
                    "                mType:'col',",
                    "                stackThreshold:\"sm\",",
                    "                margin:4,",
                    "                layout: {",
                    "                    type: 'vbox',",
                    "                    align: 'stretch'",
                    "                }",
                    "            });",
                    "            newCol.plugins[0].on(\"Drop\",function(){",
                    "                me.recalculateBlockOrder(newCol);",
                    "            });",
                    "            myEol.flex=myEol.flex-1;",
                    "            cible.insert(cible.items.items.length-1,newCol);",
                    "            if (myEol.flex===0){",
                    "                button.disable();",
                    "            }",
                    "",
                    "        }",
                    "        newCol.getEl().dom.click();",
                    "",
                    "",
                    "    },",
                    "    failure: function(){",
                    "        Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.columnIdRecoveryError);",
                    "",
                    "    }",
                    "});",
                    "",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "addCol",
            "designerId": "50d8cf43-e448-4ab1-9638-49be8b101ba3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newRow",
                "designer|targetType": "Ext.button.Button",
                "fn": "addRow",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());",
                    "var row = Ext.widget('panel', {",
                    "    header:false,",
                    "    mType:\"row\",",
                    "    flex:1,",
                    "    plugins:[Ext.create(\"Ext.ux.BoxReorderer\")],",
                    "    eTitle:Rubedo.RubedoAutomatedElementsLoc.titleText,",
                    "    responsive:{",
                    "        phone:true,",
                    "        tablet:true,",
                    "        desktop:true,",
                    "        largeDesktop:true",
                    "    },",
                    "    margin:4,",
                    "    layout: {",
                    "        type: 'hbox',",
                    "        align: 'stretch'",
                    "    }",
                    "});",
                    "row.add(Ext.widget('container', {flex:12,itemId:\"eol\", reorderable:false}));",
                    "cible.insert(cible.items.items.length,row);",
                    "Ext.getCmp(\"newBloc\").disable();",
                    "row.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "addRow",
            "designerId": "b82ff31c-9d1a-4232-b20c-26c553fac70e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newBloc",
                "designer|targetType": "Ext.button.Button",
                "fn": "showBlocWindow",
                "implHandler": [
                    "var blocWin = Ext.widget('ajoutBlocFenetre');\r",
                    "blocWin.showAt(screen.width/2-250, 100);"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "showBlocWindow",
            "designerId": "4c85525a-9c6d-41e1-8158-3c916ff237ec"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#REAddButton",
                "designer|targetType": "Ext.button.Button",
                "fn": "importElement",
                "implHandler": [
                    "var target=button.up().up().up().insTar;\r",
                    "var child=Ext.clone(Ext.getCmp(\"ReusableElementsGrid\").getSelectionModel().getLastSelected().get(\"mCode\"));\r",
                    "var cBlocks=Ext.clone(Ext.getCmp(\"ReusableElementsGrid\").getSelectionModel().getLastSelected().get(\"mBlocks\"));\r",
                    "Ext.Array.forEach(cBlocks,function(someBlock){\r",
                    "    someBlock.id=undefined;\r",
                    "});\r",
                    "if (!Ext.isEmpty(child)){\r",
                    "    this.removeIds(child,cBlocks);\r",
                    "}\r",
                    "var maskRows = this.saveRows(this.getMasqueEdition());\r",
                    "var maskBlocks= this.saveBlocks(this.getMasqueEdition());\r",
                    "if (!Ext.isEmpty(child)){\r",
                    "    if (target.id==\"masqueEdition\") {\r",
                    "        maskRows.push(child);\r",
                    "    } else {\r",
                    "        this.spliceMask(maskRows,target.id,child,true);\r",
                    "    }\r",
                    "} else if (!Ext.isEmpty(cBlocks)){\r",
                    "    Ext.Array.forEach(cBlocks,function(someBlock){\r",
                    "        someBlock.parentCol=target.id;\r",
                    "    });\r",
                    "}\r",
                    "this.getMasqueEdition().removeAll();\r",
                    "this.masqueRestit(maskRows,1,this.getMasqueEdition()); \r",
                    "var newBlocks=Ext.Array.merge(maskBlocks, cBlocks);\r",
                    "this.restoreBlocks(newBlocks);\r",
                    "button.up().up().up().close();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "importElement",
            "designerId": "ed2cc6c0-ce25-4b86-a298-e0e2e4e50823"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#boutonAjouterBloc",
                "designer|targetType": "Ext.button.Button",
                "fn": "addBloc",
                "implHandler": [
                    "var donnees = Ext.getCmp('BlocsSelectGrid').getSelectionModel().getLastSelected().data;",
                    "var configurator = Ext.clone(donnees.configBasique);",
                    "if (Ext.isEmpty(configurator.configBloc)){",
                    "    configurator.configBloc={ };",
                    "}",
                    "delete configurator.champsConfig;",
                    "var nouvBloc = Ext.widget('unBloc', configurator);",
                    "nouvBloc.responsive={",
                    "    \"phone\":true,",
                    "    \"tablet\":true,",
                    "    \"desktop\":true,",
                    "    \"largeDesktop\":true",
                    "};",
                    "nouvBloc.flex=1;",
                    "",
                    "var target = Ext.getCmp(Ext.getCmp('elementIdField').getValue());",
                    "var orderValue = 100;",
                    "if (!Ext.isEmpty(target.items.items)) {",
                    "    orderValue=target.items.items[target.items.items.length-1].orderValue+100;",
                    "}",
                    "nouvBloc.orderValue=orderValue;",
                    "target.add(nouvBloc);",
                    "button.up().up().close();",
                    "Ext.getCmp('newRow').disable();",
                    "nouvBloc.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "addBloc",
            "designerId": "a1d7be70-950d-412d-aef0-c1fe5ea341db"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "mBlocks"
                ],
                "fn": "restoreBlocks",
                "implHandler": [
                    "Ext.Array.forEach(mBlocks, function(block){\r",
                    "    block.title=Ext.util.Format.stripTags(block.title);\r",
                    "    var targetCol=Ext.getCmp(block.parentCol);\r",
                    "    if ((!Ext.isEmpty(targetCol))&&(targetCol.mType=='col')){\r",
                    "        if (Ext.isEmpty(block.configBloc)){\r",
                    "            block.configBloc={ };\r",
                    "        }\r",
                    "        block.flex=1;\r",
                    "        targetCol.add(Ext.widget(\"unBloc\",block));\r",
                    "    }\r",
                    "});"
                ]
            },
            "name": "restoreBlocks",
            "designerId": "13be3170-c30e-4e1b-8ac5-aaab6c0a7995"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "element",
                    "level"
                ],
                "fn": "getElementLevel",
                "implHandler": [
                    "if (element.id==\"masqueEdition\") {\r",
                    "    return (level);\r",
                    "} else {   \r",
                    "    return(this.getElementLevel(element.up(),level+1));\r",
                    "}"
                ]
            },
            "name": "getElementLevel",
            "designerId": "3b400554-8f07-4613-91a5-515b3f336a32"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "startComp"
                ],
                "fn": "saveRows",
                "implHandler": [
                    "var me=this;",
                    "var nRows=[ ];",
                    "Ext.Array.forEach(startComp.items.items, function(row){",
                    "    var newCols = [ ];",
                    "    var offset=0;",
                    "    Ext.Array.forEach(row.items.items, function(col){",
                    "        if (col.isXType(\"panel\")) {",
                    "            var rows = null;",
                    "            var isTerminal=true;",
                    "            if (col.final) {",
                    "",
                    "            }else {",
                    "                var thing=col.items.items[0];",
                    "                if (Ext.isEmpty(thing)){} else if (thing.isXType(\"unBloc\")) {",
                    "",
                    "            } else {",
                    "                isTerminal=false;",
                    "                rows=me.saveRows(col);",
                    "            }",
                    "        }",
                    "",
                    "        newCols.push({",
                    "            eTitle:col.eTitle,",
                    "            responsive:col.responsive,",
                    "            displayTitle:col.displayTitle,",
                    "            span:col.flex,",
                    "            stackThreshold:col.stackThreshold,",
                    "            customTemplate:col.customTemplate,",
                    "            code:col.code,",
                    "            id:col.id,",
                    "            i18n:col.i18n,",
                    "            mType:\"col\",",
                    "            offset:offset,",
                    "            rows: rows,",
                    "            isTerminal:isTerminal",
                    "",
                    "        });",
                    "        offset=0;",
                    "    } else {offset=offset+col.flex;}",
                    "",
                    "    });",
                    "    nRows.push({",
                    "        eTitle:row.eTitle,",
                    "        id:row.id,",
                    "        i18n:row.i18n,",
                    "        customTemplate:row.customTemplate,",
                    "        mType:\"row\",",
                    "        responsive:row.responsive,",
                    "        displayTitle:row.displayTitle,",
                    "        code:row.code,",
                    "        columns: newCols",
                    "",
                    "    });",
                    "});",
                    "return nRows;"
                ]
            },
            "name": "saveRows",
            "designerId": "ec7012c8-a91c-4437-a012-b355dc5bfe70"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#masqueEdition",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "mainBoxSelect",
                "implHandler": [
                    "component.setBorder(2);",
                    "component.addBodyCls('contrastCBorder');",
                    "component.getEl().on(\"mouseover\", function(e){",
                    "    component.setBorder(4);",
                    "    e.stopEvent();",
                    "});",
                    "component.getEl().on(\"mouseout\", function(e){",
                    "    component.setBorder(2);",
                    "    e.stopEvent();",
                    "});",
                    "component.getEl().on(\"click\", function(e){",
                    "    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());",
                    "    if (!Ext.isEmpty(prevSelected)) {",
                    "        if (prevSelected.isXType(\"unBloc\")) {prevSelected.setIconCls();} else {",
                    "    prevSelected.removeBodyCls('selectedelement');}",
                    "}",
                    "component.addBodyCls('selectedelement');",
                    "this.frame(MyPrefData.themeColor);",
                    "Ext.getCmp('elementIdField').setValue(component.id);",
                    "Ext.getCmp('deleteElement').disable();",
                    "Ext.getCmp('newCol').disable();",
                    "Ext.getCmp('newBloc').disable();",
                    "Ext.getCmp('newRow').enable();",
                    "Ext.getCmp(\"moveElementUp\").disable();",
                    "Ext.getCmp(\"moveElementDown\").disable();",
                    "Ext.getCmp(\"importElement\").enable();",
                    "Ext.getCmp(\"exportElement\").disable();",
                    "var propEdit=Ext.getCmp('elementEditControl');",
                    "propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.rootText);",
                    "propEdit.setIconCls('editZone');",
                    "propEdit.removeAll();",
                    "var configSpec = Ext.widget('ConfigSpecBloc');",
                    "/*configSpec.getComponent(1).add(Ext.widget('checkbox',{",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayInADivText,",
                    "    onChange:function(){",
                    "",
                    "        component.pageProperties.showInDiv=this.getValue();",
                    "",
                    "    },",
                    "    labelWidth:60,",
                    "    inputValue:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 10 0\",",
                    "    checked:component.pageProperties.showInDiv",
                    "}));*/",
                    "    configSpec.getComponent(1).add(Ext.create('Rubedo.view.ACEField',{",
                    "    fieldLabel:\"Custom template\",",
                    "    onChange:function(){",
                    "",
                    "        component.pageProperties.customTemplate=this.getValue();",
                    "",
                    "    },",
                    "    labelWidth:60,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 10 0\",",
                    "        twigMode:false,",
                    "        defaultTemplateUrl:\"defaultPageBody.html\",",
                    "    value:component.pageProperties.customTemplate",
                    "}));",
                    "    configSpec.getComponent(0).add(Ext.create('Rubedo.view.ACEField',{",
                    "    fieldLabel:\"UX Instructions\",",
                    "    onChange:function(){",
                    "",
                    "        component.pageProperties.UXInstructions=this.getValue();",
                    "",
                    "    },",
                    "    labelWidth:60,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 10 0\",",
                    "        twigMode:false,",
                    "        textMode:true,",
                    "    value:component.pageProperties.UXInstructions",
                    "}));",
                    "    configSpec.getComponent(1).add(Ext.widget('textfield',{",
                    "    fieldLabel:\"Code\",",
                    "    onChange:function(){",
                    "        if (this.isValid()){",
                    "            component.pageProperties.code=this.getValue();",
                    "        }",
                    "    },",
                    "    labelWidth:60,",
                    "    allowBlank:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 0 0\",",
                    "    value:component.pageProperties.code",
                    "}));",
                    "    configSpec.getComponent(1).add(Ext.widget('textfield',{",
                    "    fieldLabel:\"Body Id\",",
                    "    onChange:function(){",
                    "        if (this.isValid()){",
                    "            component.pageProperties.bodyId=this.getValue();",
                    "        }",
                    "    },",
                    "    labelWidth:60,",
                    "    allowBlank:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 0 0\",",
                    "    value:component.pageProperties.bodyId",
                    "}));",
                    "    configSpec.getComponent(1).add(Ext.widget('textfield',{",
                    "    fieldLabel:\"Body class\",",
                    "    onChange:function(){",
                    "        if (this.isValid()){",
                    "            component.pageProperties.bodyClass=this.getValue();",
                    "        }",
                    "    },",
                    "    labelWidth:60,",
                    "    allowBlank:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 0 0\",",
                    "    value:component.pageProperties.bodyClass",
                    "}));",
                    "",
                    "propEdit.add(configSpec);",
                    "",
                    "",
                    "",
                    "",
                    "});"
                ],
                "name": "render",
                "scope": "me"
            },
            "name": "mainBoxSelect",
            "designerId": "5b3c538a-da66-40b6-88b1-e671ff70a9fb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#masqueEdition unBloc",
                "designer|targetType": "UnBloc",
                "fn": "blocSelect",
                "implHandler": [
                    "",
                    "",
                    "component.getEl().on(\"mouseover\", function(e){",
                    "    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());",
                    "    if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {",
                    "        component.setIconCls('selectBloc');",
                    "    }",
                    "    e.stopEvent();",
                    "});",
                    "component.getEl().on(\"mouseout\", function(e){",
                    "    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());",
                    "    if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==component.id)) {",
                    "    component.setIconCls();}",
                    "    e.stopEvent();",
                    "});",
                    "component.getEl().on(\"click\", function(e){",
                    "    e.stopEvent();",
                    "    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());",
                    "    if (!Ext.isEmpty(prevSelected)) {",
                    "        if (prevSelected.isXType(\"unBloc\")) {prevSelected.setIconCls();} else {",
                    "    prevSelected.removeBodyCls('selectedelement');}",
                    "}",
                    "component.setIconCls('editBloc');",
                    "this.frame(MyPrefData.themeColor);",
                    "Ext.getCmp('elementIdField').setValue(component.id);",
                    "Ext.getCmp('deleteElement').enable();",
                    "Ext.getCmp('newCol').disable();",
                    "Ext.getCmp('newBloc').disable();",
                    "Ext.getCmp('newRow').disable();",
                    "Ext.getCmp(\"importElement\").disable();",
                    "Ext.getCmp(\"exportElement\").enable();",
                    "Ext.getCmp(\"moveElementUp\").enable();",
                    "Ext.getCmp(\"moveElementDown\").enable();",
                    "var propEdit=Ext.getCmp('elementEditControl');",
                    "try{",
                    "    propEdit.setTitle(Rubedo.RubedoAutomatedElementsLoc.blockText+\" \"+Ext.getStore(\"BlocsDataStore\").findRecord('bType', component.bType,0,false,false,true).get(\"type\"));",
                    "}catch(err){",
                    "    propEdit.setTitle(component.id.replace(\"unBloc\", \"Bloc\"));",
                    "}",
                    "propEdit.setIconCls('editBloc');",
                    "propEdit.removeAll();",
                    "",
                    "",
                    "var configSpec = Ext.widget('ConfigSpecBloc');",
                    "",
                    "",
                    "configSpec.getComponent(0).add(Ext.widget('genericLocTextField',{",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.titleText,",
                    "    labelWidth:60,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 10 0\",",
                    "    targetEntity:component.getId(),",
                    "    targetEntityProp:\"title\",",
                    "    initialLanguage:Ext.getCmp(\"workingLanguageField\").getValue()",
                    "}));",
                    "",
                    "configSpec.getComponent(0).add(Ext.widget('checkbox',{",
                    "    itemId:\"eTitleShowField\",",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.displayTitleText,",
                    "    onChange:function(){",
                    "",
                    "        component.displayTitle=this.getValue();",
                    "",
                    "    },",
                    "    labelWidth:60,",
                    "    inputValue:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 10 0\",",
                    "    checked:component.displayTitle",
                    "}));",
                    "",
                    "configSpec.getComponent(0).add(Ext.widget('checkboxgroup',{",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.visibilityText,",
                    "    anchor:\"100%\",",
                    "    labelWidth:60,",
                    "    margin:\"0 0 10 0\",",
                    "    vertical:true,",
                    "    columns:1,",
                    "    items: [",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.telephoneText, checked:component.responsive.phone, handler:function(){component.responsive.phone=this.getValue();} },",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.tabletText, checked:component.responsive.tablet, handler:function(){component.responsive.tablet=this.getValue();}},",
                    "    { boxLabel: Rubedo.RubedoAutomatedElementsLoc.computerText, checked:component.responsive.desktop, handler:function(){component.responsive.desktop=this.getValue();}},",
                    "                        { boxLabel: Rubedo.RubedoAutomatedElementsLoc.largeDesktopText, checked:component.responsive.largeDesktop, handler:function(){component.responsive.largeDesktop=this.getValue();}}",
                    "",
                    "    ]",
                    "",
                    "}));",
                    "    configSpec.getComponent(1).add(Ext.widget('textfield',{",
                    "    fieldLabel:\"Code\",",
                    "    onChange:function(){",
                    "        if (this.isValid()){",
                    "            component.code=this.getValue();",
                    "        }",
                    "    },",
                    "    labelWidth:60,",
                    "    allowBlank:true,",
                    "    anchor:\"100%\",",
                    "    margin:\"10 0 0 0\",",
                    "    value:component.code",
                    "}));",
                    "",
                    "var languagesPicker = Ext.create(\"Ext.ux.form.field.BoxSelect\", {",
                    "    anchor:\"100%\",",
                    "    name:\"localeFilters\",",
                    "    labelWidth:70,",
                    "    fieldLabel:Rubedo.RubedoAutomatedElementsLoc.languagesText,",
                    "    multiSelect:true,",
                    "    forceSelection:true,",
                    "    store: Ext.getStore(\"AllLanguagesStore4\"),",
                    "    displayField:\"label\",",
                    "    valueField:\"locale\",",
                    "    plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")],",
                    "    queryMode:\"local\",",
                    "    \"labelTpl\": \"<img src=\\\"/assets/flags/16/{flagCode}.png\\\" style=\\\"height: 16px; vertical-align: middle; margin: 2px;\\\" /> {label}\",",
                    "    \"listConfig\": {",
                    "        \"tpl\": [",
                    "        \"<ul><tpl for=\\\".\\\">\",",
                    "        \"<li role=\\\"option\\\" class=\\\"x-boundlist-item\\\" style=\\\"background-image:url(/assets/flags/16/{flagCode}.png); background-repeat: no-repeat; background-size: 16px; padding-left: 16px;\\\">{label}</li>\",",
                    "        \"</tpl></ul>\"",
                    "        ]",
                    "    }",
                    "});",
                    "languagesPicker.on(\"change\",function(){",
                    "    var newValue=languagesPicker.getValue();",
                    "    if (Ext.isEmpty(newValue)){",
                    "        languagesPicker.setValue([\"all\"]);",
                    "    } else if((newValue.length>1)&&(Ext.Array.contains(newValue,\"all\"))){",
                    "        languagesPicker.setValue(Ext.Array.remove(newValue,\"all\"));",
                    "    }",
                    "    component.localeFilters=languagesPicker.getValue();",
                    "});",
                    "if (Ext.isEmpty(component.localeFilters)){",
                    "    languagesPicker.setValue([\"all\"]);",
                    "} else {",
                    "    languagesPicker.setValue(component.localeFilters);",
                    "}",
                    "if (Ext.getStore(\"AllLanguagesStore3\").getRange().length==1){",
                    "    languagesPicker.hide();",
                    "}",
                    "configSpec.getComponent(0).add(languagesPicker);",
                    "",
                    "if (Ext.isEmpty(component.bType)){",
                    "    var categories = Ext.clone(component.champsConfig.simple);",
                    "    var categoriesADV = Ext.clone(component.champsConfig.avance);",
                    "} else {",
                    "    var categories=Ext.clone(Ext.getStore(\"BlocsDataStore\").findRecord('bType', component.bType,0,false,false,true).get(\"configBasique\").champsConfig.simple);",
                    "    var categoriesADV=Ext.clone(Ext.getStore(\"BlocsDataStore\").findRecord('bType', component.bType,0,false,false,true).get(\"configBasique\").champsConfig.avance);",
                    "}",
                    "",
                    "Ext.Array.forEach(categoriesADV,function(someCat){someCat.isAdv=true;});",
                    "categories=Ext.Array.merge(categories,categoriesADV);",
                    "for (j=0; j<categories.length; j++){",
                    "    var nCateg = Ext.create('Ext.form.FieldSet', {title: categories[j].categorie, collapsible:true, layout: 'anchor'});",
                    "    nCateg.isAdv=categories[j].isAdv;",
                    "",
                    "    var champsS = Ext.clone(categories[j].champs);",
                    "    for (i=0; i<champsS.length; i++) {",
                    "        if (champsS[i].type =='Ext.ux.TreePicker') {",
                    "            var filteredStore=  Ext.create(\"Ext.data.TreeStore\",{autoLoad: false,",
                    "                    autoSync: false,",
                    "                    isOptimised:true,",
                    "                    usedCollection:\"Pages\",",
                    "                    model: 'Rubedo.model.pageDataModel',",
                    "                    proxy: {",
                    "                        type: 'ajax',",
                    "                        api: {",
                    "                            create: 'pages/create',",
                    "                            read: 'pages/tree',",
                    "                            update: 'pages/update',",
                    "                            destroy: 'pages/delete'",
                    "                        },",
                    "                        reader: {",
                    "                            type: 'json',",
                    "                            getResponseData: function(response) {",
                    "                                var data, error;",
                    "",
                    "                            try {",
                    "                                data = Ext.decode(response.responseText);",
                    "                                if (Ext.isDefined(data.data)){data.children=data.data;}// error fix",
                    "                                return this.readRecords(data);",
                    "                            } catch (ex) {",
                    "                                error = new Ext.data.ResultSet({",
                    "                                    total  : 0,",
                    "                                    count  : 0,",
                    "                                    records: [],",
                    "                                    success: false,",
                    "                                    message: ex.message",
                    "                                });",
                    "",
                    "                                this.fireEvent('exception', this, response, error);",
                    "                                console.log(ex);",
                    "",
                    "                                Ext.Logger.warn('Unable to parse the JSON returned by the server');",
                    "",
                    "                                return error;",
                    "                            }",
                    "                        },",
                    "                        messageProperty: 'message'",
                    "                    }",
                    "                },",
                    "                sorters: {",
                    "                    property: 'orderValue'",
                    "                }",
                    "            });",
                    "",
                    "            filteredStore.getProxy().extraParams.filter=\"[{\\\"property\\\":\\\"site\\\",\\\"value\\\":\\\"\"+Ext.getCmp(\"masquesGrid\").getSelectionModel().getLastSelected().get(\"site\")+\"\\\"}]\";",
                    "            filteredStore.load();",
                    "            champsS[i].config.store= filteredStore;",
                    "            champsS[i].config.displayField=\"text\";",
                    "            champsS[i].config.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];",
                    "",
                    "",
                    "",
                    "        }else if (champsS[i].isAutoStored){",
                    "            var miniStore=Ext.create('Ext.data.Store', {",
                    "                fields:[{name:\"value\"},{name:\"label\"}],",
                    "                data:champsS[i].autoStoreData,",
                    "                autoload:true",
                    "            });",
                    "            champsS[i].config.store= miniStore;",
                    "            champsS[i].config.displayField=\"label\";",
                    "            champsS[i].config.valueField=\"value\";",
                    "        }",
                    "        var nChampS = Ext.create(champsS[i].type, champsS[i].config);",
                    "        if (champsS[i].type =='Ext.form.field.Trigger'){",
                    "            var Ouvrir = Ext.clone(champsS[i].ouvrir);",
                    "            var targeting=Ext.clone(nChampS.id);",
                    "            nChampS.onTriggerClick= function() {",
                    "                var fenetre = Ext.widget(Ouvrir);",
                    "                fenetre.show();",
                    "                fenetre.mainFieldId=targeting;",
                    "",
                    "            } ;",
                    "        }",
                    "        nChampS.labelSeparator= ' ';",
                    "        nChampS.anchor= '100%';",
                    "        nChampS.labelWidth=60;",
                    "        nChampS.setValue(component.configBloc[nChampS.name]);",
                    "        if ((nChampS.name==\"magicQuery\")&&(!PHPOptions.activateMagic)){",
                    "                nChampS.hide();",
                    "            }",
                    "        if ((nChampS.isXType(\"combobox\"))&&(!nChampS.isXType(\"treepicker\"))){",
                    "            nChampS.getStore().fieldId=Ext.clone(nChampS.id);",
                    "            nChampS.getStore().fieldValue=Ext.clone(component.configBloc[nChampS.name]);",
                    "            nChampS.getStore().addListener(\"load\",function(storeThing){",
                    "                Ext.getCmp(storeThing.fieldId).setValue(storeThing.fieldValue);",
                    "            },this,{single:true});",
                    "            }",
                    "            if (nChampS.isXType(\"treepicker\")){",
                    "                nChampS.on('select', function(){component.configBloc[this.name]=this.getValue(); });",
                    "",
                    "            }",
                    "            if (nChampS.isXType(\"comboboxselect\")){",
                    "                nChampS.on('afterrender', function(thing){thing.fireEvent(\"change\");});",
                    "",
                    "            }",
                    "            nChampS.on('change', function(){component.configBloc[this.name]=this.getValue();});",
                    "            nCateg.add(nChampS);",
                    "        }",
                    "        if(nCateg.isAdv){",
                    "            configSpec.getComponent(1).add(nCateg);",
                    "        }else{",
                    "            configSpec.getComponent(0).add(nCateg);",
                    "        }",
                    "",
                    "",
                    "    }",
                    "    propEdit.add(configSpec);",
                    "",
                    "",
                    "    if ((!ACL.interfaceRights['write.ui.masks'])||(Ext.getCmp(\"masquesGrid\").getSelectionModel().getLastSelected().get(\"readOnly\"))){",
                    "        Ext.Array.forEach(Ext.getCmp(\"elementEditControl\").query(\"field\"), function(truc){truc.setReadOnly(true);});",
                    "        Ext.Array.forEach(Ext.getCmp(\"elementEditControl\").query(\"button\"), function(truc){if (!truc.isXType(\"tab\")){truc.disable();}});",
                    "    }",
                    "",
                    "",
                    "});"
                ],
                "name": "render",
                "scope": "me"
            },
            "name": "blocSelect",
            "designerId": "51ce778b-c530-48f5-a2d7-43f3b6482faf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#ExportElementButton",
                "designer|targetType": "Ext.button.Button",
                "fn": "exportElement",
                "implHandler": [
                    "var form = button.up().getForm();\r",
                    "if (form.isValid()) {\r",
                    "    var values=form.getValues();\r",
                    "    var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "    var maskRows = this.saveRows(this.getMasqueEdition());\r",
                    "    var mCode=this.findElement(maskRows,target.id);\r",
                    "    var mBlocks=this.saveBlocks(target);\r",
                    "    var newElement=Ext.create(\"Rubedo.model.reusableElementModel\",{\r",
                    "        name:values.name,\r",
                    "        description:values.description,\r",
                    "        mCode:mCode,\r",
                    "        mBlocks:mBlocks,\r",
                    "        mDepth:this.getElementDepth(mCode),\r",
                    "        mType:target.mType,\r",
                    "        mLevel:this.getElementLevel(target,0),\r",
                    "        site:Ext.getCmp(\"masquesGrid\").getSelectionModel().getLastSelected().get(\"site\")\r",
                    "    });\r",
                    "    Ext.getStore(\"ReusableElementsDataStore\").add(newElement);\r",
                    "}\r",
                    "button.up().up().close();\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "exportElement",
            "designerId": "ed3f878d-3a09-4236-b788-0dd518f58baa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#BlocsSelectGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "addBlocDblClick",
                "implHandler": [
                    "if (Ext.getCmp(\"BlocsSelectGrid\").pageMode){\r",
                    "    Ext.getCmp(\"addPageBlocBtn\").fireEvent(\"click\");\r",
                    "} else {\r",
                    "    this.addBloc(Ext.getCmp(\"boutonAjouterBloc\"));\r",
                    "}"
                ],
                "name": "itemdblclick",
                "scope": "me"
            },
            "name": "addBlocDblClick",
            "designerId": "d0ccbeb8-e552-4c5f-84da-1d9621ba77f2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#exportElement",
                "designer|targetType": "Ext.button.Button",
                "fn": "exportMaskElementWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('ExportElementWindow');\r",
                    "Ext.getCmp('ViewportPrimaire').add(fenetre);\r",
                    "fenetre.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "exportMaskElementWindow",
            "designerId": "18bb8233-5671-499b-858c-d49767199033"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#importElement",
                "designer|targetType": "Ext.button.Button",
                "fn": "showImportWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('ReusableElementPicker');\r",
                    "Ext.getCmp('ViewportPrimaire').add(fenetre);\r",
                    "var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "var maskRows = this.saveRows(this.getMasqueEdition());\r",
                    "var mCode=this.findElement(maskRows,target.id);\r",
                    "var site=Ext.getCmp(\"masquesGrid\").getSelectionModel().getLastSelected().get(\"site\");\r",
                    "var level=this.getElementLevel(target,0);\r",
                    "Ext.getStore(\"ReusableElementsDataStore\").clearFilter();\r",
                    "Ext.getStore(\"ReusableElementsDataStore\").filter(\"site\",site);\r",
                    "fenetre.insTar={mType:target.mType,level:level,id:target.id,mCode:mCode};\r",
                    "fenetre.show();\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "showImportWindow",
            "designerId": "e52a692b-71b5-4751-b59d-b8cf3d7ec5c5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#moveElementUp",
                "designer|targetType": "Ext.button.Button",
                "fn": "moveElementUp",
                "implHandler": [
                    "var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "if (!Ext.isEmpty(target)) {\r",
                    "    var pos = target.up().items.indexOf(target);\r",
                    "    if (pos > 0) {\r",
                    "        target.up().move(pos,pos-1);\r",
                    "        if (target.isXType('unBloc')){\r",
                    "            Ext.Array.forEach(target.up().items.items, function(item, index){\r",
                    "                if (index===0){item.orderValue=100;} else {item.orderValue=(index+1)*100;}\r",
                    "            });\r",
                    "        }\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "moveElementUp",
            "designerId": "4c31abba-9cbd-47a1-bc12-416d3bdd7689"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#moveElementDown",
                "designer|targetType": "Ext.button.Button",
                "fn": "moveElementDown",
                "implHandler": [
                    "var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "if (!Ext.isEmpty(target)) {\r",
                    "    var pos = target.up().items.indexOf(target);\r",
                    "    target.up().move(pos,pos+1);\r",
                    "    if (target.isXType('unBloc')){\r",
                    "        Ext.Array.forEach(target.up().items.items, function(item, index){\r",
                    "            if (index===0){item.orderValue=100;} else {item.orderValue=(index+1)*100;}\r",
                    "        });\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "moveElementDown",
            "designerId": "9fb491cc-46e8-401f-bb85-a3a2f46e0ca4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#BlocsSelectGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "blocDetailShow",
                "implHandler": [
                    "Ext.getCmp(\"PaneauBlocsDetail\").update(record.getData());"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "blocDetailShow",
            "designerId": "9f82b3ec-ab6c-412f-829c-25c9816f1994"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "startComp"
                ],
                "fn": "saveBlocks",
                "implHandler": [
                    "var newBlocks = [ ];",
                    "var searchArray=startComp.query(\"unBloc\");",
                    "if (startComp.isXType(\"unBloc\")){",
                    "    searchArray.push(startComp);",
                    "}",
                    "Ext.Array.forEach(searchArray, function(nBloc){",
                    "    var myLocaleFilters=nBloc.localeFilters;",
                    "    if (Ext.isEmpty(myLocaleFilters)){",
                    "        myLocaleFilters=['all'];",
                    "    }",
                    "    newBlocks.push({",
                    "",
                    "        bType:nBloc.bType,",
                    "        id:nBloc.id,",
                    "        i18n:nBloc.i18n,",
                    "        parentCol:nBloc.up().getId(),",
                    "        mType:\"block\",",
                    "        localeFilters:myLocaleFilters,",
                    "        champsConfig:nBloc.champsConfig,",
                    "        orderValue:nBloc.orderValue,",
                    "        configBloc:nBloc.configBloc,",
                    "        title:nBloc.title,",
                    "        responsive:nBloc.responsive,",
                    "        displayTitle:nBloc.displayTitle,",
                    "        flex:nBloc.flex,",
                    "        code:nBloc.code,",
                    "        checksum:nBloc.checksum",
                    "",
                    "    });",
                    "",
                    "});",
                    "return(newBlocks);"
                ]
            },
            "name": "saveBlocks",
            "designerId": "b1537a2e-38aa-4b2e-ba49-86e15cabd8b5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mainColumnIdField",
                "designer|targetType": "Ext.form.field.Hidden",
                "fn": "onMainColumnIdFieldChange",
                "implHandler": [
                    "if (!Ext.isEmpty(Ext.getCmp(newValue))){\r",
                    "    Ext.getCmp(newValue).addBodyCls(\"mainColumn\");\r",
                    "}\r",
                    "if (!Ext.isEmpty(Ext.getCmp(oldValue))){\r",
                    "    Ext.getCmp(oldValue).removeBodyCls(\"mainColumn\");\r",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "name": "onMainColumnIdFieldChange",
            "designerId": "5f8525ea-37e5-4e36-b297-22cdeb2bb375"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "col"
                ],
                "fn": "recalculateBlockOrder",
                "implHandler": [
                    "Ext.Array.forEach(col.items.items, function(item, index){\r",
                    "    if (index===0){item.orderValue=100;} else {item.orderValue=(index+1)*100;}\r",
                    "});"
                ]
            },
            "name": "recalculateBlockOrder",
            "designerId": "24a0279b-f5b8-4e62-a5c3-f2f1af7ac8a4"
        }
    ]
}