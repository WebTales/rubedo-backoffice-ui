{
    "id": "ExtBox1-ext-gen29224",
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "masquesDataModel"
        ],
        "stores": [
            "VersionsDataJson",
            "MasquesDataJson"
        ],
        "views": [
            "nouveauMasque",
            "ImportationMasques",
            "copierMasque"
        ],
        "designer|userClassName": "MasqueController"
    },
    "customConfigs": [],
    "designerId": "da6ed701-29c3-4603-a441-221b8ebb99cf",
    "$viewOrder": 7,
    "expanded": true,
    "cn": [
        {
            "id": "ExtBox1-ext-gen59189",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "deleteMask",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    var fenetre = Ext.widget('delConfirmZ');\r",
                    "    fenetre.showAt(screen.width/2-100, 100);\r",
                    "    Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "        Ext.getCmp('masquesGrid').getStore().remove(cible);\r",
                    "        Ext.getCmp('masqueEdition').removeAll();\r",
                    "        Ext.getCmp(\"newRow\").disable();\r",
                    "        Ext.getCmp(\"newCol\").disable();\r",
                    "        Ext.getCmp(\"newBloc\").disable();\r",
                    "        Ext.getCmp(\"deleteElement\").disable();\r",
                    "        Ext.getCmp('elementEditControl').setTitle(\"Séléctionnez un élément\");\r",
                    "        Ext.getCmp('elementEditControl').removeAll();\r",
                    "        Ext.getCmp('elementIdField').setValue(null);\r",
                    "        Ext.getCmp('delConfirmZ').close();\r",
                    "    });  \r",
                    "\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonSupprimerMasque",
                "designer|userClassName": "deleteMask"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen36159",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "publishMask",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    cible.beginEdit();\r",
                    "    cible.set(\"rows\",this.saveRows(this.getMasqueEdition()));\r",
                    "    cible.set(\"etat\",\"publié\");\r",
                    "    cible.set(\"derniereModification\",new Date());\r",
                    "    cible.set(\"version\",cible.data.version+1);\r",
                    "    cible.data.versions.push({text: cible.data.version, etat:'brouillon', date: new Date(), auteur: MyPrefData.myName});\r",
                    "    cible.endEdit();\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#AdminfMasquesPublier",
                "designer|userClassName": "publishMask"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen33079",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "masqueDisplay",
                "implHandler": [
                    "var boiteMeta = dataview.findParentByType('window').getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "var valeurs= Ext.clone(record.data);\r",
                    "valeurs.creation= Ext.Date.format(valeurs.creation, 'd-m-Y');\r",
                    "valeurs.derniereModification= Ext.Date.format(valeurs.derniereModification, 'd-m-Y');\r",
                    "boiteMeta.update(valeurs);\r",
                    "\r",
                    "var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');\r",
                    "var typeFil = filArianne.getComponent('type');\r",
                    "if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.text);}\r",
                    "else { typeFil= Ext.widget('button',{iconCls: \"masque-icon\", text:record.data.text, itemId:'type'});\r",
                    "filArianne.add(typeFil);\r",
                    "}\r",
                    "var masque = record.data;\r",
                    "this.getVersionsDataJsonStore().loadData(masque.versions);\r",
                    "var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "if (!Ext.isEmpty(prevSelected)) {\r",
                    "prevSelected.removeBodyCls('selectedelement');\r",
                    "}\r",
                    "this.getMasqueEdition().removeAll();\r",
                    "this.masqueRestit(masque.rows,1,this.getMasqueEdition()); \r",
                    "\r",
                    "Ext.getCmp(\"newRow\").disable();\r",
                    "Ext.getCmp(\"newCol\").disable();\r",
                    "Ext.getCmp(\"newBloc\").disable();\r",
                    "Ext.getCmp(\"deleteElement\").disable();\r",
                    "Ext.getCmp('elementEditControl').setTitle(\"Séléctionnez un élément\");\r",
                    "Ext.getCmp('elementEditControl').removeAll();\r",
                    "Ext.getCmp('elementIdField').setValue(null);\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.View",
                "designer|controlQuery": "#masquesGridView",
                "designer|userClassName": "masqueDisplay"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen34881",
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "MasqueEdition",
                "selector": "#masqueEdition",
                "designer|userClassName": "MasqueEdition"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen7074",
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "applyConstrain",
                "designer|params": [
                    "target",
                    "offsetF",
                    "spanF",
                    "applyFirst"
                ],
                "implHandler": [
                    "var myEol=target.up().getComponent(\"eol\");\r",
                    "var myOffset=null;\r",
                    "if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType(\"container\"))&&(!(target.prev().isXType(\"panel\")))) {\r",
                    "    myOffset=target.prev();\r",
                    "}\r",
                    "if (applyFirst) {\r",
                    "    myEol.flex=myEol.flex+target.flex-spanF.getValue();\r",
                    "    target.flex=spanF.getValue();\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "    offsetF.setMaxValue(offsetF.getValue()+myEol.flex);\r",
                    "    target.up().doLayout();\r",
                    "    if (offsetF.getValue()>0){ \r",
                    "        if (Ext.isEmpty(myOffset)) {\r",
                    "            myOffset=Ext.widget(\"container\",{flex:0,style:\"{background-image:url(resources/images/stripes.png);}\"});\r",
                    "            target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);\r",
                    "\r",
                    "\r",
                    "        } \r",
                    "        myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "        myOffset.flex=offsetF.getValue();\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "        spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "        target.up().doLayout();\r",
                    "\r",
                    "    } else if((offsetF.getValue()===0)) {\r",
                    "        if (!Ext.isEmpty(myOffset)) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "            myOffset.flex=offsetF.getValue();\r",
                    "            offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "            spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "            myOffset.destroy();\r",
                    "            target.up().doLayout();      \r",
                    "        } \r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "else {\r",
                    "    if (Ext.isEmpty(myOffset)){\r",
                    "        offsetF.setValue(0);\r",
                    "        offsetF.setMaxValue(myEol.flex);\r",
                    "    }\r",
                    "    else {\r",
                    "        offsetF.setValue(myOffset.flex);\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex); \r",
                    "    }\r",
                    "\r",
                    "    spanF.setValue(target.flex);\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "}"
                ],
                "designer|userClassName": "applyConstrain"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen25462",
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "masqueMAJ",
                "designer|params": [
                    "cible"
                ],
                "implHandler": [
                    "var nouvZones = [ ];\r",
                    "var zonesM =Ext.getCmp('masqueEdition').items.items;\r",
                    "for (i=0; i<zonesM.length; i++) {\r",
                    "    var nZone = {hauteur: zonesM[i].height, largeur: zonesM[i].width, nom: zonesM[i].title, colonnes: [ ] };\r",
                    "    var colonnesM = zonesM[i].items.items;\r",
                    "    for (j=0; j<colonnesM.length; j++){\r",
                    "        var nColonne = {flex:colonnesM[j].flex, blocs: [ ]};\r",
                    "        var blocsM =colonnesM[j].items.items;\r",
                    "        for(k=0;k<blocsM.length; k++) {\r",
                    "            nColonne.blocs.push({ flex : blocsM[k].flex, title: blocsM[k].title, bType: blocsM[k].bType, champsConfig: blocsM[k].champsConfig, configBloc: blocsM[k].configBloc});\r",
                    "        }        \r",
                    "        nZone.colonnes.push(nColonne);\r",
                    "    }\r",
                    "    nouvZones.push(nZone);\r",
                    "}\r",
                    "cible.data.zones=nouvZones;"
                ],
                "designer|userClassName": "masqueMAJ"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen36209",
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "masqueRestit",
                "designer|params": [
                    "mRows",
                    "its",
                    "cible"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "Ext.Array.forEach(mRows, function(row){\r",
                    "    var newRow = Ext.widget('panel', {\r",
                    "        header:false,\r",
                    "        mType:\"row\",\r",
                    "        eTitle:row.eTitle,\r",
                    "        responsive:row.responsive,\r",
                    "        margin:4,\r",
                    "        layout: {\r",
                    "            type: 'hbox',\r",
                    "            align: 'stretch'\r",
                    "        }\r",
                    "    });\r",
                    "    var rFlex=1;\r",
                    "    var eolWidth=12;\r",
                    "    Ext.Array.forEach(row.columns, function(column){\r",
                    "        if (column.offset>0) {\r",
                    "            newRow.add(Ext.widget('container', {\r",
                    "                flex:column.offset,\r",
                    "                style:\"{background-image:url(resources/images/stripes.png);}\"\r",
                    "            }));\r",
                    "            eolWidth=eolWidth-column.offset;\r",
                    "        }\r",
                    "        var isFinalCol=false;\r",
                    "        if (its<=0){isFinalCol=true;}\r",
                    "        var newCol=Ext.widget('panel', {\r",
                    "            header:false,\r",
                    "            flex:column.span,\r",
                    "            final:isFinalCol,\r",
                    "            mType:'col',\r",
                    "            eTitle:column.eTitle,\r",
                    "            responsive:column.responsive,\r",
                    "            margin:4,\r",
                    "            layout: {\r",
                    "                type: 'vbox',\r",
                    "                align: 'stretch'\r",
                    "            }\r",
                    "        });\r",
                    "        if ((its>0)&&(column.isTerminal===false)) {\r",
                    "            rFlex=Ext.Array.max([rFlex,column.rows.length]);\r",
                    "            me.masqueRestit(column.rows,its-1,newCol);    \r",
                    "        }\r",
                    "        else {\r",
                    "            if (Ext.isEmpty(column.bloc)){} else {\r",
                    "            newCol.add(Ext.widget(\"unBloc\",column.bloc));\r",
                    "        }\r",
                    "    }\r",
                    "    eolWidth=eolWidth-column.span;\r",
                    "    newRow.add(newCol);\r",
                    "\r",
                    "});\r",
                    "newRow.add(Ext.widget(\"container\",{\r",
                    "    flex:eolWidth,\r",
                    "    itemId:\"eol\"\r",
                    "}));\r",
                    "if (Ext.isEmpty(row.height)) {\r",
                    "    newRow.flex=rFlex;\r",
                    "} else {\r",
                    "    newRow.height=row.height;\r",
                    "}\r",
                    "cible.add(newRow);  \r",
                    "\r",
                    "\r",
                    "});"
                ],
                "designer|userClassName": "masqueRestit"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen22795",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTreepanelItemClick",
                "implHandler": [
                    "var cible = Ext.getCmp('arborescenceSites').getSelectionModel().getSelection()[0];\r",
                    "this.getMasqueEdition().removeAll();\r",
                    "this.getMasqueEdition().setWidth(cible.data.largeur);\r",
                    "this.masqueRestit(cible.raw.zones);"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.tree.Panel",
                "designer|controlQuery": "#arborescenceSites",
                "designer|userClassName": "onTreepanelItemClick"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen45227",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "copyMaskWindow",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    var fenetre = Ext.widget('copierMasque');\r",
                    "    fenetre.showAt(screen.width/2-150, 100);\r",
                    "    Ext.getCmp('copierMasqueTitre').setValue(cible.data.text);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonCopierMasque",
                "designer|userClassName": "copyMaskWindow"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen21847",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "newMaskWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('nouveauMasque');\r",
                    "fenetre.showAt(screen.width/2-200, 100);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonNouveauMasque",
                "designer|userClassName": "newMaskWindow"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen35762",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createMask",
                "implHandler": [
                    "if ((Ext.getCmp('nouveauMasqueTitre').isValid())&&(Ext.getCmp('nouveauMasqueSite').isValid())) {\r",
                    "\r",
                    "    var nTitre = Ext.getCmp('nouveauMasqueTitre').getValue();\r",
                    "    var nSite = Ext.getCmp('nouveauMasqueSite').getValue();\r",
                    "    var nouvMasque = Ext.create('model.masquesDataModel', {\r",
                    "        text: nTitre,\r",
                    "        site: nSite,\r",
                    "        etat: 'brouillon',\r",
                    "        auteur: MyPrefData.myName,\r",
                    "        creation: new Date(),\r",
                    "        derniereModification: new Date(),\r",
                    "        version: 1.0,\r",
                    "        versions:[\r",
                    "        {text: '1.0', etat: 'brouillon', date: new Date(), auteur: MyPrefData.myName}\r",
                    "        ],\r",
                    "        \"rows\": [ \r",
                    "        {\r",
                    "            \"height\":null,\r",
                    "            \"responsive\":{\r",
                    "                \"phone\":true,\r",
                    "                \"tablet\":true,\r",
                    "                \"desktop\":true\r",
                    "            },\r",
                    "            \"eTitle\":\"titre\",\r",
                    "            \"columns\": [\r",
                    "            {\r",
                    "                \"isTerminal\":true,\r",
                    "                \"eTitle\":\"titre\",\r",
                    "                \"responsive\":{\r",
                    "                    \"phone\":true,\r",
                    "                    \"tablet\":true,\r",
                    "                    \"desktop\":true\r",
                    "                },\r",
                    "                \"span\":12,\r",
                    "                \"offset\":0,\r",
                    "                \"bloc\": null,\r",
                    "                \"rows\":null\t\r",
                    "            }\r",
                    "            ]\r",
                    "        }\r",
                    "        ]\r",
                    "\r",
                    "    });\r",
                    "    this.getMasquesDataJsonStore().add(nouvMasque);\r",
                    "\r",
                    "    Ext.getCmp('nouveauMasqueFenetre').close();\r",
                    "    Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);\r",
                    "    this.masqueDisplay(Ext.getCmp('masquesGridView'),nouvMasque);\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#creerNouveauMasque",
                "designer|userClassName": "createMask"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen24279",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "maskSave",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    cible.beginEdit();\r",
                    "    cible.set(\"rows\",this.saveRows(this.getMasqueEdition()));\r",
                    "    cible.set(\"etat\",\"brouillon\");\r",
                    "    cible.set(\"derniereModification\",new Date());\r",
                    "    cible.set(\"version\",cible.data.version+1);\r",
                    "    cible.data.versions.push({text: cible.data.version, etat:'brouillon', date: new Date(), auteur: MyPrefData.myName});\r",
                    "    cible.endEdit();\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#AdminfMasquesEnregistrer",
                "designer|userClassName": "maskSave"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen50953",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "copyMask",
                "implHandler": [
                    "if ((Ext.getCmp('copierMasqueTitre').isValid())&&(Ext.getCmp('copierMasqueSite').isValid())) {\r",
                    "    var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "    var nTitre = Ext.getCmp('copierMasqueTitre').getValue();\r",
                    "    var nSite = Ext.getCmp('copierMasqueSite').getValue();\r",
                    "    var nRows = Ext.clone(cible.data.rows);\r",
                    "    var nouvMasque = Ext.create('model.masquesDataModel', {\r",
                    "        text: nTitre,\r",
                    "        site: nSite,\r",
                    "        etat: 'brouillon',\r",
                    "        auteur: 'Alexandru Dobre',\r",
                    "        creation: new Date(),\r",
                    "        derniereModification: new Date(),\r",
                    "        version: 1.0,\r",
                    "        versions:[\r",
                    "        {text: '1.0', etat: 'brouillon', date: new Date(), auteur: 'Alexandru Dobre'}\r",
                    "        ],\r",
                    "        rows: nRows\r",
                    "\r",
                    "    });\r",
                    "    this.getMasquesDataJsonStore().add(nouvMasque);\r",
                    "\r",
                    "    Ext.getCmp('copieMasqueFenetre').close();    \r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#copierMasque",
                "designer|userClassName": "copyMask"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen49232",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "importMaskWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('importationMasques');\r",
                    "fenetre.showAt(screen.width/2-150, 100);\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#AdminfMasquesImporter",
                "designer|userClassName": "importMaskWindow"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen12939",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectionEvents",
                "implHandler": [
                    "var me=this;\r",
                    "if (!abstractcomponent.isXType(\"unBloc\")){\r",
                    "    abstractcomponent.addBodyCls('contrastBorder');\r",
                    "    if (abstractcomponent.mType==\"col\"){\r",
                    "        abstractcomponent.addBodyCls('contrastRow');\r",
                    "    }\r",
                    "    abstractcomponent.getEl().on(\"mouseover\", function(e){\r",
                    "        abstractcomponent.setBorder(4);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    abstractcomponent.getEl().on(\"mouseout\", function(e){\r",
                    "        abstractcomponent.setBorder(2);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    abstractcomponent.getEl().on(\"click\", function(e){\r",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "        if (!Ext.isEmpty(prevSelected)) {\r",
                    "            prevSelected.removeBodyCls('selectedelement');\r",
                    "        }\r",
                    "        abstractcomponent.addBodyCls('selectedelement');\r",
                    "        this.frame(MyPrefData.themeColor);\r",
                    "        Ext.getCmp('elementIdField').setValue(abstractcomponent.id);\r",
                    "        Ext.getCmp('deleteElement').enable();\r",
                    "        var propEdit=Ext.getCmp('elementEditControl');\r",
                    "        propEdit.setTitle(abstractcomponent.id.replace(\"panel\", abstractcomponent.mType));\r",
                    "\r",
                    "\r",
                    "        propEdit.removeAll();\r",
                    "\r",
                    "        propEdit.add(Ext.widget('textfield',{\r",
                    "            itemId:\"eTitleField\",\r",
                    "            fieldLabel:\"Titre \",\r",
                    "            labelWidth:40,\r",
                    "            allowBlank:false,\r",
                    "            anchor:\"60%\",\r",
                    "            margin:\"10 0 10 0\",\r",
                    "            style:\"{float:left;}\",\r",
                    "            value:abstractcomponent.eTitle\r",
                    "        }));\r",
                    "        propEdit.add(Ext.widget('button',{\r",
                    "            text:\"Appliquer\",\r",
                    "            anchor:\"38%\",\r",
                    "            margin:\"10 0 10 0\",\r",
                    "            style:\"{float:right;}\",\r",
                    "            handler:function(){\r",
                    "                if (propEdit.getComponent(\"eTitleField\").isValid()){\r",
                    "                    abstractcomponent.eTitle=propEdit.getComponent(\"eTitleField\").getValue();\r",
                    "                }}\r",
                    "            }));\r",
                    "            propEdit.add(Ext.widget('checkboxgroup',{\r",
                    "                fieldLabel:\"Visibilité \",\r",
                    "                anchor:\"100%\",\r",
                    "                labelWidth:60,\r",
                    "                margin:\"0 0 10 0\",\r",
                    "                vertical:true,\r",
                    "                columns:1,\r",
                    "                items: [\r",
                    "                { boxLabel: 'Télephone', checked:abstractcomponent.responsive.phone, handler:function(){abstractcomponent.responsive.phone=this.getValue();} },\r",
                    "                { boxLabel: 'Tablette',checked:abstractcomponent.responsive.tablet, handler:function(){abstractcomponent.responsive.tablet=this.getValue();}},\r",
                    "                { boxLabel: 'Ordinateur',checked:abstractcomponent.responsive.desktop, handler:function(){abstractcomponent.responsive.desktop=this.getValue();}}\r",
                    "                ]\r",
                    "\r",
                    "            }));\r",
                    "            if (abstractcomponent.mType==\"row\"){\r",
                    "                Ext.getCmp('newRow').disable();\r",
                    "                Ext.getCmp(\"newBloc\").disable();\r",
                    "                if (abstractcomponent.getComponent(\"eol\").flex===0){\r",
                    "                    Ext.getCmp('newCol').disable();\r",
                    "                } else {\r",
                    "                    Ext.getCmp('newCol').enable();\r",
                    "                }\r",
                    "                propEdit.add(Ext.widget('button',{\r",
                    "                    itemId:\"rowAutoHeight\",\r",
                    "                    text:\"Hauteur automatique\",\r",
                    "                    anchor:\"100%\",\r",
                    "                    tooltip:\"La hauteur s'adapte au contenu lors du rendu final\",\r",
                    "                    hidden:true,\r",
                    "                    handler:function(){\r",
                    "                        abstractcomponent.setHeight(null);\r",
                    "                        abstractcomponent.flex=1;\r",
                    "                        abstractcomponent.up().doLayout();\r",
                    "                        propEdit.getComponent(\"rowHeightFixed\").setValue();\r",
                    "                        this.hide();\r",
                    "                    }\r",
                    "                }));\r",
                    "                if (!Ext.isEmpty(abstractcomponent.height)){propEdit.getComponent(\"rowAutoHeight\").show();}\r",
                    "                propEdit.add(Ext.widget('numberfield',{\r",
                    "                    itemId:\"rowHeightFixed\",\r",
                    "                    fieldLabel:\"Hauteur fixe \",\r",
                    "                    labelWidth:80,\r",
                    "                    allowDecimals:false,\r",
                    "                    allowBlank:false,\r",
                    "                    minValue:20,\r",
                    "                    anchor:\"60%\",\r",
                    "                    margin:\"10 0 0 0\",\r",
                    "                    style:\"{float:left;}\",\r",
                    "                    value:abstractcomponent.height\r",
                    "                }));\r",
                    "                propEdit.add(Ext.widget('button',{\r",
                    "                    text:\"Appliquer\",\r",
                    "                    anchor:\"38%\",\r",
                    "                    margin:\"10 0 0 0\",\r",
                    "                    style:\"{float:right;}\",\r",
                    "                    handler:function(){\r",
                    "                        if (propEdit.getComponent(\"rowHeightFixed\").isValid()){\r",
                    "                            abstractcomponent.flex=null;\r",
                    "                            abstractcomponent.setHeight(propEdit.getComponent(\"rowHeightFixed\").getValue());\r",
                    "                            abstractcomponent.up().doLayout();\r",
                    "                            propEdit.getComponent(\"rowAutoHeight\").show();\r",
                    "                        }}\r",
                    "                    }));\r",
                    "\r",
                    "\r",
                    "\r",
                    "                }    \r",
                    "\r",
                    "                else if (abstractcomponent.mType==\"col\"){\r",
                    "                    if ((abstractcomponent.final)){\r",
                    "                    Ext.getCmp('newRow').disable();} else if ((Ext.isDefined(abstractcomponent.items.items[0]))&&(abstractcomponent.items.items[0].isXType(\"unBloc\"))) {\r",
                    "                        Ext.getCmp('newRow').disable();\r",
                    "                    }else {\r",
                    "                        Ext.getCmp('newRow').enable();\r",
                    "                    }\r",
                    "\r",
                    "                    Ext.getCmp('newCol').disable();\r",
                    "                    if (Ext.isEmpty(abstractcomponent.items.items)){\r",
                    "                    Ext.getCmp(\"newBloc\").enable();} else {Ext.getCmp(\"newBloc\").disable();}\r",
                    "\r",
                    "                        var offsetEdit=Ext.widget('numberfield',{\r",
                    "                            itemId:\"offsetEditor\",\r",
                    "                            fieldLabel:\"Offset \",\r",
                    "                            editable:false,\r",
                    "                            labelWidth:45,\r",
                    "                            allowDecimals:false,\r",
                    "                            anchor:\"50%\",\r",
                    "                            margin:\"10 0 0 0\",\r",
                    "                            style:\"{float:left;}\",\r",
                    "                            value:0,\r",
                    "                            minValue:0\r",
                    "                        });\r",
                    "\r",
                    "                        var spanEdit=Ext.widget('numberfield',{\r",
                    "                            itemId:\"spanEditor\",\r",
                    "                            fieldLabel:\"Span \",\r",
                    "                            labelWidth:45,\r",
                    "                            editable:false,\r",
                    "                            allowDecimals:false,\r",
                    "                            anchor:\"50%\",\r",
                    "                            margin:\"10 0 0 10\",\r",
                    "                            style:\"{float:right;}\",\r",
                    "                            value:abstractcomponent.flex,\r",
                    "                            minValue:1\r",
                    "                        });\r",
                    "\r",
                    "\r",
                    "\r",
                    "                        propEdit.add(offsetEdit);\r",
                    "                        propEdit.add(spanEdit);\r",
                    "                        me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,false);\r",
                    "                        offsetEdit.on(\"change\",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});\r",
                    "                        spanEdit.on(\"change\",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "                    }\r",
                    "\r",
                    "                    e.stopEvent();\r",
                    "                });}"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#masqueEdition panel",
                "designer|userClassName": "selectionEvents"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen20289",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "deleteMaskElement",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "if (cible.mType==\"col\"){\r",
                    "    var myEol=cible.up().getComponent(\"eol\");\r",
                    "    var myOffset=cible.previousSibling();\r",
                    "    if (!Ext.isEmpty(myOffset)) {\r",
                    "        if ((myOffset.isXType(\"container\"))&&(!(myOffset.isXType(\"panel\")))) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex;\r",
                    "            myOffset.destroy();\r",
                    "        }\r",
                    "    }\r",
                    "    myEol.flex=myEol.flex+cible.flex;\r",
                    "\r",
                    "}\r",
                    "cible.destroy();\r",
                    "Ext.getCmp(\"newRow\").disable();\r",
                    "Ext.getCmp(\"newCol\").disable();\r",
                    "Ext.getCmp(\"newBloc\").disable();\r",
                    "Ext.getCmp(\"deleteElement\").disable();\r",
                    "Ext.getCmp('elementEditControl').setTitle(\"Séléctionnez un élément\");\r",
                    "Ext.getCmp('elementEditControl').removeAll();\r",
                    "Ext.getCmp('elementIdField').setValue(null);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#deleteElement",
                "designer|userClassName": "deleteMaskElement"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen6550",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "addCol",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "var myEol=cible.getComponent('eol');\r",
                    "\r",
                    "if (myEol.flex>0) {\r",
                    "    var isFinalCol=false;\r",
                    "    if (cible.up().mType==\"col\"){\r",
                    "        isFinalCol=true;\r",
                    "    }\r",
                    "    var newCol=Ext.widget('panel', {\r",
                    "        header:false,\r",
                    "        flex:1,\r",
                    "        final:isFinalCol,\r",
                    "        eTitle:\"titre\",\r",
                    "        responsive:{\r",
                    "            phone:true,\r",
                    "            tablet:true,\r",
                    "            desktop:true\r",
                    "        },\r",
                    "        mType:'col',\r",
                    "        margin:4,\r",
                    "        layout: {\r",
                    "            type: 'vbox',\r",
                    "            align: 'stretch'\r",
                    "        }\r",
                    "    });\r",
                    "    myEol.flex=myEol.flex-1;\r",
                    "    cible.insert(cible.items.items.length-1,newCol);\r",
                    "    if (myEol.flex===0){\r",
                    "        button.disable();\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "newCol.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newCol",
                "designer|userClassName": "addCol"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen26189",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "addRow",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "var row = Ext.widget('panel', {\r",
                    "    header:false,\r",
                    "    mType:\"row\",\r",
                    "    flex:1,\r",
                    "    eTitle:\"titre\",\r",
                    "    responsive:{\r",
                    "        phone:true,\r",
                    "        tablet:true,\r",
                    "        desktop:true\r",
                    "    },\r",
                    "    margin:4,\r",
                    "    layout: {\r",
                    "        type: 'hbox',\r",
                    "        align: 'stretch'\r",
                    "    }\r",
                    "});\r",
                    "row.add(Ext.widget('container', {flex:12,itemId:\"eol\"}));\r",
                    "cible.insert(cible.items.items.length,row);\r",
                    "Ext.getCmp(\"newBloc\").disable();\r",
                    "row.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newRow",
                "designer|userClassName": "addRow"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen9100",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showBlocWindow",
                "implHandler": [
                    "var blocWin = Ext.widget('ajoutBlocFenetre');\r",
                    "blocWin.showAt(screen.width/2-250, 100);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newBloc",
                "designer|userClassName": "showBlocWindow"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen10153",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "addBloc",
                "implHandler": [
                    "var donnees = Ext.getCmp('BlocsSelectGrid').getSelectionModel().getLastSelected().data;\r",
                    "var nouvBloc = Ext.widget('unBloc', Ext.clone(donnees.configBasique));\r",
                    "Ext.getCmp(Ext.getCmp('elementIdField').getValue()).add(nouvBloc);\r",
                    "button.up().up().close();\r",
                    "Ext.getCmp(\"newBloc\").disable();\r",
                    "Ext.getCmp('newRow').disable();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonAjouterBloc",
                "designer|userClassName": "addBloc"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen10644",
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveRows",
                "designer|params": [
                    "startComp"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var nRows=[ ];\r",
                    "Ext.Array.forEach(startComp.items.items, function(row){\r",
                    "    var newCols = [ ];\r",
                    "    var offset=0;\r",
                    "    Ext.Array.forEach(row.items.items, function(col){\r",
                    "        if (col.isXType(\"panel\")) {\r",
                    "            var bloc = null;\r",
                    "            var rows = null;\r",
                    "            var isTerminal=true;\r",
                    "            if (col.final) { \r",
                    "                var nBloc=col.items.items[0];\r",
                    "                if (!Ext.isEmpty(nBloc)) {\r",
                    "                    bloc={\r",
                    "                        \r",
                    "                            bType:nBloc.bType,\r",
                    "                            champsConfig:nBloc.champsConfig,\r",
                    "                            configBloc:nBloc.configBloc,\r",
                    "                            title:nBloc.title,\r",
                    "                            flex:1\r",
                    "                        \r",
                    "                    };\r",
                    "                }\r",
                    "            }else {\r",
                    "                var thing=col.items.items[0];\r",
                    "                if (Ext.isEmpty(thing)){} else if (thing.isXType(\"unBloc\")) {\r",
                    "                    bloc={\r",
                    "                        \r",
                    "                            bType:thing.bType,\r",
                    "                            champsConfig:thing.champsConfig,\r",
                    "                            configBloc:thing.configBloc,\r",
                    "                            title:thing.title,\r",
                    "                            flex:1\r",
                    "                        \r",
                    "                    };\r",
                    "                } else {\r",
                    "                isTerminal=false;\r",
                    "                rows=me.saveRows(col);\r",
                    "                }\r",
                    "            }\r",
                    "            \r",
                    "            newCols.push({\r",
                    "                eTitle:col.eTitle,\r",
                    "                responsive:col.responsive,\r",
                    "                span:col.flex,\r",
                    "                offset:offset,\r",
                    "                bloc: bloc,\r",
                    "                rows: rows,\r",
                    "                isTerminal:isTerminal\r",
                    "            \r",
                    "            });\r",
                    "            offset=0;\r",
                    "        } else {offset=offset+col.flex;}\r",
                    "        \r",
                    "    });\r",
                    "    nRows.push({\r",
                    "        height:row.height,\r",
                    "        eTitle:row.eTitle,\r",
                    "        responsive:row.responsive,\r",
                    "        columns: newCols\r",
                    "    \r",
                    "    });\r",
                    "});\r",
                    "return nRows;"
                ],
                "designer|userClassName": "saveRows"
            },
            "customConfigs": [],
            "expanded": true
        },
        {
            "id": "ExtBox1-ext-gen5662",
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "mainBoxSelect",
                "implHandler": [
                    "abstractcomponent.setBorder(2);\r",
                    "abstractcomponent.addBodyCls('contrastCBorder');\r",
                    "    abstractcomponent.getEl().on(\"mouseover\", function(e){\r",
                    "        abstractcomponent.setBorder(4);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    abstractcomponent.getEl().on(\"mouseout\", function(e){\r",
                    "        abstractcomponent.setBorder(2);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    abstractcomponent.getEl().on(\"click\", function(e){\r",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "        if (!Ext.isEmpty(prevSelected)) {\r",
                    "            prevSelected.removeBodyCls('selectedelement');\r",
                    "        }\r",
                    "        abstractcomponent.addBodyCls('selectedelement');\r",
                    "        this.frame(MyPrefData.themeColor);\r",
                    "        Ext.getCmp('elementIdField').setValue(abstractcomponent.id);\r",
                    "        Ext.getCmp('deleteElement').disable();\r",
                    "        Ext.getCmp('newCol').disable();\r",
                    "        Ext.getCmp('newBloc').disable();\r",
                    "        Ext.getCmp('newRow').enable();\r",
                    "        var propEdit=Ext.getCmp('elementEditControl');\r",
                    "        propEdit.setTitle(\"Racine\");\r",
                    "\r",
                    "\r",
                    "        propEdit.removeAll();\r",
                    "    \r",
                    "    });"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#masqueEdition",
                "designer|userClassName": "mainBoxSelect"
            },
            "customConfigs": [],
            "expanded": true
        }
    ]
}