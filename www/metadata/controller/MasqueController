{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "MasqueController",
        "models": [
            "masquesDataModel"
        ],
        "stores": [
            "VersionsDataJson",
            "MasquesDataJson"
        ],
        "views": [
            "nouveauMasque",
            "ImportationMasques",
            "copierMasque"
        ]
    },
    "id": "ExtBox1-ext-gen29224",
    "designerId": "da6ed701-29c3-4603-a441-221b8ebb99cf",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "deleteMask",
                "fn": "deleteMask",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    var fenetre = Ext.widget('delConfirmZ');\r",
                    "    fenetre.showAt(screen.width/2-100, 100);\r",
                    "    Ext.getCmp('delConfirmZOui').on('click', function() { \r",
                    "        Ext.getCmp('masquesGrid').getStore().remove(cible);\r",
                    "        Ext.getCmp('masqueEdition').removeAll();\r",
                    "        Ext.getCmp(\"newRow\").disable();\r",
                    "        Ext.getCmp(\"newCol\").disable();\r",
                    "        Ext.getCmp(\"newBloc\").disable();\r",
                    "        Ext.getCmp(\"deleteElement\").disable();\r",
                    "        Ext.getCmp('elementEditControl').setTitle(\"Séléctionnez un élément\");\r",
                    "        Ext.getCmp('elementEditControl').removeAll();\r",
                    "        Ext.getCmp('elementEditControl').setIconCls();\r",
                    "        Ext.getCmp('elementIdField').setValue(null);\r",
                    "        Ext.getCmp('delConfirmZ').close();\r",
                    "        Ext.Array.forEach(Ext.getCmp(\"adminFMDP\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.disable();});\r",
                    "        Ext.getCmp(\"boutonSupprimerMasque\").disable();\r",
                    "    });  \r",
                    "\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonSupprimerMasque"
            },
            "designerId": "50908fd7-bd46-4d7d-b504-215fdd4c7c75"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "publishMask",
                "fn": "publishMask",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    cible.beginEdit();\r",
                    "    cible.set(\"rows\",this.saveRows(this.getMasqueEdition()));\r",
                    "    cible.set(\"etat\",\"publié\");\r",
                    "    cible.set(\"derniereModification\",new Date());\r",
                    "    //cible.data.versions.push({text: cible.data.version, etat:'brouillon', date: new Date(), auteur: MyPrefData.myName});\r",
                    "    cible.endEdit();\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#AdminfMasquesPublier"
            },
            "designerId": "cf67521a-8173-4dc9-8aa3-0e9cb3c97b0b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "masquesDisplay",
                "fn": "masquesDisplay",
                "implHandler": [
                    "var dataview = Ext.getCmp(\"masquesGrid\");\r",
                    "var boiteMeta = dataview.findParentByType('window').getDockedComponent('barreMeta').getComponent('boiteBarreMeta');\r",
                    "var valeurs= Ext.clone(record.data);\r",
                    "valeurs.creation= Ext.Date.format(valeurs.creation, 'd-m-Y');\r",
                    "valeurs.derniereModification= Ext.Date.format(valeurs.derniereModification, 'd-m-Y');\r",
                    "boiteMeta.update(valeurs);\r",
                    "\r",
                    "var filArianne = dataview.findParentByType('window').getDockedComponent('filArianne');\r",
                    "var typeFil = filArianne.getComponent('type');\r",
                    "if (Ext.isDefined(typeFil)) {typeFil.setText(record.data.text);}\r",
                    "else { typeFil= Ext.widget('button',{iconCls: \"masque-icon\", text:record.data.text, itemId:'type'});\r",
                    "filArianne.add(typeFil);\r",
                    "}\r",
                    "var masque = record.data;\r",
                    "var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "if (!Ext.isEmpty(prevSelected)) {\r",
                    "prevSelected.removeBodyCls('selectedelement');\r",
                    "}\r",
                    "this.getMasqueEdition().removeAll();\r",
                    "this.masqueRestit(masque.rows,1,this.getMasqueEdition()); \r",
                    "\r",
                    "Ext.getCmp(\"newRow\").disable();\r",
                    "Ext.getCmp(\"newCol\").disable();\r",
                    "Ext.getCmp(\"newBloc\").disable();\r",
                    "Ext.getCmp(\"importElement\").disable();\r",
                    "Ext.getCmp(\"exportElement\").disable();\r",
                    "Ext.getCmp(\"deleteElement\").disable();\r",
                    "Ext.getCmp(\"moveElementUp\").disable();\r",
                    "Ext.getCmp(\"moveElementDown\").disable();\r",
                    "Ext.getCmp('elementEditControl').setTitle(\"Séléctionnez un élément\");\r",
                    "Ext.getCmp('elementEditControl').removeAll();\r",
                    "Ext.getCmp('elementEditControl').setIconCls();\r",
                    "Ext.getCmp('elementIdField').setValue(null);\r",
                    "\r",
                    "Ext.Array.forEach(Ext.getCmp(\"adminFMDP\").getComponent(\"contextBar\").query(\"buttongroup\"), function(btn){btn.enable();});\r",
                    "Ext.getCmp(\"boutonSupprimerMasque\").enable();\r",
                    ""
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#masquesGrid"
            },
            "designerId": "90ee9ec3-51ac-45fd-a5c8-da93ce6a5710"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "reusablesGridSelect",
                "fn": "reusablesGridSelect",
                "implHandler": [
                    "Ext.getCmp(\"reusableelementDescription\").update(record.data);\r",
                    "var go =true;\r",
                    "\r",
                    "var target=Ext.getCmp(\"ReusableElementPicker\").insTar;\r",
                    "\r",
                    "if (record.get(\"mType\")==target.mType) {go=false;}\r",
                    "\r",
                    "else if ((target.mType==\"row\")&&(Ext.getCmp(target.id).getComponent(\"eol\").flex===0)) {go=false;}\r",
                    "\r",
                    "else if ((record.get(\"mType\")==\"row\")&&(target.mType==\"bloc\")) {go=false;}\r",
                    "else if ((record.get(\"mType\")!=\"row\")&&(target.id==\"masqueEdition\")) {go=false;}\r",
                    "else if ((record.get(\"mType\")!=\"bloc\")&&(target.level==4)) {go=false;}\r",
                    "else if((record.get(\"mType\")==\"bloc\")&&(!Ext.isEmpty(target.mCode.rows))) {go=false;}\r",
                    "else if((target.id!=\"masqueEdition\")&&(record.get(\"mType\")==\"row\")&&(!Ext.isEmpty(target.mCode.bloc))) {go=false;}\r",
                    "\r",
                    "\r",
                    "\r",
                    "if (go) {Ext.getCmp(\"REAddButton\").enable(); } else {Ext.getCmp(\"REAddButton\").disable(); }"
                ],
                "name": "select",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#ReusableElementsGrid"
            },
            "designerId": "f667b1d0-f417-425f-8afc-d0d5af2b1e38"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "MasqueEdition",
                "ref": "MasqueEdition",
                "selector": "#masqueEdition"
            },
            "designerId": "0430d23b-9032-4abc-a5c3-c3d4f9a291e8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "removeIds",
                "fn": "removeIds",
                "designer|params": [
                    "element"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "element.id=undefined;\r",
                    "if (!Ext.isEmpty(element.columns)) {\r",
                    "    Ext.Array.forEach(element.columns,function(thing){me.removeIds(thing);});\r",
                    "}\r",
                    "if (!Ext.isEmpty(element.rows)) {\r",
                    "    Ext.Array.forEach(element.rows,function(thing){me.removeIds(thing);});\r",
                    "}\r",
                    "if (!Ext.isEmpty(element.blocks)) {\r",
                    "    Ext.Array.forEach(element.blocks,function(thing){me.removeIds(thing);});\r",
                    "}"
                ]
            },
            "designerId": "bd0aa780-5af5-48a6-bd54-73374ad60e9d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "applyConstrain",
                "fn": "applyConstrain",
                "designer|params": [
                    "target",
                    "offsetF",
                    "spanF",
                    "applyFirst"
                ],
                "implHandler": [
                    "var myEol=target.up().getComponent(\"eol\");\r",
                    "var myOffset=null;\r",
                    "if ((!Ext.isEmpty(target.prev()))&&(target.prev().isXType(\"container\"))&&(!(target.prev().isXType(\"panel\")))) {\r",
                    "    myOffset=target.prev();\r",
                    "}\r",
                    "if (applyFirst) {\r",
                    "    myEol.flex=myEol.flex+target.flex-spanF.getValue();\r",
                    "    target.flex=spanF.getValue();\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "    offsetF.setMaxValue(offsetF.getValue()+myEol.flex);\r",
                    "    target.up().doLayout();\r",
                    "    if (offsetF.getValue()>0){ \r",
                    "        if (Ext.isEmpty(myOffset)) {\r",
                    "            myOffset=Ext.widget(\"container\",{flex:0,style:\"{background-image:url(resources/images/stripes.png);}\"});\r",
                    "            target.up().insert(Ext.Array.indexOf(target.up().items.items,target),myOffset);\r",
                    "\r",
                    "\r",
                    "        } \r",
                    "        myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "        myOffset.flex=offsetF.getValue();\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "        spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "        target.up().doLayout();\r",
                    "\r",
                    "    } else if((offsetF.getValue()===0)) {\r",
                    "        if (!Ext.isEmpty(myOffset)) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex-offsetF.getValue();\r",
                    "            myOffset.flex=offsetF.getValue();\r",
                    "            offsetF.setMaxValue(myOffset.flex+myEol.flex);\r",
                    "            spanF.setMaxValue(spanF.getValue()+myEol.flex);\r",
                    "            myOffset.destroy();\r",
                    "            target.up().doLayout();      \r",
                    "        } \r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "else {\r",
                    "    if (Ext.isEmpty(myOffset)){\r",
                    "        offsetF.setValue(0);\r",
                    "        offsetF.setMaxValue(myEol.flex);\r",
                    "    }\r",
                    "    else {\r",
                    "        offsetF.setValue(myOffset.flex);\r",
                    "        offsetF.setMaxValue(myOffset.flex+myEol.flex); \r",
                    "    }\r",
                    "\r",
                    "    spanF.setValue(target.flex);\r",
                    "    spanF.setMaxValue(target.flex+myEol.flex);\r",
                    "}"
                ]
            },
            "designerId": "23c1d979-a727-40ed-bac2-e4ef8b4c7c72"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "spliceMask",
                "fn": "spliceMask",
                "designer|params": [
                    "elements",
                    "id",
                    "child",
                    "continueOK"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "if (continueOK){\r",
                    "    Ext.Array.forEach(elements, function(element){\r",
                    "        if (continueOK){\r",
                    "            if (element.id==id) {\r",
                    "                var leprop=\"rows\";\r",
                    "                if (child.mType==\"col\") { leprop=\"columns\";} else if (child.mType==\"block\") { leprop=\"blocks\";}\r",
                    "                if(Ext.isEmpty(element[leprop])){\r",
                    "                    element[leprop]=[ ];\r",
                    "                }\r",
                    "                element[leprop].push(child);\r",
                    "                if ((element.mType==\"col\")&&(child.mType==\"row\")){\r",
                    "                    element.isTerminal=false;\r",
                    "                }\r",
                    "                continueOK=false;\r",
                    "            } else {\r",
                    "                if (!Ext.isEmpty(element.columns)) {\r",
                    "                    me.spliceMask(element.columns,id,child,continueOK);\r",
                    "                }\r",
                    "                if (!Ext.isEmpty(element.rows)) {\r",
                    "                    me.spliceMask(element.rows,id,child,continueOK);\r",
                    "                }\r",
                    "            }\r",
                    "\r",
                    "        }\r",
                    "    });}"
                ]
            },
            "designerId": "0b1d99fd-b045-4490-bd3e-935590c2ea71"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "findElement",
                "fn": "findElement",
                "designer|params": [
                    "someArray",
                    "elementId"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var result= null;\r",
                    "Ext.Array.forEach(someArray, function(element){\r",
                    "    if (result===null){\r",
                    "        if (element.id===elementId){\r",
                    "            result=Ext.clone(element);\r",
                    "        } else {\r",
                    "            if (!Ext.isEmpty(element.columns)) {\r",
                    "                result=(me.findElement(element.columns,elementId));\r",
                    "            }\r",
                    "            if ((!Ext.isEmpty(element.rows))&&(result===null)) {\r",
                    "                result=me.findElement(element.rows,elementId);\r",
                    "            }\r",
                    "            if ((!Ext.isEmpty(element.blocks))&&(result===null)) {\r",
                    "                result=me.findElement(element.blocks,elementId);\r",
                    "            }\r",
                    "        }}\r",
                    "\r",
                    "    });\r",
                    "    return (result);"
                ]
            },
            "designerId": "6e535155-ae5c-4d33-a23f-38d5eae4fcc0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "masqueMAJ",
                "fn": "masqueMAJ",
                "designer|params": [
                    "cible"
                ],
                "implHandler": [
                    "var nouvZones = [ ];\r",
                    "var zonesM =Ext.getCmp('masqueEdition').items.items;\r",
                    "for (i=0; i<zonesM.length; i++) {\r",
                    "    var nZone = {hauteur: zonesM[i].height, largeur: zonesM[i].width, nom: zonesM[i].title, colonnes: [ ] };\r",
                    "    var colonnesM = zonesM[i].items.items;\r",
                    "    for (j=0; j<colonnesM.length; j++){\r",
                    "        var nColonne = {flex:colonnesM[j].flex, blocs: [ ]};\r",
                    "        var blocsM =colonnesM[j].items.items;\r",
                    "        for(k=0;k<blocsM.length; k++) {\r",
                    "            nColonne.blocks.push({ flex : blocsM[k].flex, title: blocsM[k].title, bType: blocsM[k].bType, champsConfig: blocsM[k].champsConfig, configBloc: blocsM[k].configBloc});\r",
                    "        }        \r",
                    "        nZone.colonnes.push(nColonne);\r",
                    "    }\r",
                    "    nouvZones.push(nZone);\r",
                    "}\r",
                    "cible.data.zones=nouvZones;"
                ]
            },
            "designerId": "1d1aba20-f06b-46cd-9b94-ce3f0b0e3b74"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getElementDepth",
                "fn": "getElementDepth",
                "designer|params": [
                    "element"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "if (element.mType==\"block\") {\r",
                    "    return(1);\r",
                    "}\r",
                    "else if (element.mType==\"col\") {\r",
                    "    var bDepth = 1;\r",
                    "    if (!Ext.isEmpty(element.blocks)) {bDepth=2;}\r",
                    "    var cDepth = 1;\r",
                    "    if (!Ext.isEmpty(element.rows)) {\r",
                    "        cDepth= 1+Ext.Array.max(Ext.Array.map(element.rows,function(row){return(me.getElementDepth(row));}));\r",
                    "    }\r",
                    "\r",
                    "    return(Math.max(bDepth,cDepth));\r",
                    "}\r",
                    "else if (element.mType==\"row\") {\r",
                    "    if (Ext.isEmpty(element.columns)) {\r",
                    "        return(1);\r",
                    "    }else{\r",
                    "        return( 1+Ext.Array.max(Ext.Array.map(element.columns,function(col){return(me.getElementDepth(col));})));\r",
                    "    }\r",
                    "} else {\r",
                    "    return(0);\r",
                    "}"
                ]
            },
            "designerId": "9dab9dc0-ebc4-45bd-a056-7fd019fea6e1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "masqueRestit",
                "fn": "masqueRestit",
                "designer|params": [
                    "mRows",
                    "its",
                    "cible"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "Ext.Array.forEach(mRows, function(row){\r",
                    "    var newRow = Ext.widget('panel', {\r",
                    "        header:false,\r",
                    "        mType:\"row\",\r",
                    "        eTitle:row.eTitle,\r",
                    "        id:row.id,\r",
                    "        responsive:row.responsive,\r",
                    "        margin:4,\r",
                    "        layout: {\r",
                    "            type: 'hbox',\r",
                    "            align: 'stretch'\r",
                    "        }\r",
                    "    });\r",
                    "    var rFlex=1;\r",
                    "    var eolWidth=12;\r",
                    "    Ext.Array.forEach(row.columns, function(column){\r",
                    "        if (column.offset>0) {\r",
                    "            newRow.add(Ext.widget('container', {\r",
                    "                flex:column.offset,\r",
                    "                style:\"{background-image:url(resources/images/stripes.png);}\"\r",
                    "            }));\r",
                    "            eolWidth=eolWidth-column.offset;\r",
                    "        }\r",
                    "        var isFinalCol=false;\r",
                    "        if (its<=0){isFinalCol=true;}\r",
                    "        var newCol=Ext.widget('panel', {\r",
                    "            header:false,\r",
                    "            flex:column.span,\r",
                    "            final:isFinalCol,\r",
                    "            mType:'col',\r",
                    "            id:column.id,\r",
                    "            eTitle:column.eTitle,\r",
                    "            responsive:column.responsive,\r",
                    "            margin:4,\r",
                    "            layout: {\r",
                    "                type: 'vbox',\r",
                    "                align: 'stretch'\r",
                    "            }\r",
                    "        });\r",
                    "        if ((its>0)&&(column.isTerminal===false)) {\r",
                    "            rFlex=Ext.Array.max([rFlex,column.rows.length]);\r",
                    "            me.masqueRestit(column.rows,its-1,newCol);    \r",
                    "        }\r",
                    "        else {\r",
                    "            if (Ext.isEmpty(column.blocks)){} else {\r",
                    "            Ext.Array.forEach(column.blocks, function(bl){\r",
                    "                newCol.add(Ext.widget(\"unBloc\",bl));\r",
                    "            });\r",
                    "        }\r",
                    "    }\r",
                    "    eolWidth=eolWidth-column.span;\r",
                    "    newRow.add(newCol);\r",
                    "\r",
                    "});\r",
                    "newRow.add(Ext.widget(\"container\",{\r",
                    "    flex:eolWidth,\r",
                    "    itemId:\"eol\"\r",
                    "}));\r",
                    "if (Ext.isEmpty(row.height)) {\r",
                    "    newRow.flex=rFlex;\r",
                    "} else {\r",
                    "    newRow.height=row.height;\r",
                    "}\r",
                    "cible.add(newRow);  \r",
                    "\r",
                    "\r",
                    "});"
                ]
            },
            "designerId": "36dfcf49-7a25-41ac-9be8-5cd054e2bdb0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onTreepanelItemClick",
                "fn": "onTreepanelItemClick",
                "implHandler": [
                    "var cible = Ext.getCmp('arborescenceSites').getSelectionModel().getSelection()[0];\r",
                    "this.getMasqueEdition().removeAll();\r",
                    "this.getMasqueEdition().setWidth(cible.data.largeur);\r",
                    "this.masqueRestit(cible.raw.zones);"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.tree.Panel",
                "designer|controlQuery": "#arborescenceSites"
            },
            "designerId": "b8b8ae88-6dae-43af-82a5-68d5129ec5d9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "copyMaskWindow",
                "fn": "copyMaskWindow",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    var fenetre = Ext.widget('copierMasque');\r",
                    "    fenetre.showAt(screen.width/2-150, 100);\r",
                    "    Ext.getCmp('copierMasqueTitre').setValue(cible.data.text);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonCopierMasque"
            },
            "designerId": "fcd80b72-c55f-4cd8-8b60-795aeb1185aa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "newMaskWindow",
                "fn": "newMaskWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('nouveauMasque');\r",
                    "fenetre.showAt(screen.width/2-200, 100);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonNouveauMasque"
            },
            "designerId": "937a8757-7537-4f4b-b0b9-9367d551ad9b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "createMask",
                "fn": "createMask",
                "implHandler": [
                    "if ((Ext.getCmp('nouveauMasqueTitre').isValid())&&(Ext.getCmp('nouveauMasqueSite').isValid())) {\r",
                    "\r",
                    "    var nTitre = Ext.getCmp('nouveauMasqueTitre').getValue();\r",
                    "    var nSite = Ext.getCmp('nouveauMasqueSite').getValue();\r",
                    "    var nouvMasque = Ext.create('model.masquesDataModel', {\r",
                    "        text: nTitre,\r",
                    "        site: nSite,\r",
                    "        etat: 'brouillon',\r",
                    "        auteur: MyPrefData.myName,\r",
                    "        creation: new Date(),\r",
                    "        derniereModification: new Date(),\r",
                    "        version: 1.0,\r",
                    "        versions:[\r",
                    "        {text: '1.0', etat: 'brouillon', date: new Date(), auteur: MyPrefData.myName}\r",
                    "        ],\r",
                    "        \"rows\": [ \r",
                    "        {\r",
                    "            \"height\":null,\r",
                    "            \"responsive\":{\r",
                    "                \"phone\":true,\r",
                    "                \"tablet\":true,\r",
                    "                \"desktop\":true\r",
                    "            },\r",
                    "            \"eTitle\":\"titre\",\r",
                    "            \"columns\": [\r",
                    "            {\r",
                    "                \"isTerminal\":true,\r",
                    "                \"eTitle\":\"titre\",\r",
                    "                \"responsive\":{\r",
                    "                    \"phone\":true,\r",
                    "                    \"tablet\":true,\r",
                    "                    \"desktop\":true\r",
                    "                },\r",
                    "                \"span\":12,\r",
                    "                \"offset\":0,\r",
                    "                \"blocks\": null,\r",
                    "                \"rows\":null\t\r",
                    "            }\r",
                    "            ]\r",
                    "        }\r",
                    "        ]\r",
                    "\r",
                    "    });\r",
                    "    this.getMasquesDataJsonStore().add(nouvMasque);\r",
                    "\r",
                    "    Ext.getCmp('nouveauMasqueFenetre').close();\r",
                    "    Ext.getCmp('masquesGridView').getSelectionModel().select(nouvMasque);\r",
                    "    this.masquesDisplay(Ext.getCmp('masquesGridView'),nouvMasque);\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#creerNouveauMasque"
            },
            "designerId": "1cf108dd-b3e6-442c-8aec-e10df6fac9c6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "maskSave",
                "fn": "maskSave",
                "implHandler": [
                    "var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "if (Ext.isDefined(cible)) {\r",
                    "    cible.beginEdit();\r",
                    "    cible.set(\"rows\",this.saveRows(this.getMasqueEdition()));\r",
                    "    cible.set(\"etat\",\"brouillon\");\r",
                    "    cible.set(\"derniereModification\",new Date());\r",
                    "    // cible.data.versions.push({text: cible.data.version, etat:'brouillon', date: new Date(), auteur: MyPrefData.myName});\r",
                    "    cible.endEdit();\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#AdminfMasquesEnregistrer"
            },
            "designerId": "0beba9df-bf9f-4e8f-963d-36a9dd323b38"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "copyMask",
                "fn": "copyMask",
                "implHandler": [
                    "if ((Ext.getCmp('copierMasqueTitre').isValid())&&(Ext.getCmp('copierMasqueSite').isValid())) {\r",
                    "    var cible = Ext.getCmp('masquesGrid').getSelectionModel().getSelection()[0];\r",
                    "    var nTitre = Ext.getCmp('copierMasqueTitre').getValue();\r",
                    "    var nSite = Ext.getCmp('copierMasqueSite').getValue();\r",
                    "    var nRows = Ext.clone(cible.data.rows);\r",
                    "    var nouvMasque = Ext.create('model.masquesDataModel', {\r",
                    "        text: nTitre,\r",
                    "        site: nSite,\r",
                    "        etat: 'brouillon',\r",
                    "        auteur: 'Alexandru Dobre',\r",
                    "        creation: new Date(),\r",
                    "        derniereModification: new Date(),\r",
                    "        version: 1.0,\r",
                    "        versions:[\r",
                    "        {text: '1.0', etat: 'brouillon', date: new Date(), auteur: 'Alexandru Dobre'}\r",
                    "        ],\r",
                    "        rows: nRows\r",
                    "\r",
                    "    });\r",
                    "    this.getMasquesDataJsonStore().add(nouvMasque);\r",
                    "\r",
                    "    Ext.getCmp('copieMasqueFenetre').close();    \r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#copierMasque"
            },
            "designerId": "22678e8c-5ce9-4592-9220-d5edc41a832a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "importMaskWindow",
                "fn": "importMaskWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('importationMasques');\r",
                    "fenetre.showAt(screen.width/2-150, 100);\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#AdminfMasquesImporter"
            },
            "designerId": "28793c92-7265-46de-8344-651a0523c5d1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectionEvents",
                "fn": "selectionEvents",
                "implHandler": [
                    "var me=this;\r",
                    "\r",
                    "if (!abstractcomponent.isXType(\"unBloc\")){\r",
                    "    abstractcomponent.addBodyCls('contrastBorder');\r",
                    "    if (abstractcomponent.mType==\"col\"){\r",
                    "        abstractcomponent.addBodyCls('contrastRow');\r",
                    "    }\r",
                    "    abstractcomponent.getEl().on(\"mouseover\", function(e){\r",
                    "        abstractcomponent.setBorder(4);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    abstractcomponent.getEl().on(\"mouseout\", function(e){\r",
                    "        abstractcomponent.setBorder(2);\r",
                    "        e.stopEvent();\r",
                    "    });\r",
                    "    abstractcomponent.getEl().on(\"click\", function(e){\r",
                    "        var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "        if (!Ext.isEmpty(prevSelected)) {\r",
                    "            if (prevSelected.isXType(\"unBloc\")) {prevSelected.setIconCls();} else {\r",
                    "        prevSelected.removeBodyCls('selectedelement');}\r",
                    "    }\r",
                    "    abstractcomponent.addBodyCls('selectedelement');\r",
                    "    this.frame(MyPrefData.themeColor);\r",
                    "    Ext.getCmp('elementIdField').setValue(abstractcomponent.id);\r",
                    "    Ext.getCmp('deleteElement').enable();\r",
                    "    Ext.getCmp(\"importElement\").enable();\r",
                    "    Ext.getCmp(\"exportElement\").enable();\r",
                    "    var propEdit=Ext.getCmp('elementEditControl');\r",
                    "    propEdit.setTitle(abstractcomponent.id.replace(\"panel\", abstractcomponent.mType));\r",
                    "    propEdit.setIconCls('editZone');\r",
                    "\r",
                    "\r",
                    "    propEdit.removeAll();\r",
                    "\r",
                    "    propEdit.add(Ext.widget('textfield',{\r",
                    "        itemId:\"eTitleField\",\r",
                    "        fieldLabel:\"Titre \",\r",
                    "        labelWidth:40,\r",
                    "        allowBlank:false,\r",
                    "        anchor:\"60%\",\r",
                    "        margin:\"10 0 10 0\",\r",
                    "        style:\"{float:left;}\",\r",
                    "        value:abstractcomponent.eTitle\r",
                    "    }));\r",
                    "    propEdit.add(Ext.widget('button',{\r",
                    "        text:\"Appliquer\",\r",
                    "        anchor:\"38%\",\r",
                    "        margin:\"10 0 10 0\",\r",
                    "        style:\"{float:right;}\",\r",
                    "        handler:function(){\r",
                    "            if (propEdit.getComponent(\"eTitleField\").isValid()){\r",
                    "                abstractcomponent.eTitle=propEdit.getComponent(\"eTitleField\").getValue();\r",
                    "            }}\r",
                    "        }));\r",
                    "        propEdit.add(Ext.widget('checkboxgroup',{\r",
                    "            fieldLabel:\"Visibilité \",\r",
                    "            anchor:\"100%\",\r",
                    "            labelWidth:60,\r",
                    "            margin:\"0 0 10 0\",\r",
                    "            vertical:true,\r",
                    "            columns:1,\r",
                    "            items: [\r",
                    "            { boxLabel: 'Téléphone', checked:abstractcomponent.responsive.phone, handler:function(){abstractcomponent.responsive.phone=this.getValue();} },\r",
                    "            { boxLabel: 'Tablette',checked:abstractcomponent.responsive.tablet, handler:function(){abstractcomponent.responsive.tablet=this.getValue();}},\r",
                    "            { boxLabel: 'Ordinateur',checked:abstractcomponent.responsive.desktop, handler:function(){abstractcomponent.responsive.desktop=this.getValue();}}\r",
                    "            ]\r",
                    "\r",
                    "        }));\r",
                    "        if (abstractcomponent.mType==\"row\"){\r",
                    "            Ext.getCmp(\"moveElementUp\").enable();\r",
                    "            Ext.getCmp(\"moveElementDown\").enable();\r",
                    "            Ext.getCmp('newRow').disable();\r",
                    "            Ext.getCmp(\"newBloc\").disable();\r",
                    "            if (abstractcomponent.getComponent(\"eol\").flex===0){\r",
                    "                Ext.getCmp('newCol').disable();\r",
                    "            } else {\r",
                    "                Ext.getCmp('newCol').enable();\r",
                    "            }\r",
                    "            propEdit.add(Ext.widget('button',{\r",
                    "                itemId:\"rowAutoHeight\",\r",
                    "                text:\"Hauteur automatique\",\r",
                    "                anchor:\"100%\",\r",
                    "                tooltip:\"La hauteur s'adapte au contenu lors du rendu final\",\r",
                    "                hidden:true,\r",
                    "                handler:function(){\r",
                    "                    abstractcomponent.setHeight(null);\r",
                    "                    abstractcomponent.flex=1;\r",
                    "                    abstractcomponent.up().doLayout();\r",
                    "                    propEdit.getComponent(\"rowHeightFixed\").setValue();\r",
                    "                    this.hide();\r",
                    "                }\r",
                    "            }));\r",
                    "            if (!Ext.isEmpty(abstractcomponent.height)){propEdit.getComponent(\"rowAutoHeight\").show();}\r",
                    "            propEdit.add(Ext.widget('numberfield',{\r",
                    "                itemId:\"rowHeightFixed\",\r",
                    "                fieldLabel:\"Hauteur fixe \",\r",
                    "                labelWidth:80,\r",
                    "                allowDecimals:false,\r",
                    "                allowBlank:false,\r",
                    "                minValue:20,\r",
                    "                anchor:\"60%\",\r",
                    "                margin:\"10 0 0 0\",\r",
                    "                style:\"{float:left;}\",\r",
                    "                value:abstractcomponent.height\r",
                    "            }));\r",
                    "            propEdit.add(Ext.widget('button',{\r",
                    "                text:\"Appliquer\",\r",
                    "                anchor:\"38%\",\r",
                    "                margin:\"10 0 0 0\",\r",
                    "                style:\"{float:right;}\",\r",
                    "                handler:function(){\r",
                    "                    if (propEdit.getComponent(\"rowHeightFixed\").isValid()){\r",
                    "                        abstractcomponent.flex=null;\r",
                    "                        abstractcomponent.setHeight(propEdit.getComponent(\"rowHeightFixed\").getValue());\r",
                    "                        abstractcomponent.up().doLayout();\r",
                    "                        propEdit.getComponent(\"rowAutoHeight\").show();\r",
                    "                    }}\r",
                    "                }));\r",
                    "\r",
                    "\r",
                    "\r",
                    "            }    \r",
                    "\r",
                    "            else if (abstractcomponent.mType==\"col\"){\r",
                    "                Ext.getCmp(\"moveElementUp\").disable();\r",
                    "                Ext.getCmp(\"moveElementDown\").disable();\r",
                    "                if ((abstractcomponent.final)){\r",
                    "                Ext.getCmp('newRow').disable();} else if ((Ext.isDefined(abstractcomponent.items.items[0]))&&(abstractcomponent.items.items[0].isXType(\"unBloc\"))) {\r",
                    "                    Ext.getCmp('newRow').disable();\r",
                    "                }else {\r",
                    "                    Ext.getCmp('newRow').enable();\r",
                    "                }\r",
                    "\r",
                    "                Ext.getCmp('newCol').disable();\r",
                    "                if ((Ext.isEmpty(abstractcomponent.items.items))||(abstractcomponent.items.items[0].isXType(\"unBloc\"))){\r",
                    "                Ext.getCmp(\"newBloc\").enable();} else {Ext.getCmp(\"newBloc\").disable();}\r",
                    "\r",
                    "                    var offsetEdit=Ext.widget('numberfield',{\r",
                    "                        itemId:\"offsetEditor\",\r",
                    "                        fieldLabel:\"Offset \",\r",
                    "                        editable:false,\r",
                    "                        labelWidth:45,\r",
                    "                        allowDecimals:false,\r",
                    "                        anchor:\"50%\",\r",
                    "                        margin:\"10 0 0 0\",\r",
                    "                        style:\"{float:left;}\",\r",
                    "                        value:0,\r",
                    "                        minValue:0\r",
                    "                    });\r",
                    "\r",
                    "                    var spanEdit=Ext.widget('numberfield',{\r",
                    "                        itemId:\"spanEditor\",\r",
                    "                        fieldLabel:\"Span \",\r",
                    "                        labelWidth:45,\r",
                    "                        editable:false,\r",
                    "                        allowDecimals:false,\r",
                    "                        anchor:\"50%\",\r",
                    "                        margin:\"10 0 0 10\",\r",
                    "                        style:\"{float:right;}\",\r",
                    "                        value:abstractcomponent.flex,\r",
                    "                        minValue:1\r",
                    "                    });\r",
                    "\r",
                    "\r",
                    "\r",
                    "                    propEdit.add(offsetEdit);\r",
                    "                    propEdit.add(spanEdit);\r",
                    "                    me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,false);\r",
                    "                    offsetEdit.on(\"change\",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});\r",
                    "                    spanEdit.on(\"change\",function(){me.applyConstrain(abstractcomponent,offsetEdit,spanEdit,true);});\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "                }\r",
                    "                if (!ACL.interfaceRights['write.ui.masks']){\r",
                    "                    Ext.Array.forEach(Ext.getCmp(\"elementEditControl\").query(\"field\"), function(truc){truc.setReadOnly(true);});\r",
                    "                    Ext.Array.forEach(Ext.getCmp(\"elementEditControl\").query(\"button\"), function(truc){truc.disable();});\r",
                    "                }\r",
                    "                e.stopEvent();\r",
                    "            });}"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#masqueEdition panel"
            },
            "designerId": "b4a72045-b1e4-4c98-a83e-c7eacb3de7b6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "deleteMaskElement",
                "fn": "deleteMaskElement",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "if (cible.mType==\"col\"){\r",
                    "    var myEol=cible.up().getComponent(\"eol\");\r",
                    "    var myOffset=cible.previousSibling();\r",
                    "    if (!Ext.isEmpty(myOffset)) {\r",
                    "        if ((myOffset.isXType(\"container\"))&&(!(myOffset.isXType(\"panel\")))) {\r",
                    "            myEol.flex=myEol.flex+myOffset.flex;\r",
                    "            myOffset.destroy();\r",
                    "        }\r",
                    "    }\r",
                    "    myEol.flex=myEol.flex+cible.flex;\r",
                    "\r",
                    "}\r",
                    "cible.destroy();\r",
                    "Ext.getCmp(\"newRow\").disable();\r",
                    "Ext.getCmp(\"newCol\").disable();\r",
                    "Ext.getCmp(\"newBloc\").disable();\r",
                    "Ext.getCmp(\"importElement\").disable();\r",
                    "Ext.getCmp(\"exportElement\").disable();\r",
                    "Ext.getCmp(\"deleteElement\").disable();\r",
                    "Ext.getCmp(\"moveElementUp\").disable();\r",
                    "Ext.getCmp(\"moveElementDown\").disable();\r",
                    "Ext.getCmp('elementEditControl').setTitle(\"Séléctionnez un élément\");\r",
                    "Ext.getCmp('elementEditControl').removeAll();\r",
                    "Ext.getCmp('elementEditControl').setIconCls();\r",
                    "Ext.getCmp('elementIdField').setValue(null);\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#deleteElement"
            },
            "designerId": "7dc2e797-0d01-464d-9a9f-6486e7f2707d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "addCol",
                "fn": "addCol",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "var myEol=cible.getComponent('eol');\r",
                    "\r",
                    "if (myEol.flex>0) {\r",
                    "    var isFinalCol=false;\r",
                    "    if (cible.up().mType==\"col\"){\r",
                    "        isFinalCol=true;\r",
                    "    }\r",
                    "    var newCol=Ext.widget('panel', {\r",
                    "        header:false,\r",
                    "        flex:1,\r",
                    "        final:isFinalCol,\r",
                    "        eTitle:\"titre\",\r",
                    "        responsive:{\r",
                    "            phone:true,\r",
                    "            tablet:true,\r",
                    "            desktop:true\r",
                    "        },\r",
                    "        mType:'col',\r",
                    "        margin:4,\r",
                    "        layout: {\r",
                    "            type: 'vbox',\r",
                    "            align: 'stretch'\r",
                    "        }\r",
                    "    });\r",
                    "    myEol.flex=myEol.flex-1;\r",
                    "    cible.insert(cible.items.items.length-1,newCol);\r",
                    "    if (myEol.flex===0){\r",
                    "        button.disable();\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "newCol.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newCol"
            },
            "designerId": "50d8cf43-e448-4ab1-9638-49be8b101ba3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "addRow",
                "fn": "addRow",
                "implHandler": [
                    "var cible=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "var row = Ext.widget('panel', {\r",
                    "    header:false,\r",
                    "    mType:\"row\",\r",
                    "    flex:1,\r",
                    "    eTitle:\"titre\",\r",
                    "    responsive:{\r",
                    "        phone:true,\r",
                    "        tablet:true,\r",
                    "        desktop:true\r",
                    "    },\r",
                    "    margin:4,\r",
                    "    layout: {\r",
                    "        type: 'hbox',\r",
                    "        align: 'stretch'\r",
                    "    }\r",
                    "});\r",
                    "row.add(Ext.widget('container', {flex:12,itemId:\"eol\"}));\r",
                    "cible.insert(cible.items.items.length,row);\r",
                    "Ext.getCmp(\"newBloc\").disable();\r",
                    "row.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newRow"
            },
            "designerId": "b82ff31c-9d1a-4232-b20c-26c553fac70e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showBlocWindow",
                "fn": "showBlocWindow",
                "implHandler": [
                    "var blocWin = Ext.widget('ajoutBlocFenetre');\r",
                    "blocWin.showAt(screen.width/2-250, 100);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#newBloc"
            },
            "designerId": "4c85525a-9c6d-41e1-8158-3c916ff237ec"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "importElement",
                "fn": "importElement",
                "implHandler": [
                    "var target=button.up().up().up().insTar;\r",
                    "var child=Ext.getCmp(\"ReusableElementsGrid\").getSelectionModel().getLastSelected().get(\"mCode\");\r",
                    "this.removeIds(child);\r",
                    "var maskRows = this.saveRows(this.getMasqueEdition());\r",
                    "if (target.id==\"masqueEdition\") {\r",
                    "    maskRows.push(child);\r",
                    "} else {\r",
                    "    this.spliceMask(maskRows,target.id,child,true);\r",
                    "}\r",
                    "this.getMasqueEdition().removeAll();\r",
                    "this.masqueRestit(maskRows,1,this.getMasqueEdition()); \r",
                    "button.up().up().up().close();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#REAddButton"
            },
            "designerId": "ed2cc6c0-ce25-4b86-a298-e0e2e4e50823"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "addBloc",
                "fn": "addBloc",
                "implHandler": [
                    "var donnees = Ext.getCmp('BlocsSelectGrid').getSelectionModel().getLastSelected().data;\r",
                    "var nouvBloc = Ext.widget('unBloc', Ext.clone(donnees.configBasique));\r",
                    "nouvBloc.responsive={\r",
                    "    \"phone\":true,\r",
                    "    \"tablet\":true,\r",
                    "    \"desktop\":true\r",
                    "};\r",
                    "Ext.getCmp(Ext.getCmp('elementIdField').getValue()).add(nouvBloc);\r",
                    "button.up().up().close();\r",
                    "Ext.getCmp('newRow').disable();\r",
                    "nouvBloc.getEl().dom.click();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#boutonAjouterBloc"
            },
            "designerId": "a1d7be70-950d-412d-aef0-c1fe5ea341db"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getElementLevel",
                "fn": "getElementLevel",
                "designer|params": [
                    "element",
                    "level"
                ],
                "implHandler": [
                    "if (element.id==\"masqueEdition\") {\r",
                    "    return (level);\r",
                    "} else {   \r",
                    "    return(this.getElementLevel(element.up(),level+1));\r",
                    "}"
                ]
            },
            "designerId": "3b400554-8f07-4613-91a5-515b3f336a32"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "saveRows",
                "fn": "saveRows",
                "designer|params": [
                    "startComp"
                ],
                "implHandler": [
                    "var me=this;\r",
                    "var nRows=[ ];\r",
                    "Ext.Array.forEach(startComp.items.items, function(row){\r",
                    "    var newCols = [ ];\r",
                    "    var offset=0;\r",
                    "    Ext.Array.forEach(row.items.items, function(col){\r",
                    "        if (col.isXType(\"panel\")) {\r",
                    "            var blocks = null;\r",
                    "            var rows = null;\r",
                    "            var isTerminal=true;\r",
                    "            if (col.final) { \r",
                    "                var nBlocs=col.items.items;\r",
                    "                if (!Ext.isEmpty(nBlocs)) {\r",
                    "                    blocks=[ ];\r",
                    "                    Ext.Array.forEach(nBlocs, function(nBloc){\r",
                    "                        blocks.push({\r",
                    "\r",
                    "                            bType:nBloc.bType,\r",
                    "                            id:nBloc.id,\r",
                    "                            mType:\"bloc\",\r",
                    "                            champsConfig:nBloc.champsConfig,\r",
                    "                            configBloc:nBloc.configBloc,\r",
                    "                            title:nBloc.title,\r",
                    "                            responsive:nBloc.responsive,\r",
                    "                            flex:nBloc.flex,\r",
                    "                            canEdit:nBloc.canEdit\r",
                    "\r",
                    "                        });\r",
                    "\r",
                    "                    });\r",
                    "\r",
                    "                }\r",
                    "            }else {\r",
                    "                var thing=col.items.items[0];\r",
                    "                if (Ext.isEmpty(thing)){} else if (thing.isXType(\"unBloc\")) {\r",
                    "                var nBlocs=col.items.items;\r",
                    "                if (!Ext.isEmpty(nBlocs)) {\r",
                    "                    blocks=[ ];\r",
                    "                    Ext.Array.forEach(nBlocs, function(nBloc){\r",
                    "                        blocks.push({\r",
                    "\r",
                    "                            bType:nBloc.bType,\r",
                    "                            id:nBloc.id,\r",
                    "                            mType:\"block\",\r",
                    "                            champsConfig:nBloc.champsConfig,\r",
                    "                            configBloc:nBloc.configBloc,\r",
                    "                            title:nBloc.title,\r",
                    "                            responsive:nBloc.responsive,\r",
                    "                            flex:nBloc.flex,\r",
                    "                            canEdit:nBloc.canEdit\r",
                    "\r",
                    "                        });\r",
                    "\r",
                    "                    });\r",
                    "\r",
                    "                }\r",
                    "            } else {\r",
                    "                isTerminal=false;\r",
                    "                rows=me.saveRows(col);\r",
                    "            }\r",
                    "        }\r",
                    "\r",
                    "        newCols.push({\r",
                    "            eTitle:col.eTitle,\r",
                    "            responsive:col.responsive,\r",
                    "            span:col.flex,\r",
                    "            id:col.id,\r",
                    "            mType:\"col\",\r",
                    "            offset:offset,\r",
                    "            blocks: blocks,\r",
                    "            rows: rows,\r",
                    "            isTerminal:isTerminal\r",
                    "\r",
                    "        });\r",
                    "        offset=0;\r",
                    "    } else {offset=offset+col.flex;}\r",
                    "\r",
                    "    });\r",
                    "    nRows.push({\r",
                    "        height:row.height,\r",
                    "        eTitle:row.eTitle,\r",
                    "        id:row.id,\r",
                    "        mType:\"row\",\r",
                    "        responsive:row.responsive,\r",
                    "        columns: newCols\r",
                    "\r",
                    "    });\r",
                    "});\r",
                    "return nRows;"
                ]
            },
            "designerId": "ec7012c8-a91c-4437-a012-b355dc5bfe70"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "mainBoxSelect",
                "fn": "mainBoxSelect",
                "implHandler": [
                    "abstractcomponent.setBorder(2);\r",
                    "abstractcomponent.addBodyCls('contrastCBorder');\r",
                    "abstractcomponent.getEl().on(\"mouseover\", function(e){\r",
                    "    abstractcomponent.setBorder(4);\r",
                    "    e.stopEvent();\r",
                    "});\r",
                    "abstractcomponent.getEl().on(\"mouseout\", function(e){\r",
                    "    abstractcomponent.setBorder(2);\r",
                    "    e.stopEvent();\r",
                    "});\r",
                    "abstractcomponent.getEl().on(\"click\", function(e){\r",
                    "    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "    if (!Ext.isEmpty(prevSelected)) {\r",
                    "        if (prevSelected.isXType(\"unBloc\")) {prevSelected.setIconCls();} else {\r",
                    "    prevSelected.removeBodyCls('selectedelement');}\r",
                    "}\r",
                    "abstractcomponent.addBodyCls('selectedelement');\r",
                    "this.frame(MyPrefData.themeColor);\r",
                    "Ext.getCmp('elementIdField').setValue(abstractcomponent.id);\r",
                    "Ext.getCmp('deleteElement').disable();\r",
                    "Ext.getCmp('newCol').disable();\r",
                    "Ext.getCmp('newBloc').disable();\r",
                    "Ext.getCmp('newRow').enable();\r",
                    "Ext.getCmp(\"moveElementUp\").disable();\r",
                    "Ext.getCmp(\"moveElementDown\").disable();\r",
                    "Ext.getCmp(\"importElement\").enable();\r",
                    "Ext.getCmp(\"exportElement\").disable();\r",
                    "var propEdit=Ext.getCmp('elementEditControl');\r",
                    "propEdit.setTitle(\"Racine\");\r",
                    "propEdit.setIconCls('editZone');\r",
                    "\r",
                    "\r",
                    "propEdit.removeAll();\r",
                    "\r",
                    "});"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "#masqueEdition"
            },
            "designerId": "5b3c538a-da66-40b6-88b1-e671ff70a9fb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "blocSelect",
                "fn": "blocSelect",
                "implHandler": [
                    "\r",
                    "\r",
                    "abstractcomponent.getEl().on(\"mouseover\", function(e){\r",
                    "    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "    if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==abstractcomponent.id)) {\r",
                    "        abstractcomponent.setIconCls('selectBloc');\r",
                    "    }\r",
                    "    e.stopEvent();\r",
                    "});\r",
                    "abstractcomponent.getEl().on(\"mouseout\", function(e){\r",
                    "    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "    if ((Ext.isEmpty(prevSelected))||(prevSelected.id!==abstractcomponent.id)) {\r",
                    "    abstractcomponent.setIconCls();}\r",
                    "    e.stopEvent();\r",
                    "});\r",
                    "abstractcomponent.getEl().on(\"click\", function(e){\r",
                    "    var prevSelected = Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "    if (!Ext.isEmpty(prevSelected)) {\r",
                    "        if (prevSelected.isXType(\"unBloc\")) {prevSelected.setIconCls();} else {\r",
                    "    prevSelected.removeBodyCls('selectedelement');}\r",
                    "}\r",
                    "abstractcomponent.setIconCls('editBloc');\r",
                    "this.frame(MyPrefData.themeColor);\r",
                    "Ext.getCmp('elementIdField').setValue(abstractcomponent.id);\r",
                    "Ext.getCmp('deleteElement').enable();\r",
                    "Ext.getCmp('newCol').disable();\r",
                    "Ext.getCmp('newBloc').disable();\r",
                    "Ext.getCmp('newRow').disable();\r",
                    "Ext.getCmp(\"importElement\").disable();\r",
                    "Ext.getCmp(\"exportElement\").enable();\r",
                    "Ext.getCmp(\"moveElementUp\").enable();\r",
                    "Ext.getCmp(\"moveElementDown\").enable();\r",
                    "var propEdit=Ext.getCmp('elementEditControl');\r",
                    "propEdit.setTitle(abstractcomponent.id.replace(\"unBloc\", \"Bloc\"));\r",
                    "propEdit.setIconCls('editBloc');\r",
                    "propEdit.removeAll();\r",
                    "\r",
                    "\r",
                    "propEdit.add(Ext.widget('textfield',{\r",
                    "    itemId:\"eTitleField\",\r",
                    "    fieldLabel:\"Titre \",\r",
                    "    labelWidth:40,\r",
                    "    allowBlank:false,\r",
                    "    anchor:\"60%\",\r",
                    "    margin:\"10 0 10 0\",\r",
                    "    style:\"{float:left;}\",\r",
                    "    value:abstractcomponent.title\r",
                    "}));\r",
                    "propEdit.add(Ext.widget('button',{\r",
                    "    text:\"Appliquer\",\r",
                    "    anchor:\"38%\",\r",
                    "    margin:\"10 0 10 0\",\r",
                    "    style:\"{float:right;}\",\r",
                    "    handler:function(){\r",
                    "        if (propEdit.getComponent(\"eTitleField\").isValid()){\r",
                    "            abstractcomponent.setTitle(propEdit.getComponent(\"eTitleField\").getValue());\r",
                    "        }}\r",
                    "    }));\r",
                    "\r",
                    "    propEdit.add(Ext.widget('numberfield',{\r",
                    "        itemId:\"rowHeightFixed\",\r",
                    "        fieldLabel:\"Hauteur fluide \",\r",
                    "        labelWidth:90,\r",
                    "        allowDecimals:false,\r",
                    "        allowBlank:false,\r",
                    "        minValue:1,\r",
                    "        anchor:\"60%\",\r",
                    "        margin:\"10 0 0 0\",\r",
                    "        style:\"{float:left;}\",\r",
                    "        value:abstractcomponent.flex\r",
                    "    }));\r",
                    "    propEdit.add(Ext.widget('button',{\r",
                    "        text:\"Appliquer\",\r",
                    "        anchor:\"38%\",\r",
                    "        margin:\"10 0 0 0\",\r",
                    "        style:\"{float:right;}\",\r",
                    "        handler:function(){\r",
                    "            if (propEdit.getComponent(\"rowHeightFixed\").isValid()){\r",
                    "                abstractcomponent.flex=propEdit.getComponent(\"rowHeightFixed\").getValue();\r",
                    "                abstractcomponent.up().doLayout();\r",
                    "            }}\r",
                    "        }));\r",
                    "\r",
                    "\r",
                    "        propEdit.add(Ext.widget('checkboxgroup',{\r",
                    "            fieldLabel:\"Visibilité \",\r",
                    "            anchor:\"100%\",\r",
                    "            labelWidth:60,\r",
                    "            margin:\"0 0 10 0\",\r",
                    "            vertical:true,\r",
                    "            columns:1,\r",
                    "            items: [\r",
                    "            { boxLabel: 'Télephone', checked:abstractcomponent.responsive.phone, handler:function(){abstractcomponent.responsive.phone=this.getValue();} },\r",
                    "            { boxLabel: 'Tablette',checked:abstractcomponent.responsive.tablet, handler:function(){abstractcomponent.responsive.tablet=this.getValue();}},\r",
                    "            { boxLabel: 'Ordinateur',checked:abstractcomponent.responsive.desktop, handler:function(){abstractcomponent.responsive.desktop=this.getValue();}}\r",
                    "            ]\r",
                    "\r",
                    "        }));  \r",
                    "\r",
                    "\r",
                    "        var configSpec = Ext.widget('ConfigSpecBloc');\r",
                    "        var categories = Ext.clone(abstractcomponent.champsConfig.simple);\r",
                    "        for (j=0; j<categories.length; j++){\r",
                    "            var nCateg = Ext.create('Ext.form.FieldSet', {title: categories[j].categorie, collapsible:true, layout: 'anchor'});\r",
                    "\r",
                    "            var champsS = Ext.clone(categories[j].champs);\r",
                    "            for (i=0; i<champsS.length; i++) {\r",
                    "                if (champsS[i].type =='Ext.form.field.ComboBox') {\r",
                    "                    var monStore=  Ext.create('Ext.data.Store', champsS[i].store);\r",
                    "                    champsS[i].config.store= monStore;\r",
                    "                }\r",
                    "                var nChampS = Ext.create(champsS[i].type, champsS[i].config);\r",
                    "                if (champsS[i].type =='Ext.form.field.Trigger'){\r",
                    "                    var Ouvrir = Ext.clone(champsS[i].ouvrir);\r",
                    "                    nChampS.onTriggerClick= function() {\r",
                    "                        var fenetre = Ext.widget(Ouvrir);\r",
                    "                        fenetre.showAt(screen.width/2-200, 100);\r",
                    "                    } ;  \r",
                    "                }\r",
                    "                nChampS.labelSeparator= ' ';\r",
                    "                nChampS.anchor= '100%';\r",
                    "                nChampS.setValue(abstractcomponent.configBloc[nChampS.name]);\r",
                    "                nChampS.on('change', function(){abstractcomponent.configBloc[this.name]=this.getValue(); });\r",
                    "                nCateg.add(nChampS);\r",
                    "            }\r",
                    "            configSpec.items.items[0].add(nCateg);\r",
                    "\r",
                    "        }\r",
                    "        propEdit.add(configSpec);\r",
                    "\r",
                    "\r",
                    "        if (!ACL.interfaceRights['write.ui.masks']){\r",
                    "            Ext.Array.forEach(Ext.getCmp(\"elementEditControl\").query(\"field\"), function(truc){truc.setReadOnly(true);});\r",
                    "            Ext.Array.forEach(Ext.getCmp(\"elementEditControl\").query(\"button\"), function(truc){truc.disable();});\r",
                    "        }\r",
                    "        e.stopEvent();\r",
                    "\r",
                    "    });"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "UnBloc",
                "designer|controlQuery": "#masqueEdition unBloc"
            },
            "designerId": "51ce778b-c530-48f5-a2d7-43f3b6482faf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "exportElement",
                "fn": "exportElement",
                "implHandler": [
                    "var form = button.up().getForm();\r",
                    "if (form.isValid()) {\r",
                    "    var values=form.getValues();\r",
                    "    var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "    var maskRows = this.saveRows(this.getMasqueEdition());\r",
                    "    var mCode=this.findElement(maskRows,target.id);\r",
                    "    var newElement=Ext.create(\"Rubedo.model.reusableElementModel\",{\r",
                    "        name:values.name,\r",
                    "        description:values.description,\r",
                    "        mCode:mCode,\r",
                    "        depth:this.getElementDepth(mCode),\r",
                    "        mType:target.mType,\r",
                    "        mLevel:this.getElementLevel(target,0),\r",
                    "        site:Ext.getCmp(\"masquesGrid\").getSelectionModel().getLastSelected().get(\"site\")\r",
                    "    });\r",
                    "    Ext.getStore(\"ReusableElementsDataStore\").add(newElement);\r",
                    "}\r",
                    "button.up().up().close();\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#ExportElementButton"
            },
            "designerId": "ed3f878d-3a09-4236-b788-0dd518f58baa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "addBlocDblClick",
                "fn": "addBlocDblClick",
                "implHandler": [
                    "if (Ext.getCmp(\"BlocsSelectGrid\").pageMode){\r",
                    "Ext.getCmp(\"addPageBlocBtn\").fireEvent(\"click\");\r",
                    "} else {\r",
                    "this.addBloc(Ext.getCmp(\"boutonAjouterBloc\"));\r",
                    "}"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#BlocsSelectGrid"
            },
            "designerId": "d0ccbeb8-e552-4c5f-84da-1d9621ba77f2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "exportMaskElementWindow",
                "fn": "exportMaskElementWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('ExportElementWindow');\r",
                    "Ext.getCmp('ViewportPrimaire').add(fenetre);\r",
                    "fenetre.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#exportElement"
            },
            "designerId": "18bb8233-5671-499b-858c-d49767199033"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showImportWindow",
                "fn": "showImportWindow",
                "implHandler": [
                    "var fenetre = Ext.widget('ReusableElementPicker');\r",
                    "Ext.getCmp('ViewportPrimaire').add(fenetre);\r",
                    "var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "var maskRows = this.saveRows(this.getMasqueEdition());\r",
                    "var mCode=this.findElement(maskRows,target.id);\r",
                    "var site=Ext.getCmp(\"masquesGrid\").getSelectionModel().getLastSelected().get(\"site\");\r",
                    "var level=this.getElementLevel(target,0);\r",
                    "Ext.getStore(\"ReusableElementsDataStore\").clearFilter();\r",
                    "Ext.getStore(\"ReusableElementsDataStore\").filter(\"site\",site);\r",
                    "fenetre.insTar={mType:target.mType,level:level,id:target.id,mCode:mCode};\r",
                    "fenetre.show();\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#importElement"
            },
            "designerId": "e52a692b-71b5-4751-b59d-b8cf3d7ec5c5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "maskWindowRender",
                "fn": "maskWindowRender",
                "implHandler": [
                    "if (abstractcomponent.isWindow){\r",
                    "    Ext.getStore(\"MasquesDataJson\").load();\r",
                    "}"
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.window.Window",
                "designer|controlQuery": "adminFMDP"
            },
            "designerId": "de29d4ab-250a-4175-adfd-085a694195a5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "maskWindowClose",
                "fn": "maskWindowClose",
                "implHandler": [
                    "if (abstractcomponent.isWindow){\r",
                    "    Ext.getStore(\"MasquesDataJson\").removeAll();\r",
                    "}"
                ],
                "name": "beforedestroy",
                "scope": "me",
                "designer|targetType": "Ext.window.Window",
                "designer|controlQuery": "#adminFMDP"
            },
            "designerId": "7ddc7cdd-b94b-4bcb-bdcd-e8884fac5ab1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "moveElementUp",
                "fn": "moveElementUp",
                "implHandler": [
                    "var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "if (!Ext.isEmpty(target)) {\r",
                    "    var pos = target.up().items.indexOf(target);\r",
                    "    if (pos > 0) {\r",
                    "        target.up().move(pos,pos-1);\r",
                    "    }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#moveElementUp"
            },
            "designerId": "4c31abba-9cbd-47a1-bc12-416d3bdd7689"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "moveElementDown",
                "fn": "moveElementDown",
                "implHandler": [
                    "var target=Ext.getCmp(Ext.getCmp('elementIdField').getValue());\r",
                    "if (!Ext.isEmpty(target)) {\r",
                    "    var pos = target.up().items.indexOf(target);\r",
                    "    target.up().move(pos,pos+1);\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#moveElementDown"
            },
            "designerId": "9fb491cc-46e8-401f-bb85-a3a2f46e0ca4"
        }
    ]
}