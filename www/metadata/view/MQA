{
    "type": "Ext.window.Window",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "localiserId": "mediaQueryAssistant",
        "height": 373,
        "id": "MQA",
        "width": 469,
        "designer|userClassName": "MQA",
        "designer|userAlias": "MQA",
        "resizable": null,
        "layout": "card",
        "title": "Assistant de requêtage sur médias",
        "constrain": true,
        "modal": true
    },
    "configAlternates": {
        "resizable": "boolean"
    },
    "designerId": "e1d83abe-514e-4e8d-8512-df1fa7f2a8c7",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "localiserId",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "readMyQuery",
                "implHandler": [
                    "var mainWin= Ext.getCmp(\"MQA\");\r",
                    "var result = {};\r",
                    "result.vocabularies={ };\r",
                    "result.fieldRules={ };\r",
                    "Ext.Array.forEach(mainWin.query(\"field\"),function(field){\r",
                    "    if (field.submitValue){\r",
                    "        if (field.isVocabularyField) {\r",
                    "            if (Ext.isEmpty(result.vocabularies[field.vocabularyId])){\r",
                    "                result.vocabularies[field.vocabularyId]={ };                \r",
                    "            }\r",
                    "            if (Ext.isArray(field.getValue())){\r",
                    "                result.vocabularies[field.vocabularyId][field.usedRole]=field.getValue();\r",
                    "            } else {\r",
                    "                result.vocabularies[field.vocabularyId][field.usedRole]=[field.getValue()];\r",
                    "            }\r",
                    "\r",
                    "        } else if (field.isAddedRuleField){\r",
                    "            if (Ext.isEmpty(result.fieldRules[field.ruleId])){\r",
                    "                result.fieldRules[field.ruleId]={ };           \r",
                    "            }\r",
                    "            result.fieldRules[field.ruleId][field.usedRole]=field.getValue();\r",
                    "        } else { \r",
                    "            result[field.name]=field.getValue();\r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    "if (!Ext.isArray(result.DAMTypes)){\r",
                    "    result.contentTypes=[result.DAMTypes];\r",
                    "}\r",
                    "return(result);"
                ]
            },
            "designerId": "c2545fd0-ec3c-4d6b-a47f-b6064609e2b2"
        },
        {
            "type": "linkedinstance",
            "reference": {
                "name": "dockedItems",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "dock": "bottom"
            },
            "designerId": "8d468681-7140-489f-8a2a-dc793cf8eec2",
            "masterInstanceId": "98647ca9-632b-4513-8aac-67b99b9af747"
        },
        {
            "type": "Ext.form.Panel",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "localiserId": "mqs1",
                "bodyPadding": 10,
                "title": "Choix des types de médias"
            },
            "designerId": "796177a4-b025-4b70-924e-91f89c4448fd",
            "customConfigs": [
                {
                    "group": "(Custom Properties)",
                    "name": "localiserId",
                    "type": "string"
                }
            ],
            "cn": [
                {
                    "type": "Ext.form.field.ComboBox",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "localiserId": "mediaTypesField",
                        "layout|anchor": "100%",
                        "id": "DAMTypeWizCombo",
                        "fieldLabel": "Types de media",
                        "name": "DAMTypes",
                        "allowBlank": false,
                        "editable": false,
                        "displayField": "type",
                        "forceSelection": true,
                        "multiSelect": true,
                        "store": "MediaTypesFORDAMPicker",
                        "valueField": "id"
                    },
                    "designerId": "93641b6b-525e-4ceb-a491-a6206c10c8fc",
                    "customConfigs": [
                        {
                            "group": "(Custom Properties)",
                            "name": "localiserId",
                            "type": "string"
                        }
                    ]
                },
                {
                    "type": "basiceventbinding",
                    "reference": {
                        "name": "listeners",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "fn": "onFormDeactivate",
                        "implHandler": [
                            "if ((component.up().editorMode)&&(component.up().initialQuery.DAMTypes.toString()==Ext.getCmp(\"DAMTypeWizCombo\").getValue().toString())){\r",
                            "    component.up().reactToMTChange(true);\r",
                            "} else {\r",
                            "    component.up().reactToMTChange(false);\r",
                            "}"
                        ],
                        "name": "deactivate",
                        "scope": "me"
                    },
                    "designerId": "d3a2e365-c470-4d8f-8ef7-0964bcb7e7da"
                }
            ]
        },
        {
            "type": "Ext.form.Panel",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "localiserId": "mqS2",
                "id": "assisstantRE2",
                "overflowY": "auto",
                "bodyPadding": 10,
                "title": "Choix des règles sur la taxonomie"
            },
            "designerId": "d67b5d86-b64d-462d-9141-3f6571a9e8c6",
            "customConfigs": [
                {
                    "group": "(Custom Properties)",
                    "name": "localiserId",
                    "type": "string"
                }
            ]
        },
        {
            "type": "basiceventbinding",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMQAAfterRender",
                "implHandler": [
                    "Ext.getStore(\"MediaTypesFORDAMPicker\").getProxy().extraParams.filter=\"[{\\\"property\\\":\\\"mainFileType\\\",\\\"value\\\":\\\"\"+component.allowedFileType+\"\\\"}]\";\r",
                    "Ext.getStore(\"MediaTypesFORDAMPicker\").on(\"load\",function(a,records){\r",
                    "    if ((records.length==1)&&(!component.editMode)){\r",
                    "        Ext.getCmp(\"DAMTypeWizCombo\").select(records[0]);\r",
                    "    }\r",
                    "});\r",
                    "Ext.getStore(\"MediaTypesFORDAMPicker\").load();\r",
                    "Ext.getStore('TaxonomyForQA').load();\r",
                    "if (component.editorMode){\r",
                    "    component.initialQuery=Ext.JSON.decode(component.initialValue);\r",
                    "    var task= new Ext.util.DelayedTask(function(){\r",
                    "        Ext.getCmp(\"DAMTypeWizCombo\").setValue(component.initialQuery.DAMTypes);\r",
                    "        component.reactToMTChange(true);\r",
                    "        Rubedo.controller.assistantRequetageController.prototype.restoreFieldRules(component.initialQuery.fieldRules);\r",
                    "    });\r",
                    "    task.delay(1000);\r",
                    "}"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "designerId": "73bbc96f-3d3c-42bf-b868-03270989cc38"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "reactToMTChange",
                "designer|params": [
                    "keepInMind"
                ],
                "implHandler": [
                    "var editorMode = Ext.getCmp(\"MQA\").editorMode;\r",
                    "var simpleMode = false;\r",
                    "var initialQuery=Ext.getCmp(\"MQA\").initialQuery;\r",
                    "Ext.getCmp('assisstantRE2').removeAll();\r",
                    "var selectedTypes=Ext.getCmp(\"DAMTypeWizCombo\").getValue();\r",
                    "var vocabularies= [];\r",
                    "Ext.Array.forEach(selectedTypes, function(type){\r",
                    "    var myVocs = Ext.getStore(\"MediaTypesFORDAMPicker\").findRecord(\"id\",type).get(\"vocabularies\");\r",
                    "    vocabularies=Ext.Array.merge(vocabularies,myVocs);\r",
                    "});\r",
                    "var storeL = Ext.create('Ext.data.Store', {\r",
                    "    fields: ['valeur', 'nom'],\r",
                    "    data : [\r",
                    "    {valeur: 'AND', nom :Rubedo.RubedoAutomatedElementsLoc.andText},\r",
                    "    {valeur: 'OR', nom :Rubedo.RubedoAutomatedElementsLoc.orText}\r",
                    "    ]\r",
                    "});\r",
                    "\r",
                    "var lien = Ext.create('Ext.form.ComboBox', {\r",
                    "    anchor: '100%',\r",
                    "    fieldLabel: Rubedo.RubedoAutomatedElementsLoc.relationBetweenRulesText,\r",
                    "    store: storeL,\r",
                    "    value: 'OR',\r",
                    "    name: \"vocabulariesRule\",\r",
                    "    queryMode: 'local',\r",
                    "    displayField: 'nom',\r",
                    "    valueField: 'valeur',\r",
                    "    labelWidth: 150,\r",
                    "    editable: false,\r",
                    "    forceSelect: true,\r",
                    "    allowBlank: false\r",
                    "\r",
                    "});\r",
                    "var champsRegles = [ ];\r",
                    "champsRegles.push({nom:Rubedo.RubedoAutomatedElementsLoc.creationText,\r",
                    "    valeur: {\r",
                    "        cType: 'datefield',\r",
                    "        name: 'creation',\r",
                    "        ruleId:'createTime',\r",
                    "        label: Rubedo.RubedoAutomatedElementsLoc.creationText\r",
                    "    }\r",
                    "});\r",
                    "champsRegles.push({nom:Rubedo.RubedoAutomatedElementsLoc.lastUpdateText,\r",
                    "    valeur: {\r",
                    "        cType: 'datefield',\r",
                    "        name: 'derniereModification',\r",
                    "        ruleId:'lastUpdateTime',\r",
                    "        label: Rubedo.RubedoAutomatedElementsLoc.lastUpdateText\r",
                    "    }});\r",
                    "    Ext.getStore('champsTCARStore').loadData(champsRegles);\r",
                    "    var vocabulaires=vocabularies;\r",
                    "    if (vocabulaires.length>1) {Ext.getCmp('assisstantRE2').add(lien);}\r",
                    "    Ext.Array.remove(vocabulaires,\"navigation\");\r",
                    "    var k =0;\r",
                    "    for (k=0; k<vocabulaires.length; k++) {\r",
                    "\r",
                    "        var leVocab = Ext.getStore('TaxonomyForQA').findRecord('id', vocabulaires[k]);\r",
                    "        var vocabAPlat= [ ];\r",
                    "        //this.miseAPlatTaxo(leVocab.data.termes.children, vocabAPlat);\r",
                    "\r",
                    "\r",
                    "        var storeT = Ext.create('Ext.data.JsonStore', {\r",
                    "            model:\"Rubedo.model.taxonomyTermModel\",\r",
                    "            remoteFilter:\"true\",\r",
                    "            proxy: {\r",
                    "                type: 'ajax',\r",
                    "                api: {\r",
                    "                    read: 'taxonomy-terms'\r",
                    "                },\r",
                    "                reader: {\r",
                    "                    type: 'json',\r",
                    "                    messageProperty: 'message',\r",
                    "                    root: 'data'\r",
                    "                },\r",
                    "                encodeFilters: function(filters) {\r",
                    "                    var min = [],\r",
                    "                        length = filters.length,\r",
                    "                        i = 0;\r",
                    "\r",
                    "                    for (; i < length; i++) {\r",
                    "                        min[i] = {\r",
                    "                            property: filters[i].property,\r",
                    "                            value   : filters[i].value\r",
                    "                        };\r",
                    "                        if (filters[i].type) {\r",
                    "                            min[i].type = filters[i].type;\r",
                    "                        }\r",
                    "                        if (filters[i].operator) {\r",
                    "                            min[i].operator = filters[i].operator;\r",
                    "                        }\r",
                    "                    }\r",
                    "                    return this.applyEncoding(min);\r",
                    "                }\r",
                    "            },\r",
                    "            filters: {\r",
                    "                property: 'vocabularyId',\r",
                    "                value: leVocab.get(\"id\")\r",
                    "            }\r",
                    "\r",
                    "        });\r",
                    "        storeT.on(\"beforeload\", function(s,o){\r",
                    "            o.filters=Ext.Array.slice(o.filters,0,1);\r",
                    "            if ((!Ext.isEmpty(o.params))&&(!Ext.isEmpty(o.params.comboQuery))){\r",
                    "\r",
                    "                var newFilter=Ext.create('Ext.util.Filter', {\r",
                    "                    property:\"text\",\r",
                    "                    value:o.params.comboQuery,\r",
                    "                    operator:'like'\r",
                    "                });\r",
                    "\r",
                    "                o.filters.push(newFilter);\r",
                    "\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "        });\r",
                    "        storeT.load();\r",
                    "\r",
                    "        var selecteur = Ext.widget('comboboxselect', {\r",
                    "            name:leVocab.get(\"id\"),\r",
                    "            vocabularyId:leVocab.get(\"id\"),\r",
                    "            isVocabularyField:true,\r",
                    "            usedRole:\"terms\",\r",
                    "            anchor:\"100%\",\r",
                    "            fieldLabel: leVocab.get(\"name\"),\r",
                    "            autoScroll: false,\r",
                    "            store: storeT,\r",
                    "            queryMode: 'remote',\r",
                    "            queryParam: 'comboQuery',\r",
                    "            minChars:3,\r",
                    "            displayField: 'text',\r",
                    "            valueField: 'id',\r",
                    "            filterPickList: true,\r",
                    "            typeAhead: true,\r",
                    "            forceSelection: !leVocab.data.expandable,\r",
                    "            createNewOnEnter: leVocab.data.expandable,\r",
                    "            multiSelect: Ext.clone(leVocab.data.multiSelect),\r",
                    "            allowBlank: !leVocab.data.mandatory\r",
                    "        });\r",
                    "\r",
                    "        var storeR = Ext.create('Ext.data.Store', {\r",
                    "            fields: ['valeur', 'nom'],\r",
                    "            data : [\r",
                    "            {valeur: 'all', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleAllText},\r",
                    "            {valeur: 'allRec', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleAllRecText},\r",
                    "            {valeur: 'some', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleSomeText},\r",
                    "            {valeur: 'someRec', nom :Rubedo.RubedoAutomatedElementsLoc.tRuleSomeRecText}\r",
                    "            ]\r",
                    "        });\r",
                    "\r",
                    "        var regle = Ext.create('Ext.form.ComboBox', {\r",
                    "            name:leVocab.get(\"id\")+\"QueryRule\",\r",
                    "            anchor: '100%',\r",
                    "            vocabularyId:leVocab.get(\"id\"),\r",
                    "            isVocabularyField:true,\r",
                    "            usedRole:\"rule\",\r",
                    "            fieldLabel: Rubedo.RubedoAutomatedElementsLoc.ruleText,\r",
                    "            store: storeR,\r",
                    "            queryMode: 'local',\r",
                    "            displayField: 'nom',\r",
                    "            valueField: 'valeur',\r",
                    "            editable: false,\r",
                    "            value: 'some',\r",
                    "            forceSelect: true,\r",
                    "            allowBlank: false\r",
                    "\r",
                    "        });\r",
                    "        if ((keepInMind)&&(editorMode)&&(!Ext.isEmpty(initialQuery.vocabularies[leVocab.get(\"id\")]))){\r",
                    "            regle.setValue(initialQuery.vocabularies[leVocab.get(\"id\")].rule[0]);\r",
                    "            selecteur.setValue(initialQuery.vocabularies[leVocab.get(\"id\")].terms);\r",
                    "        }\r",
                    "        if (simpleMode) {\r",
                    "            regle.setValue(\"all\");\r",
                    "            regle.setReadOnly(true);\r",
                    "            regle.hide();\r",
                    "            selecteur.multiSelect=false;\r",
                    "            var enrobage=Ext.widget(\"container\", {anchor:\"100%\", layout:\"anchor\"});\r",
                    "        } else {\r",
                    "\r",
                    "\r",
                    "            var enrobage = Ext.widget('fieldset', {\r",
                    "                title : leVocab.get(\"name\"),\r",
                    "                collapsible: true\r",
                    "\r",
                    "\r",
                    "            });}\r",
                    "            enrobage.add(selecteur);\r",
                    "            enrobage.add(regle);\r",
                    "            enrobage.collapse();\r",
                    "            Ext.getCmp('assisstantRE2').add(enrobage);\r",
                    "\r",
                    "\r",
                    "\r",
                    "        }    "
                ]
            },
            "designerId": "4f02e02d-c70c-4ece-b73d-09e858032694"
        },
        {
            "type": "basiceventbinding",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMQABeforeClose",
                "implHandler": [
                    "Ext.getStore(\"MediaTypesFORDAMPicker\").removeAll();\r",
                    "Ext.getStore('TaxonomyForQA').removeAll();"
                ],
                "name": "beforeclose",
                "scope": "me"
            },
            "designerId": "7c345df1-1f41-4ea0-b2e5-c79c53ca38df"
        },
        {
            "type": "linkedinstance",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "designerId": "52c8bba9-a1fd-4e26-9b02-2c49334bb657",
            "masterInstanceId": "600b0e52-e465-45ce-ac64-6b6f98c6a6a6"
        },
        {
            "type": "Ext.panel.Panel",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "localiserId": "mqls",
                "layout": "anchor",
                "bodyPadding": 10,
                "title": "Enregistrement"
            },
            "designerId": "fe6c1f8e-0610-4292-8792-7bbea27140b3",
            "customConfigs": [
                {
                    "group": "(Custom Properties)",
                    "name": "localiserId",
                    "type": "string"
                }
            ],
            "cn": [
                {
                    "type": "Ext.button.Button",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "localiserId": "saveBtn",
                        "layout|anchor": "100%",
                        "id": "MQASaveBtn",
                        "scale": "large",
                        "text": "Enregistrer"
                    },
                    "designerId": "fb45f1f1-3be2-4c86-8adb-a603913b9fb7",
                    "customConfigs": [
                        {
                            "group": "(Custom Properties)",
                            "name": "localiserId",
                            "type": "string"
                        }
                    ],
                    "cn": [
                        {
                            "type": "basiceventbinding",
                            "reference": {
                                "name": "listeners",
                                "type": "array"
                            },
                            "codeClass": null,
                            "userConfig": {
                                "fn": "onMQASaveBtnClick",
                                "implHandler": [
                                    "var result= Ext.getCmp(\"MQA\").readMyQuery();\r",
                                    "Ext.getCmp(Ext.getCmp(\"MQA\").targetId).setValue(Ext.JSON.encode(result));\r",
                                    "Ext.getCmp(\"MQA\").close();"
                                ],
                                "name": "click",
                                "scope": "me"
                            },
                            "designerId": "9c474f42-1277-4258-bca4-e4643acf7f56"
                        }
                    ]
                }
            ]
        }
    ]
}