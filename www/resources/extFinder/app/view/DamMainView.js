/*
 * File: resources/extFinder/app/view/DamMainView.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('extFinder.view.DamMainView', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.DAMMainView',

    requires: [
        'Ext.ux.container.SwitchButtonSegment'
    ],

    title: '',
    forceFit: true,
    store: 'DAMPickerStore',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            viewConfig: {
                id: 'DAMImageDrop'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var link="dam/get-thumbnail?id="+record.get("id")+"&version="+record.get("version");
                        return ('<img src=\"'+link+'\" height=\"100\" width=\"100\">');
                    },
                    localiserId: 'mainFileDamCol',
                    sortable: false,
                    dataIndex: 'originalFileId',
                    text: 'Main file'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if (record.get("readOnly")){
                            return("<i style=\"color:#777;\">"+value+"</i>");
                        } else {
                            return(value);
                        }
                    },
                    filter: true,
                    localiserId: 'titleColumn',
                    dataIndex: 'text',
                    text: 'Titre'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return(Ext.util.Format.fileSize(record.get("fileSize")));
                    },
                    localiserId: 'sizeDamCol',
                    dataIndex: 'fileSize',
                    text: 'Size'
                },
                {
                    xtype: 'gridcolumn',
                    localiserId: 'authorColumn',
                    dataIndex: 'author',
                    text: 'Auteur'
                },
                {
                    xtype: 'datecolumn',
                    localiserId: 'createDateColumn',
                    dataIndex: 'lastUpdateTime',
                    text: 'Date de cr√©ation',
                    format: 'd-m-Y'
                }
            ]
        });

        me.processDAMMainView(me);
        me.callParent(arguments);
    },

    processDAMMainView: function(config) {
        config.multiSelect= false;
        config.viewConfig= {
            stripeRows: true
        };
        return(config);
    }

});