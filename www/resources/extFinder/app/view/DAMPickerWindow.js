/*
 * File: resources/extFinder/app/view/DAMPickerWindow.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('extFinder.view.DAMPickerWindow', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.DAMPickerWindow',

    id: 'ImagePickerWindow',
    layout: {
        type: 'fit'
    },
    title: '',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            listeners: {
                render: {
                    fn: me.onImagePickerWindowRender,
                    scope: me
                }
            },
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    store: 'DAMPickerStore',
                    items: [
                        {
                            xtype: 'tbspacer',
                            flex: 3
                        },
                        {
                            xtype: 'button',
                            localiserId: 'chooseBtn',
                            disabled: true,
                            id: 'imagePickerAcceptBtn',
                            icon: 'resources/icones/blue/16x16/accept.png',
                            text: 'Choisir',
                            listeners: {
                                click: {
                                    fn: me.onImagePickerAcceptBtnClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            handler: function(button, event) {
                                this.up().up().close();
                            },
                            localiserId: 'cancelBtn',
                            icon: 'resources/icones/blue/16x16/remove.png',
                            text: 'Annuler'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onImagePickerWindowRender: function(component, eOpts) {
        Ext.getStore("DAMPickerStore").clearFilter(true);
        var allowedTypes=[];
        var allowedFileType=CKEOptions.type;
        var columnsOver= [
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                var link="dam/get-thumbnail?id="+record.get("id")+"&version="+record.get("version");
                return ('<img src=\"'+link+'\" height=\"100\" width=\"100\">');
            },
            dataIndex: 'originalFileId',
            width:130,
            text: 'Main file'
        },
        {
            xtype: 'gridcolumn',
            filter: true,
            dataIndex: 'title',
            text: 'Title'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return(Ext.util.Format.fileSize(record.get("fileSize")));
            },
            dataIndex: 'fileSize',
            text: 'Size'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return(value.fullName);
            },
            dataIndex: 'createUser',
            text: 'Author'
        },
        {
            xtype: 'datecolumn',
            dataIndex: 'createTime',
            text: 'Creation date',
            format: 'd-m-Y'
        }
        ];
        if (Ext.isEmpty(allowedTypes)){
            if (Ext.isEmpty(allowedFileType)){
                delete Ext.getStore("MediaTypesFORDAMPicker").getProxy().extraParams.filter;
                Ext.getStore("MediaTypesFORDAMPicker").load();
                columnsOver.push({
                    xtype:'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if (Ext.isEmpty(Ext.getStore("MediaTypesFORDAMPicker").findRecord("id",value))) {
                            return(value);
                        } else {
                            return(Ext.getStore("MediaTypesFORDAMPicker").findRecord("id",value).get("type"));
                        }
                    },
                    filter: {
                        type: 'list',
                        labelField: 'type',
                        store: Ext.getStore('MediaTypesFORDAMPicker')
                    },
                    dataIndex: 'typeId',

                    text: 'Type'
                });
                delete Ext.getStore("DAMPickerStore").getProxy().extraParams.tFilter;
                var task = new Ext.util.DelayedTask(function(){
                    Ext.getStore("DAMPickerStore").load();   
                });
                task.delay(300);
            } else {
                Ext.getStore("MediaTypesFORDAMPicker").getProxy().extraParams.filter="[{\"property\":\"mainFileType\",\"value\":\""+allowedFileType+"\"}]";
                Ext.getStore("MediaTypesFORDAMPicker").load();
                columnsOver.push({
                    xtype:'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if (Ext.isEmpty(Ext.getStore("MediaTypesFORDAMPicker").findRecord("id",value))) {
                            return(value);
                        } else {
                            return(Ext.getStore("MediaTypesFORDAMPicker").findRecord("id",value).get("type"));
                        }
                    },
                    filter: {
                        type: 'list',
                        labelField: 'type',
                        store: Ext.getStore('MediaTypesFORDAMPicker')
                    },
                    dataIndex: 'typeId',

                    text: 'Type'
                });
                var task = new Ext.util.DelayedTask(function(){
                    Ext.getStore("DAMPickerStore").getProxy().extraParams.tFilter="[{\"property\":\"mainFileType\",\"value\":\""+allowedFileType+"\"}]";
                    Ext.getStore("DAMPickerStore").load();
                });
                task.delay(300);
            }
        }else if (allowedTypes.length==1){
            Ext.getStore("DAMPickerStore").getProxy().extraParams.tFilter="[{\"property\":\"typeId\",\"value\":\""+allowedTypes[0]+"\"}]";
            Ext.getStore("DAMPickerStore").load();
            Ext.getStore("MediaTypesFORDAMPicker").getProxy().extraParams.filter="[{\"property\":\"id\",\"operator\":\"$in\",\"value\":"+Ext.JSON.encode(allowedTypes)+"}]";
            Ext.getStore("MediaTypesFORDAMPicker").load();
        } else {
            Ext.getStore("MediaTypesFORDAMPicker").getProxy().extraParams.filter="[{\"property\":\"id\",\"operator\":\"$in\",\"value\":"+Ext.JSON.encode(allowedTypes)+"}]";
            Ext.getStore("MediaTypesFORDAMPicker").load();
            columnsOver.push({
                xtype:'gridcolumn',
                renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                    if (Ext.isEmpty(Ext.getStore("MediaTypesFORDAMPicker").findRecord("id",value))) {
                        return(value);
                    } else {
                        return(Ext.getStore("MediaTypesFORDAMPicker").findRecord("id",value).get("type"));
                    }
                },
                filter: {
                    type: 'list',
                    labelField: 'type',
                    store: Ext.getStore('MediaTypesFORDAMPicker')
                },
                dataIndex: 'typeId',

                text: 'Type'
            });
            var task = new Ext.util.DelayedTask(function(){
                Ext.getStore("DAMPickerStore").getProxy().extraParams.tFilter="[{\"property\":\"typeId\",\"operator\":\"$in\",\"value\":"+Ext.JSON.encode(allowedTypes)+"}]";
                Ext.getStore("DAMPickerStore").load();
            });
            task.delay(300);
        }
        var DAMPicker = Ext.widget("DAMMainView", {features:[Ext.create("Ext.ux.grid.FiltersFeature",{encode:true,local:false})],id:"DAMPickerView", store:Ext.getStore("DAMPickerStore"),columns:columnsOver, multiSelect:false
    });
    DAMPicker.on("selectionchange", function(g, s){
        if (Ext.isEmpty(s)){
            Ext.getCmp("imagePickerAcceptBtn").disable();
        } else {
            Ext.getCmp("imagePickerAcceptBtn").enable();
        }
    });
    DAMPicker.on("itemdblclick", function(){
        try{
            Ext.getCmp("imagePickerAcceptBtn").fireEvent("click",Ext.getCmp("imagePickerAcceptBtn"));
        } catch(err){}
        });


        component.add(DAMPicker);
    },

    onImagePickerAcceptBtnClick: function(button, e, eOpts) {
        if (CKEOptions.type=="Image"){

            if (CKEOptions.soloMode){
                window.opener.saveImage(CKEOptions.contentId,button.up().up().getComponent(0).getSelectionModel().getLastSelected().get("id"));
            } else {
                var fileURL="/image?file-id="+button.up().up().getComponent(0).getSelectionModel().getLastSelected().get("originalFileId");
                window.opener.CKEDITOR.tools.callFunction( CKEOptions.CKEditorFuncNum, fileURL );
            }
        }
        window.close();
    }

});