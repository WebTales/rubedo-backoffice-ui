/*
 * File: resources/extFinder/app/controller/ACLController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('extFinder.controller.ACLController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.ACLController',

    views: [
        'MainViewport',
        'DAMPickerWindow',
        'DamMainView'
    ],

    onComponentRender: function(component, eOpts) {
        if (!Ext.isEmpty(component.ACL)) {   
            if (ACL.interfaceRights[component.ACL]===false){
                component.hide();
                component.clearListeners();
                component.fireEvent=Ext.emptyFn;
            }
        }
    },

    onComponentBeforeRender: function(component) {
        if (component.localiserId){
            var configs = Rubedo.RubedoInterfaceLoc[component.localiserId];
            if (!Ext.isEmpty(configs)) {
                Ext.apply(component, configs);
                if (!Ext.isEmpty(configs.tooltip)) {
                    component.setTooltip(configs.tooltip);
                }
            }
            if ((component.isXType("button"))&&(component.scale=="large")){
                component.minWidth=48;
            }
        }
        if ((component.isXType("field"))||(component.isXType("checkboxgroup"))||(component.isXType("radiogroup"))){
            component.labelSeparator=" ";
            if (component.name=="localizable"){
                //temporary localiser hide
                component.hide();
            }
        }
    },

    init: function(application) {
        Ext.require("Rubedo.controller.LocalisationController");
        Ext.create("Rubedo.store.CurrentUserDataStore");
        var me=this;
        var options = decodeURIComponent(window.location.search.slice(1))
        .split('&')
        .reduce(function _reduce (a, b) {
            b = b.split('=');
            a[b[0]] = b[1];
            return a;
        }, {});
            if (!Ext.isEmpty(options.CKEditorFuncNum)){
                Ext.define('CKEOptions', {
                    singleton:true,
                    CKEditorFuncNum:options.CKEditorFuncNum,
                    type:options.type
                });

            } else if (!Ext.isEmpty(options.soloMode)){
                Ext.define('CKEOptions', {
                    singleton:true,
                    soloMode:true,
                    allowedDT: !Ext.isEmpty(options.allowedDT) ? options.allowedDT: null
                });

            }

            Ext.define('ACL', {
                singleton:true,
                CSRFToken:"notYetSet",
                interfaceRights:{
                    "read.ui.taxonomy":false,
                    "write.ui.taxonomy":false,
                    "read.ui.contentTypes":false,
                    "write.ui.contentTypes":false,
                    "read.ui.contents":false,
                    "write.ui.contents":false,
                    "read.ui.contents.draft":false,
                    "read.ui.contents.pending":false,
                    "read.ui.contents.published":false,
                    "write.ui.contents.draft":false,
                    "write.ui.contents.pending":false,
                    "write.ui.contents.published":false,
                    "write.ui.contents.draftToPending":false,
                    "write.ui.contents.pendingToDraft":false,
                    "write.ui.contents.pendingToPublished":false,
                    "write.ui.contents.putOnline":false,
                    "write.ui.contents.putOffline":false,
                    "read.ui.masks":false,
                    "write.ui.masks":false,
                    "read.ui.users":false,
                    "write.ui.users":false,
                    "read.ui.sites":false,
                    "write.ui.sites":false,
                    "read.ui.pages":false,
                    "write.ui.pages":false,
                    "read.ui.medias":false,
                    "write.ui.medias":false,
                    "read.ui.groups":false,
                    "write.ui.groups":false,
                    "read.ui.workflows":false,
                    "write.ui.workflows":false,
                    "exe.ui.elasticSearch":false
                }
            });
            Ext.Ajax.on("beforerequest", function(conn, options){
                if (Ext.isEmpty(options.params)){
                    options.params={};
                }
                if(!Ext.isEmpty(Ext.getStore("CurrentUserDataStore").getRange())){
                    options.params.workingLanguage=Ext.getStore("CurrentUserDataStore").getRange()[0].get("workingLanguage");
                }
                options.params.token=ACL.CSRFToken;
            });


            this.control({
                "component": {
                    render: this.onComponentRender,
                    beforerender: this.onComponentBeforeRender
                }
            });
    },

    onLaunch: function() {
        var task = new Ext.util.DelayedTask(function(){
            try {
                Rubedo.controller.LocalisationController.prototype.init();
            } catch (err){}
                Ext.getStore("CurrentUserDataStore").load();

                Ext.Ajax.request({
                    url:'current-user/get-token',
                    method:"GET",
                    params:{
                    },
                    success:function(response){
                        ACL.CSRFToken=Ext.JSON.decode(response.responseText).token;
                    },
                    failure:function(){
                        Ext.Msg.alert('Erreur', 'Erreur dans la récupération du jeton de sécurité');
                    }
                });
                Ext.Ajax.request({
                    url:'acl',
                    method:"GET",
                    params:{
                        data: Ext.JSON.encode(ACL.interfaceRights)
                    },
                    success:function(response){
                        var task2 = new Ext.util.DelayedTask(function(){
                            ACL.interfaceRights=Ext.JSON.decode(response.responseText);
                            Rubedo.controller.LocalisationController.prototype.updateLocalisationSingletons();
                            Ext.getCmp("MainViewport").add(Ext.widget("searchResultsWindow",{MediaPickerMode:true}));
                        });
                        task2.delay(400);
                    },
                    failure:function(){
                        Ext.Msg.alert('Erreur', 'Erreur dans la récupération des droits');
                    }
                });
                try {
                    Ext.util.CSS.removeStyleSheet("loading-bar-style");
                    Ext.getElementById("loading-bar").parentNode.removeChild(Ext.getElementById("loading-bar"));
                } catch (err) {
                    console.log("dom element removal anomaly");
                }
            });
            task.delay(400);
    }

});
