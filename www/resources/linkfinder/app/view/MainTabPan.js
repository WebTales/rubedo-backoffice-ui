/*
 * File: resources/linkfinder/app/view/MainTabPan.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('linkfinder.view.MainTabPan', {
    extend: 'Ext.tab.Panel',
    alias: 'widget.MainTabPan',

    id: 'MainTabPan',
    activeTab: 0,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    bodyPadding: 10,
                    title: 'Lien sur page',
                    dockedItems: [
                        {
                            xtype: 'button',
                            anchor: '100%',
                            dock: 'bottom',
                            id: 'insertPageLink',
                            scale: 'medium',
                            text: 'Ins√©rer un lien vers cette page'
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        flex: 1
                    },
                    listeners: {
                        afterrender: {
                            fn: me.onPanelAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onPanelAfterRender: function(component, eOpts) {
        var store=Ext.create("Ext.data.TreeStore", {
            autoLoad: false,
            autoSync: false,
            model: 'linkfinder.model.taxonomyTermModel',
            proxy: {
                type: 'ajax',
                api: {
                    read: 'taxonomy-terms/navigation-tree'
                },
                reader: {
                    type: 'json',
                    getResponseData: function(response) {
                        var data, error;

                        try {
                            data = Ext.decode(response.responseText);
                            if (Ext.isDefined(data.data)){data.children=data.data;}// error fix
                            return this.readRecords(data);
                        } catch (ex) {
                            error = new Ext.data.ResultSet({
                                total  : 0,
                                count  : 0,
                                records: [],
                                success: false,
                                message: ex.message
                            });

                            this.fireEvent('exception', this, response, error);
                            console.log(ex);

                            Ext.Logger.warn('Unable to parse the JSON returned by the server');

                            return error;
                        }
                    },
                    messageProperty: 'message'
                }
            },
            sorters: {
                property: 'orderValue'
            }
        });
        var picker=Ext.create("Ext.ux.TreePicker", {
            store:store,
            displayField:"text",
            allowBlank:false,
            valueField:"id",
            labelSeparator:" ",
            labelWidth:60,
            ignoreIsNotPage:false,
            fieldLabel:"Page",
            id:"pagePicker",
            anchor: "100%",
            plugins:[Ext.create("Ext.ux.form.field.ClearButton")],
            name:"page"
        });

        component.insert(0,picker);
    }

});