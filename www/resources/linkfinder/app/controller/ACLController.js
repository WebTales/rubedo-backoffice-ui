/*
 * File: resources/linkfinder/app/controller/ACLController.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('linkfinder.controller.ACLController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.ACLController',

    models: [
        'taxonomyTermModel'
    ],
    views: [
        'MainViewport',
        'MainTabPan'
    ],

    onComponentRender: function(component, eOpts) {
        if (!Ext.isEmpty(component.ACL)) {   
            if (ACL.interfaceRights[component.ACL]===false){
                component.hide();
                component.clearListeners();
                component.fireEvent=Ext.emptyFn;
            }
        }
    },

    onInsertPageLinkClick: function(button, e, eOpts) {
        var me=this;
        if (Ext.getCmp("pagePicker").isValid()){
            Ext.Ajax.request({
                url: 'xhr-get-page-url',
                method:'GET',
                params: {
                    "page-id": Ext.getCmp("pagePicker").getValue()
                },
                success: function(response){
                    var targetedUrl = Ext.JSON.decode(response.responseText).url;
                    me.sendLink(targetedUrl);
                },
                failure:function(){
                    Ext.Msg.alert('Erreur', 'Erreur dans la récupération de l\'url de la page');
                }
            });
        }
    },

    init: function(application) {
        var me=this;
        var options = decodeURIComponent(window.location.search.slice(1))
        .split('&')
        .reduce(function _reduce (a, b) {
            b = b.split('=');
            a[b[0]] = b[1];
            return a;
        }, {});
            if (!Ext.isEmpty(options.ckinstance)){
                Ext.define('CKEOptions', {
                    singleton:true,
                    CKEditorInstance:options.ckinstance
                });

            }


            Ext.define('ACL', {
                singleton:true,
                CSRFToken:"notYetSet",
                interfaceRights:{
                    "read.ui.taxonomy":false,
                    "write.ui.taxonomy":false,
                    "read.ui.contentTypes":false,
                    "write.ui.contentTypes":false,
                    "read.ui.contents":false,
                    "write.ui.contents":false,
                    "read.ui.contents.draft":false,
                    "read.ui.contents.pending":false,
                    "read.ui.contents.published":false,
                    "write.ui.contents.draft":false,
                    "write.ui.contents.pending":false,
                    "write.ui.contents.published":false,
                    "write.ui.contents.draftToPending":false,
                    "write.ui.contents.pendingToDraft":false,
                    "write.ui.contents.pendingToPublished":false,
                    "write.ui.contents.putOnline":false,
                    "write.ui.contents.putOffline":false,
                    "read.ui.masks":false,
                    "write.ui.masks":false,
                    "read.ui.users":false,
                    "write.ui.users":false,
                    "read.ui.sites":false,
                    "write.ui.sites":false,
                    "read.ui.pages":false,
                    "write.ui.pages":false,
                    "read.ui.medias":false,
                    "write.ui.medias":false,
                    "read.ui.groups":false,
                    "write.ui.groups":false,
                    "read.ui.workflows":false,
                    "write.ui.workflows":false,
                    "exe.ui.elasticSearch":false
                }
            });
            Ext.Ajax.on("beforerequest", function(conn, options){
                options.params.token=ACL.CSRFToken;
            });

            this.control({
                "component": {
                    render: this.onComponentRender
                },
                "#insertPageLink": {
                    click: this.onInsertPageLinkClick
                }
            });
    },

    onLaunch: function() {
        Ext.Ajax.request({
            url:'current-user/get-token',
            method:'GET',
            params:{
            },
            success:function(response){
                ACL.CSRFToken=Ext.JSON.decode(response.responseText).token;
            },
            failure:function(){
                Ext.Msg.alert('Erreur', 'Erreur dans la récupération du jeton de sécurité');
            }
        });
        Ext.Ajax.request({
            url:'acl',
            method:'GET',
            params:{
                data: Ext.JSON.encode(ACL.interfaceRights)
            },
            success:function(response){
                ACL.interfaceRights=Ext.JSON.decode(response.responseText);
                Ext.getCmp("MainViewport").add(Ext.widget("MainTabPan"));
            },
            failure:function(){
                Ext.Msg.alert('Erreur', 'Erreur dans la récupération des droits');
            }
        });
        try {
            Ext.util.CSS.removeStyleSheet("loading-bar-style");
            Ext.getElementById("loading-bar").parentNode.removeChild(Ext.getElementById("loading-bar"));
        } catch (err) {
            console.log("dom element removal anomaly");
        }
    },

    sendLink: function(link) {
        var editor = window.opener.CKEDITOR.instances[CKEOptions.CKEditorInstance];
        var selection=editor.getSelection();
        if (selection.getType()==1){
            editor.insertHtml('<a href="'+link+'">'+link+'</a>');
        } else if (selection.getType()==2){
            var text=selection.getSelectedText();
            if (Ext.isEmpty(text)){
                text=link;
            }
            editor.insertHtml('<a href="'+link+'">'+text+'</a>');

        } else if (selection.getType()==3){
            var newElement=window.opener.CKEDITOR.dom.element.createFromHtml('<a href="'+link+'"></a>');
            var selElement=selection.getSelectedElement();
            newElement.append(selElement);
            editor.insertElement(newElement);

        }
        window.close();
    }

});
