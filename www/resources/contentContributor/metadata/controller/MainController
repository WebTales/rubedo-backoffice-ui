{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "taxonomyTermModel"
        ],
        "designer|userClassName": "MainController",
        "designer|userAlias": "MainController"
    },
    "designerId": "7b179740-bc32-424a-9f22-d87b248d4bef",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initializeContentForm",
                "designer|params": [
                    "contentType"
                ],
                "implHandler": [
                    "this.renderMainFields(contentType.fields);",
                    "this.renderTaxoFields(contentType.vocabularies);",
                    "if (AppGlobals.editMode){",
                    "    var task = new Ext.util.DelayedTask(function(){",
                    "        Ext.getCmp(\"MainForm\").setTitle(Ext.getStore(\"Contents\").getRange()[0].get(\"text\"));",
                    "        var myWorkingLanguage=ACL.workingLanguage;",
                    "        var fieldValues=Ext.getStore(\"Contents\").getRange()[0].get(\"fields\");",
                    "        var myi18n=Ext.getStore(\"Contents\").getRange()[0].get(\"i18n\");",
                    "        console.log(fieldValues);",
                    "        if (!Ext.isEmpty(myi18n[myWorkingLanguage])){",
                    "            Ext.apply(fieldValues,myi18n[myWorkingLanguage].fields);",
                    "            console.log(myi18n[myWorkingLanguage].fields);",
                    "            console.log(fieldValues);",
                    "        }",
                    "        ",
                    "        Ext.getCmp(\"MainForm\").getForm().setValues(fieldValues);",
                    "        Ext.Object.each(fieldValues, function(key, value, myself){",
                    "            if (Ext.isArray(value)) {",
                    "                var multiField=Ext.getCmp('MainForm').query('[name='+key+']')[0];",
                    "                var y=0;",
                    "                if (multiField.multivalued) {",
                    "                    Ext.Array.each(value,function(val,index){",
                    "                        if (index>0) {",
                    "                            multiField.up().getComponent('fieldReplicatorBtn').fireEvent(\"click\",multiField.up().getComponent('fieldReplicatorBtn'));",
                    "                        }",
                    "                        Ext.getCmp('MainForm').query('[name='+key+']')[index].setValue(val);",
                    "                    }); ",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "",
                    "        var myTaxo =Ext.clone(Ext.getStore(\"Contents\").getRange()[0].get(\"taxonomy\"));",
                    "        if (!Ext.isEmpty(Ext.getCmp(\"taxonomyFieldset\"))){",
                    "            Ext.Array.forEach(Ext.getCmp(\"taxonomyFieldset\").query(\"field\"), function(leField){",
                    "                if (!Ext.isEmpty(myTaxo[leField.name])){",
                    "                    leField.setValue(myTaxo[leField.name]);",
                    "                }",
                    "            });",
                    "        }",
                    "    });",
                    "    task.delay(200);",
                    "",
                    "} else {",
                    "    Ext.getCmp(\"MainForm\").setTitle(Rubedo.RubedoAutomatedElementsLoc.newContentText+\" \"+contentType.type);",
                    "}",
                    "",
                    "window.parent.jQuery(\"#contentModal\").modal(\"loading\");"
                ]
            },
            "designerId": "d6f02e2a-9d7e-4173-8881-f0abc95df10f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderMainFields",
                "designer|params": [
                    "fields"
                ],
                "implHandler": [
                    "var target = Ext.getCmp(\"MainForm\");",
                    "Ext.Array.forEach(fields, function(field,index){",
                    "    var configurator=Ext.clone(field.config);",
                    "    if (field.cType =='treepicker'){",
                    "        configurator.store = Ext.create(\"Ext.data.TreeStore\", {",
                    "            autoLoad: false,",
                    "            autoSync: false,",
                    "            remoteFilter: true,",
                    "            model: 'ContentContributor.model.taxonomyTermModel',",
                    "            proxy: {",
                    "                type: 'ajax',",
                    "                api: {",
                    "                    read: 'taxonomy-terms/navigation-tree'",
                    "                },",
                    "                reader: {",
                    "                    type: 'json',",
                    "                    getResponseData: function(response) {",
                    "                        var data, error;",
                    "",
                    "                        try {",
                    "                            data = Ext.decode(response.responseText);",
                    "                            if (Ext.isDefined(data.data)){data.children=data.data;}// error fix",
                    "                            return this.readRecords(data);",
                    "                        } catch (ex) {",
                    "                            error = new Ext.data.ResultSet({",
                    "                                total  : 0,",
                    "                                count  : 0,",
                    "                                records: [],",
                    "                                success: false,",
                    "                                message: ex.message",
                    "                            });",
                    "",
                    "                            this.fireEvent('exception', this, response, error);",
                    "                            console.log(ex);",
                    "",
                    "                            Ext.Logger.warn('Unable to parse the JSON returned by the server');",
                    "",
                    "                            return error;",
                    "                        }",
                    "                    },",
                    "                    messageProperty: 'message'",
                    "                }",
                    "            },",
                    "            sorters: {",
                    "                property: 'orderValue'",
                    "            }",
                    "        });",
                    "        configurator.store.load();",
                    "        configurator.valueField=\"id\";",
                    "        configurator.displayField=\"text\";",
                    "        configurator.plugins=[Ext.create(\"Ext.ux.form.field.ClearButton\")];",
                    "    }",
                    "    else if (field.cType == 'combobox') {",
                    "        var monStore=  Ext.create('Ext.data.Store', Ext.clone(field.store));",
                    "        configurator.store = monStore;",
                    "    }",
                    "    configurator.labelSeparator=\" \";",
                    "    try {var newField = Ext.widget(field.cType, configurator);} catch(err){",
                    "    var newField = Ext.create(field.cType, configurator);",
                    "}",
                    "var wrapping= Ext.widget(\"fieldWrapper\");",
                    "newField.anchor = '90%';",
                    "newField.style = '{float:left;}';",
                    "wrapping.add(newField);",
                    "wrapping.getComponent('helpBouton').setTooltip(configurator.tooltip);",
                    "if (Ext.isEmpty(configurator.tooltip)){",
                    "    wrapping.getComponent('helpBouton').hidden=true;",
                    "} ",
                    "if (newField.multivalued) {",
                    "    wrapping.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.duplicateText, itemId: 'fieldReplicatorBtn'}));",
                    "",
                    "}",
                    "target.add(wrapping);",
                    "",
                    "",
                    "});"
                ]
            },
            "designerId": "0276fe50-3119-4f29-9312-5e685ef0ce25"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "renderTaxoFields",
                "designer|params": [
                    "vocabularies"
                ],
                "implHandler": [
                    "Ext.Array.remove(vocabularies, \"navigation\");",
                    "if (!Ext.isEmpty(vocabularies)){",
                    "    var target = Ext.getCmp(\"MainForm\");",
                    "    var taxoFieldset = Ext.widget(\"fieldset\", {title:\"Taxonomie\", collapsible:true, id:\"taxonomyFieldset\",localiserId:\"taxonomyFieldset\"});",
                    "    var lesTaxo = vocabularies;",
                    "    var i=0;",
                    "    for (i=0; i<lesTaxo.length; i++) {",
                    "        var leVocab = Ext.getStore('TaxonomieDataJson').findRecord('id', lesTaxo[i]);",
                    "        if (leVocab.get(\"inputAsTree\")){",
                    "            var storeT = Ext.create(\"Ext.data.TreeStore\", {",
                    "                model:\"Rubedo.model.taxonomyTermModel\",",
                    "                remoteFilter:\"true\",",
                    "                proxy: {",
                    "                    type: 'ajax',",
                    "                    api: {",
                    "                        read: 'taxonomy-terms/tree'",
                    "                    },",
                    "                    reader: {",
                    "                        type: 'json',",
                    "                        messageProperty: 'message'",
                    "                    },",
                    "                    encodeFilters: function(filters) {",
                    "                        var min = [],",
                    "                            length = filters.length,",
                    "                            i = 0;",
                    "",
                    "                        for (; i < length; i++) {",
                    "                            min[i] = {",
                    "                                property: filters[i].property,",
                    "                                value   : filters[i].value",
                    "                            };",
                    "                            if (filters[i].type) {",
                    "                                min[i].type = filters[i].type;",
                    "                            }",
                    "                            if (filters[i].operator) {",
                    "                                min[i].operator = filters[i].operator;",
                    "                            }",
                    "                        }",
                    "                        return this.applyEncoding(min);",
                    "                    }",
                    "                },",
                    "                filters: {",
                    "                    property: 'vocabularyId',",
                    "                    value: leVocab.get(\"id\")",
                    "                }",
                    "",
                    "            });",
                    "            var toUse=\"Ext.ux.TreePicker\";",
                    "            if(leVocab.get(\"multiSelect\")){toUse=\"Ext.ux.TreeMultiPicker\";}",
                    "            if(leVocab.get(\"id\")=='navigation'){storeT.getProxy().api={read:\"taxonomy-terms/navigation-tree\"};}",
                    "            storeT.load();",
                    "            var selecteur = Ext.create(toUse, {",
                    "                name:leVocab.get(\"id\"),",
                    "                fieldLabel: leVocab.get(\"name\"),",
                    "                store: storeT,",
                    "                anchor:\"90%\",",
                    "                ignoreIsNotPage:true,",
                    "                displayField:\"text\",",
                    "                allowBlank: !leVocab.data.mandatory,",
                    "                plugins:[Ext.create(\"Ext.ux.form.field.ClearButton\")]",
                    "            });",
                    "",
                    "",
                    "        } else {",
                    "            var storeT = Ext.create('Ext.data.JsonStore', {",
                    "                model:\"ContentContributor.model.taxonomyTermModel\",",
                    "                remoteFilter:\"true\",",
                    "                proxy: {",
                    "                    type: 'ajax',",
                    "                    api: {",
                    "                        read: 'taxonomy-terms'",
                    "                    },",
                    "                    reader: {",
                    "                        type: 'json',",
                    "                        messageProperty: 'message',",
                    "                        root: 'data'",
                    "                    },",
                    "                    encodeFilters: function(filters) {",
                    "                        var min = [],",
                    "                            length = filters.length,",
                    "                            i = 0;",
                    "",
                    "                        for (; i < length; i++) {",
                    "                            min[i] = {",
                    "                                property: filters[i].property,",
                    "                                value   : filters[i].value",
                    "                            };",
                    "                            if (filters[i].type) {",
                    "                                min[i].type = filters[i].type;",
                    "                            }",
                    "                            if (filters[i].operator) {",
                    "                                min[i].operator = filters[i].operator;",
                    "                            }",
                    "                        }",
                    "                        return this.applyEncoding(min);",
                    "                    }",
                    "                },",
                    "                filters: {",
                    "                    property: 'vocabularyId',",
                    "                    value: leVocab.get(\"id\")",
                    "                }",
                    "",
                    "            });",
                    "            storeT.on(\"beforeload\", function(s,o){",
                    "                o.filters=Ext.Array.slice(o.filters,0,1);",
                    "                if (!Ext.isEmpty(o.params.comboQuery)){",
                    "",
                    "                    var newFilter=Ext.create('Ext.util.Filter', {",
                    "                        property:\"text\",",
                    "                        value:o.params.comboQuery,",
                    "                        operator:'like'",
                    "                    });",
                    "",
                    "                    o.filters.push(newFilter);",
                    "",
                    "                }",
                    "",
                    "",
                    "            });",
                    "",
                    "",
                    "            var selecteur = Ext.widget('comboboxselect', {",
                    "                name:leVocab.get(\"id\"),",
                    "                anchor:\"90%\",",
                    "                fieldLabel: leVocab.get(\"name\"),",
                    "                submitValue:false,",
                    "                autoScroll: false,",
                    "                store: storeT,",
                    "                queryMode: 'remote',",
                    "                queryParam: 'comboQuery',",
                    "                minChars:3,",
                    "                displayField: 'text',",
                    "                valueField: 'id',",
                    "                filterPickList: true,",
                    "                typeAhead: true,",
                    "                forceSelection: !leVocab.data.expandable,",
                    "                createNewOnEnter: leVocab.data.expandable,",
                    "                multiSelect: leVocab.data.multiSelect,",
                    "                allowBlank: !leVocab.data.mandatory",
                    "            });",
                    "        }",
                    "        if (AppGlobals.contextQueryType==\"simple\"){",
                    "            if (!Ext.isEmpty(AppGlobals.contextQuery.vocabularies[leVocab.get(\"id\")])) {",
                    "                selecteur.setValue(AppGlobals.contextQuery.vocabularies[leVocab.get(\"id\")].terms);",
                    "                if (!Ext.isEmpty(AppGlobals.contextQuery.vocabularies[leVocab.get(\"id\")].terms)){",
                    "                    selecteur.setReadOnly(true);",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        var enrobage =Ext.widget('fieldWrapper');",
                    "        enrobage.add(selecteur);",
                    "        enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);",
                    "        if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}",
                    "        taxoFieldset.add(enrobage);",
                    "",
                    "    }",
                    "    target.add(taxoFieldset);",
                    "    Ext.getCmp(\"taxonomyFieldset\").doLayout();",
                    "}"
                ]
            },
            "designerId": "1f3644c1-a25b-42ef-8afc-891570327f5c"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "Ext.require(\"Rubedo.view.CKEField\");",
                    "Ext.require(\"Rubedo.view.RHelpBtn\");",
                    "Ext.require(\"Rubedo.view.localiserField\");",
                    "Ext.require(\"Rubedo.view.localiserFieldComponent\");",
                    "Ext.require(\"Rubedo.view.externalMediaField\");",
                    "Ext.require(\"Rubedo.view.externalMediaFieldComponent\");",
                    "Ext.require(\"Ext.ux.TreePicker\");",
                    "Ext.require(\"Rubedo.view.DCEField\");",
                    "Ext.require(\"Rubedo.view.DCEFieldComponent\");",
                    "Ext.create(\"Rubedo.store.ContentSelectorStore\");",
                    "Ext.create(\"Rubedo.store.TCNDepComboCS\");",
                    "Ext.create(\"Rubedo.store.SystemCTStore\");",
                    "Ext.require(\"Rubedo.view.contentPickerGrid\");",
                    "Ext.require(\"Rubedo.view.contentPickerWindow\");",
                    "Ext.create(\"Rubedo.store.MediaTypesFORDAMPicker\");",
                    "Ext.create(\"Rubedo.store.DAMPickerStore\");",
                    "Ext.create(\"Rubedo.store.TaxonomyForDam2\");",
                    "Ext.require(\"Rubedo.view.DAMMainView\");",
                    "Ext.require(\"Rubedo.view.ImagePickerField\");",
                    "Ext.require(\"Rubedo.view.ImageFieldComponent\");",
                    "Ext.require(\"Rubedo.view.ImagePickerWindow\");",
                    "Ext.require(\"Rubedo.controller.LocalisationController\");",
                    "Ext.create(\"Rubedo.store.CurrentUserDataStore\");",
                    "Ext.define('AppGlobals', {singleton: true});"
                ]
            },
            "designerId": "c843c4bc-1c2b-4f28-be4e-8a92031da0a1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "fieldReplicate",
                "implHandler": [
                    "var nouvChamp=button.up().getComponent(1).cloneConfig();",
                    "nouvChamp.anchor = '90%';",
                    "nouvChamp.style = '{float:left;}';",
                    "var enrobage =Ext.widget('fieldWrapper');",
                    "enrobage.add(nouvChamp);",
                    "enrobage.getComponent('helpBouton').setTooltip(Rubedo.RubedoAutomatedElementsLoc.duplicateFieldText+\" \"+button.up().getComponent(1).fieldLabel);",
                    "var supprimeur = Ext.widget('button', {iconCls: 'close', margin: '0 0 0 5', tooltip: Rubedo.RubedoAutomatedElementsLoc.removeText, itemId: 'boutonEffaceurChamps'});",
                    "supprimeur.on('click', function(){",
                    "    button.valeursM--;",
                    "    button.up().up().remove(supprimeur.up());",
                    "});",
                    "enrobage.add(supprimeur);",
                    "button.up().up().insert(button.up().up().items.indexOf(button.up())+button.valeursM, enrobage);",
                    "button.valeursM++;"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "[itemId= 'fieldReplicatorBtn']"
            },
            "designerId": "dddb6b0f-91ca-4a48-a3e2-5242b233bddc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "mainAction",
                "implHandler": [
                    "var me=this;",
                    "var options = decodeURIComponent(window.location.search.slice(1))",
                    ".split('&')",
                    ".reduce(function _reduce (a, b) {",
                    "    b = b.split('=');",
                    "    a[b[0]] = b[1];",
                    "    return a;",
                    "}, {});",
                    "    ACL.workingLanguage=options.workingLanguage;",
                    "    var task = new Ext.util.DelayedTask(function(){",
                    "        if (Ext.isEmpty(options[\"edit-mode\"])){",
                    "            AppGlobals.currentPage=options[\"current-page\"];",
                    "            AppGlobals.currentWorkspace=options[\"current-workspace\"];",
                    "            if (!Ext.isEmpty(options.queryId)){",
                    "                Ext.getStore(\"QueriesStore\").filter(\"id\",options.queryId);",
                    "                Ext.getStore(\"QueriesStore\").addListener(\"load\", function(a, records){",
                    "                    if (!Ext.isEmpty(records)){",
                    "                        AppGlobals.contextQuery=records[0].get(\"query\");",
                    "                        AppGlobals.contextQueryType=records[0].get(\"type\");",
                    "                    } else {",
                    "                        Ext.Msg.alert('Erreur', 'Erreur dans la récupération de la requête de contexte');",
                    "                    }",
                    "                    if (!Ext.isEmpty(options.typeId)){",
                    "                        Ext.Ajax.request({",
                    "                            url: 'content-types/find-one',",
                    "                            params: {",
                    "                                id: options.typeId",
                    "                            },",
                    "                            success: function(response){",
                    "                                var result = Ext.JSON.decode(response.responseText).data;",
                    "                                AppGlobals.typeId=options.typeId;",
                    "                                Ext.getCmp(\"MainViewport\").add(Ext.widget(\"MainForm\"));",
                    "                                me.initializeContentForm(result);",
                    "                            }",
                    "                        });",
                    "                    }",
                    "                }, this, {single:true});",
                    "                } else {",
                    "                    if (!Ext.isEmpty(options.typeId)){",
                    "                        Ext.Ajax.request({",
                    "                            url: 'content-types/find-one',",
                    "                            params: {",
                    "                                id: options.typeId",
                    "                            },",
                    "                            success: function(response){",
                    "                                var result = Ext.JSON.decode(response.responseText).data;",
                    "                                AppGlobals.typeId=options.typeId;",
                    "                                Ext.getCmp(\"MainViewport\").add(Ext.widget(\"MainForm\"));",
                    "                                me.initializeContentForm(result);",
                    "                            }",
                    "                        });",
                    "                    }",
                    "                }",
                    "            } else {",
                    "                AppGlobals.editMode=true;",
                    "                Ext.getStore(\"Contents\").filter(\"id\",options['content-id']);",
                    "                Ext.getStore(\"Contents\").on(\"load\",function(){",
                    "                    var theTypeId=Ext.getStore(\"Contents\").getRange()[0].get(\"typeId\");",
                    "                    Ext.Ajax.request({",
                    "                        url: 'content-types/find-one',",
                    "                        params: {",
                    "                            id: theTypeId",
                    "                        },",
                    "                        success: function(response){",
                    "                            var result = Ext.JSON.decode(response.responseText).data;",
                    "                            AppGlobals.typeId=theTypeId;",
                    "                            Ext.getCmp(\"MainViewport\").add(Ext.widget(\"MainForm\"));",
                    "                            me.initializeContentForm(result);",
                    "                        }",
                    "                    });",
                    "                },this,{single:true});",
                    "                    Ext.getStore(\"Contents\").load();",
                    "                }",
                    "            });",
                    "            task.delay(700);"
                ]
            },
            "designerId": "fa0a12fd-4dbb-420d-b7fd-449bbd76522c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveContent",
                "implHandler": [
                    "if (Ext.getCmp(\"MainForm\").getForm().isValid()){",
                    "    if (AppGlobals.editMode){",
                    "        var currentContent = Ext.getStore(\"Contents\").getRange()[0];",
                    "        var myFields = Ext.getCmp(\"MainForm\").getForm().getValues();",
                    "        var taxoRes = currentContent.get(\"taxonomy\");",
                    "        if (!Ext.isEmpty(Ext.getCmp(\"taxonomyFieldset\"))){",
                    "            Ext.Array.forEach(Ext.getCmp(\"taxonomyFieldset\").query(\"field\"), function(leField){",
                    "                taxoRes[leField.name]=leField.getValue();",
                    "                delete myFields[leField.name];",
                    "            });",
                    "        }",
                    "        Ext.getStore(\"Contents\").addListener(\"write\", function(){",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, Rubedo.RubedoAutomatedElementsLoc.notifUpdate, function(){",
                    "                window.parent.destroyModal(\"add-content-window\");",
                    "            });",
                    "        },this, {single:true});",
                    "            currentContent.beginEdit();",
                    "            currentContent.set(\"taxonomy\",taxoRes);",
                    "            currentContent.set(\"fields\",myFields);",
                    "        \tvar i18n=currentContent.get(\"i18n\");",
                    "            i18n[ACL.workingLanguage]={fields:myFields};",
                    "            currentContent.set(\"i18n\",i18n);",
                    "            currentContent.endEdit();",
                    "",
                    "        } else {",
                    "            var myFields = Ext.getCmp(\"MainForm\").getForm().getValues();",
                    "            var newContent = Ext.create('ContentContributor.model.contentDataModel', {",
                    "                text:myFields.text,",
                    "                fields:myFields,",
                    "                taxonomy: { },",
                    "                online:true,",
                    "                status:button.cStatus,",
                    "                typeId:AppGlobals.typeId",
                    "",
                    "            });",
                    "            newContent.set(\"writeWorkspace\",AppGlobals.currentWorkspace);",
                    "            newContent.set(\"target\",[AppGlobals.currentWorkspace]);",
                    "            newContent.set(\"nativeLanguage\",ACL.workingLanguage);",
                    "            var taxoRes = {};",
                    "            if (!Ext.isEmpty(Ext.getCmp(\"taxonomyFieldset\"))){",
                    "                Ext.Array.forEach(Ext.getCmp(\"taxonomyFieldset\").query(\"field\"), function(leField){",
                    "                    taxoRes[leField.name]=leField.getValue();",
                    "                    delete myFields[leField.name];",
                    "                });",
                    "            }",
                    "            taxoRes.navigation=[AppGlobals.currentPage];",
                    "            newContent.set(\"taxonomy\",taxoRes);",
                    "            newContent.set(\"fields\",myFields);",
                    "            var i18n={ };",
                    "            i18n[ACL.workingLanguage]={fields:myFields};",
                    "            newContent.set(\"i18n\",i18n);",
                    "",
                    "            Ext.getCmp(\"MainForm\").setLoading(true);",
                    "            Ext.getStore(\"Contents\").addListener(\"write\", function(){",
                    "",
                    "                Ext.getCmp(\"MainForm\").setLoading(false);",
                    "                if (AppGlobals.contextQueryType==\"manual\"){",
                    "                    var queryRecord = Ext.getStore(\"QueriesStore\").getRange()[0];",
                    "                    var qArray =Ext.clone(queryRecord.get(\"query\"));",
                    "                    qArray.push(newContent.get(\"id\"));",
                    "                    queryRecord.set(\"query\", qArray);",
                    "                }",
                    "                Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.successTitle, Rubedo.RubedoAutomatedElementsLoc.notifCreate, function(){",
                    "                    window.parent.destroyModal(\"add-content-window\");",
                    "                });",
                    "            },this, {single:true});",
                    "",
                    "",
                    "                Ext.getStore(\"Contents\").add(newContent);",
                    "",
                    "            }",
                    "        } else {",
                    "            Ext.Msg.alert(Rubedo.RubedoAutomatedElementsLoc.errorTitle, Rubedo.RubedoAutomatedElementsLoc.invalidFieldsError);",
                    "        }"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#mainDraftBtn, #mainSubmitBtn, #mainPublishBtn"
            },
            "designerId": "289b0552-ea1b-433c-b490-5505ee4dcecc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onBasefieldBeforeRender",
                "implHandler": [
                    "if ((component.isXType(\"field\"))||(component.isXType(\"checkboxgroup\"))){",
                    "    component.labelSeparator=\" \";",
                    "    if (component.isXType(\"datefield\")){",
                    "        component.submitFormat='U';",
                    "        component.altFormats='U|m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j';",
                    "    }    ",
                    "}"
                ],
                "name": "beforerender",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Base",
                "designer|controlQuery": "field"
            },
            "designerId": "e49a3d10-6118-407b-aafc-b31289b44469"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onLaunch",
                "implHandler": [
                    "var task = new Ext.util.DelayedTask(function(){",
                    "    try {",
                    "        Rubedo.controller.LocalisationController.prototype.init();",
                    "    } catch (err){}",
                    "        Ext.getStore(\"CurrentUserDataStore\").load();",
                    "    });",
                    "    task.delay(400);"
                ]
            },
            "designerId": "65d9c46d-1d8e-46ca-a0e4-12e40db65f1e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onFieldBeforeRender",
                "implHandler": [
                    "if (component.localiserId){",
                    "    var configs = Rubedo.RubedoInterfaceLoc[component.localiserId];",
                    "    if (!Ext.isEmpty(configs)) {",
                    "        Ext.apply(component, configs);",
                    "        if (!Ext.isEmpty(configs.tooltip)) {",
                    "            component.setTooltip(configs.tooltip);",
                    "        }",
                    "    }",
                    "    if ((component.isXType(\"button\"))&&(component.scale==\"large\")){",
                    "        component.minWidth=48;",
                    "    }",
                    "}",
                    "if ((component.isXType(\"field\"))||(component.isXType(\"checkboxgroup\"))||(component.isXType(\"radiogroup\"))){",
                    "    component.labelSeparator=\" \";",
                    "    if (component.name==\"localizable\"){",
                    "        //temporary localiser hide",
                    "        component.hide();",
                    "    }",
                    "}"
                ],
                "name": "beforerender",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Base",
                "designer|controlQuery": "component"
            },
            "designerId": "f78e570d-75fb-438b-ae30-7d772ceacb60"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onFieldAdded",
                "implHandler": [
                    "if (component.localiserId){",
                    "    var configs = Rubedo.RubedoInterfaceLoc[component.localiserId];",
                    "    if (!Ext.isEmpty(configs)) {",
                    "        Ext.apply(component, configs);",
                    "    }",
                    "}",
                    "if (!Ext.isEmpty(component.RTip)){",
                    "    component.anchor=\"90%\";",
                    "    container.insert(pos,Ext.widget(\"RHelpBtn\", {tooltip:component.RTip}));",
                    "}"
                ],
                "name": "added",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Base",
                "designer|controlQuery": "field, checkboxgroup, radiogroup"
            },
            "designerId": "affcae68-1533-4649-ac48-f9e1cecda5fd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onFieldsetAfterRender",
                "implHandler": [
                    "var task = new Ext.util.DelayedTask(function(){",
                    "    component.setTitle(component.title);",
                    "});",
                    "task.delay(100);"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.form.FieldSet",
                "designer|controlQuery": "fieldset"
            },
            "designerId": "5457ae27-bedc-410b-ace6-8a5bc6e66b9d"
        }
    ]
}