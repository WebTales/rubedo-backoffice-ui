{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "MainController",
        "designer|userAlias": "MainController",
        "models": [
            "taxonomyTermModel"
        ]
    },
    "id": "ExtBox1-ext-gen7085",
    "designerId": "7b179740-bc32-424a-9f22-d87b248d4bef",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "initializeContentForm",
                "fn": "initializeContentForm",
                "designer|params": [
                    "contentType"
                ],
                "implHandler": [
                    "Ext.getCmp(\"MainForm\").setTitle(\"Nouveau contenu : \"+contentType.type);",
                    "this.renderMainFields(contentType.fields);",
                    "this.renderTaxoFields(contentType.vocabularies);"
                ]
            },
            "designerId": "d6f02e2a-9d7e-4173-8881-f0abc95df10f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderMainFields",
                "fn": "renderMainFields",
                "designer|params": [
                    "fields"
                ],
                "implHandler": [
                    "var target = Ext.getCmp(\"MainForm\");",
                    "Ext.Array.forEach(fields, function(field,index){",
                    "    var configurator=Ext.clone(field.config);",
                    "    configurator.labelSeparator=\" \";",
                    "    var newField= Ext.widget(field.cType, configurator);",
                    "    var wrapping= Ext.widget(\"fieldWrapper\");",
                    "    newField.anchor = '90%';",
                    "    newField.style = '{float:left;}';",
                    "    wrapping.add(newField);",
                    "    wrapping.getComponent('helpBouton').setTooltip(configurator.tooltip);",
                    "    if (Ext.isEmpty(configurator.tooltip)){",
                    "        wrapping.getComponent('helpBouton').hidden=true;",
                    "    } ",
                    "    if (newField.multivalued) {",
                    "        enrobage.add(Ext.widget('button', {iconCls: 'add',valeursM: 1, margin: '0 0 0 5', tooltip: 'Valeurs multiples', itemId: 'fieldReplicatorBtn'}));",
                    "",
                    "    }",
                    "    target.add(wrapping);",
                    "",
                    "",
                    "});"
                ]
            },
            "designerId": "0276fe50-3119-4f29-9312-5e685ef0ce25"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "renderTaxoFields",
                "fn": "renderTaxoFields",
                "designer|params": [
                    "vocabularies"
                ],
                "implHandler": [
                    "Ext.Array.remove(vocabularies, \"navigation\");",
                    "if (!Ext.isEmpty(vocabularies)){",
                    "    var target = Ext.getCmp(\"MainForm\");",
                    "    var taxoFieldset = Ext.widget(\"fieldset\", {title:\"Taxonomie\", collapsible:true, id:\"taxonomyFieldset\"});",
                    "    var lesTaxo = vocabularies;",
                    "    var i=0;",
                    "    for (i=0; i<lesTaxo.length; i++) {",
                    "        var leVocab = Ext.getStore('TaxonomieDataJson').findRecord('id', lesTaxo[i]);",
                    "        var storeT = Ext.create('Ext.data.JsonStore', {",
                    "            model:\"ContentContributor.model.taxonomyTermModel\",",
                    "            remoteFilter:\"true\",",
                    "            proxy: {",
                    "                type: 'ajax',",
                    "                api: {",
                    "                    read: 'taxonomy-terms'",
                    "                },",
                    "                reader: {",
                    "                    type: 'json',",
                    "                    messageProperty: 'message',",
                    "                    root: 'data'",
                    "                },",
                    "                encodeFilters: function(filters) {",
                    "                    var min = [],",
                    "                        length = filters.length,",
                    "                        i = 0;",
                    "",
                    "                    for (; i < length; i++) {",
                    "                        min[i] = {",
                    "                            property: filters[i].property,",
                    "                            value   : filters[i].value",
                    "                        };",
                    "                        if (filters[i].type) {",
                    "                            min[i].type = filters[i].type;",
                    "                        }",
                    "                        if (filters[i].operator) {",
                    "                            min[i].operator = filters[i].operator;",
                    "                        }",
                    "                    }",
                    "                    return this.applyEncoding(min);",
                    "                }",
                    "            },",
                    "            filters: {",
                    "                property: 'vocabularyId',",
                    "                value: leVocab.get(\"id\")",
                    "            }",
                    "",
                    "        });",
                    "        storeT.on(\"beforeload\", function(s,o){",
                    "            o.filters=Ext.Array.slice(o.filters,0,1);",
                    "            if (!Ext.isEmpty(o.params.comboQuery)){",
                    "",
                    "                var newFilter=Ext.create('Ext.util.Filter', {",
                    "                    property:\"text\",",
                    "                    value:o.params.comboQuery,",
                    "                    operator:'like'",
                    "                });",
                    "",
                    "                o.filters.push(newFilter);",
                    "",
                    "            }",
                    "",
                    "",
                    "        });",
                    "",
                    "",
                    "        var selecteur = Ext.widget('comboboxselect', {",
                    "            name:leVocab.get(\"id\"),",
                    "            anchor:\"90%\",",
                    "            fieldLabel: leVocab.get(\"name\"),",
                    "            submitValue:false,",
                    "            autoScroll: false,",
                    "            store: storeT,",
                    "            queryMode: 'remote',",
                    "            queryParam: 'comboQuery',",
                    "            minChars:3,",
                    "            displayField: 'text',",
                    "            valueField: 'id',",
                    "            filterPickList: true,",
                    "            typeAhead: true,",
                    "            forceSelection: !leVocab.data.expandable,",
                    "            createNewOnEnter: leVocab.data.expandable,",
                    "            multiSelect: leVocab.data.multiSelect,",
                    "            allowBlank: !leVocab.data.mandatory",
                    "        });",
                    "        if (AppGlobals.contextQueryType==\"simple\"){",
                    "            if (!Ext.isEmpty(AppGlobals.contextQuery.vocabularies[leVocab.get(\"id\")])) {",
                    "                selecteur.setValue(AppGlobals.contextQuery.vocabularies[leVocab.get(\"id\")].terms);",
                    "                if (!Ext.isEmpty(AppGlobals.contextQuery.vocabularies[leVocab.get(\"id\")].terms)){",
                    "                    selecteur.setReadOnly(true);",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        var enrobage =Ext.widget('fieldWrapper');",
                    "        enrobage.add(selecteur);",
                    "        enrobage.getComponent('helpBouton').setTooltip(leVocab.data.helpText);",
                    "        if (Ext.isEmpty(leVocab.data.helpText)){enrobage.getComponent('helpBouton').hide();}",
                    "        taxoFieldset.add(enrobage);",
                    "",
                    "    }",
                    "    target.add(taxoFieldset);",
                    "    Ext.getCmp(\"taxonomyFieldset\").doLayout();",
                    "}"
                ]
            },
            "designerId": "1f3644c1-a25b-42ef-8afc-891570327f5c"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "init",
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "Ext.require(\"Rubedo.view.CKEField\");",
                    "Ext.require(\"Rubedo.view.localiserField\");",
                    "Ext.define('AppGlobals', {singleton: true});"
                ]
            },
            "designerId": "c843c4bc-1c2b-4f28-be4e-8a92031da0a1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "fieldReplicate",
                "fn": "fieldReplicate",
                "implHandler": [
                    "var nouvChamp=button.up().getComponent(1).cloneConfig();",
                    "nouvChamp.anchor = '90%';",
                    "nouvChamp.style = '{float:left;}';",
                    "var enrobage =Ext.widget('fieldWrapper');",
                    "enrobage.add(nouvChamp);",
                    "enrobage.getComponent('helpBouton').setTooltip(\"Réplique du champ \"+button.up().getComponent(1).fieldLabel);",
                    "var supprimeur = Ext.widget('button', {iconCls: 'close', margin: '0 0 0 5', tooltip: 'Enlever', itemId: 'boutonEffaceurChamps'});",
                    "supprimeur.on('click', function(){",
                    "    button.valeursM--;",
                    "    button.up().up().remove(supprimeur.up());",
                    "});",
                    "enrobage.add(supprimeur);",
                    "button.up().up().insert(button.up().up().items.indexOf(button.up())+button.valeursM, enrobage);",
                    "button.valeursM++;"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "[itemId= 'boutonReplicateurChamps']"
            },
            "designerId": "dddb6b0f-91ca-4a48-a3e2-5242b233bddc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "mainAction",
                "fn": "mainAction",
                "implHandler": [
                    "var me=this;",
                    "var options = decodeURIComponent(window.location.search.slice(1))",
                    ".split('&')",
                    ".reduce(function _reduce (a, b) {",
                    "    b = b.split('=');",
                    "    a[b[0]] = b[1];",
                    "    return a;",
                    "}, {});",
                    "AppGlobals.currentPage=options[\"current-page\"];",
                    "AppGlobals.currentWorkspace=options[\"current-workspace\"];",
                    "    if (!Ext.isEmpty(options.queryId)){",
                    "        Ext.getStore(\"QueriesStore\").filter(\"id\",options.queryId);",
                    "        Ext.getStore(\"QueriesStore\").addListener(\"load\", function(a, records){",
                    "            if (!Ext.isEmpty(records)){",
                    "                AppGlobals.contextQuery=records[0].get(\"query\");",
                    "                AppGlobals.contextQueryType=records[0].get(\"type\");",
                    "            } else {",
                    "                Ext.Msg.alert('Erreur', 'Erreur dans la récupération de la requête de contexte');",
                    "            }",
                    "            if (!Ext.isEmpty(options.typeId)){",
                    "                Ext.Ajax.request({",
                    "                    url: 'content-types/find-one',",
                    "                    params: {",
                    "                        id: options.typeId",
                    "                    },",
                    "                    success: function(response){",
                    "                        var result = Ext.JSON.decode(response.responseText).data;",
                    "                        AppGlobals.typeId=options.typeId;",
                    "                        Ext.getCmp(\"MainViewport\").add(Ext.widget(\"MainForm\"));",
                    "                        me.initializeContentForm(result);",
                    "                    }",
                    "                });",
                    "            }",
                    "        }, this, {single:true});",
                    "        } else {",
                    "            if (!Ext.isEmpty(options.typeId)){",
                    "                Ext.Ajax.request({",
                    "                    url: 'content-types/find-one',",
                    "                    params: {",
                    "                        id: options.typeId",
                    "                    },",
                    "                    success: function(response){",
                    "                        var result = Ext.JSON.decode(response.responseText).data;",
                    "                        AppGlobals.typeId=options.typeId;",
                    "                        Ext.getCmp(\"MainViewport\").add(Ext.widget(\"MainForm\"));",
                    "                        me.initializeContentForm(result);",
                    "                    }",
                    "                });",
                    "            }",
                    "        }",
                    ""
                ]
            },
            "designerId": "fa0a12fd-4dbb-420d-b7fd-449bbd76522c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "saveContent",
                "fn": "saveContent",
                "implHandler": [
                    "if (Ext.getCmp(\"MainForm\").getForm().isValid()){",
                    "    if (Ext.getCmp(\"MainForm\").isUpdatingContent){",
                    "",
                    "    } else {",
                    "        var myFields = Ext.getCmp(\"MainForm\").getForm().getValues();",
                    "        var newContent = Ext.create('ContentContributor.model.contentDataModel', {",
                    "            text:myFields.text,",
                    "            fields:myFields,",
                    "            taxonomy: { },",
                    "            online:true,",
                    "            status:button.cStatus,",
                    "            typeId:AppGlobals.typeId",
                    "",
                    "        });",
                    "        newContent.set(\"writeWorkspace\",AppGlobals.currentWorkspace);",
                    "        newContent.set(\"target\",[AppGlobals.currentWorkspace]);",
                    "        var taxoRes = {};",
                    "        Ext.Array.forEach(Ext.getCmp(\"taxonomyFieldset\").query(\"field\"), function(leField){",
                    "            taxoRes[leField.name]=leField.getValue();            ",
                    "        });",
                    "        taxoRes.navigation=[AppGlobals.currentPage];",
                    "        newContent.set(\"taxonomy\",taxoRes);",
                    "        ",
                    "        Ext.getCmp(\"MainForm\").setLoading(true);",
                    "        Ext.getStore(\"Contents\").addListener(\"write\", function(){",
                    "",
                    "            Ext.getCmp(\"MainForm\").setLoading(false);",
                    "            if (AppGlobals.contextQueryType==\"manual\"){",
                    "                var queryRecord = Ext.getStore(\"QueriesStore\").getRange()[0];",
                    "                var qArray =Ext.clone(queryRecord.get(\"query\"));",
                    "                qArray.push(newContent.get(\"id\"));",
                    "                queryRecord.set(\"query\", qArray);",
                    "            }",
                    "            Ext.Msg.alert('Succès', 'Le nouveau contenu a bien été enregistré', function(){",
                    "                window.parent.destroyModal(\"add-content-window\");",
                    "            });",
                    "        },this, {single:true});",
                    "",
                    "",
                    "            Ext.getStore(\"Contents\").add(newContent);",
                    "",
                    "        }",
                    "    } else {",
                    "        Ext.Msg.alert('Erreur', 'Certains champs ne sont pas valides');",
                    "    }"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#mainDraftBtn, #mainSubmitBtn, #mainPublishBtn"
            },
            "designerId": "289b0552-ea1b-433c-b490-5505ee4dcecc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onBasefieldBeforeRender",
                "fn": "onBasefieldBeforeRender",
                "implHandler": [
                    "if ((abstractcomponent.isXType(\"field\"))||(abstractcomponent.isXType(\"checkboxgroup\"))){",
                    "    abstractcomponent.labelSeparator=\" \";",
                    "    if (abstractcomponent.isXType(\"datefield\")){",
                    "        abstractcomponent.submitFormat='U';",
                    "        abstractcomponent.altFormats='U|m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j';",
                    "    }    ",
                    "}"
                ],
                "name": "beforerender",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Base",
                "designer|controlQuery": "field"
            },
            "designerId": "e49a3d10-6118-407b-aafc-b31289b44469"
        }
    ]
}