{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "MainStoresController",
        "designer|userAlias": "MainStoresController"
    },
    "designerId": "5affe889-8d2a-4e2c-b305-55cc48a45c07",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "var me = this;",
                    "Ext.data.StoreManager.each(function(store){",
                    "    //events for optimised stores",
                    "    if (store.isOptimised){",
                    "        store.on(\"load\", function(theStore,records,successful){",
                    "            if (successful) {",
                    "                theStore.isUsed=true;",
                    "            }",
                    "        });",
                    "        store.on(\"clear\", function(theStore){",
                    "            theStore.isUsed=false;",
                    "        });",
                    "        store.on(\"write\", function(theStore,roperation){",
                    "            me.reloadActiveBrothers(theStore.usedCollection, theStore.storeId);",
                    "        });",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "    }",
                    "",
                    "    //error handling (needs work) ",
                    "    var proxy = store.getProxy();",
                    "    if (!Ext.isEmpty(proxy)) {",
                    "        proxy.on(\"exception\", function( proxy, response, operation, options ){",
                    "            var message = \"\";",
                    "            if (response.status === 0) {message= \"Connexion au serveur interrompue\";}",
                    "            else if (response.status === 500) {message= \"Erreur interne du serveur\";}",
                    "            Ext.Msg.alert(\"Erreur\", message);",
                    "            if (operation.action==\"update\") {",
                    "                Ext.Array.forEach(operation.records, function (record){ record.reject();});",
                    "            }",
                    "            else if (operation.action==\"create\") {",
                    "                store.remove(operation.records);",
                    "            }",
                    "            else if (operation.action==\"destroy\") {",
                    "                Ext.Array.forEach(operation.records, function (record){ store.insert(record.index || 0, record);});",
                    "                store.removed= [];",
                    "            }",
                    "            console.log(store);",
                    "            console.log(response);",
                    "",
                    "        });",
                    "    }",
                    "});"
                ]
            },
            "designerId": "876b20c5-497d-43fe-b4b8-86ad10db83be"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "reloadActiveBrothers",
                "designer|params": [
                    "collectionName",
                    "myId"
                ],
                "implHandler": [
                    "Ext.data.StoreManager.each(function(someStore){",
                    "    if ((someStore.isOptimised)&&(someStore.isUsed)&&(someStore.usedCollection==collectionName)&&(!someStore.isLoading())&&(someStore.storeId!=myId)) {",
                    "        someStore.load();",
                    "    }",
                    "});"
                ]
            },
            "designerId": "ca7a91ea-4680-4c72-9af0-7877d7f2992d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onComponentRender",
                "implHandler": [
                    "if ((component.managesStore)&&(component.store)) {",
                    "    component.getStore().load();",
                    "",
                    "    component.on(\"beforedestroy\", function(thing){thing.getStore().clearFilter(true); thing.getStore().removeAll(); });",
                    "} "
                ],
                "name": "render",
                "scope": "me",
                "designer|targetType": "Ext.Component",
                "designer|controlQuery": "component"
            },
            "designerId": "83f87609-0926-4eba-9e86-1f473d216e50"
        }
    ]
}